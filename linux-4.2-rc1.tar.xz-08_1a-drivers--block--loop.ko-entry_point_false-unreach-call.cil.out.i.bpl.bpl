var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: i32;

var $M.3: [ref]i8;

var $M.4: [ref]i64;

var $M.5: [ref]i8;

var $M.6: [ref]i8;

var $M.7: [ref]i64;

var $M.8: [ref]i8;

var $M.9: [ref]i8;

var $M.10: i32;

var $M.11: ref;

var $M.12: i32;

var $M.13: ref;

var $M.14: i32;

var $M.15: ref;

var $M.16: i32;

var $M.17: ref;

var $M.18: [ref]i32;

var $M.19: [ref]i64;

var $M.20: [ref]i32;

var $M.21: [ref]i32;

var $M.22: [ref]i32;

var $M.23: [ref]i32;

var $M.24: i32;

var $M.25: [ref]ref;

var $M.26: [ref]ref;

var $M.29: [ref]i8;

var $M.30: ref;

var $M.31: ref;

var $M.32: ref;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: i32;

var $M.37: ref;

var $M.38: ref;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.62: [ref]i8;

var $M.63: [ref]i8;

var $M.64: [ref]ref;

var $M.107: [ref]i8;

var $M.113: [ref]i8;

var $M.114: [ref]i8;

var $M.115: [ref]i8;

var $M.116: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 429949);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const __ksymtab_loop_register_transfer: ref;

axiom __ksymtab_loop_register_transfer == $sub.ref(0, 2068);

const {:count 23} __kstrtab_loop_register_transfer: ref;

axiom __kstrtab_loop_register_transfer == $sub.ref(0, 3115);

const loop_attr_partscan: ref;

axiom loop_attr_partscan == $sub.ref(0, 4187);

const loop_attr_autoclear: ref;

axiom loop_attr_autoclear == $sub.ref(0, 5259);

const loop_attr_sizelimit: ref;

axiom loop_attr_sizelimit == $sub.ref(0, 6331);

const loop_attr_offset: ref;

axiom loop_attr_offset == $sub.ref(0, 7403);

const loop_attr_backing_file: ref;

axiom loop_attr_backing_file == $sub.ref(0, 8475);

const {:count 6} loop_attrs: ref;

axiom loop_attrs == $sub.ref(0, 9547);

const loop_attribute_group: ref;

axiom loop_attribute_group == $sub.ref(0, 10603);

const max_part: ref;

axiom max_part == $sub.ref(0, 11631);

const loop_ctl_fops: ref;

axiom loop_ctl_fops == $sub.ref(0, 12879);

const loop_misc: ref;

axiom loop_misc == $sub.ref(0, 13983);

const max_loop: ref;

axiom max_loop == $sub.ref(0, 15011);

const lo_fops: ref;

axiom lo_fops == $sub.ref(0, 16139);

const part_shift: ref;

axiom part_shift == $sub.ref(0, 17167);

const loop_mq_ops: ref;

axiom loop_mq_ops == $sub.ref(0, 18255);

const loop_index_mutex: ref;

axiom loop_index_mutex == $sub.ref(0, 19439);

const {:count 25} __kstrtab_loop_unregister_transfer: ref;

axiom __kstrtab_loop_unregister_transfer == $sub.ref(0, 20488);

const loop_index_idr: ref;

axiom loop_index_idr == $sub.ref(0, 21624);

const xor_funcs: ref;

axiom xor_funcs == $sub.ref(0, 22696);

const none_funcs: ref;

axiom none_funcs == $sub.ref(0, 23768);

const {:count 20} xfer_funcs: ref;

axiom xfer_funcs == $sub.ref(0, 24952);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 25980);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 27008);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 28036);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 29064);

const ldv_work_2_1: ref;

axiom ldv_work_2_1 == $sub.ref(0, 30092);

const loop_ctl_fops_group2: ref;

axiom loop_ctl_fops_group2 == $sub.ref(0, 31124);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 32152);

const ldv_work_2_3: ref;

axiom ldv_work_2_3 == $sub.ref(0, 33180);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 34208);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 35236);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 36264);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 37292);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 38320);

const ldv_work_2_2: ref;

axiom ldv_work_2_2 == $sub.ref(0, 39348);

const ldv_work_struct_2_2: ref;

axiom ldv_work_struct_2_2 == $sub.ref(0, 40380);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 41408);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 42440);

const ldv_work_struct_2_0: ref;

axiom ldv_work_struct_2_0 == $sub.ref(0, 43472);

const ldv_work_struct_2_3: ref;

axiom ldv_work_struct_2_3 == $sub.ref(0, 44504);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 45532);

const loop_ctl_fops_group1: ref;

axiom loop_ctl_fops_group1 == $sub.ref(0, 46564);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 47592);

const ldv_work_2_0: ref;

axiom ldv_work_2_0 == $sub.ref(0, 48620);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 49648);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 50676);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 51704);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 52732);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 53760);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 54788);

const ldv_work_struct_2_1: ref;

axiom ldv_work_struct_2_1 == $sub.ref(0, 55820);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 56852);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 57880);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 58912);

const xor_funcs_group0: ref;

axiom xor_funcs_group0 == $sub.ref(0, 59944);

const lo_fops_group0: ref;

axiom lo_fops_group0 == $sub.ref(0, 60976);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 62008);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 63036);

const ldv_module_refcounter: ref;

axiom ldv_module_refcounter == $sub.ref(0, 64064);

const __ksymtab_loop_unregister_transfer: ref;

axiom __ksymtab_loop_unregister_transfer == $sub.ref(0, 65104);

const {:count 200} .str.8: ref;

axiom .str.8 == $sub.ref(0, 66328);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 24} .str.12: ref;

axiom .str.12 == $sub.ref(0, 67376);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const .str: ref;

axiom .str == $sub.ref(0, 68420);

const {:count 27} .str.13: ref;

axiom .str.13 == $sub.ref(0, 69471);

const {:count 17} .str.14: ref;

axiom .str.14 == $sub.ref(0, 70512);

const {:count 18} .str.20: ref;

axiom .str.20 == $sub.ref(0, 71554);

const {:count 20} .str.6: ref;

axiom .str.6 == $sub.ref(0, 72598);

const {:count 44} .str.7: ref;

axiom .str.7 == $sub.ref(0, 73666);

const {:count 9} .str.1: ref;

axiom .str.1 == $sub.ref(0, 74699);

const {:count 15} .str.2: ref;

axiom .str.2 == $sub.ref(0, 75738);

const {:count 55} .str.3: ref;

axiom .str.3 == $sub.ref(0, 76817);

const {:count 14} .str.4: ref;

axiom .str.4 == $sub.ref(0, 77855);

const {:count 52} .str.5: ref;

axiom .str.5 == $sub.ref(0, 78931);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 33} .str.33: ref;

axiom .str.33 == $sub.ref(0, 79988);

const {:count 51} .str.29: ref;

axiom .str.29 == $sub.ref(0, 81063);

const {:count 23} .str.30: ref;

axiom .str.30 == $sub.ref(0, 82110);

const {:count 24} .str.31: ref;

axiom .str.31 == $sub.ref(0, 83158);

const {:count 9} .str.32: ref;

axiom .str.32 == $sub.ref(0, 84191);

const {:count 13} .str.22: ref;

axiom .str.22 == $sub.ref(0, 85228);

const {:count 18} .str.15: ref;

axiom .str.15 == $sub.ref(0, 86270);

const {:count 18} .str.16: ref;

axiom .str.16 == $sub.ref(0, 87312);

const {:count 23} .str.17: ref;

axiom .str.17 == $sub.ref(0, 88359);

const {:count 7} .str.18: ref;

axiom .str.18 == $sub.ref(0, 89390);

const {:count 5} .str.21: ref;

axiom .str.21 == $sub.ref(0, 90419);

const {:count 13} .str.24: ref;

axiom .str.24 == $sub.ref(0, 91456);

const {:count 7} .str.25: ref;

axiom .str.25 == $sub.ref(0, 92487);

const {:count 6} .str.19: ref;

axiom .str.19 == $sub.ref(0, 93517);

const {:count 10} .str.26: ref;

axiom .str.26 == $sub.ref(0, 94551);

const {:count 10} .str.27: ref;

axiom .str.27 == $sub.ref(0, 95585);

const {:count 2} .str.10: ref;

axiom .str.10 == $sub.ref(0, 96611);

const {:count 2} .str.11: ref;

axiom .str.11 == $sub.ref(0, 97637);

const {:count 4} .str.9: ref;

axiom .str.9 == $sub.ref(0, 98665);

const {:count 9} .str.28: ref;

axiom .str.28 == $sub.ref(0, 99698);

const {:count 22} .str.23: ref;

axiom .str.23 == $sub.ref(0, 100744);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 101776);

const {:count 3} .str.1.80: ref;

axiom .str.1.80 == $sub.ref(0, 102803);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 103841);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 104869);

const loop_register_transfer: ref;

axiom loop_register_transfer == $sub.ref(0, 105901);

procedure loop_register_transfer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation loop_register_transfer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i64;
  var $p11: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 0} {:cexpr "n"} boogie_si_record_i32($i2);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 19);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i2);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref($i4, 8));
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i2);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref($i10, 8));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, $p0);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 106933);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const loop_unregister_transfer: ref;

axiom loop_unregister_transfer == $sub.ref(0, 107965);

procedure loop_unregister_transfer($i0: i32) returns ($r: i32);



const unregister_transfer_cb: ref;

axiom unregister_transfer_cb == $sub.ref(0, 108997);

procedure unregister_transfer_cb($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);



const idr_for_each: ref;

axiom idr_for_each == $sub.ref(0, 110029);

procedure idr_for_each($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation idr_for_each($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 111061);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    return;
}



const loop_release_xfer: ref;

axiom loop_release_xfer == $sub.ref(0, 112093);

procedure loop_release_xfer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, assertsPassed;



implementation loop_release_xfer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(208, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(32, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $0.ref);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(208, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $0.ref);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} ldv_module_put_12($p17);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i18 := $i12;
    goto $bb6;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 4} $i11 := devirtbounce($p10, $p0);
    call {:si_unique_call 5} {:cexpr "err"} boogie_si_record_i32($i11);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb5;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 113125);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_put_12: ref;

axiom ldv_module_put_12 == $sub.ref(0, 114157);

procedure ldv_module_put_12($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_module_put_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} ldv_module_put($p0);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const ldv_module_put: ref;

axiom ldv_module_put == $sub.ref(0, 115189);

procedure ldv_module_put($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 1);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $M.2;
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $M.2 := $i6;
    call {:si_unique_call 9} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 116221);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 10} __VERIFIER_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const transfer_xor: ref;

axiom transfer_xor == $sub.ref(0, 117253);

procedure transfer_xor($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32, $i6: i32, $i7: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3;



implementation transfer_xor($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32, $i6: i32, $i7: i64) returns ($r: i32)
{
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} {:cexpr "transfer_xor:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 12} {:cexpr "transfer_xor:arg:raw_off"} boogie_si_record_i32($i3);
    call {:si_unique_call 13} {:cexpr "transfer_xor:arg:loop_off"} boogie_si_record_i32($i5);
    call {:si_unique_call 14} {:cexpr "transfer_xor:arg:size"} boogie_si_record_i32($i6);
    call {:si_unique_call 15} {:cexpr "transfer_xor:arg:real_block"} boogie_si_record_i64($i7);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p8 := kmap_atomic($p2);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i3);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p11 := kmap_atomic($p4);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i5);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p11, $mul.ref($i12, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, 0);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $p15, $p16 := $p13, $p10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(168, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(200, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    call {:si_unique_call 18} {:cexpr "keysize"} boogie_si_record_i32($i20);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32(0, $i6);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} __kunmap_atomic($p13);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} __kunmap_atomic($p10);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} ___might_sleep(.str.8, 114, 0);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} vslice_dummy_var_113 := _cond_resched();
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i22, $p23, $p24 := 0, $p16, $p15;
    goto $bb7;

  $bb7:
    call $p25, $p26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i22, $p23, $p24 := transfer_xor_loop_$bb7($i6, $p18, $i20, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i22, $p23, $p24);
    goto $bb7_last;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p23, $mul.ref(1, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p24, $mul.ref(1, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p24);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i32($i27);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i22, 511);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i30 := $srem.i32($i29, $i20);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p18, $mul.ref($i31, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i34 := $sext.i8.i32($i33);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i35 := $xor.i32($i28, $i34);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i36);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i22, 1);
    call {:si_unique_call 19} {:cexpr "i"} boogie_si_record_i32($i37);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, $i6);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i22, $p23, $p24 := $i37, $p25, $p26;
    goto $bb9_dummy;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p15, $p16 := $p10, $p13;
    goto $bb3;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_96;
}



const xor_init: ref;

axiom xor_init == $sub.ref(0, 118285);

procedure xor_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation xor_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(48, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 25} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 119317);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 27} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const kmap_atomic: ref;

axiom kmap_atomic == $sub.ref(0, 120349);

procedure kmap_atomic($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation kmap_atomic($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} __preempt_count_add(1);
    call {:si_unique_call 29} devirtbounce.1(0);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} pagefault_disable();
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $p1 := lowmem_page_address($p0);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const __kunmap_atomic: ref;

axiom __kunmap_atomic == $sub.ref(0, 121381);

procedure __kunmap_atomic($p0: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation __kunmap_atomic($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} pagefault_enable();
    call {:si_unique_call 33} devirtbounce.1(0);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} __preempt_count_sub(1);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    return;
}



const ___might_sleep: ref;

axiom ___might_sleep == $sub.ref(0, 122413);

procedure ___might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation ___might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} {:cexpr "___might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 36} {:cexpr "___might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    return;
}



const _cond_resched: ref;

axiom _cond_resched == $sub.ref(0, 123445);

procedure _cond_resched() returns ($r: i32);
  free requires assertsPassed;



implementation _cond_resched() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 1} true;
    call {:si_unique_call 37} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 38} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const pagefault_enable: ref;

axiom pagefault_enable == $sub.ref(0, 124477);

procedure pagefault_enable();
  free requires assertsPassed;
  modifies $M.3;



implementation pagefault_enable()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} devirtbounce.1(0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} pagefault_disabled_dec();
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 125509);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i0);
    call {:si_unique_call 44} devirtbounce.3(0, __preempt_count, $i3, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 43} devirtbounce.2(0, __preempt_count, __preempt_count);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 42} devirtbounce.2(0, __preempt_count, __preempt_count);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pagefault_disabled_dec: ref;

axiom pagefault_disabled_dec == $sub.ref(0, 126541);

procedure pagefault_disabled_dec();
  free requires assertsPassed;
  modifies $M.3;



implementation pagefault_disabled_dec()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var vslice_dummy_var_114: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p0 := get_current();
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(11736, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.3, $p1);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(11736, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p4, $i3);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p5 := get_current();
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 11744)), $mul.ref(11736, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.3, $p6);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 47} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 49} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} vslice_dummy_var_114 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} warn_slowpath_null(.str.12, 15);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 127573);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $p0 := devirtbounce.4(0, current_task);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 128605);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_add: ref;

axiom __preempt_count_add == $sub.ref(0, 129637);

procedure __preempt_count_add($i0: i32);
  free requires assertsPassed;



implementation __preempt_count_add($i0: i32)
{
  var $i1: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} {:cexpr "__preempt_count_add:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    call {:si_unique_call 57} devirtbounce.3(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 56} devirtbounce.2(0, __preempt_count, __preempt_count);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 55} devirtbounce.2(0, __preempt_count, __preempt_count);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pagefault_disable: ref;

axiom pagefault_disable == $sub.ref(0, 130669);

procedure pagefault_disable();
  free requires assertsPassed;
  modifies $M.3;



implementation pagefault_disable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} pagefault_disabled_inc();
    call {:si_unique_call 59} devirtbounce.1(0);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 131701);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const pagefault_disabled_inc: ref;

axiom pagefault_disabled_inc == $sub.ref(0, 132733);

procedure pagefault_disabled_inc();
  free requires assertsPassed;
  modifies $M.3;



implementation pagefault_disabled_inc()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $p0 := get_current();
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(11736, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.3, $p1);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(11736, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p4, $i3);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    return;
}



const loop_queue_rq: ref;

axiom loop_queue_rq == $sub.ref(0, 133765);

procedure loop_queue_rq($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation loop_queue_rq($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i1;
  var $p38: ref;
  var $i37: i8;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i18: i32;
  var vslice_dummy_var_115: i1;
  var vslice_dummy_var_116: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $p4 := blk_mq_rq_to_pdu($p3);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 368)), $mul.ref(48, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 4216)), $mul.ref(2496, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} blk_mq_start_request($p14);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref(0, 872)), $mul.ref(460, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 1);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 1);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p12, $mul.ref(0, 872)), $mul.ref(352, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} vslice_dummy_var_115 := queue_work($p48, $p49);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 368)), $mul.ref(48, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 4216)), $mul.ref(2496, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 872)), $mul.ref(280, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} spin_lock_irq($p33);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p32, $mul.ref(0, 872)), $mul.ref(456, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p32, $mul.ref(0, 872)), $mul.ref(456, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 1);
    assume {:verifier.code 0} true;
    $i37 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p32, $mul.ref(0, 872)), $mul.ref(360, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} list_add_tail($p39, $p40);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p32, $mul.ref(0, 872)), $mul.ref(280, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} spin_unlock_irq($p41);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i37);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i42 == 1;
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p32, $mul.ref(0, 872)), $mul.ref(352, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p32, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vslice_dummy_var_116 := queue_work($p44, $p45);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb9;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 5);
    goto $bb3;
}



const blk_mq_map_queue: ref;

axiom blk_mq_map_queue == $sub.ref(0, 134797);

procedure blk_mq_map_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation blk_mq_map_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} {:cexpr "blk_mq_map_queue:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $p2 := external_alloc();
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const loop_init_request: ref;

axiom loop_init_request == $sub.ref(0, 135829);

procedure loop_init_request($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation loop_init_request($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 72} {:cexpr "loop_init_request:arg:hctx_idx"} boogie_si_record_i32($i2);
    call {:si_unique_call 73} {:cexpr "loop_init_request:arg:request_idx"} boogie_si_record_i32($i3);
    call {:si_unique_call 74} {:cexpr "loop_init_request:arg:numa_node___0"} boogie_si_record_i32($i4);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $p7 := blk_mq_rq_to_pdu($p1);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p1);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} __init_work($p10, 0);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, 137438953408);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p6);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 77} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p14, $p15, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} lockdep_init_map($p17, .str.20, $p5, 0);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} INIT_LIST_HEAD($p19);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, loop_queue_read_work);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const blk_mq_rq_to_pdu: ref;

axiom blk_mq_rq_to_pdu == $sub.ref(0, 136861);

procedure blk_mq_rq_to_pdu($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation blk_mq_rq_to_pdu($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 137893);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 138925);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 139957);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 140989);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    return;
}



const loop_queue_read_work: ref;

axiom loop_queue_read_work == $sub.ref(0, 142021);

procedure loop_queue_read_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.3;



implementation loop_queue_read_work($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} loop_handle_cmd($p1);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    return;
}



const loop_handle_cmd: ref;

axiom loop_handle_cmd == $sub.ref(0, 143053);

procedure loop_handle_cmd($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.3;



implementation loop_handle_cmd($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i20: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 1);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 83} {:cexpr "write"} boogie_si_record_i8($i7);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 368)), $mul.ref(48, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 4216)), $mul.ref(2496, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i7);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i23 := do_req_filebacked($p14, $p22);
    call {:si_unique_call 85} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i20, 0);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} blk_mq_complete_request($p29);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 368)), $mul.ref(260, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $sub.i32(0, 5));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p14, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 1);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 5);
    goto $bb6;
}



const do_req_filebacked: ref;

axiom do_req_filebacked == $sub.ref(0, 144085);

procedure do_req_filebacked($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.3;



implementation do_req_filebacked($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var $i31: i32;
  var $i30: i32;
  var $i23: i32;
  var $i17: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i32;
  var $i40: i32;
  var $i39: i32;
  var $i32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i2 := blk_rq_pos($p1);
    call {:si_unique_call 88} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i3 := $shl.i64($i2, 9);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(8, 1));
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i3, $i5);
    call {:si_unique_call 89} {:cexpr "pos"} boogie_si_record_i64($i6);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(32, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i40 := lo_read_simple($p0, $p1, $i6);
    call {:si_unique_call 101} {:cexpr "ret"} boogie_si_record_i32($i40);
    assume {:verifier.code 0} true;
    $i39 := $i40;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i32 := $i39;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i38 := lo_read_transfer($p0, $p1, $i6);
    call {:si_unique_call 99} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb15;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i13, 8192);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 128);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(32, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i31 := lo_write_simple($p0, $p1, $i6);
    call {:si_unique_call 97} {:cexpr "ret"} boogie_si_record_i32($i31);
    assume {:verifier.code 0} true;
    $i30 := $i31;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i23 := $i30;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i17 := $i23;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i32 := $i17;
    goto $bb12;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i29 := lo_write_transfer($p0, $p1, $i6);
    call {:si_unique_call 95} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb11;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $i22 := lo_discard($p0, $p1, $i6);
    call {:si_unique_call 93} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb8;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i16 := lo_req_flush($p0, $p1);
    call {:si_unique_call 91} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb5;
}



const blk_mq_complete_request: ref;

axiom blk_mq_complete_request == $sub.ref(0, 145117);

procedure blk_mq_complete_request($p0: ref);
  free requires assertsPassed;



implementation blk_mq_complete_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    return;
}



const blk_rq_pos: ref;

axiom blk_rq_pos == $sub.ref(0, 146149);

procedure blk_rq_pos($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation blk_rq_pos($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(96, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const lo_req_flush: ref;

axiom lo_req_flush == $sub.ref(0, 147181);

procedure lo_req_flush($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation lo_req_flush($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i6: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i4 := vfs_fsync($p3, 0);
    call {:si_unique_call 103} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i6);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 105} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i4;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 5);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i4, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;
}



const lo_discard: ref;

axiom lo_discard == $sub.ref(0, 148213);

procedure lo_discard($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation lo_discard($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i32;
  var $i23: i1;
  var $i25: i1;
  var $i26: i1;
  var $i24: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} {:cexpr "lo_discard:arg:pos"} boogie_si_record_i64($i2);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 504)), $mul.ref(40, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 224)), $mul.ref(208, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(200, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i15 := blk_rq_bytes($p1);
    call {:si_unique_call 108} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 504)), $mul.ref(40, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 224)), $mul.ref(208, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i15);
    call {:si_unique_call 109} $i21 := devirtbounce.5($p19, $p4, 3, $i2, $i20);
    call {:si_unique_call 110} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    call {:si_unique_call 111} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i24 := 0;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i24);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 113} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i22;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i14 := $i31;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 5);
    goto $bb15;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i22, $sub.i32(0, 22));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i24 := 0;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb10;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i22, $sub.i32(0, 95));
    assume {:verifier.code 0} true;
    $i24 := $i26;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 95);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;
}



const lo_write_transfer: ref;

axiom lo_write_transfer == $sub.ref(0, 149245);

procedure lo_write_transfer($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.5, $M.6, $M.9, $CurrAddr, $M.3;



implementation lo_write_transfer($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $i47: i64;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i54: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i64;
  var $p86: ref;
  var $i87: i32;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i64;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i1;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i64;
  var $p116: ref;
  var $i117: i32;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i73: i32;
  var $i39: i32;
  var $i55: i32;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $i132: i1;
  var $i28: i32;
  var $i133: i32;
  var $i27: i32;
  var $i134: i32;
  var $i15: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $p6 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $p7 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p3, $i2);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $p8 := alloc_pages(16, 0);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 121} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i134 := 0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} __free_pages($p8, 0);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i15 := $i134;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p21);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i27 := 0;
    assume {:branchcond $i26} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i134 := $i27;
    goto $bb33;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb10;

  $bb10:
    call $p29, $p30, $p31, $p32, $p33, $p34, $p36, $i37, $i38, $p40, $p41, $p42, $i43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $p56, $p57, $p58, $i59, $p60, $p61, $p62, $i63, $i64, $i65, $p66, $p67, $p68, $p69, $i70, $i71, $i72, $p75, $i76, $p77, $p78, $p79, $p80, $p82, $i83, $i84, $p86, $i87, $p89, $i90, $i91, $p92, $p93, $p94, $p95, $p97, $i98, $i99, $p101, $p102, $p103, $i104, $i105, $p106, $p107, $p108, $p109, $p110, $p112, $i113, $i114, $p116, $i117, $p119, $i120, $i121, $p122, $p123, $p124, $i73, $i39, $i55, $p125, $p126, $p127, $p128, $p129, $p130, $i131, $i132, $i28, $i133, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8 := lo_write_transfer_loop_$bb10($p0, $p3, $p4, $p5, $p6, $p7, $p8, $p23, $p29, $p30, $p31, $p32, $p33, $p34, $p36, $i37, $i38, $p40, $p41, $p42, $i43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $p56, $p57, $p58, $i59, $p60, $p61, $p62, $i63, $i64, $i65, $p66, $p67, $p68, $p69, $i70, $i71, $i72, $p75, $i76, $p77, $p78, $p79, $p80, $p82, $i83, $i84, $p86, $i87, $p89, $i90, $i91, $p92, $p93, $p94, $p95, $p97, $i98, $i99, $p101, $p102, $p103, $i104, $i105, $p106, $p107, $p108, $p109, $p110, $p112, $i113, $i114, $p116, $i117, $p119, $i120, $i121, $p122, $p123, $p124, $i73, $i39, $i55, $p125, $p126, $p127, $p128, $p129, $p130, $i131, $i132, $i28, $i133, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8);
    goto $bb10_last;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 136)), $mul.ref(32, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p29);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p32);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 122} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p33, $p34, 24, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i39 := $i28;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i55 := $i39;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p129, $p128);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p23);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p130);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i133 := $i55;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i27 := $i133;
    goto $bb9;

  $bb30:
    assume $i132 == 1;
    assume {:verifier.code 0} true;
    $i28 := $i55;
    goto $bb30_dummy;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call $p40, $p41, $p42, $i43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $p56, $p57, $p58, $i59, $p60, $p61, $p62, $i63, $i64, $i65, $p66, $p67, $p68, $p69, $i70, $i71, $i72, $p75, $i76, $p77, $p78, $p79, $p80, $p82, $i83, $i84, $p86, $i87, $p89, $i90, $i91, $p92, $p93, $p94, $p95, $p97, $i98, $i99, $p101, $p102, $p103, $i104, $i105, $p106, $p107, $p108, $p109, $p110, $p112, $i113, $i114, $p116, $i117, $p119, $i120, $i121, $p122, $p123, $p124, $i73, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8 := lo_write_transfer_loop_$bb15($p0, $p3, $p4, $p5, $p6, $p7, $p8, $p36, $p40, $p41, $p42, $i43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $p56, $p57, $p58, $i59, $p60, $p61, $p62, $i63, $i64, $i65, $p66, $p67, $p68, $p69, $i70, $i71, $i72, $p75, $i76, $p77, $p78, $p79, $p80, $p82, $i83, $i84, $p86, $i87, $p89, $i90, $i91, $p92, $p93, $p94, $p95, $p97, $i98, $i99, $p101, $p102, $p103, $i104, $i105, $p106, $p107, $p108, $p109, $p110, $p112, $i113, $i114, $p116, $i117, $p119, $i120, $i121, $p122, $p123, $p124, $i73, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8);
    goto $bb15_last;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    call {:si_unique_call 123} {:cexpr "_min1"} boogie_si_record_i32($i76);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i84 := $zext.i32.i64($i83);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p80, $mul.ref($i84, 16)), $mul.ref(8, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i91 := $sub.i32($i87, $i90);
    call {:si_unique_call 124} {:cexpr "_min2"} boogie_si_record_i32($i91);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i99 := $zext.i32.i64($i98);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p95, $mul.ref($i99, 16)), $mul.ref(0, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p103, $p102);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i104 := $ult.i32($i76, $i91);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i104 == 1);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i105 := $i91;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p106, $i105);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i114 := $zext.i32.i64($i113);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p110, $mul.ref($i114, 16)), $mul.ref(12, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i121 := $add.i32($i117, $i120);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p122, $i121);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p4);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p7);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.5;
    cmdloc_dummy_var_7 := $M.5;
    call {:si_unique_call 132} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p123, $p124, 16, $zext.i32.i64(8), 0 == 1);
    $M.5 := cmdloc_dummy_var_8;
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.5, $p40);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.5, $p42);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.5, $p44);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.4, $p3);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i47 := $ashr.i64($i46, 9);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i48 := lo_do_transfer($p0, 1, $p8, 0, $p41, $i43, $i45, $i47);
    call {:si_unique_call 126} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 128} {:cexpr "tmp___0"} boogie_si_record_i64($i52);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i54 := $i48;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p56, $p8);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p57, 0);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.5, $p58);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p60, $i59);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i63 := lo_write_bvec($p62, $p5, $p3);
    call {:si_unique_call 130} {:cexpr "ret"} boogie_si_record_i32($i63);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i63, 0);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i65 := $i63;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.5, $p69);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} bio_advance_iter($p67, $p68, $i70);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p36);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i73 := $i63;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i39 := $i73;
    goto $bb14;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb24_dummy;

  $bb21:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i55 := $i65;
    goto $bb19;

  $bb17:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i55 := $i54;
    goto $bb19;

  $bb26:
    assume $i104 == 1;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i105 := $i76;
    goto $bb28;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb3;

  $bb24_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_545;

  $bb30_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_530;
}



const lo_write_simple: ref;

axiom lo_write_simple == $sub.ref(0, 150277);

procedure lo_write_simple($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.6, $M.9, $CurrAddr;



implementation lo_write_simple($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i64;
  var $p58: ref;
  var $i59: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i1;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i64;
  var $p88: ref;
  var $i89: i32;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i45: i32;
  var $i30: i32;
  var $i36: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i64;
  var $i104: i1;
  var $i19: i32;
  var $i105: i32;
  var $i18: i32;
  var $i106: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $p6 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p3, $i2);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $r := $i106;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p12);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i18 := 0;
    assume {:branchcond $i17} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i106 := $i18;
    goto $bb26;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;

  $bb6:
    call $p20, $p21, $p22, $p23, $p24, $p25, $p27, $i28, $i29, $p31, $p32, $i33, $i34, $i35, $p38, $p39, $p40, $p41, $i42, $i43, $i44, $p47, $i48, $p49, $p50, $p51, $p52, $p54, $i55, $i56, $p58, $i59, $p61, $i62, $i63, $p64, $p65, $p66, $p67, $p69, $i70, $i71, $p73, $p74, $p75, $i76, $i77, $p78, $p79, $p80, $p81, $p82, $p84, $i85, $i86, $p88, $i89, $p91, $i92, $i93, $p94, $p95, $p96, $i45, $i30, $i36, $p97, $p98, $p99, $p100, $p101, $p102, $i103, $i104, $i19, $i105, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14, vslice_dummy_var_117 := lo_write_simple_loop_$bb6($p0, $p3, $p4, $p5, $p6, $p14, $p20, $p21, $p22, $p23, $p24, $p25, $p27, $i28, $i29, $p31, $p32, $i33, $i34, $i35, $p38, $p39, $p40, $p41, $i42, $i43, $i44, $p47, $i48, $p49, $p50, $p51, $p52, $p54, $i55, $i56, $p58, $i59, $p61, $i62, $i63, $p64, $p65, $p66, $p67, $p69, $i70, $i71, $p73, $p74, $p75, $i76, $i77, $p78, $p79, $p80, $p81, $p82, $p84, $i85, $i86, $p88, $i89, $p91, $i92, $i93, $p94, $p95, $p96, $i45, $i30, $i36, $p97, $p98, $p99, $p100, $p101, $p102, $i103, $i104, $i19, $i105, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14, vslice_dummy_var_117);
    goto $bb6_last;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 136)), $mul.ref(32, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p20);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p23);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 138} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p24, $p25, 24, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i30 := $i19;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i36 := $i30;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p101, $p100);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p14);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p102);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i105 := $i36;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i18 := $i105;
    goto $bb5;

  $bb23:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i36;
    goto $bb23_dummy;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call $p31, $p32, $i33, $i34, $i35, $p38, $p39, $p40, $p41, $i42, $i43, $i44, $p47, $i48, $p49, $p50, $p51, $p52, $p54, $i55, $i56, $p58, $i59, $p61, $i62, $i63, $p64, $p65, $p66, $p67, $p69, $i70, $i71, $p73, $p74, $p75, $i76, $i77, $p78, $p79, $p80, $p81, $p82, $p84, $i85, $i86, $p88, $i89, $p91, $i92, $i93, $p94, $p95, $p96, $i45, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14, vslice_dummy_var_117 := lo_write_simple_loop_$bb11($p0, $p3, $p4, $p5, $p6, $p27, $p31, $p32, $i33, $i34, $i35, $p38, $p39, $p40, $p41, $i42, $i43, $i44, $p47, $i48, $p49, $p50, $p51, $p52, $p54, $i55, $i56, $p58, $i59, $p61, $i62, $i63, $p64, $p65, $p66, $p67, $p69, $i70, $i71, $p73, $p74, $p75, $i76, $i77, $p78, $p79, $p80, $p81, $p82, $p84, $i85, $i86, $p88, $i89, $p91, $i92, $i93, $p94, $p95, $p96, $i45, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14, vslice_dummy_var_117);
    goto $bb11_last;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    call {:si_unique_call 139} {:cexpr "_min1"} boogie_si_record_i32($i48);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i55);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p52, $mul.ref($i56, 16)), $mul.ref(8, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32($i59, $i62);
    call {:si_unique_call 140} {:cexpr "_min2"} boogie_si_record_i32($i63);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i71 := $zext.i32.i64($i70);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p67, $mul.ref($i71, 16)), $mul.ref(0, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p75, $p74);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i76 := $ult.i32($i48, $i63);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i76 == 1);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i77 := $i63;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p78, $i77);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i86 := $zext.i32.i64($i85);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p82, $mul.ref($i86, 16)), $mul.ref(12, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i89, $i92);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p94, $i93);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p4);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p6);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.6;
    cmdloc_dummy_var_13 := $M.6;
    call {:si_unique_call 146} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p95, $p96, 16, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_14;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i33 := lo_write_bvec($p32, $p4, $p3);
    call {:si_unique_call 142} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i35 := $i33;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} ___might_sleep(.str.8, 238, 0);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} vslice_dummy_var_117 := _cond_resched();
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.6, $p41);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} bio_advance_iter($p39, $p40, $i42);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p27);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i45 := $i33;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i30 := $i45;
    goto $bb10;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb17_dummy;

  $bb13:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb15;

  $bb19:
    assume $i76 == 1;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i77 := $i48;
    goto $bb21;

  $bb17_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_692;

  $bb23_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_677;
}



const lo_read_transfer: ref;

axiom lo_read_transfer == $sub.ref(0, 151309);

procedure lo_read_transfer($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.0, $M.8, $M.6, $M.9, $CurrAddr, $M.3;



implementation lo_read_transfer($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $i51: i64;
  var $i52: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i64;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p75: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i64;
  var $p99: ref;
  var $i100: i32;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i64;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i1;
  var $i118: i32;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i64;
  var $p129: ref;
  var $i130: i32;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i1;
  var $i53: i32;
  var $i16: i32;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $p6 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $p8 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p3, $i2);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $p9 := alloc_pages(16, 0);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 155} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} __free_pages($p9, 0);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i16 := $i53;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p22);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $p28, $p29, $p30, $p31, $p32, $p33, $p35, $i36, $i37, $i38, $p39, $p40, $p41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $i66, $p67, $p68, $i69, $i70, $p71, $p72, $i73, $i74, $p76, $p77, $i78, $i79, $p75, $p80, $p81, $p82, $p83, $i84, $i85, $i86, $p88, $i89, $p90, $p91, $p92, $p93, $p95, $i96, $i97, $p99, $i100, $p102, $i103, $i104, $p105, $p106, $p107, $p108, $p110, $i111, $i112, $p114, $p115, $p116, $i117, $i118, $p119, $p120, $p121, $p122, $p123, $p125, $i126, $i127, $p129, $i130, $p132, $i133, $i134, $p135, $p136, $p137, $p138, $p139, $p140, $p141, $p142, $p143, $i144, $i145, cmdloc_dummy_var_15, cmdloc_dummy_var_16, cmdloc_dummy_var_17, cmdloc_dummy_var_18, cmdloc_dummy_var_19, cmdloc_dummy_var_20 := lo_read_transfer_loop_$bb10($p0, $p1, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p24, $p28, $p29, $p30, $p31, $p32, $p33, $p35, $i36, $i37, $i38, $p39, $p40, $p41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $i66, $p67, $p68, $i69, $i70, $p71, $p72, $i73, $i74, $p76, $p77, $i78, $i79, $p75, $p80, $p81, $p82, $p83, $i84, $i85, $i86, $p88, $i89, $p90, $p91, $p92, $p93, $p95, $i96, $i97, $p99, $i100, $p102, $i103, $i104, $p105, $p106, $p107, $p108, $p110, $i111, $i112, $p114, $p115, $p116, $i117, $i118, $p119, $p120, $p121, $p122, $p123, $p125, $i126, $i127, $p129, $i130, $p132, $i133, $i134, $p135, $p136, $p137, $p138, $p139, $p140, $p141, $p142, $p143, $i144, $i145, cmdloc_dummy_var_15, cmdloc_dummy_var_16, cmdloc_dummy_var_17, cmdloc_dummy_var_18, cmdloc_dummy_var_19, cmdloc_dummy_var_20);
    goto $bb10_last;

  $bb11:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 136)), $mul.ref(32, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p28);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p31);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 156} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p32, $p33, 24, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p142, $p141);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p24);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p143);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i145 := $ne.i64($i144, 0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i145 == 1);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i145 == 1;
    goto $bb45_dummy;

  $bb12:
    assume $i37 == 1;
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call $i38, $p39, $p40, $p41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $i66, $p80, $p81, $p82, $p83, $i84, $i85, $i86, $p88, $i89, $p90, $p91, $p92, $p93, $p95, $i96, $i97, $p99, $i100, $p102, $i103, $i104, $p105, $p106, $p107, $p108, $p110, $i111, $i112, $p114, $p115, $p116, $i117, $i118, $p119, $p120, $p121, $p122, $p123, $p125, $i126, $i127, $p129, $i130, $p132, $i133, $i134, $p135, $p136, $p137, cmdloc_dummy_var_18, cmdloc_dummy_var_19, cmdloc_dummy_var_20 := lo_read_transfer_loop_$bb15($p0, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p35, $i38, $p39, $p40, $p41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $i66, $p80, $p81, $p82, $p83, $i84, $i85, $i86, $p88, $i89, $p90, $p91, $p92, $p93, $p95, $i96, $i97, $p99, $i100, $p102, $i103, $i104, $p105, $p106, $p107, $p108, $p110, $i111, $i112, $p114, $p115, $p116, $i117, $i118, $p119, $p120, $p121, $p122, $p123, $p125, $i126, $i127, $p129, $i130, $p132, $i133, $i134, $p135, $p136, $p137, cmdloc_dummy_var_18, cmdloc_dummy_var_19, cmdloc_dummy_var_20);
    goto $bb15_last;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    call {:si_unique_call 157} {:cexpr "_min1"} boogie_si_record_i32($i89);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i97 := $zext.i32.i64($i96);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p93, $mul.ref($i97, 16)), $mul.ref(8, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i104 := $sub.i32($i100, $i103);
    call {:si_unique_call 158} {:cexpr "_min2"} boogie_si_record_i32($i104);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i112 := $zext.i32.i64($i111);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p108, $mul.ref($i112, 16)), $mul.ref(0, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p116, $p115);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i117 := $ult.i32($i89, $i104);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i117 == 1);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i118 := $i104;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p119, $i118);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i127 := $zext.i32.i64($i126);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p123, $mul.ref($i127, 16)), $mul.ref(12, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i130, $i133);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p135, $i134);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p4);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p8);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.8;
    cmdloc_dummy_var_19 := $M.8;
    call {:si_unique_call 169} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p136, $p137, 16, $zext.i32.i64(8), 0 == 1);
    $M.8 := cmdloc_dummy_var_20;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.7, $p3);
    call {:si_unique_call 159} {:cexpr "offset"} boogie_si_record_i64($i38);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p39, $p9);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p40, 0);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.8, $p41);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p43, $i42);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.6, $p44);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i45);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} iov_iter_bvec($p7, 4, $p5, 1, $i46);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i49 := vfs_iter_read($p48, $p7, $p3);
    call {:si_unique_call 162} {:cexpr "len"} boogie_si_record_i64($i49);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i50 := $slt.i64($i49, 0);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i51 := $i49;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.8, $p54);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.8, $p56);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i64.i32($i49);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i59 := $ashr.i64($i38, 9);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i60 := lo_do_transfer($p0, 0, $p9, 0, $p55, $i57, $i58, $i59);
    call {:si_unique_call 166} {:cexpr "ret"} boogie_si_record_i32($i60);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i62 := $i60;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.8, $p63);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, $i49);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.8, $p83);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} bio_advance_iter($p81, $p82, $i84);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p35);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i86 == 1);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb39_dummy;

  $bb24:
    assume $i66 == 1;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume $i70 == 1;
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume $i74 == 1;
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p75 := $p72;
    goto $bb31;

  $bb31:
    call $p76, $p77, $i78, $i79, $p75 := lo_read_transfer_loop_$bb31($p76, $p77, $i78, $i79, $p75);
    goto $bb31_last;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} zero_fill_bio($p75);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i79 == 1);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb33:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $p75 := $p77;
    goto $bb33_dummy;

  $bb21:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i53 := $i62;
    goto $bb19;

  $bb17:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    call {:si_unique_call 163} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb19;

  $bb41:
    assume $i117 == 1;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i118 := $i89;
    goto $bb43;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;

  $bb33_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_908;

  $bb39_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_825;

  $bb45_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const lo_read_simple: ref;

axiom lo_read_simple == $sub.ref(0, 152341);

procedure lo_read_simple($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.0, $M.6, $CurrAddr;



implementation lo_read_simple($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i64;
  var $i37: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p51: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $p76: ref;
  var $i77: i32;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i64;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i1;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i64;
  var $p106: ref;
  var $i107: i32;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $i38: i32;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var vslice_dummy_var_118: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $p7 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p3, $i2);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p13);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call $p19, $p20, $p21, $p22, $p23, $p24, $p26, $i27, $i28, $p29, $i30, $i31, $p32, $p33, $i34, $i35, $i36, $p39, $i40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $i49, $i50, $p52, $p53, $i54, $i55, $p51, $p57, $p58, $p59, $p60, $i61, $i62, $i63, $p65, $i66, $p67, $p68, $p69, $p70, $p72, $i73, $i74, $p76, $i77, $p79, $i80, $i81, $p82, $p83, $p84, $p85, $p87, $i88, $i89, $p91, $p92, $p93, $i94, $i95, $p96, $p97, $p98, $p99, $p100, $p102, $i103, $i104, $p106, $i107, $p109, $i110, $i111, $p112, $p113, $p114, $p115, $p116, $p117, $p118, $p119, $p120, $i121, $i122, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26, vslice_dummy_var_118 := lo_read_simple_loop_$bb6($p0, $p1, $p3, $p4, $p5, $p6, $p7, $p15, $p19, $p20, $p21, $p22, $p23, $p24, $p26, $i27, $i28, $p29, $i30, $i31, $p32, $p33, $i34, $i35, $i36, $p39, $i40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $i49, $i50, $p52, $p53, $i54, $i55, $p51, $p57, $p58, $p59, $p60, $i61, $i62, $i63, $p65, $i66, $p67, $p68, $p69, $p70, $p72, $i73, $i74, $p76, $i77, $p79, $i80, $i81, $p82, $p83, $p84, $p85, $p87, $i88, $i89, $p91, $p92, $p93, $i94, $i95, $p96, $p97, $p98, $p99, $p100, $p102, $i103, $i104, $p106, $i107, $p109, $i110, $i111, $p112, $p113, $p114, $p115, $p116, $p117, $p118, $p119, $p120, $i121, $i122, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26, vslice_dummy_var_118);
    goto $bb6_last;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 136)), $mul.ref(32, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p19);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p22);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 175} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p23, $p24, 24, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p116, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p119, $p118);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p15);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i122 == 1);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb38_dummy;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call $p29, $i30, $i31, $p32, $p33, $i34, $i35, $i36, $p39, $i40, $i41, $i42, $p57, $p58, $p59, $p60, $i61, $i62, $i63, $p65, $i66, $p67, $p68, $p69, $p70, $p72, $i73, $i74, $p76, $i77, $p79, $i80, $i81, $p82, $p83, $p84, $p85, $p87, $i88, $i89, $p91, $p92, $p93, $i94, $i95, $p96, $p97, $p98, $p99, $p100, $p102, $i103, $i104, $p106, $i107, $p109, $i110, $i111, $p112, $p113, $p114, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26, vslice_dummy_var_118 := lo_read_simple_loop_$bb11($p0, $p3, $p4, $p5, $p6, $p7, $p26, $p29, $i30, $i31, $p32, $p33, $i34, $i35, $i36, $p39, $i40, $i41, $i42, $p57, $p58, $p59, $p60, $i61, $i62, $i63, $p65, $i66, $p67, $p68, $p69, $p70, $p72, $i73, $i74, $p76, $i77, $p79, $i80, $i81, $p82, $p83, $p84, $p85, $p87, $i88, $i89, $p91, $p92, $p93, $i94, $i95, $p96, $p97, $p98, $p99, $p100, $p102, $i103, $i104, $p106, $i107, $p109, $i110, $i111, $p112, $p113, $p114, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26, vslice_dummy_var_118);
    goto $bb11_last;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    call {:si_unique_call 176} {:cexpr "_min1"} boogie_si_record_i32($i66);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i73);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p70, $mul.ref($i74, 16)), $mul.ref(8, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i81 := $sub.i32($i77, $i80);
    call {:si_unique_call 177} {:cexpr "_min2"} boogie_si_record_i32($i81);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i89 := $zext.i32.i64($i88);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p85, $mul.ref($i89, 16)), $mul.ref(0, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p93, $p92);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i94 := $ult.i32($i66, $i81);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i94 == 1);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i95 := $i81;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p96, $i95);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i104 := $zext.i32.i64($i103);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p100, $mul.ref($i104, 16)), $mul.ref(12, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i107, $i110);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p112, $i111);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p4);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p7);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.6;
    cmdloc_dummy_var_25 := $M.6;
    call {:si_unique_call 185} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p113, $p114, 16, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_26;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} iov_iter_bvec($p6, 4, $p4, 1, $i31);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i34 := vfs_iter_read($p33, $p6, $p3);
    call {:si_unique_call 180} {:cexpr "len"} boogie_si_record_i64($i34);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i35 := $slt.i64($i34, 0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.6, $p39);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i40);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, $i34);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} ___might_sleep(.str.8, 302, 0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} vslice_dummy_var_118 := _cond_resched();
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.6, $p60);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} bio_advance_iter($p58, $p59, $i61);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p26);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i63 == 1);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb32_dummy;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb19:
    assume $i46 == 1;
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21:
    assume $i50 == 1;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p51 := $p48;
    goto $bb24;

  $bb24:
    call $p52, $p53, $i54, $i55, $p51 := lo_read_simple_loop_$bb24($p52, $p53, $i54, $i55, $p51);
    goto $bb24_last;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} zero_fill_bio($p51);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i55 == 1);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb26:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $p51 := $p53;
    goto $bb26_dummy;

  $bb13:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb15;

  $bb34:
    assume $i94 == 1;
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i95 := $i66;
    goto $bb36;

  $bb26_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1060;

  $bb32_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_998;

  $bb38_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const iov_iter_bvec: ref;

axiom iov_iter_bvec == $sub.ref(0, 153373);

procedure iov_iter_bvec($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i64);
  free requires assertsPassed;



implementation iov_iter_bvec($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} {:cexpr "iov_iter_bvec:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 187} {:cexpr "iov_iter_bvec:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 188} {:cexpr "iov_iter_bvec:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    return;
}



const vfs_iter_read: ref;

axiom vfs_iter_read == $sub.ref(0, 154405);

procedure vfs_iter_read($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation vfs_iter_read($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 1} true;
    call {:si_unique_call 189} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 190} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const zero_fill_bio: ref;

axiom zero_fill_bio == $sub.ref(0, 155437);

procedure zero_fill_bio($p0: ref);
  free requires assertsPassed;



implementation zero_fill_bio($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    return;
}



const bio_advance_iter: ref;

axiom bio_advance_iter == $sub.ref(0, 156469);

procedure bio_advance_iter($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation bio_advance_iter($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} {:cexpr "bio_advance_iter:arg:bytes"} boogie_si_record_i32($i2);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i2, 9);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i4, $i6);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i7);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i10, 640);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} bvec_iter_advance($p18, $p1, $i2);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i14, $i2);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bvec_iter_advance: ref;

axiom bvec_iter_advance == $sub.ref(0, 157501);

procedure bvec_iter_advance($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation bvec_iter_advance($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i1;
  var $i30: i32;
  var vslice_dummy_var_119: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} {:cexpr "bvec_iter_advance:arg:bytes"} boogie_si_record_i32($i2);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32($i4, $i2);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 194} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i6);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 196} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i6, 0);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} vslice_dummy_var_119 := ldv__builtin_expect($i27, 0);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i2, 0);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i30 := $i2;
    goto $bb13;

  $bb13:
    call $p31, $i32, $p33, $i34, $i35, $p37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $i48, $i49, $p50, $p51, $i52, $i53, $p54, $p55, $i56, $p57, $i58, $i59, $p61, $i62, $i63, $p64, $p65, $i66, $i67, $p68, $i69, $i30 := bvec_iter_advance_loop_$bb13($p0, $p1, $p31, $i32, $p33, $i34, $i35, $p37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $i48, $i49, $p50, $p51, $i52, $i53, $p54, $p55, $i56, $p57, $i58, $i59, $p61, $i62, $i63, $p64, $p65, $i66, $i67, $p68, $i69, $i30);
    goto $bb13_last;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    call {:si_unique_call 204} {:cexpr "_min1___0"} boogie_si_record_i32($i32);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref($i35, 16)), $mul.ref(8, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i38, $i40);
    call {:si_unique_call 205} {:cexpr "_min2___0"} boogie_si_record_i32($i41);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i42 := $ult.i32($i32, $i41);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i43 := $i41;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i44 := $ult.i32($i30, $i43);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i45 := $i43;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i30, $i45);
    call {:si_unique_call 206} {:cexpr "bytes"} boogie_si_record_i32($i46);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32($i48, $i45);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i49);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, $i45);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i58);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref($i59, 16)), $mul.ref(8, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i56, $i62);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i46, 0);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i69 == 1);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb24:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i46;
    goto $bb24_dummy;

  $bb21:
    assume $i63 == 1;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 0);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, 1);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i44 == 1;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i45 := $i30;
    goto $bb20;

  $bb15:
    assume $i42 == 1;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i43 := $i32;
    goto $bb17;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1(1);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i13 := $xor.i1($i12, 1);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 197} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i14);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 199} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i14, 0);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 202} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} warn_slowpath_fmt.ref.i32.ref(.str.6, 211, .str.7);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb24_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1192;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 158533);

procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    return;
}



const alloc_pages: ref;

axiom alloc_pages == $sub.ref(0, 159565);

procedure alloc_pages($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} {:cexpr "alloc_pages:arg:gfp_mask"} boogie_si_record_i32($i0);
    call {:si_unique_call 209} {:cexpr "alloc_pages:arg:order"} boogie_si_record_i32($i1);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $p2 := alloc_pages_current($i0, $i1);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const lo_do_transfer: ref;

axiom lo_do_transfer == $sub.ref(0, 160597);

procedure lo_do_transfer($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32, $i6: i32, $i7: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.0, $CurrAddr, $M.3;



implementation lo_do_transfer($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32, $i6: i32, $i7: i64) returns ($r: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p31: ref;
  var $p35: ref;
  var $p39: ref;
  var $p42: ref;
  var $p45: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i64;
  var $i18: i32;
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p8 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    call {:si_unique_call 212} {:cexpr "lo_do_transfer:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 213} {:cexpr "lo_do_transfer:arg:roffs"} boogie_si_record_i32($i3);
    call {:si_unique_call 214} {:cexpr "lo_do_transfer:arg:loffs"} boogie_si_record_i32($i5);
    call {:si_unique_call 215} {:cexpr "lo_do_transfer:arg:size"} boogie_si_record_i32($i6);
    call {:si_unique_call 216} {:cexpr "lo_do_transfer:arg:rblock"} boogie_si_record_i64($i7);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(32, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 217} $i12 := devirtbounce.6($p11, $p0, $i1, $p2, $i3, $p4, $i5, $i6, $i7);
    call {:si_unique_call 218} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i16 := ldv__builtin_expect($i15, 1);
    call {:si_unique_call 220} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p22, 0);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p24, $sub.i32(0, 559067475));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p26, $sub.i32(0, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p28, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p31, $0.ref);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p35, $0.ref);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p39, $0.ref);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p42, .str.1);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p45, 0);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $M.9 := $store.i64($M.9, $p48, 0);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p8, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p49, 1250);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p8, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p50, 10);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p8, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p51, 0);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p8, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p52, 0);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p8, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $M.9 := $store.i64($M.9, $p53, 0);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i54 := ___ratelimit($p8, .str.2);
    call {:si_unique_call 222} {:cexpr "tmp___0"} boogie_si_record_i32($i54);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb5:
    assume $i55 == 1;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i56 := $shl.i64($i7, 9);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} vslice_dummy_var_120 := printk.ref.i64.i32(.str.3, $i56, $i6);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;
}



const __free_pages: ref;

axiom __free_pages == $sub.ref(0, 161629);

procedure __free_pages($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __free_pages($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} {:cexpr "__free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    return;
}



const ___ratelimit: ref;

axiom ___ratelimit == $sub.ref(0, 162661);

procedure ___ratelimit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ___ratelimit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 1} true;
    call {:si_unique_call 225} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 226} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 163693);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 1} true;
    call {:si_unique_call 227} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 228} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 1} true;
    call {:si_unique_call 229} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 230} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i32($p0: ref, p.1: i64, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i32($p0: ref, p.1: i64, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 1} true;
    call {:si_unique_call 231} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 232} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const alloc_pages_current: ref;

axiom alloc_pages_current == $sub.ref(0, 164725);

procedure alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} {:cexpr "alloc_pages_current:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 234} {:cexpr "alloc_pages_current:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p2 := external_alloc();
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 165757);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 1} true;
    call {:si_unique_call 236} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 237} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const lo_write_bvec: ref;

axiom lo_write_bvec == $sub.ref(0, 166789);

procedure lo_write_bvec($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $CurrAddr;



implementation lo_write_bvec($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p30: ref;
  var $p34: ref;
  var $p38: ref;
  var $p41: ref;
  var $p44: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $i59: i1;
  var $i60: i64;
  var $i61: i32;
  var $i17: i32;
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $p4 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} iov_iter_bvec($p3, 4, $p1, 1, $i7);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} file_start_write($p0);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i8 := vfs_iter_write($p0, $p3, $p2);
    call {:si_unique_call 243} {:cexpr "bw"} boogie_si_record_i64($i8);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} file_end_write($p0);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, $i8);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i15 := ldv__builtin_expect($i14, 1);
    call {:si_unique_call 246} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p21, 0);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p23, $sub.i32(0, 559067475));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p25, $sub.i32(0, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p27, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p30, $0.ref);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p34, $0.ref);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p38, $0.ref);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p41, .str.1);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p44, 0);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $M.9 := $store.i64($M.9, $p47, 0);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p48, 1250);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p49, 10);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p50, 0);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p51, 0);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $M.9 := $store.i64($M.9, $p52, 0);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i53 := ___ratelimit($p4, .str.4);
    call {:si_unique_call 248} {:cexpr "tmp___0"} boogie_si_record_i32($i53);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i59 := $sge.i64($i8, 0);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $i8;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i32($i60);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i17 := $i61;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb8:
    assume $i59 == 1;
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i60 := $sub.i64(0, 5);
    goto $bb10;

  $bb5:
    assume $i54 == 1;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.4, $p2);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.6, $p56);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} vslice_dummy_var_121 := printk.ref.i64.i32(.str.5, $i55, $i57);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;
}



const file_start_write: ref;

axiom file_start_write == $sub.ref(0, 167821);

procedure file_start_write($p0: ref);
  free requires assertsPassed;



implementation file_start_write($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $p1 := file_inode($p0);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1000)), $mul.ref(0, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 61440);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 32768);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $p7 := file_inode($p0);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1000)), $mul.ref(40, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} vslice_dummy_var_122 := __sb_start_write($p9, 1, 1);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfs_iter_write: ref;

axiom vfs_iter_write == $sub.ref(0, 168853);

procedure vfs_iter_write($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation vfs_iter_write($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 1} true;
    call {:si_unique_call 253} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 254} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const file_end_write: ref;

axiom file_end_write == $sub.ref(0, 169885);

procedure file_end_write($p0: ref);
  free requires assertsPassed;



implementation file_end_write($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $p1 := file_inode($p0);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1000)), $mul.ref(0, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 61440);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 32768);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p7 := file_inode($p0);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1000)), $mul.ref(40, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} __sb_end_write($p9, 1);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const file_inode: ref;

axiom file_inode == $sub.ref(0, 170917);

procedure file_inode($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation file_inode($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(32, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __sb_end_write: ref;

axiom __sb_end_write == $sub.ref(0, 171949);

procedure __sb_end_write($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __sb_end_write($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} {:cexpr "__sb_end_write:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    return;
}



const __sb_start_write: ref;

axiom __sb_start_write == $sub.ref(0, 172981);

procedure __sb_start_write($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;



implementation __sb_start_write($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 259} {:cexpr "__sb_start_write:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 260} {:cexpr "__sb_start_write:arg:arg2"} boogie_si_record_i1($i2);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 1} true;
    call {:si_unique_call 261} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 262} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const blk_rq_bytes: ref;

axiom blk_rq_bytes == $sub.ref(0, 174013);

procedure blk_rq_bytes($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_bytes($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(92, 1));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vfs_fsync: ref;

axiom vfs_fsync == $sub.ref(0, 175045);

procedure vfs_fsync($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vfs_fsync($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 263} {:cexpr "vfs_fsync:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 264} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 265} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const blk_mq_start_request: ref;

axiom blk_mq_start_request == $sub.ref(0, 176077);

procedure blk_mq_start_request($p0: ref);
  free requires assertsPassed;



implementation blk_mq_start_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 177109);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} _raw_spin_lock_irq($p2);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 178141);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} __list_add($p0, $p3, $p1);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 179173);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} _raw_spin_unlock_irq($p2);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 180205);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i2 := ldv_queue_work_on_5(8192, $p0, $p1);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 270} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_5: ref;

axiom ldv_queue_work_on_5 == $sub.ref(0, 181237);

procedure ldv_queue_work_on_5($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation ldv_queue_work_on_5($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} {:cexpr "ldv_queue_work_on_5:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 273} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 274} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} activate_work_2($p2, 2);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 182269);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 276} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 1} true;
    call {:si_unique_call 277} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 278} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_work_2: ref;

axiom activate_work_2 == $sub.ref(0, 183301);

procedure activate_work_2($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation activate_work_2($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} {:cexpr "activate_work_2:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i2 := $M.10;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.12;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.14;
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.16;
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $M.16 := $i1;
    call {:si_unique_call 283} {:cexpr "ldv_work_2_3"} boogie_si_record_i32($i1);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $M.14 := $i1;
    call {:si_unique_call 282} {:cexpr "ldv_work_2_2"} boogie_si_record_i32($i1);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $M.13 := $p0;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $M.12 := $i1;
    call {:si_unique_call 281} {:cexpr "ldv_work_2_1"} boogie_si_record_i32($i1);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $M.11 := $p0;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $M.10 := $i1;
    call {:si_unique_call 280} {:cexpr "ldv_work_2_0"} boogie_si_record_i32($i1);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 184333);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 185365);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 186397);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    return;
}



const lo_open: ref;

axiom lo_open == $sub.ref(0, 187429);

procedure lo_open($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation lo_open($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} {:cexpr "lo_open:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} mutex_lock_nested(loop_index_mutex, 0);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 872)), $mul.ref(4, 1));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} atomic_inc($p10);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} mutex_unlock(loop_index_mutex);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 6);
    goto $bb3;
}



const lo_release: ref;

axiom lo_release == $sub.ref(0, 188461);

procedure lo_release($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.1, $M.2, $CurrAddr, assertsPassed, $M.10, $M.12, $M.14, $M.16, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3;



implementation lo_release($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} {:cexpr "lo_release:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 872)), $mul.ref(4, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $i6 := atomic_sub_return(1, $p5);
    call {:si_unique_call 290} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} mutex_lock_nested($p8, 0);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 4);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} vslice_dummy_var_123 := loop_flush($p4);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} mutex_unlock($p16);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i13 := loop_clr_fd($p4);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 293} {:cexpr "err"} boogie_si_record_i32($i13);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const lo_ioctl: ref;

axiom lo_ioctl == $sub.ref(0, 189493);

procedure lo_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.1, $M.2, $M.21, $M.22, $CurrAddr, $M.23, assertsPassed, $M.10, $M.12, $M.14, $M.16, $M.11, $M.13, $M.15, $M.17, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3;



implementation lo_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i32: i1;
  var $i33: i8;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i31: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i45: i1;
  var $i46: i8;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i44: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i57: i1;
  var $i58: i8;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i56: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i21: i32;
  var $p70: ref;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} {:cexpr "lo_ioctl:arg:mode"} boogie_si_record_i32($i1);
    call {:si_unique_call 297} {:cexpr "lo_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    call {:si_unique_call 298} {:cexpr "lo_ioctl:arg:arg"} boogie_si_record_i64($i3);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} mutex_lock_nested($p9, 1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i2, 19460);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i2, 19462);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i2, 19463);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i2, 19463);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p8, $mul.ref(0, 872)), $mul.ref(232, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i69 := $sub.i32(0, 22);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i21 := $i69;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p8, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} mutex_unlock($p70);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i26 := $i21;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb45:
    assume $i65 == 1;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p8, $mul.ref(0, 872)), $mul.ref(232, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    call {:si_unique_call 329} $i68 := devirtbounce.7($p67, $p8, $i2, $i3);
    call {:si_unique_call 330} {:cexpr "tmp___2"} boogie_si_record_i32($i68);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i69 := $i68;
    goto $bb47;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i1, 2);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i54 == 1);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i57 := capable(21);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i8($i57);
    call {:si_unique_call 326} {:cexpr "tmp___1"} boogie_si_record_i8($i58);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i8.i1($i58);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i56 := $i61;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i21 := $i56;
    goto $bb21;

  $bb41:
    assume $i59 == 1;
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i60 := loop_set_capacity($p8, $p0);
    call {:si_unique_call 328} {:cexpr "err"} boogie_si_record_i32($i60);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb43;

  $bb38:
    assume $i54 == 1;
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i55 := loop_set_capacity($p8, $p0);
    call {:si_unique_call 324} {:cexpr "err"} boogie_si_record_i32($i55);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb40;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i3);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i23 := loop_change_fd($p8, $p0, $i22);
    call {:si_unique_call 301} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i21 := $i23;
    goto $bb21;

  $bb4:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i2, 19461);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p51 := $i2p.i64.ref($i3);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i52 := loop_get_status64($p8, $p51);
    call {:si_unique_call 303} {:cexpr "err"} boogie_si_record_i32($i52);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i21 := $i52;
    goto $bb21;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i1, 2);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i41 == 1);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i45 := capable(21);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i8($i45);
    call {:si_unique_call 320} {:cexpr "tmp___0"} boogie_si_record_i8($i46);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i46);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i44 := $i50;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i21 := $i44;
    goto $bb21;

  $bb35:
    assume $i47 == 1;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p48 := $i2p.i64.ref($i3);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i49 := loop_set_status64($p8, $p48);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 322} {:cexpr "err"} boogie_si_record_i32($i49);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb37;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i41 == 1;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i3);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i43 := loop_set_status64($p8, $p42);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 318} {:cexpr "err"} boogie_si_record_i32($i43);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb34;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i2, 19458);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i2, 19459);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i16 == 1);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i3);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $i39 := loop_get_status_old($p8, $p38);
    call {:si_unique_call 305} {:cexpr "err"} boogie_si_record_i32($i39);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i21 := $i39;
    goto $bb21;

  $bb15:
    assume $i16 == 1;
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i1, 2);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i28 == 1);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i32 := capable(21);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i8($i32);
    call {:si_unique_call 314} {:cexpr "tmp"} boogie_si_record_i8($i33);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i33);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i31 := $i37;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i21 := $i31;
    goto $bb21;

  $bb29:
    assume $i34 == 1;
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i3);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i36 := loop_set_status_old($p8, $p35);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 316} {:cexpr "err"} boogie_si_record_i32($i36);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb31;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i28 == 1;
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i3);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i30 := loop_set_status_old($p8, $p29);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 312} {:cexpr "err"} boogie_si_record_i32($i30);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb28;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i2, 19457);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i24 := loop_clr_fd($p8);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 307} {:cexpr "err"} boogie_si_record_i32($i24);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i21 := $i24;
    goto $bb21;

  $bb22:
    assume $i25 == 1;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb24;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i2, 19456);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb19:
    assume $i18 == 1;
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i3);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i20 := loop_set_fd($p8, $i1, $p0, $i19);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 309} {:cexpr "err"} boogie_si_record_i32($i20);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb21;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const lo_compat_ioctl: ref;

axiom lo_compat_ioctl == $sub.ref(0, 190525);

procedure lo_compat_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.1, $M.2, $M.21, $M.22, $CurrAddr, $M.23, assertsPassed, $M.10, $M.12, $M.14, $M.16, $M.11, $M.13, $M.15, $M.17, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3;



implementation lo_compat_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i64;
  var $i19: i64;
  var $i12: i64;
  var $i32: i32;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} {:cexpr "lo_compat_ioctl:arg:mode"} boogie_si_record_i32($i1);
    call {:si_unique_call 332} {:cexpr "lo_compat_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    call {:si_unique_call 333} {:cexpr "lo_compat_ioctl:arg:arg"} boogie_si_record_i64($i3);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i2, 19460);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i2, 19462);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i2, 19463);
    assume {:verifier.code 0} true;
    $i12 := $i3;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i2, 19463);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 515);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i3);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p30 := compat_ptr($i29);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    call {:si_unique_call 337} {:cexpr "arg"} boogie_si_record_i64($i31);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i19 := $i31;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i12 := $i19;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i32 := lo_ioctl($p0, $i1, $i2, $i12);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 335} {:cexpr "err"} boogie_si_record_i32($i32);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i24 := $i32;
    goto $bb26;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb7;

  $bb4:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i2, 19461);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb15;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb13;

  $bb2:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i2, 19458);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i2, 19459);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i16 == 1);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} mutex_lock_nested($p25, 0);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i3);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $i27 := loop_get_status_compat($p8, $p26);
    call {:si_unique_call 344} {:cexpr "err"} boogie_si_record_i32($i27);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p8, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} mutex_unlock($p28);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i24 := $i27;
    goto $bb26;

  $bb18:
    assume $i16 == 1;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} mutex_lock_nested($p20, 0);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i3);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i22 := loop_set_status_compat($p8, $p21);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 340} {:cexpr "err"} boogie_si_record_i32($i22);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} mutex_unlock($p23);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb26;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i2, 19457);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb20:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i2, 19456);
    assume {:verifier.code 0} true;
    $i19 := $i3;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb11;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb24;
}



const loop_set_status_compat: ref;

axiom loop_set_status_compat == $sub.ref(0, 191557);

procedure loop_set_status_compat($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.21, $M.22, $M.1, $M.23, $M.2, assertsPassed, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation loop_set_status_compat($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $p2 := $alloc($mul.ref(232, $zext.i32.i64(1)));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i3 := loop_info64_from_compat($p1, $p2);
    call {:si_unique_call 348} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i6 := loop_set_status($p0, $p2);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 350} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const loop_get_status_compat: ref;

axiom loop_get_status_compat == $sub.ref(0, 192589);

procedure loop_get_status_compat($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation loop_get_status_compat($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $p2 := $alloc($mul.ref(232, $zext.i32.i64(1)));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i8;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $i10 := loop_info64_to_compat($p2, $p1);
    call {:si_unique_call 355} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb9;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i7 := loop_get_status($p0, $p2);
    call {:si_unique_call 353} {:cexpr "err"} boogie_si_record_i32($i7);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const compat_ptr: ref;

axiom compat_ptr == $sub.ref(0, 193621);

procedure compat_ptr($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation compat_ptr($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} {:cexpr "compat_ptr:arg:uptr"} boogie_si_record_i32($i0);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const loop_get_status: ref;

axiom loop_get_status == $sub.ref(0, 194653);

procedure loop_get_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation loop_get_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $p30: ref;
  var $i31: i32;
  var $i29: i32;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i64: i1;
  var $i65: i8;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $i8: i32;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $p2 := $alloc($mul.ref(104, $zext.i32.i64(1)));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(460, 1));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 504)), $mul.ref(16, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i10 := vfs_getattr($p9, $p2);
    call {:si_unique_call 359} {:cexpr "error"} boogie_si_record_i32($i10);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 360} cmdloc_dummy_var_28 := $memset.i8(cmdloc_dummy_var_27, $p12, 0, 232, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.18, $p16);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i18 := huge_encode_dev($i17);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.19, $p20);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, $i21);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(248, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.18, $p30);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i29 := $i31;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i32 := huge_encode_dev($i29);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(16, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, $i32);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(8, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, $i35);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(16, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i38);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(52, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(56, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(40, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 363} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p44, $p46, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(120, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(104, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 364} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p48, $p50, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(208, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(44, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(200, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume $i63 == 1;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i64 := capable(21);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i65 := $zext.i1.i8($i64);
    call {:si_unique_call 366} {:cexpr "tmp"} boogie_si_record_i8($i65);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i8.i1($i65);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i66 == 1;
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(200, 1));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(48, 1));
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(184, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(168, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(200, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 367} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p71, $p73, $i76, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(208, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb13;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.20, $p27);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb10;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i8 := $i10;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 6);
    goto $bb3;
}



const loop_info64_to_compat: ref;

axiom loop_info64_to_compat == $sub.ref(0, 195685);

procedure loop_info64_to_compat($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation loop_info64_to_compat($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i16;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i16;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i32;
  var $p37: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i16;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $i66: i16;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i64;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i64;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i64;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var $i99: i32;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $p2 := $alloc($mul.ref(140, $zext.i32.i64(1)));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 369} cmdloc_dummy_var_39 := $memset.i8(cmdloc_dummy_var_38, $p3, 0, 140, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i16($i8);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(4, 1));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, $i9);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(16, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i16($i16);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(12, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, $i17);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(16, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(44, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(20, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(48, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(24, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(52, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(28, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1)), $mul.ref(0, 8));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(128, 1)), $mul.ref(0, 4));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i35);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1)), $mul.ref(1, 8));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i64.i32($i40);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(128, 1)), $mul.ref(1, 4));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i41);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(20, 1));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 18);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i46 == 1);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(32, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(56, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    cmdloc_dummy_var_44 := $M.0;
    call {:si_unique_call 371} cmdloc_dummy_var_45 := $memcpy.i8(cmdloc_dummy_var_43, cmdloc_dummy_var_44, $p52, $p54, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_45;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(96, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(184, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_46 := $M.0;
    cmdloc_dummy_var_47 := $M.0;
    call {:si_unique_call 372} cmdloc_dummy_var_48 := $memcpy.i8(cmdloc_dummy_var_46, cmdloc_dummy_var_47, $p56, $p58, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_48;
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(4, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i64($i60);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i61, $i63);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i64 == 1);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(12, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i64($i66);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(16, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i67, $i69);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i70 == 1);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i72);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i73, $i75);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i76 == 1);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(16, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i78);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.0, $p80);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i79, $i81);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i82 == 1);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(128, 1)), $mul.ref(0, 4));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i86 := $zext.i32.i64($i85);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1)), $mul.ref(0, 8));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p88);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i86, $i89);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i90 == 1);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(128, 1)), $mul.ref(1, 4));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i94 := $zext.i32.i64($i93);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1)), $mul.ref(1, 8));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.0, $p96);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i94, $i97);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p1);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p2);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $i102 := copy_to_user($p100, $p101, 140);
    call {:si_unique_call 374} {:cexpr "tmp"} boogie_si_record_i64($i102);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i99 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $r := $i99;
    return;

  $bb19:
    assume $i103 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32(0, 14);
    goto $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32(0, 75);
    goto $bb17;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb5;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb5;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb5;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb5;

  $bb1:
    assume $i46 == 1;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(32, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(120, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.0;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 370} cmdloc_dummy_var_42 := $memcpy.i8(cmdloc_dummy_var_40, cmdloc_dummy_var_41, $p48, $p50, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 196717);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 197749);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 377} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 378} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} __might_fault(.str.33, 732);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 381} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 383} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 198781);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 199813);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 200845);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 386} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 1} true;
    call {:si_unique_call 387} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 388} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 201877);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    return;
}



const vfs_getattr: ref;

axiom vfs_getattr == $sub.ref(0, 202909);

procedure vfs_getattr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vfs_getattr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 1} true;
    call {:si_unique_call 389} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 390} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const huge_encode_dev: ref;

axiom huge_encode_dev == $sub.ref(0, 203941);

procedure huge_encode_dev($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation huge_encode_dev($i0: i32) returns ($r: i64)
{
  var $i1: i32;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} {:cexpr "huge_encode_dev:arg:dev"} boogie_si_record_i32($i0);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i1 := new_encode_dev($i0);
    call {:si_unique_call 393} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const capable: ref;

axiom capable == $sub.ref(0, 204973);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 394} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 1} true;
    call {:si_unique_call 395} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 396} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const new_encode_dev: ref;

axiom new_encode_dev == $sub.ref(0, 206005);

procedure new_encode_dev($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation new_encode_dev($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} {:cexpr "new_encode_dev:arg:dev"} boogie_si_record_i32($i0);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i1 := $lshr.i32($i0, 20);
    call {:si_unique_call 398} {:cexpr "major"} boogie_si_record_i32($i1);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i0, 1048575);
    call {:si_unique_call 399} {:cexpr "minor"} boogie_si_record_i32($i2);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 255);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i1, 8);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i3, $i4);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i2, $sub.i32(0, 256));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, 12);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i5, $i7);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const loop_info64_from_compat: ref;

axiom loop_info64_from_compat == $sub.ref(0, 207037);

procedure loop_info64_from_compat($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation loop_info64_from_compat($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $p43: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i7: i32;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p2 := $alloc($mul.ref(140, $zext.i32.i64(1)));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i5 := copy_from_user($p3, $p4, 140);
    call {:si_unique_call 402} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_49 := $M.0;
    call {:si_unique_call 403} cmdloc_dummy_var_50 := $memset.i8(cmdloc_dummy_var_49, $p8, 0, 232, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_50;
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(4, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i64($i13);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i14);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(12, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i64($i21);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(16, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, $i22);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(16, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, $i26);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, 0);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(20, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(44, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(24, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(48, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(28, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(52, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(128, 1)), $mul.ref(0, 4));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i40);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1)), $mul.ref(0, 8));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p43, $i41);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(128, 1)), $mul.ref(1, 4));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i46);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1)), $mul.ref(1, 8));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, $i47);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(20, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 18);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i52 == 1);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(56, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(32, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_54 := $M.0;
    cmdloc_dummy_var_55 := $M.0;
    call {:si_unique_call 405} cmdloc_dummy_var_56 := $memcpy.i8(cmdloc_dummy_var_54, cmdloc_dummy_var_55, $p58, $p60, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_56;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(184, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(96, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.0;
    cmdloc_dummy_var_58 := $M.0;
    call {:si_unique_call 406} cmdloc_dummy_var_59 := $memcpy.i8(cmdloc_dummy_var_57, cmdloc_dummy_var_58, $p62, $p64, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_59;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i52 == 1;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(120, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(32, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.0;
    cmdloc_dummy_var_52 := $M.0;
    call {:si_unique_call 404} cmdloc_dummy_var_53 := $memcpy.i8(cmdloc_dummy_var_51, cmdloc_dummy_var_52, $p54, $p56, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_53;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;
}



const loop_set_status: ref;

axiom loop_set_status == $sub.ref(0, 208069);

procedure loop_set_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.22, $M.1, $CurrAddr, $M.23, $M.2, assertsPassed, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation loop_set_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i8;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i64;
  var $p63: ref;
  var $i64: i64;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $p124: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i32;
  var $p130: ref;
  var $p132: ref;
  var $i133: i64;
  var $i134: i32;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i64;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i28: i32;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i3 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 409} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $p4 := get_current();
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 11744)), $mul.ref(2544, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.3, $p5);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(20, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p7);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_60 := $M.0;
    cmdloc_dummy_var_61 := $M.0;
    call {:si_unique_call 411} cmdloc_dummy_var_62 := $memcpy.i8(cmdloc_dummy_var_60, cmdloc_dummy_var_61, $p8, $p9, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_62;
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(200, 1));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(460, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 1);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(48, 1));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i32($i33, 32);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i35 := loop_release_xfer($p0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 417} {:cexpr "err"} boogie_si_record_i32($i35);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(44, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $p48 := $0.ref;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i49 := loop_init_xfer($p0, $p48, $p1);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 420} {:cexpr "err"} boogie_si_record_i32($i49);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(8, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i52, $i54);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb40;

  $bb40:
    assume !($i55 == 1);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(16, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p58);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i57, $i59);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} loop_config_discard($p0);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(40, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(56, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_63 := $M.0;
    cmdloc_dummy_var_64 := $M.0;
    call {:si_unique_call 424} cmdloc_dummy_var_65 := $memcpy.i8(cmdloc_dummy_var_63, cmdloc_dummy_var_64, $p68, $p70, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_65;
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(104, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(120, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_66 := $M.0;
    cmdloc_dummy_var_67 := $M.0;
    call {:si_unique_call 425} cmdloc_dummy_var_68 := $memcpy.i8(cmdloc_dummy_var_66, cmdloc_dummy_var_67, $p72, $p74, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_68;
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(40, 1)), $mul.ref(63, 1));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, 0);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(104, 1)), $mul.ref(63, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, 0);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p48);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i80 := $eq.i64($i79, 0);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $p81 := $p48;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(32, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p85, $p83);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p81, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(232, 1));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, $p87);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(52, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i93 := $xor.i32($i90, $i92);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, 4);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(52, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 8);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(48, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(200, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p124, $i123);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1)), $mul.ref(0, 8));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i127 := $load.i64($M.0, $p126);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i64.i32($i127);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(216, 1)), $mul.ref(0, 4));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, $i128);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1)), $mul.ref(1, 8));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i133 := $load.i64($M.0, $p132);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i64.i32($i133);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(216, 1)), $mul.ref(1, 4));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, $i134);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(48, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb59:
    assume $i139 == 1;
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(168, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(184, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(48, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i146 := $zext.i32.i64($i145);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_69 := $M.0;
    cmdloc_dummy_var_70 := $M.0;
    call {:si_unique_call 427} cmdloc_dummy_var_71 := $memcpy.i8(cmdloc_dummy_var_69, cmdloc_dummy_var_70, $p141, $p143, $i146, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_71;
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(224, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p2);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_72 := $M.0;
    cmdloc_dummy_var_73 := $M.0;
    call {:si_unique_call 428} cmdloc_dummy_var_74 := $memcpy.i8(cmdloc_dummy_var_72, cmdloc_dummy_var_73, $p148, $p149, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_74;
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb53:
    assume $i103 == 1;
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 8);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 0);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb55;

  $bb56:
    assume $i107 == 1;
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i110 := $or.i32($i109, 8);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i110);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(864, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 1752)), $mul.ref(1688, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, $sub.i32(0, 513));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(864, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 1752)), $mul.ref(1688, 1));
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, $i116);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(248, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} loop_reread_partitions($p0, $p121);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb50:
    assume $i95 == 1;
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i98 := $xor.i32($i97, 4);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i98);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i80 == 1;
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p81 := none_funcs;
    goto $bb49;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p63);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i65 := figure_loop_size($p0, $i62, $i64);
    call {:si_unique_call 422} {:cexpr "tmp___5"} boogie_si_record_i32($i65);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb43:
    assume $i66 == 1;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 27);
    goto $bb13;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb39;

  $bb35:
    assume $i50 == 1;
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i28 := $i49;
    goto $bb13;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(44, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    call {:si_unique_call 418} {:cexpr "type"} boogie_si_record_i32($i41);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i42 := $ugt.i32($i41, 19);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i41);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref($i43, 8));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p48 := $p45;
    goto $bb34;

  $bb31:
    assume $i47 == 1;
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb13;

  $bb28:
    assume $i42 == 1;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb13;

  $bb23:
    assume $i36 == 1;
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i28 := $i35;
    goto $bb13;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb13;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 6);
    goto $bb13;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(224, 1)), $mul.ref(0, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i18 := uid_eq($i15, $i17);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 413} {:cexpr "tmp___1"} boogie_si_record_i8($i19);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i23 := capable(21);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 415} {:cexpr "tmp___3"} boogie_si_record_i8($i24);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 1);
    goto $bb13;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb10;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb5;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 209101);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 1} true;
    call {:si_unique_call 429} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 430} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const uid_eq: ref;

axiom uid_eq == $sub.ref(0, 210133);

procedure uid_eq($i0: i32, $i1: i32) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.21, $M.22, $M.23, $CurrAddr;



implementation uid_eq($i0: i32, $i1: i32) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.21 := $store.i32($M.21, $p4, $i0);
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p5, $i1);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.21, $p6);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i8 := __kuid_val($i7);
    call {:si_unique_call 434} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.22, $p9);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i11 := __kuid_val($i10);
    call {:si_unique_call 436} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, $i11);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const loop_init_xfer: ref;

axiom loop_init_xfer == $sub.ref(0, 211165);

procedure loop_init_xfer($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, assertsPassed, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation loop_init_xfer($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i12 := $i23;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i7 := ldv_try_module_get_13($p6);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 438} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(208, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i23 := $i20;
    goto $bb16;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} ldv_module_put_14($p6);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 439} $i19 := devirtbounce.8($p18, $p0, $p2);
    call {:si_unique_call 440} {:cexpr "err"} boogie_si_record_i32($i19);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb12;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb8;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;
}



const figure_loop_size: ref;

axiom figure_loop_size == $sub.ref(0, 212197);

procedure figure_loop_size($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation figure_loop_size($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p32: ref;
  var $i13: i32;
  var vslice_dummy_var_124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} {:cexpr "figure_loop_size:arg:offset"} boogie_si_record_i64($i1);
    call {:si_unique_call 443} {:cexpr "figure_loop_size:arg:sizelimit"} boogie_si_record_i64($i2);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i5 := get_size($i1, $i2, $p4);
    call {:si_unique_call 445} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(248, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i5, $i5);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 447} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(8, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, $i1);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(16, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, $i2);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(864, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} set_capacity($p23, $i5);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $i26 := get_capacity($p25);
    call {:si_unique_call 450} {:cexpr "tmp___1"} boogie_si_record_i64($i26);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i27 := $shl.i64($i26, 9);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} bd_set_size($p7, $i27);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p7, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p29, $mul.ref(0, 1752)), $mul.ref(72, 1)), $mul.ref(88, 1)), $mul.ref(16, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} vslice_dummy_var_124 := kobject_uevent($p32, 2);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(16, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p21, $i2);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(8, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, $i1);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 27);
    goto $bb3;
}



const loop_config_discard: ref;

axiom loop_config_discard == $sub.ref(0, 213229);

procedure loop_config_discard($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation loop_config_discard($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(624, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(40, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 224)), $mul.ref(208, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i14 == 1);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(200, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 1000)), $mul.ref(40, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 2048)), $mul.ref(24, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 4216)), $mul.ref(3488, 1)), $mul.ref(56, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i30);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 4216)), $mul.ref(3488, 1)), $mul.ref(60, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 0);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 4216)), $mul.ref(3488, 1)), $mul.ref(48, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 8388607);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 4216)), $mul.ref(3488, 1)), $mul.ref(73, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 1);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} queue_flag_set_unlocked(14, $p8);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 4216)), $mul.ref(3488, 1)), $mul.ref(56, 1));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 4216)), $mul.ref(3488, 1)), $mul.ref(60, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 4216)), $mul.ref(3488, 1)), $mul.ref(48, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 4216)), $mul.ref(3488, 1)), $mul.ref(73, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 0);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} queue_flag_clear_unlocked(14, $p8);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;
}



const loop_reread_partitions: ref;

axiom loop_reread_partitions == $sub.ref(0, 214261);

procedure loop_reread_partitions($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation loop_reread_partitions($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i7: i32;
  var $i6: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(4, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i3 := atomic_read($p2);
    call {:si_unique_call 456} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i7 := blkdev_reread_part($p1);
    call {:si_unique_call 460} {:cexpr "rc"} boogie_si_record_i32($i7);
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i6, 0);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(40, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} vslice_dummy_var_125 := printk.ref.ref.i32.ref.i32(.str.29, .str.30, $i10, $p12, $i6);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $i5 := __blkdev_reread_part($p1);
    call {:si_unique_call 458} {:cexpr "rc"} boogie_si_record_i32($i5);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 215293);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __blkdev_reread_part: ref;

axiom __blkdev_reread_part == $sub.ref(0, 216325);

procedure __blkdev_reread_part($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __blkdev_reread_part($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 1} true;
    call {:si_unique_call 462} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 463} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const blkdev_reread_part: ref;

axiom blkdev_reread_part == $sub.ref(0, 217357);

procedure blkdev_reread_part($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blkdev_reread_part($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 1} true;
    call {:si_unique_call 464} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 465} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const queue_flag_clear_unlocked: ref;

axiom queue_flag_clear_unlocked == $sub.ref(0, 218389);

procedure queue_flag_clear_unlocked($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation queue_flag_clear_unlocked($i0: i32, $p1: ref)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} {:cexpr "queue_flag_clear_unlocked:arg:flag"} boogie_si_record_i32($i0);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i0);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4216)), $mul.ref(2504, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} __clear_bit($i2, $p3);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    return;
}



const queue_flag_set_unlocked: ref;

axiom queue_flag_set_unlocked == $sub.ref(0, 219421);

procedure queue_flag_set_unlocked($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation queue_flag_set_unlocked($i0: i32, $p1: ref)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} {:cexpr "queue_flag_set_unlocked:arg:flag"} boogie_si_record_i32($i0);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i0);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4216)), $mul.ref(2504, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} __set_bit($i2, $p3);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    return;
}



const __set_bit: ref;

axiom __set_bit == $sub.ref(0, 220453);

procedure __set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} {:cexpr "__set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 471} devirtbounce.9(0, $p1, $i0, $p1);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    return;
}



const __clear_bit: ref;

axiom __clear_bit == $sub.ref(0, 221485);

procedure __clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} {:cexpr "__clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 473} devirtbounce.9(0, $p1, $i0, $p1);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    return;
}



const get_size: ref;

axiom get_size == $sub.ref(0, 222517);

procedure get_size($i0: i64, $i1: i64, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation get_size($i0: i64, $i1: i64, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} {:cexpr "get_size:arg:offset"} boogie_si_record_i64($i0);
    call {:si_unique_call 475} {:cexpr "get_size:arg:sizelimit"} boogie_si_record_i64($i1);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i7 := i_size_read($p6);
    call {:si_unique_call 477} {:cexpr "loopsize"} boogie_si_record_i64($i7);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i64($i0, 0);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i11 := $slt.i64($i10, 0);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i64($i1, 0);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $i10;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i16 := $ashr.i64($i15, 9);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i12 := $i16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i14 := $slt.i64($i1, $i10);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb11:
    assume $i14 == 1;
    call {:si_unique_call 479} {:cexpr "get_size:arg:loopsize"} boogie_si_record_i64($i1);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i15 := $i1;
    goto $bb13;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64($i7, $i0);
    call {:si_unique_call 478} {:cexpr "loopsize"} boogie_si_record_i64($i9);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const set_capacity: ref;

axiom set_capacity == $sub.ref(0, 223549);

procedure set_capacity($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation set_capacity($p0: ref, $i1: i64)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} {:cexpr "set_capacity:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    return;
}



const get_capacity: ref;

axiom get_capacity == $sub.ref(0, 224581);

procedure get_capacity($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation get_capacity($p0: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const bd_set_size: ref;

axiom bd_set_size == $sub.ref(0, 225613);

procedure bd_set_size($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation bd_set_size($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} {:cexpr "bd_set_size:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    return;
}



const kobject_uevent: ref;

axiom kobject_uevent == $sub.ref(0, 226645);

procedure kobject_uevent($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation kobject_uevent($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 482} {:cexpr "kobject_uevent:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 1} true;
    call {:si_unique_call 483} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 484} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const i_size_read: ref;

axiom i_size_read == $sub.ref(0, 227677);

procedure i_size_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation i_size_read($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(80, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_try_module_get_13: ref;

axiom ldv_try_module_get_13 == $sub.ref(0, 228709);

procedure ldv_try_module_get_13($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_try_module_get_13($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 486} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_14: ref;

axiom ldv_module_put_14 == $sub.ref(0, 229741);

procedure ldv_module_put_14($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_module_put_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} ldv_module_put($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const ldv_try_module_get: ref;

axiom ldv_try_module_get == $sub.ref(0, 230773);

procedure ldv_try_module_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_try_module_get($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i3 := ldv_undef_int();
    call {:si_unique_call 489} {:cexpr "module_get_succeeded"} boogie_si_record_i32($i3);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i5 := $M.2;
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $M.2 := $i6;
    call {:si_unique_call 490} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb5;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 231805);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 1} true;
    call {:si_unique_call 491} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 492} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 493} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __kuid_val: ref;

axiom __kuid_val == $sub.ref(0, 232837);

procedure __kuid_val($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $CurrAddr;



implementation __kuid_val($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p2, $i0);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.23, $p3);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 233869);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 497} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 498} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} __might_fault(.str.33, 697);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 501} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 503} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 234901);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 505} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 1} true;
    call {:si_unique_call 506} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 507} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 235933);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    return;
}



const loop_set_fd: ref;

axiom loop_set_fd == $sub.ref(0, 236965);

procedure loop_set_fd($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr, assertsPassed;



implementation loop_set_fd($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p15: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $i74: i16;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i64;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $p121: ref;
  var $p122: ref;
  var $p125: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i132: i32;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i12: i32;
  var $i8: i32;
  var $i140: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 509} {:cexpr "loop_set_fd:arg:mode"} boogie_si_record_i32($i1);
    call {:si_unique_call 510} {:cexpr "loop_set_fd:arg:arg"} boogie_si_record_i32($i3);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} ldv___module_get_10(__this_module);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p5 := fget($i3);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(460, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i13 := is_loop_device($p5);
    call {:si_unique_call 516} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 1000)), $mul.ref(0, 1));
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.0, $p49);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 61440);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 32768);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(132, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 2);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i62 == 1);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i1, 2);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 0);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i64 == 1);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(40, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 224)), $mul.ref(40, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i72 := 0;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p48, $mul.ref(0, 1000)), $mul.ref(0, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i74 := $load.i16($M.0, $p73);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, 61440);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 24576);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i77 == 1);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i83 := 4096;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i84 := get_loop_size($p0, $p5);
    call {:si_unique_call 521} {:cexpr "size"} boogie_si_record_i64($i84);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $p87 := __alloc_workqueue_key.ref.i32.i32.ref.ref.i32(.str.32, 26, 16, $p4, .str.31, $i86);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(352, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, $p87);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(352, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i92 := $eq.i64($i91, 0);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i72, 1);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} set_device_ro($p2, $i93);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(256, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i83);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(248, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p95, $p2);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i72);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p97, $p5);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(32, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p99, $0.ref);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(232, 1));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, $0.ref);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(16, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p101, 0);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i102 := mapping_gfp_mask($p46);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(272, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, $i102);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(272, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, $sub.i32(0, 193));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} mapping_set_gfp_mask($p46, $i106);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i72, 1);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(864, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} set_capacity($p118, $i84);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i119 := $shl.i64($i84, 9);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} bd_set_size($p2, $i119);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} vslice_dummy_var_126 := loop_sysfs_init($p0);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p2, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($add.ref($p122, $mul.ref(0, 1752)), $mul.ref(72, 1)), $mul.ref(88, 1)), $mul.ref(16, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} vslice_dummy_var_127 := kobject_uevent($p125, 2);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} vslice_dummy_var_128 := set_blocksize($p2, $i83);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(460, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, 1);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i129 := $M.24;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, 8);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} vslice_dummy_var_129 := bdgrab($p2);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i140 := 0;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $r := $i140;
    return;

  $bb52:
    assume $i138 == 1;
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} loop_reread_partitions($p0, $p2);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i130 == 1;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i133 := $or.i32($i132, 8);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p134, $i133);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb43:
    assume $i108 == 1;
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(40, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 224)), $mul.ref(120, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb45;

  $bb46:
    assume $i114 == 1;
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(624, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} blk_queue_flush($p116, 8192);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb40:
    assume $i92 == 1;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} fput($p5);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i8 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} ldv_module_put_11(__this_module);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i140 := $i8;
    goto $bb55;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i77 == 1;
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p48, $mul.ref(0, 1000)), $mul.ref(968, 1));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 480)), $mul.ref(248, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i83 := $i82;
    goto $bb39;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i71 := $or.i32(0, 1);
    call {:si_unique_call 519} {:cexpr "lo_flags"} boogie_si_record_i32($i71);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i72 := $i71;
    goto $bb36;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb30;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p48, $mul.ref(0, 1000)), $mul.ref(0, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p54);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 61440);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 24576);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb25;

  $bb26:
    assume $i58 == 1;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb7;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p15 := $p5;
    goto $bb12;

  $bb12:
    call $p16, $p17, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $i25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $i43, $i44, $p15 := loop_set_fd_loop_$bb12($p2, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $i25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $i43, $i44, $p15);
    goto $bb12_last;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1000)), $mul.ref(968, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p2);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i23, $i24);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p15, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 1000)), $mul.ref(968, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 872)), $mul.ref(460, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p37, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i43 := is_loop_device($p42);
    call {:si_unique_call 518} {:cexpr "tmp"} boogie_si_record_i32($i43);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i44 == 1);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb20:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p42;
    goto $bb20_dummy;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb7;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb7;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 9);
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2633;
}



const loop_change_fd: ref;

axiom loop_change_fd == $sub.ref(0, 237997);

procedure loop_change_fd($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.0, $CurrAddr;



implementation loop_change_fd($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i30: i32;
  var $i6: i32;
  var $i40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} {:cexpr "loop_change_fd:arg:arg"} boogie_si_record_i32($i2);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(460, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $p11 := fget($i2);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref(0, 1000)), $mul.ref(0, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 61440);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 32768);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $i31 := get_loop_size($p0, $p11);
    call {:si_unique_call 538} {:cexpr "tmp"} boogie_si_record_i64($i31);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i32 := get_loop_size($p0, $p19);
    call {:si_unique_call 540} {:cexpr "tmp___0"} boogie_si_record_i64($i32);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i31, $i32);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i34 := loop_switch($p0, $p11);
    call {:si_unique_call 542} {:cexpr "error"} boogie_si_record_i32($i34);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} fput($p19);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 8);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb24:
    assume $i39 == 1;
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} loop_reread_partitions($p0, $p1);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i35 == 1;
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i30 := $i34;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} fput($p11);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i6 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i40 := $i6;
    goto $bb27;

  $bb18:
    assume $i33 == 1;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb16;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p17, $mul.ref(0, 1000)), $mul.ref(0, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 61440);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 24576);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb13;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb16;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 9);
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 6);
    goto $bb3;
}



const loop_clr_fd: ref;

axiom loop_clr_fd == $sub.ref(0, 239029);

procedure loop_clr_fd($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, assertsPassed, $M.10, $M.12, $M.14, $M.16, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3;



implementation loop_clr_fd($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i10: i32;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(272, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 545} {:cexpr "gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(248, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(460, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 1);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(4, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i12 := atomic_read($p11);
    call {:si_unique_call 547} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 1);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p2);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(624, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} blk_mq_freeze_queue($p22);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(280, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} spin_lock_irq($p23);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(460, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 2);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $0.ref);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(280, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} spin_unlock_irq($p26);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_130 := loop_release_xfer($p0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(32, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(232, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $0.ref);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(248, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $0.ref);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(208, 1));
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $0.ref);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(8, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, 0);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(16, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p34, 0);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(200, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 0);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(168, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_75 := $M.0;
    call {:si_unique_call 553} cmdloc_dummy_var_76 := $memset.i8(cmdloc_dummy_var_75, $p37, 0, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_76;
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(104, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_77 := $M.0;
    call {:si_unique_call 554} cmdloc_dummy_var_78 := $memset.i8(cmdloc_dummy_var_77, $p39, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_78;
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(40, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_79 := $M.0;
    call {:si_unique_call 555} cmdloc_dummy_var_80 := $memset.i8(cmdloc_dummy_var_79, $p41, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_80;
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p6);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(864, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} set_capacity($p45, 0);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} loop_sysfs_exit($p0);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p6);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} mapping_set_gfp_mask($p55, $i4);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(460, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 0);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} ldv_module_put_15(__this_module);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(624, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} blk_mq_unfreeze_queue($p58);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 8);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 0);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i66 := $M.24;
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(352, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} ldv_destroy_workqueue_16($p77);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(352, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $0.ref);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} mutex_unlock($p79);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} fput($p2);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb23:
    assume $i67 == 1;
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(864, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 1752)), $mul.ref(1688, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i71, 512);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(864, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 1752)), $mul.ref(1688, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i72);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i62 == 1;
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p6);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb19;

  $bb20:
    assume $i64 == 1;
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} loop_reread_partitions($p0, $p6);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i47 == 1;
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} bd_set_size($p6, 0);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p49, $mul.ref(0, 1752)), $mul.ref(72, 1)), $mul.ref(88, 1)), $mul.ref(16, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} vslice_dummy_var_131 := kobject_uevent($p52, 2);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} bdput($p6);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} invalidate_bdev($p6);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 4);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} mutex_unlock($p18);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 6);
    goto $bb3;
}



const loop_set_status_old: ref;

axiom loop_set_status_old == $sub.ref(0, 240061);

procedure loop_set_status_old($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.22, $M.1, $CurrAddr, $M.23, $M.2, assertsPassed, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation loop_set_status_old($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $p2 := $alloc($mul.ref(168, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $p3 := $alloc($mul.ref(232, $zext.i32.i64(1)));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i6 := copy_from_user($p4, $p5, 168);
    call {:si_unique_call 572} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} loop_info64_from_old($p2, $p3);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i9 := loop_set_status($p0, $p3);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 575} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;
}



const loop_get_status_old: ref;

axiom loop_get_status_old == $sub.ref(0, 241093);

procedure loop_get_status_old($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation loop_get_status_old($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $p2 := $alloc($mul.ref(168, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $p3 := $alloc($mul.ref(232, $zext.i32.i64(1)));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i9 := $i6;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i12;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $i16 := copy_to_user($p14, $p15, 168);
    call {:si_unique_call 583} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i12;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb15;

  $bb12:
    assume $i17 == 1;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 14);
    goto $bb14;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i11 := loop_info64_to_old($p3, $p2);
    call {:si_unique_call 581} {:cexpr "err"} boogie_si_record_i32($i11);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb9;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i8 := loop_get_status($p0, $p3);
    call {:si_unique_call 579} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const loop_set_status64: ref;

axiom loop_set_status64 == $sub.ref(0, 242125);

procedure loop_set_status64($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.22, $M.1, $CurrAddr, $M.23, $M.2, assertsPassed, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation loop_set_status64($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $p2 := $alloc($mul.ref(232, $zext.i32.i64(1)));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i5 := copy_from_user($p3, $p4, 232);
    call {:si_unique_call 586} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i8 := loop_set_status($p0, $p2);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 588} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;
}



const loop_get_status64: ref;

axiom loop_get_status64 == $sub.ref(0, 243157);

procedure loop_get_status64($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation loop_get_status64($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $p2 := $alloc($mul.ref(232, $zext.i32.i64(1)));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i8;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $i12 := copy_to_user($p10, $p11, 232);
    call {:si_unique_call 593} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i8;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb12;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb11;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i7 := loop_get_status($p0, $p2);
    call {:si_unique_call 591} {:cexpr "err"} boogie_si_record_i32($i7);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const loop_set_capacity: ref;

axiom loop_set_capacity == $sub.ref(0, 244189);

procedure loop_set_capacity($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation loop_set_capacity($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(460, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 1);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 595} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(8, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(16, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i14 := figure_loop_size($p0, $i11, $i13);
    call {:si_unique_call 597} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 6);
    goto $bb3;
}



const loop_info64_to_old: ref;

axiom loop_info64_to_old == $sub.ref(0, 245221);

procedure loop_info64_to_old($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation loop_info64_to_old($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p29: ref;
  var $i30: i64;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $i74: i32;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;
  var cmdloc_dummy_var_91: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_81 := $M.0;
    call {:si_unique_call 598} cmdloc_dummy_var_82 := $memset.i8(cmdloc_dummy_var_81, $p2, 0, 168, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_82;
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(8, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i7);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i10);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(16, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i13);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(44, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(48, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(52, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(44, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1)), $mul.ref(0, 8));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(0, 8));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, $i30);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1)), $mul.ref(1, 8));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(1, 8));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p37, $i35);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 18);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i40 == 1);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(48, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(56, 1));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_86 := $M.0;
    cmdloc_dummy_var_87 := $M.0;
    call {:si_unique_call 600} cmdloc_dummy_var_88 := $memcpy.i8(cmdloc_dummy_var_86, cmdloc_dummy_var_87, $p46, $p48, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_88;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(112, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(184, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_89 := $M.0;
    cmdloc_dummy_var_90 := $M.0;
    call {:si_unique_call 601} cmdloc_dummy_var_91 := $memcpy.i8(cmdloc_dummy_var_89, cmdloc_dummy_var_90, $p50, $p52, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_91;
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(8, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i54, $i56);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i57 == 1);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p58);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(16, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.0, $p60);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i59, $i61);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i62 == 1);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p63);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.0, $p65);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i64, $i66);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i67 == 1);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i70, $i72);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i74 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $r := $i74;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32(0, 75);
    goto $bb13;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb5;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb5;

  $bb1:
    assume $i40 == 1;
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(48, 1));
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(120, 1));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_83 := $M.0;
    cmdloc_dummy_var_84 := $M.0;
    call {:si_unique_call 599} cmdloc_dummy_var_85 := $memcpy.i8(cmdloc_dummy_var_83, cmdloc_dummy_var_84, $p42, $p44, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_85;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const loop_info64_from_old: ref;

axiom loop_info64_from_old == $sub.ref(0, 246253);

procedure loop_info64_from_old($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation loop_info64_from_old($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $p35: ref;
  var $i36: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;
  var cmdloc_dummy_var_94: [ref]i8;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_92 := $M.0;
    call {:si_unique_call 602} cmdloc_dummy_var_93 := $memset.i8(cmdloc_dummy_var_92, $p2, 0, 232, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_93;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(8, 1));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i7);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i10);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(16, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i13);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, $i17);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, 0);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(44, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(40, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(48, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(44, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(52, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(0, 8));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1)), $mul.ref(0, 8));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, $i31);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(144, 1)), $mul.ref(1, 8));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1)), $mul.ref(1, 8));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i36);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(36, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 18);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i41 == 1);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(56, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(48, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_97 := $M.0;
    cmdloc_dummy_var_98 := $M.0;
    call {:si_unique_call 604} cmdloc_dummy_var_99 := $memcpy.i8(cmdloc_dummy_var_97, cmdloc_dummy_var_98, $p47, $p49, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_99;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(184, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(112, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_100 := $M.0;
    cmdloc_dummy_var_101 := $M.0;
    call {:si_unique_call 605} cmdloc_dummy_var_102 := $memcpy.i8(cmdloc_dummy_var_100, cmdloc_dummy_var_101, $p51, $p53, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_102;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i41 == 1;
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(120, 1));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(48, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_94 := $M.0;
    cmdloc_dummy_var_95 := $M.0;
    call {:si_unique_call 603} cmdloc_dummy_var_96 := $memcpy.i8(cmdloc_dummy_var_94, cmdloc_dummy_var_95, $p43, $p45, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_96;
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const blk_mq_freeze_queue: ref;

axiom blk_mq_freeze_queue == $sub.ref(0, 247285);

procedure blk_mq_freeze_queue($p0: ref);
  free requires assertsPassed;



implementation blk_mq_freeze_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    return;
}



const bdput: ref;

axiom bdput == $sub.ref(0, 248317);

procedure bdput($p0: ref);
  free requires assertsPassed;



implementation bdput($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    return;
}



const invalidate_bdev: ref;

axiom invalidate_bdev == $sub.ref(0, 249349);

procedure invalidate_bdev($p0: ref);
  free requires assertsPassed;



implementation invalidate_bdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    return;
}



const loop_sysfs_exit: ref;

axiom loop_sysfs_exit == $sub.ref(0, 250381);

procedure loop_sysfs_exit($p0: ref);
  free requires assertsPassed;



implementation loop_sysfs_exit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(864, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(72, 1)), $mul.ref(88, 1)), $mul.ref(16, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} sysfs_remove_group($p5, loop_attribute_group);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    return;
}



const mapping_set_gfp_mask: ref;

axiom mapping_set_gfp_mask == $sub.ref(0, 251413);

procedure mapping_set_gfp_mask($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation mapping_set_gfp_mask($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} {:cexpr "mapping_set_gfp_mask:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(304, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, $sub.i64(0, 33554432));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i1);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i6 := $or.i64($i4, $i5);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(304, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i6);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_put_15: ref;

axiom ldv_module_put_15 == $sub.ref(0, 252445);

procedure ldv_module_put_15($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_module_put_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} ldv_module_put($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const blk_mq_unfreeze_queue: ref;

axiom blk_mq_unfreeze_queue == $sub.ref(0, 253477);

procedure blk_mq_unfreeze_queue($p0: ref);
  free requires assertsPassed;



implementation blk_mq_unfreeze_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    return;
}



const ldv_destroy_workqueue_16: ref;

axiom ldv_destroy_workqueue_16 == $sub.ref(0, 254509);

procedure ldv_destroy_workqueue_16($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16, $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3;



implementation ldv_destroy_workqueue_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} destroy_workqueue($p0);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} call_and_disable_all_2(2);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    return;
}



const fput: ref;

axiom fput == $sub.ref(0, 255541);

procedure fput($p0: ref);
  free requires assertsPassed;



implementation fput($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 256573);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    return;
}



const call_and_disable_all_2: ref;

axiom call_and_disable_all_2 == $sub.ref(0, 257605);

procedure call_and_disable_all_2($i0: i32);
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16, $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3;



implementation call_and_disable_all_2($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} {:cexpr "call_and_disable_all_2:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i1 := $M.10;
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, $i0);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.12;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $i0);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $M.14;
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i0);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $M.16;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i0);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p12 := $M.17;
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} call_and_disable_work_2($p12);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p9 := $M.15;
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} call_and_disable_work_2($p9);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p6 := $M.13;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} call_and_disable_work_2($p6);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p3 := $M.11;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} call_and_disable_work_2($p3);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const call_and_disable_work_2: ref;

axiom call_and_disable_work_2 == $sub.ref(0, 258637);

procedure call_and_disable_work_2($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16, $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3;



implementation call_and_disable_work_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i1 := $M.10;
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $M.12;
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i10 == 1);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i11 := $M.12;
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i17 := $M.14;
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i18 == 1);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i19 := $M.14;
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i25 := $M.16;
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i26 == 1);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i27 := $M.16;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p30 := $M.17;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb34;

  $bb35:
    assume $i32 == 1;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} loop_queue_write_work($p0);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 623} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb30;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p22 := $M.15;
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb25;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} loop_queue_write_work($p0);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 621} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p14 := $M.13;
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i13, $i15);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb16;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} loop_queue_write_work($p0);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 619} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p6 := $M.11;
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i5, $i7);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} loop_queue_write_work($p0);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 617} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const loop_queue_write_work: ref;

axiom loop_queue_write_work == $sub.ref(0, 259669);

procedure loop_queue_write_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3;



implementation loop_queue_write_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p1);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 376), 872)), $mul.ref(280, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} spin_lock_irq($p6);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 376), 872)), $mul.ref(280, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p8, $p9, $i10, $i11, $p12, $p13, $p14, $p15, $p16, $i17, $i18, $p19, $i20, $i21 := loop_queue_write_work_loop_$bb1($p1, $p2, $p7, $p8, $p9, $i10, $i11, $p12, $p13, $p14, $p15, $p16, $i17, $i18, $p19, $i20, $i21);
    goto $bb1_last;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} list_splice_init($p8, $p1);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 376), 872)), $mul.ref(280, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} spin_unlock_irq($p9);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i10 := list_empty($p1);
    call {:si_unique_call 629} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} spin_lock_irq($p7);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 376), 872)), $mul.ref(360, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i20 := list_empty($p19);
    call {:si_unique_call 636} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 376), 872)), $mul.ref(456, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 376), 872)), $mul.ref(280, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} spin_unlock_irq($p23);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb10_dummy;

  $bb2:
    assume $i11 == 1;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call $p12, $p13, $p14, $p15, $p16, $i17, $i18 := loop_queue_write_work_loop_$bb5($p1, $p12, $p13, $p14, $p15, $p16, $i17, $i18);
    goto $bb5_last;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 88), 104));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p14, $mul.ref($sub.ref(0, 88), 104)), $mul.ref(88, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} list_del_init($p16);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} loop_handle_cmd($p15);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i17 := list_empty($p1);
    call {:si_unique_call 633} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb7_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 376), 872)), $mul.ref(360, 1));
    goto corral_source_split_3428;
}



const list_splice_init: ref;

axiom list_splice_init == $sub.ref(0, 260701);

procedure list_splice_init($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_splice_init($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i2 := list_empty($p0);
    call {:si_unique_call 639} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} __list_splice($p0, $p1, $p5);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} INIT_LIST_HEAD($p0);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 261733);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} __list_del_entry($p0);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} INIT_LIST_HEAD($p0);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 262765);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 263797);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    return;
}



const __list_splice: ref;

axiom __list_splice == $sub.ref(0, 264829);

procedure __list_splice($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __list_splice($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p4);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p2);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p6);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    return;
}



const sysfs_remove_group: ref;

axiom sysfs_remove_group == $sub.ref(0, 265861);

procedure sysfs_remove_group($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sysfs_remove_group($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    return;
}



const fget: ref;

axiom fget == $sub.ref(0, 266893);

procedure fget($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation fget($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} {:cexpr "fget:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $p1 := external_alloc();
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const get_loop_size: ref;

axiom get_loop_size == $sub.ref(0, 267925);

procedure get_loop_size($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation get_loop_size($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(8, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(16, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i6 := get_size($i3, $i5, $p1);
    call {:si_unique_call 647} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const loop_switch: ref;

axiom loop_switch == $sub.ref(0, 268957);

procedure loop_switch($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.0, $CurrAddr;



implementation loop_switch($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $p2 := $alloc($mul.ref(104, $zext.i32.i64(1)));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p3, $p1);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(624, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} blk_mq_freeze_queue($p5);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} do_loop_switch($p0, $p2);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(624, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} blk_mq_unfreeze_queue($p7);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const do_loop_switch: ref;

axiom do_loop_switch == $sub.ref(0, 269989);

procedure do_loop_switch($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation do_loop_switch($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.25, $p2);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p3);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(272, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} mapping_set_gfp_mask($p11, $i13);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p3);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1000)), $mul.ref(0, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 61440);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 24576);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i29 := 4096;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(256, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i31 := mapping_gfp_mask($p9);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(272, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(272, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, $sub.i32(0, 193));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} mapping_set_gfp_mask($p9, $i35);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p9, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1000)), $mul.ref(968, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 480)), $mul.ref(248, 1));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mapping_gfp_mask: ref;

axiom mapping_gfp_mask == $sub.ref(0, 271021);

procedure mapping_gfp_mask($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mapping_gfp_mask($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(304, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 33554431);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv___module_get_10: ref;

axiom ldv___module_get_10 == $sub.ref(0, 272053);

procedure ldv___module_get_10($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv___module_get_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} ldv_module_get($p0);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    return;
}



const is_loop_device: ref;

axiom is_loop_device == $sub.ref(0, 273085);

procedure is_loop_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_loop_device($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i7: i1;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i7);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 1000)), $mul.ref(0, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 61440);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 24576);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 1000)), $mul.ref(76, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i14, 20);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 7);
    assume {:verifier.code 0} true;
    $i7 := $i16;
    goto $bb3;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 274117);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref.i32($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref.i32($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 657} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $p5 := external_alloc();
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const set_device_ro: ref;

axiom set_device_ro == $sub.ref(0, 275149);

procedure set_device_ro($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation set_device_ro($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} {:cexpr "set_device_ro:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_flush: ref;

axiom blk_queue_flush == $sub.ref(0, 276181);

procedure blk_queue_flush($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_flush($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} {:cexpr "blk_queue_flush:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    return;
}



const loop_sysfs_init: ref;

axiom loop_sysfs_init == $sub.ref(0, 277213);

procedure loop_sysfs_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation loop_sysfs_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(864, 1));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(72, 1)), $mul.ref(88, 1)), $mul.ref(16, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $i6 := sysfs_create_group($p5, loop_attribute_group);
    call {:si_unique_call 662} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const set_blocksize: ref;

axiom set_blocksize == $sub.ref(0, 278245);

procedure set_blocksize($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation set_blocksize($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 663} {:cexpr "set_blocksize:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 1} true;
    call {:si_unique_call 664} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 665} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const bdgrab: ref;

axiom bdgrab == $sub.ref(0, 279277);

procedure bdgrab($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation bdgrab($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $p1 := external_alloc();
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_module_put_11: ref;

axiom ldv_module_put_11 == $sub.ref(0, 280309);

procedure ldv_module_put_11($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_module_put_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} ldv_module_put($p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const sysfs_create_group: ref;

axiom sysfs_create_group == $sub.ref(0, 281341);

procedure sysfs_create_group($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sysfs_create_group($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 1} true;
    call {:si_unique_call 668} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 669} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_get: ref;

axiom ldv_module_get == $sub.ref(0, 282373);

procedure ldv_module_get($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_module_get($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $M.2 := $i4;
    call {:si_unique_call 670} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i4);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_sub_return: ref;

axiom atomic_sub_return == $sub.ref(0, 283405);

procedure atomic_sub_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_sub_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} {:cexpr "atomic_sub_return:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, $i0);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i3 := atomic_add_return($i2, $p1);
    call {:si_unique_call 673} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const loop_flush: ref;

axiom loop_flush == $sub.ref(0, 284437);

procedure loop_flush($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.0, $CurrAddr;



implementation loop_flush($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i1 := loop_switch($p0, $0.ref);
    call {:si_unique_call 675} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 285469);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 677} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 678} $i3 := devirtbounce.10(0, $p2, $i0, $p2);
    call {:si_unique_call 679} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 286501);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 680} devirtbounce.2(0, $p1, $p1);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    return;
}



const noop_llseek: ref;

axiom noop_llseek == $sub.ref(0, 287533);

procedure noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 681} {:cexpr "noop_llseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 682} {:cexpr "noop_llseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 1} true;
    call {:si_unique_call 683} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 684} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const loop_control_ioctl: ref;

axiom loop_control_ioctl == $sub.ref(0, 288565);

procedure loop_control_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.26, $CurrAddr;



implementation loop_control_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i11: i32;
  var $i45: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 686} {:cexpr "loop_control_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 687} {:cexpr "loop_control_ioctl:arg:parm"} boogie_si_record_i64($i2);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} mutex_lock_nested(loop_index_mutex, 0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 19585);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 19586);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 19586);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 38);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i11 := $i44;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} mutex_unlock(loop_index_mutex);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i11);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i41 := loop_lookup($p3, $sub.i32(0, 1));
    call {:si_unique_call 692} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i42 := $sge.i32($i41, 0);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $i43 := loop_add($p3, $sub.i32(0, 1));
    call {:si_unique_call 707} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb27;

  $bb24:
    assume $i42 == 1;
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i11 := $i41;
    goto $bb13;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $i15 := loop_lookup($p3, $i14);
    call {:si_unique_call 690} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.26, $p3);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} mutex_lock_nested($p18, 0);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.26, $p3);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 872)), $mul.ref(460, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.26, $p3);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 872)), $mul.ref(4, 1));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $i27 := atomic_read($p26);
    call {:si_unique_call 701} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, 0);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.26, $p3);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 872)), $mul.ref(864, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $0.ref);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.26, $p3);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} mutex_unlock($p36);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.26, $p3);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} idr_remove(loop_index_idr, $i39);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.26, $p3);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} loop_remove($p40);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i11 := $i15;
    goto $bb13;

  $bb21:
    assume $i28 == 1;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.26, $p3);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} mutex_unlock($p30);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb13;

  $bb18:
    assume $i22 == 1;
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.26, $p3);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} mutex_unlock($p24);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb13;

  $bb15:
    assume $i16 == 1;
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i11 := $i15;
    goto $bb13;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 19584);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i2);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i9 := loop_lookup($p3, $i8);
    call {:si_unique_call 694} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i10 := $sge.i32($i9, 0);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i2);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i13 := loop_add($p3, $i12);
    call {:si_unique_call 697} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb13;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 17);
    goto $bb13;
}



const nonseekable_open: ref;

axiom nonseekable_open == $sub.ref(0, 289597);

procedure nonseekable_open($p0: ref, $p1: ref) returns ($r: i32);



const loop_lookup: ref;

axiom loop_lookup == $sub.ref(0, 290629);

procedure loop_lookup($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.0, $CurrAddr;



implementation loop_lookup($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 709} {:cexpr "loop_lookup:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 0);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $p13 := idr_find(loop_index_idr, $i1);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p13);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p2);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 19);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i12 := $i22;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p2);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p0, $p18);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p2);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    call {:si_unique_call 714} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb10;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i5 := idr_for_each(loop_index_idr, find_free_cb, $p4);
    call {:si_unique_call 711} {:cexpr "err"} boogie_si_record_i32($i5);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 19);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p2);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p0, $p7);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p2);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 712} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb5;
}



const loop_add: ref;

axiom loop_add == $sub.ref(0, 291661);

procedure loop_add($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $CurrAddr;



implementation loop_add($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $p19: ref;
  var $i20: i32;
  var $i18: i32;
  var $i21: i1;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i1;
  var $i49: i8;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $p101: ref;
  var $p102: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p111: ref;
  var $i112: i32;
  var $p114: ref;
  var $p115: ref;
  var $i56: i32;
  var $p116: ref;
  var $i41: i32;
  var $i22: i32;
  var $p117: ref;
  var $i10: i32;
  var $i113: i32;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;
  var vslice_dummy_var_132: ref;
  var vslice_dummy_var_133: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 719} {:cexpr "loop_add:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $p6 := kzalloc(872, 208);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(460, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i12 := $sge.i32($i1, 0);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p7);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $i20 := idr_alloc(loop_index_idr, $p19, 0, 0, 208);
    call {:si_unique_call 724} {:cexpr "err"} boogie_si_record_i32($i20);
    assume {:verifier.code 0} true;
    $i18 := $i20;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i18, 0);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(632, 1)), $mul.ref(0, 1));
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, loop_mq_ops);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(632, 1)), $mul.ref(8, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 1);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(632, 1)), $mul.ref(12, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 128);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(632, 1)), $mul.ref(24, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $sub.i32(0, 1));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(632, 1)), $mul.ref(20, 1));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 104);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(632, 1)), $mul.ref(32, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 5);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(632, 1)), $mul.ref(40, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p6);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(632, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i39 := blk_mq_alloc_tag_set($p38);
    call {:si_unique_call 727} {:cexpr "err"} boogie_si_record_i32($i39);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(632, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $p43 := blk_mq_init_queue($p42);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(624, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p43);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(624, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i48 := IS_ERR_OR_NULL($p47);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i8($i48);
    call {:si_unique_call 731} {:cexpr "tmp___1"} boogie_si_record_i8($i49);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i49);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(624, 1));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 4216)), $mul.ref(2496, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $p6);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(360, 1));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} INIT_LIST_HEAD($p61);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} __init_work($p62, 0);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p63, 137438953408);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(376, 1)), $mul.ref(0, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p3);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_103 := $M.0;
    cmdloc_dummy_var_104 := $M.0;
    call {:si_unique_call 738} cmdloc_dummy_var_105 := $memcpy.i8(cmdloc_dummy_var_103, cmdloc_dummy_var_104, $p66, $p67, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_105;
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(376, 1)), $mul.ref(32, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} lockdep_init_map($p69, .str.15, $p2, 0);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(376, 1)), $mul.ref(8, 1));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} INIT_LIST_HEAD($p71);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(376, 1)), $mul.ref(24, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, loop_queue_write_work);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i74 := $M.24;
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i75 := $shl.i32(1, $i74);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $p76 := alloc_disk($i75);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(864, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p77, $p76);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p76);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i80 := $M.24;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p76, $mul.ref(0, 1752)), $mul.ref(1688, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i88 := $or.i32($i87, 64);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p76, $mul.ref(0, 1752)), $mul.ref(1688, 1));
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i88);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} __mutex_init($p90, .str.16, $p4);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(4, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} atomic_set($p91, 0);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i18);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(280, 1));
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_132 := spinlock_check($p93);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} __raw_spin_lock_init($p97, .str.17, $p5);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p76, $mul.ref(0, 1752)), $mul.ref(0, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, 7);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i99 := $M.24;
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i100 := $shl.i32($i18, $i99);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p76, $mul.ref(0, 1752)), $mul.ref(4, 1));
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, $i100);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p76, $mul.ref(0, 1752)), $mul.ref(1664, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p102, lo_fops);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p76, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, $p6);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(624, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p76, $mul.ref(0, 1752)), $mul.ref(1672, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p107, $p106);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p76, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} vslice_dummy_var_133 := sprintf.ref.ref.i32($p109, .str.18, $i18);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} add_disk($p76);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p0, $p6);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i113 := $i112;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $r := $i113;
    return;

  $bb27:
    assume $i81 == 1;
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p76, $mul.ref(0, 1752)), $mul.ref(1688, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i84 := $or.i32($i83, 512);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p76, $mul.ref(0, 1752)), $mul.ref(1688, 1));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i84);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i79 == 1;
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(624, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} blk_cleanup_queue($p115);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i56 := $i39;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(632, 1));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} blk_mq_free_tag_set($p116);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i41 := $i56;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} idr_remove(loop_index_idr, $i18);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i22 := $i41;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p7);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} kfree($p117);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i10 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i113 := $i10;
    goto $bb30;

  $bb19:
    assume $i50 == 1;
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p7, $mul.ref(0, 872)), $mul.ref(624, 1));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i54 := PTR_ERR($p53);
    call {:si_unique_call 733} {:cexpr "tmp___0"} boogie_si_record_i64($i54);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i64.i32($i54);
    call {:si_unique_call 734} {:cexpr "err"} boogie_si_record_i32($i55);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb21;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i41 := $i39;
    goto $bb17;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i22 := $i18;
    goto $bb13;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p7);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i1, 1);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i15 := idr_alloc(loop_index_idr, $p13, $i1, $i14, 208);
    call {:si_unique_call 722} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, $sub.i32(0, 28));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb10;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 17);
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;
}



const idr_remove: ref;

axiom idr_remove == $sub.ref(0, 292693);

procedure idr_remove($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation idr_remove($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} {:cexpr "idr_remove:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    return;
}



const loop_remove: ref;

axiom loop_remove == $sub.ref(0, 293725);

procedure loop_remove($p0: ref);
  free requires assertsPassed;



implementation loop_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(624, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} blk_cleanup_queue($p2);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(864, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} del_gendisk($p4);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(632, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} blk_mq_free_tag_set($p5);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(864, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} put_disk($p7);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} kfree($p8);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    return;
}



const blk_cleanup_queue: ref;

axiom blk_cleanup_queue == $sub.ref(0, 294757);

procedure blk_cleanup_queue($p0: ref);
  free requires assertsPassed;



implementation blk_cleanup_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    return;
}



const del_gendisk: ref;

axiom del_gendisk == $sub.ref(0, 295789);

procedure del_gendisk($p0: ref);
  free requires assertsPassed;



implementation del_gendisk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    return;
}



const blk_mq_free_tag_set: ref;

axiom blk_mq_free_tag_set == $sub.ref(0, 296821);

procedure blk_mq_free_tag_set($p0: ref);
  free requires assertsPassed;



implementation blk_mq_free_tag_set($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    return;
}



const put_disk: ref;

axiom put_disk == $sub.ref(0, 297853);

procedure put_disk($p0: ref);
  free requires assertsPassed;



implementation put_disk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 298885);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} free_($p0);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 299917);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 756} $free($p0);
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 300949);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 758} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const idr_alloc: ref;

axiom idr_alloc == $sub.ref(0, 301981);

procedure idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 760} {:cexpr "idr_alloc:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 761} {:cexpr "idr_alloc:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 762} {:cexpr "idr_alloc:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 1} true;
    call {:si_unique_call 763} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 764} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const blk_mq_alloc_tag_set: ref;

axiom blk_mq_alloc_tag_set == $sub.ref(0, 303013);

procedure blk_mq_alloc_tag_set($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_mq_alloc_tag_set($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 1} true;
    call {:si_unique_call 765} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 766} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const blk_mq_init_queue: ref;

axiom blk_mq_init_queue == $sub.ref(0, 304045);

procedure blk_mq_init_queue($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation blk_mq_init_queue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $p1 := external_alloc();
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const IS_ERR_OR_NULL: ref;

axiom IS_ERR_OR_NULL == $sub.ref(0, 305077);

procedure IS_ERR_OR_NULL($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR_OR_NULL($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i1 := ldv_is_err_or_null($p0);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 769} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 306109);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 771} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const alloc_disk: ref;

axiom alloc_disk == $sub.ref(0, 307141);

procedure alloc_disk($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_disk($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} {:cexpr "alloc_disk:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p1 := external_alloc();
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 308173);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 309205);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 310237);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 311269);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 312301);

procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure sprintf.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);



procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const add_disk: ref;

axiom add_disk == $sub.ref(0, 313333);

procedure add_disk($p0: ref);
  free requires assertsPassed;



implementation add_disk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 314365);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err_or_null: ref;

axiom ldv_is_err_or_null == $sub.ref(0, 315397);

procedure ldv_is_err_or_null($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err_or_null($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i3: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i4 := ldv_is_err($p0);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 776} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i3, 0);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 316429);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 317461);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 778} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 318493);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 781} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $p2 := ldv_malloc($i0);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 319525);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 783} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 1} true;
    call {:si_unique_call 784} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 785} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 786} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $p4 := malloc($i0);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 1} true;
    call {:si_unique_call 788} __VERIFIER_assume($i7);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 320557);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 789} $r := $malloc($i0);
    return;
}



const find_free_cb: ref;

axiom find_free_cb == $sub.ref(0, 321589);

procedure find_free_cb($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);



const idr_find: ref;

axiom idr_find == $sub.ref(0, 322621);

procedure idr_find($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation idr_find($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p29: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 792} {:cexpr "idr_find:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} __read_once_size($p5, $p7, 8);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $i10 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 795} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $p29 := idr_find_slowpath($p0, $i1);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p28 := $p29;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $r := $p28;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i1, $sub.i32(0, 256));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 2096)), $mul.ref(0, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, $i15);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 2096)), $mul.ref(8, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i1);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 255);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p18, $mul.ref($i20, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} __read_once_size($p21, $p23, 8);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i26 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 798} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p28 := $p25;
    goto $bb6;
}



const __read_once_size: ref;

axiom __read_once_size == $sub.ref(0, 323653);

procedure __read_once_size($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __read_once_size($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;
  var cmdloc_dummy_var_108: [ref]i8;

  $bb0:
    call {:si_unique_call 800} {:cexpr "__read_once_size:arg:size"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 801} devirtbounce.1(0);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_106 := $M.0;
    cmdloc_dummy_var_107 := $M.0;
    call {:si_unique_call 802} cmdloc_dummy_var_108 := $memcpy.i8(cmdloc_dummy_var_106, cmdloc_dummy_var_107, $p1, $p0, $i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_108;
    call {:si_unique_call 803} devirtbounce.1(0);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p0);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i10);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const idr_find_slowpath: ref;

axiom idr_find_slowpath == $sub.ref(0, 324685);

procedure idr_find_slowpath($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation idr_find_slowpath($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} {:cexpr "idr_find_slowpath:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $p2 := external_alloc();
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const loop_attr_do_show_backing_file: ref;

axiom loop_attr_do_show_backing_file == $sub.ref(0, 325717);

procedure loop_attr_do_show_backing_file($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation loop_attr_do_show_backing_file($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i3 := loop_attr_show($p0, $p2, loop_attr_backing_file_show);
    call {:si_unique_call 807} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const loop_attr_backing_file_show: ref;

axiom loop_attr_backing_file_show == $sub.ref(0, 326749);

procedure loop_attr_backing_file_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation loop_attr_backing_file_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i15: i64;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(280, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} spin_lock_irq($p2);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(280, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} spin_unlock_irq($p11);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $i12 := IS_ERR_OR_NULL($p10);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 812} {:cexpr "tmp___1"} boogie_si_record_i8($i13);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i17 := strlen($p10);
    call {:si_unique_call 816} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} llvm.memmove.p0i8.p0i8.i64($p1, $p10, $i17, 1, 0);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 1);
    call {:si_unique_call 818} {:cexpr "ret"} boogie_si_record_i64($i18);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p1, $mul.ref($i17, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 10);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p1, $mul.ref($i18, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    assume {:verifier.code 0} true;
    $i16 := $i18;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i15 := PTR_ERR($p10);
    call {:si_unique_call 814} {:cexpr "ret"} boogie_si_record_i64($i15);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $p9 := file_path($p8, $p1, 4095);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p10 := $p9;
    goto $bb3;
}



const loop_attr_show: ref;

axiom loop_attr_show == $sub.ref(0, 327781);

procedure loop_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation loop_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 160), 1752)), $mul.ref(1680, 1));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    call {:si_unique_call 819} $i8 := devirtbounce.11($p2, $p7, $p1);
    call {:si_unique_call 820} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const file_path: ref;

axiom file_path == $sub.ref(0, 328813);

procedure file_path($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation file_path($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} {:cexpr "file_path:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p3 := external_alloc();
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 329845);

procedure strlen($p0: ref) returns ($r: i64);



const llvm.memmove.p0i8.p0i8.i64: ref;

axiom llvm.memmove.p0i8.p0i8.i64 == $sub.ref(0, 330877);

procedure llvm.memmove.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const loop_attr_do_show_offset: ref;

axiom loop_attr_do_show_offset == $sub.ref(0, 331909);

procedure loop_attr_do_show_offset($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation loop_attr_do_show_offset($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i3 := loop_attr_show($p0, $p2, loop_attr_offset_show);
    call {:si_unique_call 824} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const loop_attr_offset_show: ref;

axiom loop_attr_offset_show == $sub.ref(0, 332941);

procedure loop_attr_offset_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation loop_attr_offset_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(8, 1));
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $i4 := sprintf.ref.ref.i64($p1, .str.19, $i3);
    call {:si_unique_call 826} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const loop_attr_do_show_sizelimit: ref;

axiom loop_attr_do_show_sizelimit == $sub.ref(0, 333973);

procedure loop_attr_do_show_sizelimit($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation loop_attr_do_show_sizelimit($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $i3 := loop_attr_show($p0, $p2, loop_attr_sizelimit_show);
    call {:si_unique_call 828} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const loop_attr_sizelimit_show: ref;

axiom loop_attr_sizelimit_show == $sub.ref(0, 335005);

procedure loop_attr_sizelimit_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation loop_attr_sizelimit_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(16, 1));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i4 := sprintf.ref.ref.i64($p1, .str.19, $i3);
    call {:si_unique_call 830} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const loop_attr_do_show_autoclear: ref;

axiom loop_attr_do_show_autoclear == $sub.ref(0, 336037);

procedure loop_attr_do_show_autoclear($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation loop_attr_do_show_autoclear($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $i3 := loop_attr_show($p0, $p2, loop_attr_autoclear_show);
    call {:si_unique_call 832} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const loop_attr_autoclear_show: ref;

axiom loop_attr_autoclear_show == $sub.ref(0, 337069);

procedure loop_attr_autoclear_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation loop_attr_autoclear_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 4);
    call {:si_unique_call 833} {:cexpr "autoclear"} boogie_si_record_i32($i4);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p6 := (if $i5 == 1 then .str.10 else .str.11);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $i7 := sprintf.ref.ref.ref($p1, .str.9, $p6);
    call {:si_unique_call 835} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const loop_attr_do_show_partscan: ref;

axiom loop_attr_do_show_partscan == $sub.ref(0, 338101);

procedure loop_attr_do_show_partscan($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation loop_attr_do_show_partscan($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $i3 := loop_attr_show($p0, $p2, loop_attr_partscan_show);
    call {:si_unique_call 837} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const loop_attr_partscan_show: ref;

axiom loop_attr_partscan_show == $sub.ref(0, 339133);

procedure loop_attr_partscan_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation loop_attr_partscan_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 8);
    call {:si_unique_call 838} {:cexpr "partscan"} boogie_si_record_i32($i4);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p6 := (if $i5 == 1 then .str.10 else .str.11);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $i7 := sprintf.ref.ref.ref($p1, .str.9, $p6);
    call {:si_unique_call 840} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 340165);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p1 := calloc(1, $i0);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 843} __VERIFIER_assume($i4);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 341197);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.29;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_109: [ref]i8;
  var cmdloc_dummy_var_110: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 845} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_109 := $M.29;
    call {:si_unique_call 846} cmdloc_dummy_var_110 := $memset.i8(cmdloc_dummy_var_109, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.29 := cmdloc_dummy_var_110;
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_initialize_loop_func_table_11: ref;

axiom ldv_initialize_loop_func_table_11 == $sub.ref(0, 342229);

procedure ldv_initialize_loop_func_table_11();
  free requires assertsPassed;
  modifies $M.30, $M.0, $CurrAddr;



implementation ldv_initialize_loop_func_table_11()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p0 := ldv_init_zalloc(872);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $M.30 := $p0;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_3: ref;

axiom ldv_file_operations_3 == $sub.ref(0, 343261);

procedure ldv_file_operations_3();
  free requires assertsPassed;
  modifies $M.31, $M.32, $M.0, $CurrAddr;



implementation ldv_file_operations_3()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $M.31 := $p0;
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $M.32 := $p2;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    return;
}



const work_init_2: ref;

axiom work_init_2 == $sub.ref(0, 344293);

procedure work_init_2();
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16;



implementation work_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $M.10 := 0;
    call {:si_unique_call 850} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 851} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 852} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 853} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 345325);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.33, $M.34, $M.35, $M.36;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 854} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 855} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $M.35 := 0;
    call {:si_unique_call 856} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $M.36 := 0;
    call {:si_unique_call 857} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 346357);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.33, $M.34, $M.35, $M.36, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.3;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 1} true;
    call {:si_unique_call 858} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 859} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 860} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} ldv_stop();
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i21 := $M.36;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i23 := $M.36;
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.36 := 4;
    call {:si_unique_call 870} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p25 := $M.37;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} loop_queue_read_work($p25);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 872} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i16 := $M.35;
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i18 := $M.35;
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.35 := 4;
    call {:si_unique_call 867} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p20 := $M.37;
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} loop_queue_read_work($p20);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 869} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i11 := $M.34;
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i13 := $M.34;
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.34 := 4;
    call {:si_unique_call 864} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p15 := $M.37;
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} loop_queue_read_work($p15);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 866} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i6 := $M.33;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i8 := $M.33;
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.33 := 4;
    call {:si_unique_call 861} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p10 := $M.37;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} loop_queue_read_work($p10);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 863} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 347389);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_block_device_operations_5: ref;

axiom ldv_initialize_block_device_operations_5 == $sub.ref(0, 348421);

procedure ldv_initialize_block_device_operations_5();
  free requires assertsPassed;
  modifies $M.38, $M.0, $CurrAddr;



implementation ldv_initialize_block_device_operations_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $p0 := ldv_init_zalloc(480);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $M.38 := $p0;
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_2: ref;

axiom invoke_work_2 == $sub.ref(0, 349453);

procedure invoke_work_2();
  free requires assertsPassed;
  modifies $M.10, $M.0, $M.12, $M.14, $M.16, $CurrAddr, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3;



implementation invoke_work_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 1} true;
    call {:si_unique_call 875} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 876} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 877} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} ldv_stop();
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i21 := $M.16;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i23 := $M.16;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.16 := 4;
    call {:si_unique_call 887} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(4);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p25 := $M.11;
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} loop_queue_write_work($p25);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 889} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i16 := $M.14;
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i18 := $M.14;
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 884} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(4);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p20 := $M.11;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} loop_queue_write_work($p20);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 886} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i11 := $M.12;
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i13 := $M.12;
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.12 := 4;
    call {:si_unique_call 881} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(4);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p15 := $M.11;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} loop_queue_write_work($p15);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 883} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i6 := $M.10;
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i8 := $M.10;
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.10 := 4;
    call {:si_unique_call 878} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(4);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p10 := $M.11;
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} loop_queue_write_work($p10);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 880} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const main: ref;

axiom main == $sub.ref(0, 350485);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.39, $M.40, $M.41, $M.42, $M.43, $M.10, $M.12, $M.14, $M.16, $M.44, $M.45, $M.33, $M.34, $M.35, $M.36, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.0, $M.53, $M.54, $M.38, $M.30, $M.55, $M.62, $M.63, $M.64, $M.57, $M.56, $M.24, $M.107, $M.1, $M.32, $M.15, $M.11, $M.17, $M.31, $M.13, $M.37, $M.2, $M.113, $M.114, $M.115, $M.116, $CurrAddr, $M.26, $M.25, $M.4, $M.5, $M.6, $M.7, $M.8, assertsPassed, $M.21, $M.22, $M.3, $M.9, $M.23;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $i111: i32;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i1;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i32;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i149: i32;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $i153: i64;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $i160: i32;
  var $i161: i32;
  var $i162: i64;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $i169: i32;
  var $i170: i32;
  var $i171: i64;
  var $i173: i32;
  var $i174: i1;
  var $i176: i32;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $i181: i32;
  var $i182: i32;
  var $i183: i32;
  var $i184: i1;
  var $i186: i32;
  var $i187: i32;
  var $i188: i32;
  var $i189: i1;
  var $i190: i32;
  var $i191: i1;
  var $i192: i1;
  var $i193: i1;
  var $i194: i1;
  var $i195: i1;
  var $i196: i1;
  var $i197: i32;
  var $i198: i1;
  var $p199: ref;
  var $i200: i32;
  var $i201: i64;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i206: i64;
  var $i207: i32;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $p212: ref;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i32;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $i221: i32;
  var $i222: i64;
  var $i224: i32;
  var $i225: i1;
  var $i227: i32;
  var $i228: i32;
  var $i229: i32;
  var $i230: i1;
  var $i231: i32;
  var $i232: i1;
  var $i233: i32;
  var $i234: i1;
  var $i236: i32;
  var $i237: i1;
  var $i238: i32;
  var $i239: i1;
  var $i240: i32;
  var $i241: i1;
  var $i243: i32;
  var $i244: i1;
  var $i245: i32;
  var $i246: i1;
  var $i247: i32;
  var $i248: i1;
  var $i249: i32;
  var $i250: i1;
  var $i252: i32;
  var $i253: i1;
  var $i254: i32;
  var $i255: i1;
  var $i256: i32;
  var $i257: i1;
  var $i258: i1;
  var $i259: i1;
  var $i260: i1;
  var $i261: i32;
  var $i262: i1;
  var $i263: i32;
  var $i264: i32;
  var $i265: i32;
  var $i267: i32;
  var $i268: i1;
  var $i269: i32;
  var $i271: i32;
  var $i272: i1;
  var $i274: i32;
  var $i275: i1;
  var $i276: i32;
  var $i277: i1;
  var $i278: i1;
  var $i279: i1;
  var $i280: i32;
  var $i281: i1;
  var $i282: i32;
  var $i283: i1;
  var $i284: i32;
  var $i285: i1;
  var $i286: i32;
  var $i287: i32;
  var $i288: i1;
  var $i289: i32;
  var $i290: i1;
  var $i291: i32;
  var $i292: i1;
  var $i293: i32;
  var $i294: i1;
  var $i295: i32;
  var $i296: i1;
  var $i298: i32;
  var $i299: i1;
  var $i300: i32;
  var $i301: i1;
  var $i302: i1;
  var $i303: i1;
  var $i304: i1;
  var $i305: i1;
  var $i306: i32;
  var $i307: i1;
  var $i308: i32;
  var $i309: i32;
  var $i310: i32;
  var $i311: i32;
  var $i312: i1;
  var $p313: ref;
  var $i314: i32;
  var $i315: i32;
  var $i316: i64;
  var $i318: i32;
  var $i319: i1;
  var $p320: ref;
  var $i321: i32;
  var $i322: i32;
  var $i323: i64;
  var $i325: i32;
  var $i326: i1;
  var $p327: ref;
  var $i328: i32;
  var $i329: i32;
  var $i330: i64;
  var $i332: i32;
  var $i333: i1;
  var $p334: ref;
  var $i335: i32;
  var $i336: i32;
  var $i337: i64;
  var $i339: i32;
  var $i340: i1;
  var $p341: ref;
  var $i342: i32;
  var $i343: i32;
  var $i344: i32;
  var $i345: i1;
  var $i346: i32;
  var $i347: i32;
  var vslice_dummy_var_134: ref;
  var vslice_dummy_var_135: ref;
  var vslice_dummy_var_136: ref;
  var vslice_dummy_var_137: ref;
  var vslice_dummy_var_138: ref;
  var vslice_dummy_var_139: ref;
  var vslice_dummy_var_140: ref;
  var vslice_dummy_var_141: ref;
  var vslice_dummy_var_142: ref;
  var vslice_dummy_var_143: ref;
  var vslice_dummy_var_144: ref;
  var vslice_dummy_var_145: ref;
  var vslice_dummy_var_146: ref;
  var vslice_dummy_var_147: ref;
  var vslice_dummy_var_148: ref;
  var vslice_dummy_var_149: ref;
  var vslice_dummy_var_150: ref;
  var vslice_dummy_var_151: ref;
  var vslice_dummy_var_152: ref;
  var vslice_dummy_var_153: ref;
  var vslice_dummy_var_154: ref;
  var vslice_dummy_var_155: ref;
  var vslice_dummy_var_156: ref;
  var vslice_dummy_var_157: i64;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i64;
  var vslice_dummy_var_165: i64;
  var vslice_dummy_var_166: i64;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i64;
  var vslice_dummy_var_169: i64;
  var vslice_dummy_var_170: i64;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: ref;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i64;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;

  $bb0:
    call {:si_unique_call 891} $initialize();
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $p11 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $p12 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $p13 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $p14 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $p15 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $p16 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $p17 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $p18 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $p19 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $p20 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $p21 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $p22 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $p23 := ldv_init_zalloc(1);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $p24 := ldv_init_zalloc(1416);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $p26 := ldv_init_zalloc(48);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $p28 := ldv_init_zalloc(64);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $p30 := ldv_init_zalloc(232);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $p32 := ldv_init_zalloc(64);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $p34 := ldv_init_zalloc(48);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $p36 := ldv_init_zalloc(1);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $p37 := ldv_init_zalloc(1416);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $p39 := ldv_init_zalloc(48);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $p41 := ldv_init_zalloc(1);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p42 := ldv_init_zalloc(1416);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $p44 := ldv_init_zalloc(48);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $p46 := ldv_init_zalloc(1416);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $p48 := ldv_init_zalloc(1);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p49 := ldv_init_zalloc(1152);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $p51 := ldv_init_zalloc(24);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $p53 := ldv_init_zalloc(368);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $p55 := ldv_init_zalloc(1);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $p56 := ldv_init_zalloc(4216);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $p58 := ldv_init_zalloc(1416);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p60 := ldv_init_zalloc(1);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $p61 := ldv_init_zalloc(48);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $p63 := ldv_init_zalloc(1744);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} ldv_initialize();
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p0);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} vslice_dummy_var_134 := ldv_memset($p65, 0, 8);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p1);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vslice_dummy_var_135 := ldv_memset($p67, 0, 4);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p2);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} vslice_dummy_var_136 := ldv_memset($p69, 0, 4);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p3);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} vslice_dummy_var_137 := ldv_memset($p71, 0, 4);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p4);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} vslice_dummy_var_138 := ldv_memset($p73, 0, 4);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p5);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} vslice_dummy_var_139 := ldv_memset($p75, 0, 8);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p6);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} vslice_dummy_var_140 := ldv_memset($p77, 0, 8);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p7);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} vslice_dummy_var_141 := ldv_memset($p79, 0, 4);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p8);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} vslice_dummy_var_142 := ldv_memset($p81, 0, 4);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p9);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} vslice_dummy_var_143 := ldv_memset($p83, 0, 4);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p10);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} vslice_dummy_var_144 := ldv_memset($p85, 0, 8);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p11);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_145 := ldv_memset($p87, 0, 4);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p12);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} vslice_dummy_var_146 := ldv_memset($p89, 0, 4);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p13);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_147 := ldv_memset($p91, 0, 4);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p14);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} vslice_dummy_var_148 := ldv_memset($p93, 0, 4);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p15);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} vslice_dummy_var_149 := ldv_memset($p95, 0, 4);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p16);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} vslice_dummy_var_150 := ldv_memset($p97, 0, 4);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p17);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} vslice_dummy_var_151 := ldv_memset($p99, 0, 8);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p18);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} vslice_dummy_var_152 := ldv_memset($p101, 0, 4);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p19);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} vslice_dummy_var_153 := ldv_memset($p103, 0, 4);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p20);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} vslice_dummy_var_154 := ldv_memset($p105, 0, 4);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p21);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} vslice_dummy_var_155 := ldv_memset($p107, 0, 4);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p22);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} vslice_dummy_var_156 := ldv_memset($p109, 0, 8);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 964} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 966} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $M.43 := 0;
    call {:si_unique_call 968} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} work_init_2();
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 970} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $M.45 := 0;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} work_init_1();
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 973} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $M.47 := 0;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 975} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 976} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 977} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 978} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $p142, $i143, $i144, $i145, $i146, $i147, $p148, $i149, $i150, $i151, $i152, $i153, $i155, $i156, $p157, $i158, $i159, $i160, $i161, $i162, $i164, $i165, $p166, $i167, $i168, $i169, $i170, $i171, $i173, $i174, $i176, $i177, $i178, $i179, $i181, $i182, $i183, $i184, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $p199, $i200, $i201, $i203, $i204, $p205, $i206, $i207, $i209, $i210, $p211, $p212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $p220, $i221, $i222, $i224, $i225, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i236, $i237, $i238, $i239, $i240, $i241, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i267, $i268, $i269, $i271, $i272, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $p313, $i314, $i315, $i316, $i318, $i319, $p320, $i321, $i322, $i323, $i325, $i326, $p327, $i328, $i329, $i330, $i332, $i333, $p334, $i335, $i336, $i337, $i339, $i340, $p341, $i342, $i343, $i344, $i345, $i346, $i347, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176, vslice_dummy_var_177, vslice_dummy_var_178 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p25, $p27, $p29, $p31, $p33, $p35, $p36, $p38, $p40, $p41, $p43, $p45, $p47, $p48, $p50, $p52, $p54, $p55, $p57, $p59, $p60, $p62, $p64, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $p142, $i143, $i144, $i145, $i146, $i147, $p148, $i149, $i150, $i151, $i152, $i153, $i155, $i156, $p157, $i158, $i159, $i160, $i161, $i162, $i164, $i165, $p166, $i167, $i168, $i169, $i170, $i171, $i173, $i174, $i176, $i177, $i178, $i179, $i181, $i182, $i183, $i184, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $p199, $i200, $i201, $i203, $i204, $p205, $i206, $i207, $i209, $i210, $p211, $p212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $p220, $i221, $i222, $i224, $i225, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i236, $i237, $i238, $i239, $i240, $i241, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i267, $i268, $i269, $i271, $i272, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $p313, $i314, $i315, $i316, $i318, $i319, $p320, $i321, $i322, $i323, $i325, $i326, $p327, $i328, $i329, $i330, $i332, $i333, $p334, $i335, $i336, $i337, $i339, $i340, $p341, $i342, $i343, $i344, $i345, $i346, $i347, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176, vslice_dummy_var_177, vslice_dummy_var_178);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i111, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i111, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i111, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i111, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i111, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} ldv_stop();
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb42_dummy;

  $bb11:
    assume $i116 == 1;
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i298 := $M.51;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i299 := $ne.i32($i298, 0);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb232:
    assume $i299 == 1;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1084} $i300 := __VERIFIER_nondet_int();
    call {:si_unique_call 1085} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i300);
    call {:si_unique_call 1086} {:cexpr "tmp___33"} boogie_si_record_i32($i300);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $i301 := $slt.i32($i300, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    $i302 := $slt.i32($i300, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    $i303 := $eq.i32($i300, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    assume !($i303 == 1);
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} ldv_stop();
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb239:
    assume $i303 == 1;
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i339 := $M.51;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i339, 1);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb262:
    assume $i340 == 1;
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p341 := $M.38;
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i342 := $load.i32($M.29, $p20);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i343 := lo_open($p341, $i342);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $M.55 := $i343;
    call {:si_unique_call 1099} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i343);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i344 := $M.55;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i345 := $eq.i32($i344, 0);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb264:
    assume $i345 == 1;
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1100} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i346 := $M.48;
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i347 := $add.i32($i346, 1);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $M.48 := $i347;
    call {:si_unique_call 1101} {:cexpr "ref_cnt"} boogie_si_record_i32($i347);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb237:
    assume $i302 == 1;
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i325 := $M.51;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, 1);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $i332 := $M.51;
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i332, 2);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb259:
    assume $i333 == 1;
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p334 := $M.38;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i335 := $load.i32($M.29, $p21);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i336 := $load.i32($M.29, $p16);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i337 := $load.i64($M.29, $p17);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} vslice_dummy_var_178 := lo_compat_ioctl($p334, $i335, $i336, $i337);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1097} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    goto $bb261;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb256:
    assume $i326 == 1;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p327 := $M.38;
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i328 := $load.i32($M.29, $p21);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i329 := $load.i32($M.29, $p16);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i330 := $load.i64($M.29, $p17);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} vslice_dummy_var_177 := lo_compat_ioctl($p327, $i328, $i329, $i330);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1095} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    goto $bb258;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb235:
    assume $i301 == 1;
    assume {:verifier.code 0} true;
    $i304 := $slt.i32($i300, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i304 == 1);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i311 := $M.51;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, 1);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $i318 := $M.51;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i319 := $eq.i32($i318, 2);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb253:
    assume $i319 == 1;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p320 := $M.38;
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i321 := $load.i32($M.29, $p18);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i322 := $load.i32($M.29, $p19);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i323 := $load.i64($M.29, $p22);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} vslice_dummy_var_176 := lo_ioctl($p320, $i321, $i322, $i323);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1093} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    goto $bb255;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb250:
    assume $i312 == 1;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p313 := $M.38;
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.29, $p18);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i315 := $load.i32($M.29, $p19);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i316 := $load.i64($M.29, $p22);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} vslice_dummy_var_175 := lo_ioctl($p313, $i314, $i315, $i316);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1091} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    goto $bb252;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb242:
    assume $i304 == 1;
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i300, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    assume !($i305 == 1);
    goto $bb241;

  $bb244:
    assume $i305 == 1;
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i306 := $M.51;
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i306, 2);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb246:
    assume $i307 == 1;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i308 := $load.i32($M.29, $p15);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} lo_release($p64, $i308);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1088} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i309 := $M.48;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i310 := $sub.i32($i309, 1);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $M.48 := $i310;
    call {:si_unique_call 1089} {:cexpr "ref_cnt"} boogie_si_record_i32($i310);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    goto $bb248;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i115 == 1;
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i291 := $M.50;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i292 := $ne.i32($i291, 0);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb220:
    assume $i292 == 1;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1078} $i293 := __VERIFIER_nondet_int();
    call {:si_unique_call 1079} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i293);
    call {:si_unique_call 1080} {:cexpr "tmp___32"} boogie_si_record_i32($i293);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} ldv_stop();
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb223:
    assume $i294 == 1;
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i295 := $M.50;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i295, 1);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb225:
    assume $i296 == 1;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} vslice_dummy_var_174 := loop_attr_do_show_backing_file($p59, $p62, $p60);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1082} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb7:
    assume $i114 == 1;
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i274 := $M.49;
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i275 := $ne.i32($i274, 0);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb190:
    assume $i275 == 1;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1057} $i276 := __VERIFIER_nondet_int();
    call {:si_unique_call 1058} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i276);
    call {:si_unique_call 1059} {:cexpr "tmp___31"} boogie_si_record_i32($i276);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i277 := $slt.i32($i276, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i276, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    assume !($i278 == 1);
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} ldv_stop();
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb195:
    assume $i278 == 1;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i284 := $M.49;
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i284, 1);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb208:
    assume $i285 == 1;
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $i286 := loop_init();
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $M.54 := $i286;
    call {:si_unique_call 1064} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i286);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i287 := $M.54;
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i288 := $ne.i32($i287, 0);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $i289 := $M.54;
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, 0);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb213:
    assume $i290 == 1;
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1066} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1067} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} ldv_initialize_block_device_operations_5();
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1069} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1070} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1071} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1072} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1073} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1074} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} ldv_initialize_loop_func_table_11();
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1076} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb210:
    assume $i288 == 1;
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1065} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ldv_check_final_state();
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb193:
    assume $i277 == 1;
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i276, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    assume !($i279 == 1);
    goto $bb197;

  $bb198:
    assume $i279 == 1;
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i280 := $M.49;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 2);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    assume !($i281 == 1);
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb200:
    assume $i281 == 1;
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i282 := $M.48;
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i283 := $eq.i32($i282, 0);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    assume !($i283 == 1);
    goto $bb202;

  $bb203:
    assume $i283 == 1;
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} loop_exit();
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1061} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb5:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    $i117 := $slt.i32($i111, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i111, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i118 == 1);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i254 := $M.47;
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i255 := $ne.i32($i254, 0);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb165:
    assume $i255 == 1;
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1047} $i256 := __VERIFIER_nondet_int();
    call {:si_unique_call 1048} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i256);
    call {:si_unique_call 1049} {:cexpr "tmp___30"} boogie_si_record_i32($i256);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $i257 := $slt.i32($i256, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    $i258 := $slt.i32($i256, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i256, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    assume !($i259 == 1);
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} ldv_stop();
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb172:
    assume $i259 == 1;
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i271 := $M.47;
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i271, 1);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb184:
    assume $i272 == 1;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} vslice_dummy_var_173 := loop_queue_rq($p50, $p52);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1055} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb170:
    assume $i258 == 1;
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i267 := $M.47;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i267, 1);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb181:
    assume $i268 == 1;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.29, $p14);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} vslice_dummy_var_172 := blk_mq_map_queue($p57, $i269);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1053} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb168:
    assume $i257 == 1;
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i256, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    assume !($i260 == 1);
    goto $bb174;

  $bb175:
    assume $i260 == 1;
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i261 := $M.47;
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, 1);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb177:
    assume $i262 == 1;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.29, $p12);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.29, $p11);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.29, $p13);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} vslice_dummy_var_171 := loop_init_request($p55, $p54, $i263, $i264, $i265);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1051} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb16:
    assume $i118 == 1;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i252 := $M.46;
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i253 := $ne.i32($i252, 0);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb162:
    assume $i253 == 1;
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} invoke_work_1();
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb14:
    assume $i117 == 1;
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i245 := $M.45;
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i246 := $ne.i32($i245, 0);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb150:
    assume $i246 == 1;
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1040} $i247 := __VERIFIER_nondet_int();
    call {:si_unique_call 1041} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i247);
    call {:si_unique_call 1042} {:cexpr "tmp___29"} boogie_si_record_i32($i247);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} ldv_stop();
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb153:
    assume $i248 == 1;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i249 := $M.45;
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 1);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb155:
    assume $i250 == 1;
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} vslice_dummy_var_170 := loop_attr_do_show_sizelimit($p47, $p45, $p48);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1044} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb3:
    assume $i112 == 1;
    assume {:verifier.code 0} true;
    $i119 := $slt.i32($i111, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i111, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i111, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i121 == 1);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i243 := $M.44;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i244 := $ne.i32($i243, 0);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb147:
    assume $i244 == 1;
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} invoke_work_2();
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb22:
    assume $i121 == 1;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i236 := $M.43;
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i237 := $ne.i32($i236, 0);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb135:
    assume $i237 == 1;
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1033} $i238 := __VERIFIER_nondet_int();
    call {:si_unique_call 1034} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i238);
    call {:si_unique_call 1035} {:cexpr "tmp___28"} boogie_si_record_i32($i238);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} ldv_stop();
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb138:
    assume $i239 == 1;
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i240 := $M.43;
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, 1);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb140:
    assume $i241 == 1;
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} vslice_dummy_var_169 := loop_attr_do_show_offset($p43, $p40, $p41);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1037} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb20:
    assume $i120 == 1;
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i229 := $M.42;
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i230 := $ne.i32($i229, 0);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb123:
    assume $i230 == 1;
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1027} $i231 := __VERIFIER_nondet_int();
    call {:si_unique_call 1028} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i231);
    call {:si_unique_call 1029} {:cexpr "tmp___27"} boogie_si_record_i32($i231);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i232 := $eq.i32($i231, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} ldv_stop();
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb126:
    assume $i232 == 1;
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i233 := $M.42;
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 1);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb128:
    assume $i234 == 1;
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} vslice_dummy_var_168 := loop_attr_do_show_autoclear($p38, $p35, $p36);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1031} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb18:
    assume $i119 == 1;
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i111, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i111, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i123 == 1);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i188 := $M.41;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i189 := $ne.i32($i188, 0);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb85:
    assume $i189 == 1;
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1010} $i190 := __VERIFIER_nondet_int();
    call {:si_unique_call 1011} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i190);
    call {:si_unique_call 1012} {:cexpr "tmp___26"} boogie_si_record_i32($i190);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i191 := $slt.i32($i190, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    $i192 := $slt.i32($i190, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    $i193 := $slt.i32($i190, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i190, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i194 == 1);
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} ldv_stop();
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb94:
    assume $i194 == 1;
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i224 := $M.41;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 2);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb117:
    assume $i225 == 1;
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} vslice_dummy_var_167 := ldv_release_3();
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1024} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i227 := $M.48;
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i228 := $sub.i32($i227, 1);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $M.48 := $i228;
    call {:si_unique_call 1025} {:cexpr "ref_cnt"} boogie_si_record_i32($i228);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb92:
    assume $i193 == 1;
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i218 := $M.41;
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 2);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb114:
    assume $i219 == 1;
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p220 := $M.32;
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.29, $p8);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i222 := $load.i64($M.29, $p5);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} vslice_dummy_var_166 := loop_control_ioctl($p220, $i221, $i222);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1022} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb90:
    assume $i192 == 1;
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i209 := $M.41;
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 1);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb108:
    assume $i210 == 1;
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p211 := $M.31;
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p212 := $M.32;
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $i213 := ldv_nonseekable_open_20($p211, $p212);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $M.53 := $i213;
    call {:si_unique_call 1018} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i213);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i214 := $M.53;
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 0);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb110:
    assume $i215 == 1;
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1019} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i216 := $M.48;
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i217 := $add.i32($i216, 1);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $M.48 := $i217;
    call {:si_unique_call 1020} {:cexpr "ref_cnt"} boogie_si_record_i32($i217);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb88:
    assume $i191 == 1;
    assume {:verifier.code 0} true;
    $i195 := $slt.i32($i190, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i195 == 1);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i203 := $M.41;
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 2);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb105:
    assume $i204 == 1;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p205 := $M.32;
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i206 := $load.i64($M.29, $p6);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i207 := $load.i32($M.29, $p7);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} vslice_dummy_var_165 := noop_llseek($p205, $i206, $i207);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1016} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb97:
    assume $i195 == 1;
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i190, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb96;

  $bb99:
    assume $i196 == 1;
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i197 := $M.41;
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 2);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb101:
    assume $i198 == 1;
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p199 := $M.32;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.29, $p9);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i201 := $load.i64($M.29, $p10);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} vslice_dummy_var_164 := loop_control_ioctl($p199, $i200, $i201);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb26:
    assume $i123 == 1;
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i132 := $M.40;
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb43:
    assume $i133 == 1;
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 1} true;
    call {:si_unique_call 988} $i134 := __VERIFIER_nondet_int();
    call {:si_unique_call 989} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i134);
    call {:si_unique_call 990} {:cexpr "tmp___25"} boogie_si_record_i32($i134);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i134, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i134, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i134, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} ldv_stop();
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb50:
    assume $i137 == 1;
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i178 := $M.40;
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 3);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i183 := $M.40;
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 2);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb79:
    assume $i184 == 1;
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} vslice_dummy_var_163 := ldv_release_11();
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1007} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i186 := $M.48;
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i187 := $sub.i32($i186, 1);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $M.48 := $i187;
    call {:si_unique_call 1008} {:cexpr "ref_cnt"} boogie_si_record_i32($i187);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb76:
    assume $i179 == 1;
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} vslice_dummy_var_162 := ldv_release_11();
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i181 := $M.48;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i182 := $sub.i32($i181, 1);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $M.48 := $i182;
    call {:si_unique_call 1005} {:cexpr "ref_cnt"} boogie_si_record_i32($i182);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb48:
    assume $i136 == 1;
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i173 := $M.40;
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 1);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb73:
    assume $i174 == 1;
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} vslice_dummy_var_161 := ldv_setup_11();
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1001} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i176 := $M.48;
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i177 := $add.i32($i176, 1);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $M.48 := $i177;
    call {:si_unique_call 1002} {:cexpr "ref_cnt"} boogie_si_record_i32($i177);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb46:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i134, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i138 == 1);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i146 := $M.40;
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 1);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i155 := $M.40;
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 3);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i164 := $M.40;
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 2);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb70:
    assume $i165 == 1;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p166 := $M.30;
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.29, $p3);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.29, $p4);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.29, $p1);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.29, $p2);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i171 := $load.i64($M.29, $p0);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} vslice_dummy_var_160 := transfer_xor($p166, $i167, $p29, $i168, $p33, $i169, $i170, $i171);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 999} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb67:
    assume $i156 == 1;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p157 := $M.30;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.29, $p3);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.29, $p4);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.29, $p1);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.29, $p2);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i162 := $load.i64($M.29, $p0);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} vslice_dummy_var_159 := transfer_xor($p157, $i158, $p29, $i159, $p33, $i160, $i161, $i162);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 997} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(3);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb64:
    assume $i147 == 1;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p148 := $M.30;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.29, $p3);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.29, $p4);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.29, $p1);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.29, $p2);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i153 := $load.i64($M.29, $p0);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} vslice_dummy_var_158 := transfer_xor($p148, $i149, $p29, $i150, $p33, $i151, $i152, $i153);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 995} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb53:
    assume $i138 == 1;
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i134, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb52;

  $bb55:
    assume $i139 == 1;
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i140 := $M.40;
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 2);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb57:
    assume $i141 == 1;
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p142 := $M.30;
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $i143 := xor_init($p142, $p31);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.52 := $i143;
    call {:si_unique_call 992} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i143);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i144 := $M.52;
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 0);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb59:
    assume $i145 == 1;
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 993} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(3);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb24:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i111, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb13;

  $bb28:
    assume $i124 == 1;
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i125 := $M.39;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb30:
    assume $i126 == 1;
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 1} true;
    call {:si_unique_call 982} $i127 := __VERIFIER_nondet_int();
    call {:si_unique_call 983} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i127);
    call {:si_unique_call 984} {:cexpr "tmp___24"} boogie_si_record_i32($i127);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} ldv_stop();
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb33:
    assume $i128 == 1;
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i129 := $M.39;
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 1);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i130 == 1;
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} vslice_dummy_var_157 := loop_attr_do_show_partscan($p25, $p27, $p23);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 986} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb42_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 979} $i111 := __VERIFIER_nondet_int();
    call {:si_unique_call 980} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i111);
    call {:si_unique_call 981} {:cexpr "tmp___23"} boogie_si_record_i32($i111);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 351517);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    return;
}



const ldv_setup_11: ref;

axiom ldv_setup_11 == $sub.ref(0, 352549);

procedure ldv_setup_11() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_setup_11() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1104} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_11: ref;

axiom ldv_release_11 == $sub.ref(0, 353581);

procedure ldv_release_11() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_11() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1106} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1107} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_nonseekable_open_20: ref;

axiom ldv_nonseekable_open_20 == $sub.ref(0, 354613);

procedure ldv_nonseekable_open_20($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_nonseekable_open_20($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ldv_release_3: ref;

axiom ldv_release_3 == $sub.ref(0, 355645);

procedure ldv_release_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1108} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1109} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const loop_exit: ref;

axiom loop_exit == $sub.ref(0, 356677);

procedure loop_exit();
  free requires assertsPassed;
  modifies $M.41;



implementation loop_exit()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i0 := $M.56;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i6 := 1048576;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} vslice_dummy_var_179 := idr_for_each(loop_index_idr, loop_exit_cb, $0.ref);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} idr_destroy(loop_index_idr);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} blk_unregister_region(7340032, $i6);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} unregister_blkdev(7, .str.21);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} vslice_dummy_var_180 := ldv_misc_deregister_19(loop_misc);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i2 := $M.56;
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i3 := $M.24;
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i2, $i3);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const loop_init: ref;

axiom loop_init == $sub.ref(0, 357709);

procedure loop_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.57, $M.0, $M.26, $M.41, $M.31, $M.32, $CurrAddr;



implementation loop_init() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i32;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i39: i32;
  var $i40: i1;
  var $i37: i32;
  var $i17: i32;
  var $i3: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} $i1 := ldv_misc_register_17(loop_misc);
    call {:si_unique_call 1117} {:cexpr "err"} boogie_si_record_i32($i1);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 1118} {:cexpr "part_shift"} boogie_si_record_i32(0);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i4 := $M.57;
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $M.24;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i15 := $shl.i64(1, $i14);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i64($i15, 256);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i18 := $M.56;
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i20 := $M.24;
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(20, $i20);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i23 := $shl.i64(1, $i22);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i64($i19, $i23);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i25 := $M.56;
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i32, $i33 := 1048576, 8;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $i34 := register_blkdev(7, .str.21);
    call {:si_unique_call 1126} {:cexpr "tmp"} boogie_si_record_i32($i34);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} blk_register_region(7340032, $i32, __this_module, loop_probe, $0.ref, $0.ref);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} mutex_lock_nested(loop_index_mutex, 0);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32(0, $i33);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} mutex_unlock(loop_index_mutex);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} vslice_dummy_var_183 := printk.ref(.str.23);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb21:
    assume $i36 == 1;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb24;

  $bb24:
    call $i39, $i40, $i37, vslice_dummy_var_182 := loop_init_loop_$bb24($p0, $i33, $i39, $i40, $i37, vslice_dummy_var_182);
    goto $bb24_last;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} vslice_dummy_var_182 := loop_add($p0, $i37);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i37, 1);
    call {:si_unique_call 1130} {:cexpr "i"} boogie_si_record_i32($i39);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, $i33);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i40 == 1);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb26:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i37 := $i39;
    goto $bb26_dummy;

  $bb18:
    assume $i35 == 1;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 5);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} vslice_dummy_var_181 := ldv_misc_deregister_18(loop_misc);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i3 := $i17;
    goto $bb3;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i27 := $M.56;
    call {:si_unique_call 1123} {:cexpr "nr"} boogie_si_record_i32($i27);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i28 := $M.56;
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i29 := $M.24;
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i28, $i29);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    call {:si_unique_call 1124} {:cexpr "range"} boogie_si_record_i64($i31);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i31, $i27;
    goto $bb17;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb10;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb10;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i6 := $M.57;
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $i7 := fls($i6);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $M.24 := $i7;
    call {:si_unique_call 1120} {:cexpr "part_shift"} boogie_si_record_i32($i7);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i8 := $M.24;
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i10 := $shl.i64(1, $i9);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i11, 1);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $M.57 := $i12;
    call {:si_unique_call 1121} {:cexpr "max_part"} boogie_si_record_i32($i12);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4986;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 358741);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i0 := $M.2;
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} ldv_error();
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const ldv_misc_register_17: ref;

axiom ldv_misc_register_17 == $sub.ref(0, 359773);

procedure ldv_misc_register_17($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.31, $M.32, $M.0, $CurrAddr;



implementation ldv_misc_register_17($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $i1 := misc_register($p0);
    call {:si_unique_call 1135} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1136} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} ldv_file_operations_3();
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fls: ref;

axiom fls == $sub.ref(0, 360805);

procedure fls($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fls($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} {:cexpr "fls:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 1139} $i1 := devirtbounce.12(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 1140} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const register_blkdev: ref;

axiom register_blkdev == $sub.ref(0, 361837);

procedure register_blkdev($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_blkdev($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1141} {:cexpr "register_blkdev:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1142} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1143} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const loop_probe: ref;

axiom loop_probe == $sub.ref(0, 362869);

procedure loop_probe($i0: i32, $p1: ref, $p2: ref) returns ($r: ref);



const blk_register_region: ref;

axiom blk_register_region == $sub.ref(0, 363901);

procedure blk_register_region($i0: i32, $i1: i64, $p2: ref, $p3: ref, $p4: ref, $p5: ref);
  free requires assertsPassed;



implementation blk_register_region($i0: i32, $i1: i64, $p2: ref, $p3: ref, $p4: ref, $p5: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} {:cexpr "blk_register_region:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1145} {:cexpr "blk_register_region:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    return;
}



const ldv_misc_deregister_18: ref;

axiom ldv_misc_deregister_18 == $sub.ref(0, 364933);

procedure ldv_misc_deregister_18($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41;



implementation ldv_misc_deregister_18($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $i1 := misc_deregister($p0);
    call {:si_unique_call 1147} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 1148} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const misc_deregister: ref;

axiom misc_deregister == $sub.ref(0, 365965);

procedure misc_deregister($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation misc_deregister($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1149} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1150} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const get_disk: ref;

axiom get_disk == $sub.ref(0, 366997);

procedure get_disk($p0: ref) returns ($r: ref);



const misc_register: ref;

axiom misc_register == $sub.ref(0, 368029);

procedure misc_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation misc_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1151} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1152} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const loop_exit_cb: ref;

axiom loop_exit_cb == $sub.ref(0, 369061);

procedure loop_exit_cb($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);



const idr_destroy: ref;

axiom idr_destroy == $sub.ref(0, 370093);

procedure idr_destroy($p0: ref);
  free requires assertsPassed;



implementation idr_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    return;
}



const blk_unregister_region: ref;

axiom blk_unregister_region == $sub.ref(0, 371125);

procedure blk_unregister_region($i0: i32, $i1: i64);
  free requires assertsPassed;



implementation blk_unregister_region($i0: i32, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} {:cexpr "blk_unregister_region:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1154} {:cexpr "blk_unregister_region:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    return;
}



const unregister_blkdev: ref;

axiom unregister_blkdev == $sub.ref(0, 372157);

procedure unregister_blkdev($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation unregister_blkdev($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} {:cexpr "unregister_blkdev:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    return;
}



const ldv_misc_deregister_19: ref;

axiom ldv_misc_deregister_19 == $sub.ref(0, 373189);

procedure ldv_misc_deregister_19($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41;



implementation ldv_misc_deregister_19($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i1 := misc_deregister($p0);
    call {:si_unique_call 1157} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 1158} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 374221);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1159} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 1} true;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 375253);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 376285);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 377317);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 378349);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 379381);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 380413);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 381445);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 382477);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 383509);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 384541);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 385573);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 386605);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 387637);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1160} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1161} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1162} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1163} __VERIFIER_assume($i4);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 388669);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 389701);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 390733);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 391765);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 392797);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1164} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1165} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1166} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1167} __VERIFIER_assume($i4);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 393829);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 394861);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 395893);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 396925);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 397957);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1168} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1169} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1170} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1171} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1172} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1173} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1174} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1175} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1176} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1177} __VERIFIER_assume($i7);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1178} __VERIFIER_assume($i11);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 398989);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 400021);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 401053);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 402085);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 403117);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 404149);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 405181);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 406213);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 407245);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1179} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1180} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1181} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1182} __VERIFIER_assume($i10);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 408277);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1183} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1184} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1185} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 409309);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1186} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1187} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 410341);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 411373);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1188} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1189} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 412405);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 413437);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 414469);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_111: [ref]i8;
  var cmdloc_dummy_var_112: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1190} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1191} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1192} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1193} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $p6 := malloc($i5);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_111 := $M.0;
    call {:si_unique_call 1195} cmdloc_dummy_var_112 := $memset.i8(cmdloc_dummy_var_111, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_112;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 415501);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 416533);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.62, $M.63, $M.64, $M.57, $M.56, $M.0, $M.24, $M.107, $M.1, $M.55, $M.53, $M.52, $M.54, $M.12, $M.32, $M.47, $M.16, $M.42, $M.46, $M.33, $M.48, $M.41, $M.14, $M.15, $M.43, $M.11, $M.17, $M.35, $M.31, $M.40, $M.10, $M.34, $M.44, $M.51, $M.49, $M.39, $M.36, $M.13, $M.50, $M.30, $M.38, $M.37, $M.45, $M.2, $M.113, $M.114, $M.115, $M.116;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1196} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.62 := $store.i8($M.62, __kstrtab_loop_register_transfer, 108);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(1, 1)), 111);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(2, 1)), 111);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(3, 1)), 112);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(4, 1)), 95);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(5, 1)), 114);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(6, 1)), 101);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(7, 1)), 103);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(8, 1)), 105);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(9, 1)), 115);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(10, 1)), 116);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(11, 1)), 101);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(12, 1)), 114);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(13, 1)), 95);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(15, 1)), 114);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(16, 1)), 97);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(17, 1)), 110);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(18, 1)), 115);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(19, 1)), 102);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(21, 1)), 114);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(__kstrtab_loop_register_transfer, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.63 := $store.ref($M.63, loop_attr_partscan, .str.28);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(loop_attr_partscan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(loop_attr_partscan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(loop_attr_partscan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_partscan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_partscan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_partscan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_partscan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_partscan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_partscan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_partscan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_partscan, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(loop_attr_partscan, $mul.ref(0, 48)), $mul.ref(32, 1)), loop_attr_do_show_partscan);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(loop_attr_partscan, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.63 := $store.ref($M.63, loop_attr_autoclear, .str.27);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(loop_attr_autoclear, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(loop_attr_autoclear, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(loop_attr_autoclear, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_autoclear, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_autoclear, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_autoclear, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_autoclear, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_autoclear, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_autoclear, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_autoclear, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_autoclear, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(loop_attr_autoclear, $mul.ref(0, 48)), $mul.ref(32, 1)), loop_attr_do_show_autoclear);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(loop_attr_autoclear, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.63 := $store.ref($M.63, loop_attr_sizelimit, .str.26);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(loop_attr_sizelimit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(loop_attr_sizelimit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(loop_attr_sizelimit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_sizelimit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_sizelimit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_sizelimit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_sizelimit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_sizelimit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_sizelimit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_sizelimit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_sizelimit, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(loop_attr_sizelimit, $mul.ref(0, 48)), $mul.ref(32, 1)), loop_attr_do_show_sizelimit);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(loop_attr_sizelimit, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.63 := $store.ref($M.63, loop_attr_offset, .str.25);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(loop_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(loop_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(loop_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(loop_attr_offset, $mul.ref(0, 48)), $mul.ref(32, 1)), loop_attr_do_show_offset);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(loop_attr_offset, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.63 := $store.ref($M.63, loop_attr_backing_file, .str.24);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(loop_attr_backing_file, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(loop_attr_backing_file, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(loop_attr_backing_file, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_backing_file, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_backing_file, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_backing_file, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_backing_file, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_backing_file, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_backing_file, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_backing_file, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_attr_backing_file, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(loop_attr_backing_file, $mul.ref(0, 48)), $mul.ref(32, 1)), loop_attr_do_show_backing_file);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(loop_attr_backing_file, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.64 := $store.ref($M.64, loop_attrs, loop_attr_backing_file);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(loop_attrs, $mul.ref(0, 48)), $mul.ref(1, 8)), loop_attr_offset);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(loop_attrs, $mul.ref(0, 48)), $mul.ref(2, 8)), loop_attr_sizelimit);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(loop_attrs, $mul.ref(0, 48)), $mul.ref(3, 8)), loop_attr_autoclear);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(loop_attrs, $mul.ref(0, 48)), $mul.ref(4, 8)), loop_attr_partscan);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(loop_attrs, $mul.ref(0, 48)), $mul.ref(5, 8)), $0.ref);
    $M.57 := 0;
    call {:si_unique_call 1197} {:cexpr "max_part"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1198} {:cexpr "max_loop"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, lo_fops, lo_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(lo_fops, $mul.ref(0, 104)), $mul.ref(8, 1)), lo_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(lo_fops, $mul.ref(0, 104)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(lo_fops, $mul.ref(0, 104)), $mul.ref(24, 1)), lo_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(lo_fops, $mul.ref(0, 104)), $mul.ref(32, 1)), lo_compat_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(lo_fops, $mul.ref(0, 104)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(lo_fops, $mul.ref(0, 104)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(lo_fops, $mul.ref(0, 104)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(lo_fops, $mul.ref(0, 104)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(lo_fops, $mul.ref(0, 104)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(lo_fops, $mul.ref(0, 104)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(lo_fops, $mul.ref(0, 104)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(lo_fops, $mul.ref(0, 104)), $mul.ref(96, 1)), __this_module);
    $M.24 := 0;
    call {:si_unique_call 1199} {:cexpr "part_shift"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, loop_mq_ops, loop_queue_rq);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(loop_mq_ops, $mul.ref(0, 64)), $mul.ref(8, 1)), blk_mq_map_queue);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(loop_mq_ops, $mul.ref(0, 64)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(loop_mq_ops, $mul.ref(0, 64)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(loop_mq_ops, $mul.ref(0, 64)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(loop_mq_ops, $mul.ref(0, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(loop_mq_ops, $mul.ref(0, 64)), $mul.ref(48, 1)), loop_init_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(loop_mq_ops, $mul.ref(0, 64)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i32($M.0, loop_index_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.13);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(loop_index_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(loop_index_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), loop_index_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.14);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(loop_index_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.107 := $store.i8($M.107, __kstrtab_loop_unregister_transfer, 108);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(1, 1)), 111);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(2, 1)), 111);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(3, 1)), 112);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(4, 1)), 95);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(5, 1)), 117);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(6, 1)), 110);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(7, 1)), 114);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(8, 1)), 101);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(9, 1)), 103);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(10, 1)), 105);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(11, 1)), 115);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(12, 1)), 116);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(13, 1)), 101);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(14, 1)), 114);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(15, 1)), 95);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(16, 1)), 116);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(17, 1)), 114);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(18, 1)), 97);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(19, 1)), 110);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(20, 1)), 115);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(21, 1)), 102);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(22, 1)), 101);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(23, 1)), 114);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(__kstrtab_loop_unregister_transfer, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.ref($M.0, loop_index_idr, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(loop_index_idr, $mul.ref(0, 112)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(loop_index_idr, $mul.ref(0, 112)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(loop_index_idr, $mul.ref(0, 112)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(loop_index_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(loop_index_idr, $mul.ref(0, 112)), $mul.ref(96, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(loop_index_idr, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i32($M.0, xor_funcs, 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xor_funcs, $mul.ref(0, 48)), $mul.ref(8, 1)), transfer_xor);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xor_funcs, $mul.ref(0, 48)), $mul.ref(16, 1)), xor_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xor_funcs, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xor_funcs, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(xor_funcs, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i32($M.0, none_funcs, 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(none_funcs, $mul.ref(0, 48)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(none_funcs, $mul.ref(0, 48)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(none_funcs, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(none_funcs, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(none_funcs, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, xfer_funcs, none_funcs);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(1, 8)), xor_funcs);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(2, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(3, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(4, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(5, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(6, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(7, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(8, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(9, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(10, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(11, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(12, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(13, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(14, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(15, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(16, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(17, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(18, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xfer_funcs, $mul.ref(0, 160)), $mul.ref(19, 8)), $0.ref);
    $M.55 := 0;
    call {:si_unique_call 1200} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 1201} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 1202} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 1203} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.12 := 0;
    call {:si_unique_call 1204} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    $M.32 := $0.ref;
    $M.47 := 0;
    call {:si_unique_call 1205} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.16 := 0;
    call {:si_unique_call 1206} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 1207} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1208} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 1209} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1210} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1211} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.14 := 0;
    call {:si_unique_call 1212} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    $M.15 := $0.ref;
    $M.43 := 0;
    call {:si_unique_call 1213} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.11 := $0.ref;
    $M.17 := $0.ref;
    $M.35 := 0;
    call {:si_unique_call 1214} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.31 := $0.ref;
    $M.40 := 0;
    call {:si_unique_call 1215} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.10 := 0;
    call {:si_unique_call 1216} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 1217} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1218} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1219} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1220} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1221} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 1222} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.13 := $0.ref;
    $M.50 := 0;
    call {:si_unique_call 1223} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.30 := $0.ref;
    $M.38 := $0.ref;
    $M.37 := $0.ref;
    $M.45 := 0;
    call {:si_unique_call 1224} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.2 := 1;
    call {:si_unique_call 1225} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
    $M.0 := $store.i8($M.0, .str, 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(9, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(14, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(18, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.13, 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(9, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(15, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(16, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(17, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(19, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(21, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(24, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(25, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.14, 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 17)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 17)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 17)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 17)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 17)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 17)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 17)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 17)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 17)), $mul.ref(9, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 17)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 17)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 17)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 17)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 17)), $mul.ref(15, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.30, 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(21, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.113 := $store.i8($M.113, .str.18, 108);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(1, 1)), 111);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(2, 1)), 111);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(3, 1)), 112);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(4, 1)), 37);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(5, 1)), 100);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.114 := $store.i8($M.114, .str.19, 37);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.19, $mul.ref(0, 6)), $mul.ref(1, 1)), 108);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.19, $mul.ref(0, 6)), $mul.ref(2, 1)), 108);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.19, $mul.ref(0, 6)), $mul.ref(3, 1)), 117);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.19, $mul.ref(0, 6)), $mul.ref(4, 1)), 10);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.19, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.115 := $store.i8($M.115, .str.10, 49);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.10, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.115 := $store.i8($M.115, .str.11, 48);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.11, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.116 := $store.i8($M.116, .str.9, 37);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    call {:si_unique_call 1226} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 417565);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    $i4 := $eq.ref(loop_register_transfer, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1227} $i2 := loop_register_transfer($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 1228} $i3 := __builtinx_object_size();
    $r := $i3;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 418597);

procedure devirtbounce.1(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 419629);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 420661);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 421693);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 422725);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i64, arg3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i64, arg3: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 423757);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i32, arg4: ref, arg5: i32, arg6: i32, arg7: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i32, arg4: ref, arg5: i32, arg6: i32, arg7: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(transfer_xor, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 1229} $i1 := transfer_xor(arg, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    $r := $i1;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 1230} $i2 := __builtinx_object_size();
    $r := $i2;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 424789);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1231} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 425821);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(nonseekable_open, $p0);
    assume {:branchcond $i12} true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i11 == 1);
    $i10 := $eq.ref(loop_queue_rq, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i10 == 1);
    $i9 := $eq.ref(xor_init, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    call {:si_unique_call 1232} $i1 := xor_init(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i10 == 1;
    $p2 := $bitcast.ref.ref(arg);
    $p3 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1233} $i4 := loop_queue_rq($p2, $p3);
    $r := $i4;
    return;

  $bb4:
    assume $i11 == 1;
    call {:si_unique_call 1234} $i5 := __builtinx_object_size();
    $r := $i5;
    return;

  $bb5:
    assume $i12 == 1;
    $p6 := $bitcast.ref.ref(arg);
    $p7 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1235} $i8 := nonseekable_open($p6, $p7);
    $r := $i8;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 426853);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 427885);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1236} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 428917);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(loop_attr_partscan_show, $p0);
    assume {:branchcond $i10} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(loop_attr_autoclear_show, $p0);
    assume {:branchcond $i9} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(loop_attr_sizelimit_show, $p0);
    assume {:branchcond $i8} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(loop_attr_offset_show, $p0);
    assume {:branchcond $i7} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i7 == 1);
    $i6 := $eq.ref(loop_attr_backing_file_show, $p0);
    assume {:branchcond $i6} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    call {:si_unique_call 1237} $i1 := loop_attr_backing_file_show(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i7 == 1;
    call {:si_unique_call 1238} $i2 := loop_attr_offset_show(arg, arg1);
    $r := $i2;
    return;

  $bb4:
    assume $i8 == 1;
    call {:si_unique_call 1239} $i3 := loop_attr_sizelimit_show(arg, arg1);
    $r := $i3;
    return;

  $bb5:
    assume $i9 == 1;
    call {:si_unique_call 1240} $i4 := loop_attr_autoclear_show(arg, arg1);
    $r := $i4;
    return;

  $bb6:
    assume $i10 == 1;
    call {:si_unique_call 1241} $i5 := loop_attr_partscan_show(arg, arg1);
    $r := $i5;
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 429949);

procedure devirtbounce.12(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1242} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.62, $M.63, $M.64, $M.57, $M.56, $M.0, $M.24, $M.107, $M.1, $M.55, $M.53, $M.52, $M.54, $M.12, $M.32, $M.47, $M.16, $M.42, $M.46, $M.33, $M.48, $M.41, $M.14, $M.15, $M.43, $M.11, $M.17, $M.35, $M.31, $M.40, $M.10, $M.34, $M.44, $M.51, $M.49, $M.39, $M.36, $M.13, $M.50, $M.30, $M.38, $M.37, $M.45, $M.2, $M.113, $M.114, $M.115, $M.116, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1243} __SMACK_static_init();
    call {:si_unique_call 1244} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.29, $M.39, $M.40, $M.41, $M.42, $M.43, $M.10, $M.12, $M.14, $M.16, $M.44, $M.45, $M.33, $M.34, $M.35, $M.36, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.0, $M.53, $M.54, $M.38, $M.30, $M.55, $M.62, $M.63, $M.64, $M.57, $M.56, $M.24, $M.107, $M.1, $M.32, $M.15, $M.11, $M.17, $M.31, $M.13, $M.37, $M.2, $M.113, $M.114, $M.115, $M.116, $CurrAddr, $M.26, $M.25, $M.4, $M.5, $M.6, $M.7, $M.8, $M.21, $M.22, $M.3, $M.9, $M.23;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation transfer_xor_loop_$bb7(in_$i6: i32, in_$p18: ref, in_$i20: i32, in_$p25: ref, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i22: i32, in_$p23: ref, in_$p24: ref) returns (out_$p25: ref, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i22: i32, out_$p23: ref, out_$p24: ref)
{

  entry:
    out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i22, out_$p23, out_$p24 := in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i22, in_$p23, in_$p24;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_96;

  $bb9:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i22, out_$p23, out_$p24 := out_$i37, out_$p25, out_$p26;
    goto $bb9_dummy;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i37, in_$i6);
    goto corral_source_split_112;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i22, 1);
    call {:si_unique_call 19} {:cexpr "i"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_111;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p23, out_$i36);
    goto corral_source_split_110;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i32.i8(out_$i35);
    goto corral_source_split_109;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    out_$i35 := $xor.i32(out_$i28, out_$i34);
    goto corral_source_split_108;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i8.i32(out_$i33);
    goto corral_source_split_107;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i8($M.0, out_$p32);
    goto corral_source_split_106;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(in_$p18, $mul.ref(out_$i31, 1));
    goto corral_source_split_105;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    goto corral_source_split_104;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    out_$i30 := $srem.i32(out_$i29, in_$i20);
    goto corral_source_split_103;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i32(out_$i22, 511);
    goto corral_source_split_102;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i8.i32(out_$i27);
    goto corral_source_split_101;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i8($M.0, out_$p24);
    goto corral_source_split_100;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p24, $mul.ref(1, 1));
    goto corral_source_split_99;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p23, $mul.ref(1, 1));
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i22, out_$p23, out_$p24 := transfer_xor_loop_$bb7(in_$i6, in_$p18, in_$i20, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i22, out_$p23, out_$p24);
    return;

  exit:
    return;
}



procedure transfer_xor_loop_$bb7(in_$i6: i32, in_$p18: ref, in_$i20: i32, in_$p25: ref, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i22: i32, in_$p23: ref, in_$p24: ref) returns (out_$p25: ref, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i22: i32, out_$p23: ref, out_$p24: ref);
  modifies $M.0;



implementation lo_write_transfer_loop_$bb15(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p36: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$i47: i64, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$i54: i32, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$p75: ref, in_$i76: i32, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p82: ref, in_$i83: i32, in_$i84: i64, in_$p86: ref, in_$i87: i32, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p97: ref, in_$i98: i32, in_$i99: i64, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$i104: i1, in_$i105: i32, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p112: ref, in_$i113: i32, in_$i114: i64, in_$p116: ref, in_$i117: i32, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i73: i32, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8) returns (out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$i47: i64, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$i54: i32, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$p75: ref, out_$i76: i32, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p82: ref, out_$i83: i32, out_$i84: i64, out_$p86: ref, out_$i87: i32, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p97: ref, out_$i98: i32, out_$i99: i64, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$i104: i1, out_$i105: i32, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p112: ref, out_$i113: i32, out_$i114: i64, out_$p116: ref, out_$i117: i32, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i73: i32, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8)
{

  entry:
    out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$p75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p97, out_$i98, out_$i99, out_$p101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p112, out_$i113, out_$i114, out_$p116, out_$i117, out_$p119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i73, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8 := in_$p40, in_$p41, in_$p42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p56, in_$p57, in_$p58, in_$i59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$p66, in_$p67, in_$p68, in_$p69, in_$i70, in_$i71, in_$i72, in_$p75, in_$i76, in_$p77, in_$p78, in_$p79, in_$p80, in_$p82, in_$i83, in_$i84, in_$p86, in_$i87, in_$p89, in_$i90, in_$i91, in_$p92, in_$p93, in_$p94, in_$p95, in_$p97, in_$i98, in_$i99, in_$p101, in_$p102, in_$p103, in_$i104, in_$i105, in_$p106, in_$p107, in_$p108, in_$p109, in_$p110, in_$p112, in_$i113, in_$i114, in_$p116, in_$i117, in_$p119, in_$i120, in_$i121, in_$p122, in_$p123, in_$p124, in_$i73, in_cmdloc_dummy_var_6, in_cmdloc_dummy_var_7, in_cmdloc_dummy_var_8;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_545;

  $bb24:
    assume {:verifier.code 0} true;
    assume out_$i72 == 1;
    goto $bb24_dummy;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i63;
    assume true;
    goto $bb24;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i71, 0);
    goto corral_source_split_624;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.0, in_$p36);
    goto corral_source_split_623;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} bio_advance_iter(out_$p67, out_$p68, out_$i70);
    goto corral_source_split_622;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.5, out_$p69);
    goto corral_source_split_621;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_620;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_619;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_618;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_617;

  $bb22:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    out_$i65 := out_$i63;
    assume true;
    goto $bb22;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i63, 0);
    goto corral_source_split_613;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} out_$i63 := lo_write_bvec(out_$p62, in_$p5, in_$p3);
    call {:si_unique_call 130} {:cexpr "ret"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_612;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_611;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_610;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p60, out_$i59);
    goto corral_source_split_609;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_608;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.5, out_$p58);
    goto corral_source_split_607;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_606;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p57, 0);
    goto corral_source_split_605;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_604;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p56, in_$p8);
    goto corral_source_split_603;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_602;

  $bb18:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i48;
    assume true;
    goto $bb18;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i52, 0);
    goto corral_source_split_587;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} out_$i52 := ldv__builtin_expect(out_$i51, 0);
    call {:si_unique_call 128} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_586;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i50);
    goto corral_source_split_585;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i1.i32(out_$i49);
    goto corral_source_split_584;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i48, 0);
    goto corral_source_split_583;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} out_$i48 := lo_do_transfer(in_$p0, 1, in_$p8, 0, out_$p41, out_$i43, out_$i45, out_$i47);
    call {:si_unique_call 126} {:cexpr "ret"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_582;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    out_$i47 := $ashr.i64(out_$i46, 9);
    goto corral_source_split_581;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i64($M.4, in_$p3);
    goto corral_source_split_580;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.5, out_$p44);
    goto corral_source_split_579;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_578;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.5, out_$p42);
    goto corral_source_split_577;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_576;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.5, out_$p40);
    goto corral_source_split_575;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_574;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_6 := $M.5;
    out_cmdloc_dummy_var_7 := $M.5;
    call {:si_unique_call 132} out_cmdloc_dummy_var_8 := $memcpy.i8(out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_$p123, out_$p124, 16, $zext.i32.i64(8), 0 == 1);
    $M.5 := out_cmdloc_dummy_var_8;
    goto corral_source_split_652;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    out_$p124 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_651;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    out_$p123 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_650;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, out_$p122, out_$i121);
    goto corral_source_split_649;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p7, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_648;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    out_$i121 := $add.i32(out_$i117, out_$i120);
    goto corral_source_split_647;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.0, out_$p119);
    goto corral_source_split_646;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_645;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.0, out_$p116);
    goto corral_source_split_644;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p110, $mul.ref(out_$i114, 16)), $mul.ref(12, 1));
    goto corral_source_split_643;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    goto corral_source_split_642;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    out_$i114 := $zext.i32.i64(out_$i113);
    goto corral_source_split_641;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.0, out_$p112);
    goto corral_source_split_640;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_639;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.0, out_$p109);
    goto corral_source_split_638;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p108, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_637;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.0, out_$p107);
    goto corral_source_split_636;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_635;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, out_$p106, out_$i105);
    goto corral_source_split_634;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_633;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_632;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    out_$i105 := out_$i91;
    goto $bb28;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    out_$i105 := out_$i76;
    goto $bb28;

  $bb26:
    assume out_$i104 == 1;
    goto corral_source_split_628;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    out_$i104 := $ult.i32(out_$i76, out_$i91);
    goto corral_source_split_572;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p103, out_$p102);
    goto corral_source_split_571;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_570;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.0, out_$p101);
    goto corral_source_split_569;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p95, $mul.ref(out_$i99, 16)), $mul.ref(0, 1));
    goto corral_source_split_568;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    goto corral_source_split_567;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i32.i64(out_$i98);
    goto corral_source_split_566;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.0, out_$p97);
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_564;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_563;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p93, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_561;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    out_$i91 := $sub.i32(out_$i87, out_$i90);
    call {:si_unique_call 124} {:cexpr "_min2"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_559;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.0, out_$p89);
    goto corral_source_split_558;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_557;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.0, out_$p86);
    goto corral_source_split_556;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p80, $mul.ref(out_$i84, 16)), $mul.ref(8, 1));
    goto corral_source_split_555;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    goto corral_source_split_554;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i32.i64(out_$i83);
    goto corral_source_split_553;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.0, out_$p82);
    goto corral_source_split_552;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_551;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_550;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p78, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_549;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, out_$p77);
    goto corral_source_split_548;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_547;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.0, out_$p75);
    call {:si_unique_call 123} {:cexpr "_min1"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_546;

  $bb27:
    assume !(out_$i104 == 1);
    goto corral_source_split_630;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$p75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p97, out_$i98, out_$i99, out_$p101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p112, out_$i113, out_$i114, out_$p116, out_$i117, out_$p119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i73, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8 := lo_write_transfer_loop_$bb15(in_$p0, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p36, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$p75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p97, out_$i98, out_$i99, out_$p101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p112, out_$i113, out_$i114, out_$p116, out_$i117, out_$p119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i73, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8);
    return;

  exit:
    return;
}



procedure lo_write_transfer_loop_$bb15(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p36: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$i47: i64, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$i54: i32, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$p75: ref, in_$i76: i32, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p82: ref, in_$i83: i32, in_$i84: i64, in_$p86: ref, in_$i87: i32, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p97: ref, in_$i98: i32, in_$i99: i64, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$i104: i1, in_$i105: i32, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p112: ref, in_$i113: i32, in_$i114: i64, in_$p116: ref, in_$i117: i32, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i73: i32, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8) returns (out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$i47: i64, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$i54: i32, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$p75: ref, out_$i76: i32, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p82: ref, out_$i83: i32, out_$i84: i64, out_$p86: ref, out_$i87: i32, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p97: ref, out_$i98: i32, out_$i99: i64, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$i104: i1, out_$i105: i32, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p112: ref, out_$i113: i32, out_$i114: i64, out_$p116: ref, out_$i117: i32, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i73: i32, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8);
  modifies $M.0, $M.9, $CurrAddr, $M.6, $M.3, $M.5;



implementation lo_write_transfer_loop_$bb10(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p23: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$i47: i64, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$i54: i32, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$p75: ref, in_$i76: i32, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p82: ref, in_$i83: i32, in_$i84: i64, in_$p86: ref, in_$i87: i32, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p97: ref, in_$i98: i32, in_$i99: i64, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$i104: i1, in_$i105: i32, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p112: ref, in_$i113: i32, in_$i114: i64, in_$p116: ref, in_$i117: i32, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i73: i32, in_$i39: i32, in_$i55: i32, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$i131: i64, in_$i132: i1, in_$i28: i32, in_$i133: i32, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8) returns (out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$i47: i64, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$i54: i32, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$p75: ref, out_$i76: i32, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p82: ref, out_$i83: i32, out_$i84: i64, out_$p86: ref, out_$i87: i32, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p97: ref, out_$i98: i32, out_$i99: i64, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$i104: i1, out_$i105: i32, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p112: ref, out_$i113: i32, out_$i114: i64, out_$p116: ref, out_$i117: i32, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i73: i32, out_$i39: i32, out_$i55: i32, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$i131: i64, out_$i132: i1, out_$i28: i32, out_$i133: i32, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8)
{

  entry:
    out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$p75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p97, out_$i98, out_$i99, out_$p101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p112, out_$i113, out_$i114, out_$p116, out_$i117, out_$p119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i73, out_$i39, out_$i55, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$i28, out_$i133, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8 := in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p36, in_$i37, in_$i38, in_$p40, in_$p41, in_$p42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p56, in_$p57, in_$p58, in_$i59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$p66, in_$p67, in_$p68, in_$p69, in_$i70, in_$i71, in_$i72, in_$p75, in_$i76, in_$p77, in_$p78, in_$p79, in_$p80, in_$p82, in_$i83, in_$i84, in_$p86, in_$i87, in_$p89, in_$i90, in_$i91, in_$p92, in_$p93, in_$p94, in_$p95, in_$p97, in_$i98, in_$i99, in_$p101, in_$p102, in_$p103, in_$i104, in_$i105, in_$p106, in_$p107, in_$p108, in_$p109, in_$p110, in_$p112, in_$i113, in_$i114, in_$p116, in_$i117, in_$p119, in_$i120, in_$i121, in_$p122, in_$p123, in_$p124, in_$i73, in_$i39, in_$i55, in_$p125, in_$p126, in_$p127, in_$p128, in_$p129, in_$p130, in_$i131, in_$i132, in_$i28, in_$i133, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5, in_cmdloc_dummy_var_6, in_cmdloc_dummy_var_7, in_cmdloc_dummy_var_8;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_530;

  $bb30:
    assume out_$i132 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := out_$i55;
    goto $bb30_dummy;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    out_$i133 := out_$i55;
    assume true;
    goto $bb30;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    out_$i132 := $ne.i64(out_$i131, 0);
    goto corral_source_split_600;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    out_$i131 := $p2i.ref.i64(out_$p130);
    goto corral_source_split_599;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.0, in_$p23);
    goto corral_source_split_598;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p129, out_$p128);
    goto corral_source_split_597;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_596;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    out_$p128 := $load.ref($M.0, out_$p127);
    goto corral_source_split_595;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(out_$p126, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_594;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.0, out_$p125);
    goto corral_source_split_593;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_592;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_591;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i39;
    goto $bb19;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i65;
    goto $bb19;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i54;
    goto $bb19;

  $bb17:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_589;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i48;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i52, 0);
    goto corral_source_split_587;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} out_$i52 := ldv__builtin_expect(out_$i51, 0);
    call {:si_unique_call 128} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_586;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i50);
    goto corral_source_split_585;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i1.i32(out_$i49);
    goto corral_source_split_584;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i48, 0);
    goto corral_source_split_583;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} out_$i48 := lo_do_transfer(in_$p0, 1, in_$p8, 0, out_$p41, out_$i43, out_$i45, out_$i47);
    call {:si_unique_call 126} {:cexpr "ret"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_582;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    out_$i47 := $ashr.i64(out_$i46, 9);
    goto corral_source_split_581;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i64($M.4, in_$p3);
    goto corral_source_split_580;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.5, out_$p44);
    goto corral_source_split_579;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_578;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.5, out_$p42);
    goto corral_source_split_577;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_576;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.5, out_$p40);
    goto corral_source_split_575;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_574;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_6 := $M.5;
    out_cmdloc_dummy_var_7 := $M.5;
    call {:si_unique_call 132} out_cmdloc_dummy_var_8 := $memcpy.i8(out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_$p123, out_$p124, 16, $zext.i32.i64(8), 0 == 1);
    $M.5 := out_cmdloc_dummy_var_8;
    goto corral_source_split_652;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    out_$p124 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_651;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    out_$p123 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_650;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, out_$p122, out_$i121);
    goto corral_source_split_649;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p7, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_648;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    out_$i121 := $add.i32(out_$i117, out_$i120);
    goto corral_source_split_647;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.0, out_$p119);
    goto corral_source_split_646;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_645;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.0, out_$p116);
    goto corral_source_split_644;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p110, $mul.ref(out_$i114, 16)), $mul.ref(12, 1));
    goto corral_source_split_643;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    goto corral_source_split_642;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    out_$i114 := $zext.i32.i64(out_$i113);
    goto corral_source_split_641;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.0, out_$p112);
    goto corral_source_split_640;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_639;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.0, out_$p109);
    goto corral_source_split_638;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p108, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_637;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.0, out_$p107);
    goto corral_source_split_636;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_635;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, out_$p106, out_$i105);
    goto corral_source_split_634;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_633;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_632;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    out_$i105 := out_$i91;
    goto $bb28;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    out_$i105 := out_$i76;
    goto $bb28;

  $bb26:
    assume out_$i104 == 1;
    goto corral_source_split_628;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    out_$i104 := $ult.i32(out_$i76, out_$i91);
    goto corral_source_split_572;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p103, out_$p102);
    goto corral_source_split_571;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_570;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.0, out_$p101);
    goto corral_source_split_569;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p95, $mul.ref(out_$i99, 16)), $mul.ref(0, 1));
    goto corral_source_split_568;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    goto corral_source_split_567;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i32.i64(out_$i98);
    goto corral_source_split_566;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.0, out_$p97);
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_564;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_563;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p93, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_561;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    out_$i91 := $sub.i32(out_$i87, out_$i90);
    call {:si_unique_call 124} {:cexpr "_min2"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_559;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.0, out_$p89);
    goto corral_source_split_558;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_557;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.0, out_$p86);
    goto corral_source_split_556;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p80, $mul.ref(out_$i84, 16)), $mul.ref(8, 1));
    goto corral_source_split_555;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    goto corral_source_split_554;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i32.i64(out_$i83);
    goto corral_source_split_553;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.0, out_$p82);
    goto corral_source_split_552;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_551;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_550;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p78, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_549;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, out_$p77);
    goto corral_source_split_548;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_547;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.0, out_$p75);
    call {:si_unique_call 123} {:cexpr "_min1"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_546;

  $bb15:
    call out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$p75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p97, out_$i98, out_$i99, out_$p101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p112, out_$i113, out_$i114, out_$p116, out_$i117, out_$p119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i73, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8 := lo_write_transfer_loop_$bb15(in_$p0, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, out_$p36, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$p75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p97, out_$i98, out_$i99, out_$p101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p112, out_$i113, out_$i114, out_$p116, out_$i117, out_$p119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i73, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8);
    goto $bb15_last;

  $bb15_last:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_545;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb24:
    assume {:verifier.code 0} true;
    assume out_$i72 == 1;
    assume false;
    return;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i63;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i71, 0);
    goto corral_source_split_624;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.0, out_$p36);
    goto corral_source_split_623;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} bio_advance_iter(out_$p67, out_$p68, out_$i70);
    goto corral_source_split_622;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.5, out_$p69);
    goto corral_source_split_621;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_620;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_619;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_618;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_617;

  $bb22:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    out_$i65 := out_$i63;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i63, 0);
    goto corral_source_split_613;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} out_$i63 := lo_write_bvec(out_$p62, in_$p5, in_$p3);
    call {:si_unique_call 130} {:cexpr "ret"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_612;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_611;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_610;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p60, out_$i59);
    goto corral_source_split_609;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_608;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.5, out_$p58);
    goto corral_source_split_607;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_606;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p57, 0);
    goto corral_source_split_605;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_604;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p56, in_$p8);
    goto corral_source_split_603;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_602;

  $bb18:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume out_$i38 == 1;
    goto corral_source_split_543;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i28;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_541;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_540;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_539;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_3 := $M.0;
    out_cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 122} out_cmdloc_dummy_var_5 := $memcpy.i8(out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_$p33, out_$p34, 24, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_5;
    goto corral_source_split_538;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_537;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_536;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 136)), $mul.ref(32, 1));
    goto corral_source_split_535;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_534;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_533;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_532;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb27:
    assume !(out_$i104 == 1);
    goto corral_source_split_630;

  $bb21:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_615;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb14;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i73;
    goto $bb14;

  $bb25:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_626;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$p75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p97, out_$i98, out_$i99, out_$p101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p112, out_$i113, out_$i114, out_$p116, out_$i117, out_$p119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i73, out_$i39, out_$i55, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$i28, out_$i133, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8 := lo_write_transfer_loop_$bb10(in_$p0, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p23, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$p75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p97, out_$i98, out_$i99, out_$p101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p112, out_$i113, out_$i114, out_$p116, out_$i117, out_$p119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i73, out_$i39, out_$i55, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$i28, out_$i133, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8);
    return;

  exit:
    return;
}



procedure lo_write_transfer_loop_$bb10(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p23: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$i47: i64, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$i54: i32, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$p75: ref, in_$i76: i32, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p82: ref, in_$i83: i32, in_$i84: i64, in_$p86: ref, in_$i87: i32, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p97: ref, in_$i98: i32, in_$i99: i64, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$i104: i1, in_$i105: i32, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p112: ref, in_$i113: i32, in_$i114: i64, in_$p116: ref, in_$i117: i32, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i73: i32, in_$i39: i32, in_$i55: i32, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$i131: i64, in_$i132: i1, in_$i28: i32, in_$i133: i32, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8) returns (out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$i47: i64, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$i54: i32, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$p75: ref, out_$i76: i32, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p82: ref, out_$i83: i32, out_$i84: i64, out_$p86: ref, out_$i87: i32, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p97: ref, out_$i98: i32, out_$i99: i64, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$i104: i1, out_$i105: i32, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p112: ref, out_$i113: i32, out_$i114: i64, out_$p116: ref, out_$i117: i32, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i73: i32, out_$i39: i32, out_$i55: i32, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$i131: i64, out_$i132: i1, out_$i28: i32, out_$i133: i32, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8);
  modifies $M.0, $M.9, $CurrAddr, $M.3, $M.5, $M.6;



implementation lo_write_simple_loop_$bb11(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p27: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$i55: i32, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p69: ref, in_$i70: i32, in_$i71: i64, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i1, in_$i77: i32, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p84: ref, in_$i85: i32, in_$i86: i64, in_$p88: ref, in_$i89: i32, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i45: i32, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8, in_vslice_dummy_var_117: i32) returns (out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p54: ref, out_$i55: i32, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p69: ref, out_$i70: i32, out_$i71: i64, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i1, out_$i77: i32, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p84: ref, out_$i85: i32, out_$i86: i64, out_$p88: ref, out_$i89: i32, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i45: i32, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8, out_vslice_dummy_var_117: i32)
{

  entry:
    out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i45, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_vslice_dummy_var_117 := in_$p31, in_$p32, in_$i33, in_$i34, in_$i35, in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$i44, in_$p47, in_$i48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p54, in_$i55, in_$i56, in_$p58, in_$i59, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p69, in_$i70, in_$i71, in_$p73, in_$p74, in_$p75, in_$i76, in_$i77, in_$p78, in_$p79, in_$p80, in_$p81, in_$p82, in_$p84, in_$i85, in_$i86, in_$p88, in_$i89, in_$p91, in_$i92, in_$i93, in_$p94, in_$p95, in_$p96, in_$i45, in_cmdloc_dummy_var_12, in_cmdloc_dummy_var_13, in_cmdloc_dummy_var_14, in_vslice_dummy_var_117;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_692;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i44 == 1;
    goto $bb17_dummy;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i33;
    assume true;
    goto $bb17;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_748;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, in_$p27);
    goto corral_source_split_747;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} bio_advance_iter(out_$p39, out_$p40, out_$i42);
    goto corral_source_split_746;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.6, out_$p41);
    goto corral_source_split_745;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_744;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_743;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_742;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_741;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} out_vslice_dummy_var_117 := _cond_resched();
    goto corral_source_split_740;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} ___might_sleep(.str.8, 238, 0);
    goto corral_source_split_739;

  $bb14:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i33;
    assume true;
    goto $bb14;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i33, 0);
    goto corral_source_split_724;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} out_$i33 := lo_write_bvec(out_$p32, in_$p4, in_$p3);
    call {:si_unique_call 142} {:cexpr "ret"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_723;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_722;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_721;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_12 := $M.6;
    out_cmdloc_dummy_var_13 := $M.6;
    call {:si_unique_call 146} out_cmdloc_dummy_var_14 := $memcpy.i8(out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_$p95, out_$p96, 16, $zext.i32.i64(8), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_14;
    goto corral_source_split_776;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    out_$p96 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_775;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    out_$p95 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_774;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p94, out_$i93);
    goto corral_source_split_773;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p6, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_772;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i32(out_$i89, out_$i92);
    goto corral_source_split_771;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.0, out_$p91);
    goto corral_source_split_770;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_769;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.0, out_$p88);
    goto corral_source_split_768;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p82, $mul.ref(out_$i86, 16)), $mul.ref(12, 1));
    goto corral_source_split_767;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    goto corral_source_split_766;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i32.i64(out_$i85);
    goto corral_source_split_765;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i32($M.0, out_$p84);
    goto corral_source_split_764;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_763;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_762;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p80, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_761;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_760;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_759;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p78, out_$i77);
    goto corral_source_split_758;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_757;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_756;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i63;
    goto $bb21;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i48;
    goto $bb21;

  $bb19:
    assume out_$i76 == 1;
    goto corral_source_split_752;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    out_$i76 := $ult.i32(out_$i48, out_$i63);
    goto corral_source_split_719;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p75, out_$p74);
    goto corral_source_split_718;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_717;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_716;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i71, 16)), $mul.ref(0, 1));
    goto corral_source_split_715;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    goto corral_source_split_714;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i32.i64(out_$i70);
    goto corral_source_split_713;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, out_$p69);
    goto corral_source_split_712;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_711;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_710;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p65, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_709;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_708;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_707;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    out_$i63 := $sub.i32(out_$i59, out_$i62);
    call {:si_unique_call 140} {:cexpr "_min2"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_706;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_705;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_704;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_703;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p52, $mul.ref(out_$i56, 16)), $mul.ref(8, 1));
    goto corral_source_split_702;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    goto corral_source_split_701;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i32.i64(out_$i55);
    goto corral_source_split_700;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    goto corral_source_split_699;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_698;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_697;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p50, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_696;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_695;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_694;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    call {:si_unique_call 139} {:cexpr "_min1"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_693;

  $bb20:
    assume !(out_$i76 == 1);
    goto corral_source_split_754;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i45, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_vslice_dummy_var_117 := lo_write_simple_loop_$bb11(in_$p0, in_$p3, in_$p4, in_$p5, in_$p6, in_$p27, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i45, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_vslice_dummy_var_117);
    return;

  exit:
    return;
}



procedure lo_write_simple_loop_$bb11(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p27: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$i55: i32, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p69: ref, in_$i70: i32, in_$i71: i64, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i1, in_$i77: i32, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p84: ref, in_$i85: i32, in_$i86: i64, in_$p88: ref, in_$i89: i32, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i45: i32, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8, in_vslice_dummy_var_117: i32) returns (out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p54: ref, out_$i55: i32, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p69: ref, out_$i70: i32, out_$i71: i64, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i1, out_$i77: i32, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p84: ref, out_$i85: i32, out_$i86: i64, out_$p88: ref, out_$i89: i32, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i45: i32, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8, out_vslice_dummy_var_117: i32);
  modifies $M.0, $M.9, $CurrAddr, $M.6;



implementation lo_write_simple_loop_$bb6(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p14: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$i55: i32, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p69: ref, in_$i70: i32, in_$i71: i64, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i1, in_$i77: i32, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p84: ref, in_$i85: i32, in_$i86: i64, in_$p88: ref, in_$i89: i32, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i45: i32, in_$i30: i32, in_$i36: i32, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$i103: i64, in_$i104: i1, in_$i19: i32, in_$i105: i32, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8, in_vslice_dummy_var_117: i32) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p54: ref, out_$i55: i32, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p69: ref, out_$i70: i32, out_$i71: i64, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i1, out_$i77: i32, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p84: ref, out_$i85: i32, out_$i86: i64, out_$p88: ref, out_$i89: i32, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i45: i32, out_$i30: i32, out_$i36: i32, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$i103: i64, out_$i104: i1, out_$i19: i32, out_$i105: i32, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8, out_vslice_dummy_var_117: i32)
{

  entry:
    out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i45, out_$i30, out_$i36, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$i19, out_$i105, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_vslice_dummy_var_117 := in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p27, in_$i28, in_$i29, in_$p31, in_$p32, in_$i33, in_$i34, in_$i35, in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$i44, in_$p47, in_$i48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p54, in_$i55, in_$i56, in_$p58, in_$i59, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p69, in_$i70, in_$i71, in_$p73, in_$p74, in_$p75, in_$i76, in_$i77, in_$p78, in_$p79, in_$p80, in_$p81, in_$p82, in_$p84, in_$i85, in_$i86, in_$p88, in_$i89, in_$p91, in_$i92, in_$i93, in_$p94, in_$p95, in_$p96, in_$i45, in_$i30, in_$i36, in_$p97, in_$p98, in_$p99, in_$p100, in_$p101, in_$p102, in_$i103, in_$i104, in_$i19, in_$i105, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_cmdloc_dummy_var_11, in_cmdloc_dummy_var_12, in_cmdloc_dummy_var_13, in_cmdloc_dummy_var_14, in_vslice_dummy_var_117;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_677;

  $bb23:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i36;
    goto $bb23_dummy;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    out_$i105 := out_$i36;
    assume true;
    goto $bb23;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i64(out_$i103, 0);
    goto corral_source_split_737;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    out_$i103 := $p2i.ref.i64(out_$p102);
    goto corral_source_split_736;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.0, in_$p14);
    goto corral_source_split_735;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p101, out_$p100);
    goto corral_source_split_734;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_733;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.0, out_$p99);
    goto corral_source_split_732;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p98, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_731;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.0, out_$p97);
    goto corral_source_split_730;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_729;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_728;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i30;
    goto $bb15;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i35;
    goto $bb15;

  $bb13:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_726;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i33;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i33, 0);
    goto corral_source_split_724;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} out_$i33 := lo_write_bvec(out_$p32, in_$p4, in_$p3);
    call {:si_unique_call 142} {:cexpr "ret"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_723;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_722;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_721;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_12 := $M.6;
    out_cmdloc_dummy_var_13 := $M.6;
    call {:si_unique_call 146} out_cmdloc_dummy_var_14 := $memcpy.i8(out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_$p95, out_$p96, 16, $zext.i32.i64(8), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_14;
    goto corral_source_split_776;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    out_$p96 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_775;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    out_$p95 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_774;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p94, out_$i93);
    goto corral_source_split_773;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p6, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_772;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i32(out_$i89, out_$i92);
    goto corral_source_split_771;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.0, out_$p91);
    goto corral_source_split_770;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_769;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.0, out_$p88);
    goto corral_source_split_768;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p82, $mul.ref(out_$i86, 16)), $mul.ref(12, 1));
    goto corral_source_split_767;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    goto corral_source_split_766;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i32.i64(out_$i85);
    goto corral_source_split_765;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i32($M.0, out_$p84);
    goto corral_source_split_764;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_763;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_762;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p80, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_761;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_760;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_759;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p78, out_$i77);
    goto corral_source_split_758;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_757;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_756;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i63;
    goto $bb21;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i48;
    goto $bb21;

  $bb19:
    assume out_$i76 == 1;
    goto corral_source_split_752;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    out_$i76 := $ult.i32(out_$i48, out_$i63);
    goto corral_source_split_719;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p75, out_$p74);
    goto corral_source_split_718;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_717;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_716;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i71, 16)), $mul.ref(0, 1));
    goto corral_source_split_715;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    goto corral_source_split_714;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i32.i64(out_$i70);
    goto corral_source_split_713;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, out_$p69);
    goto corral_source_split_712;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_711;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_710;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p65, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_709;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_708;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_707;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    out_$i63 := $sub.i32(out_$i59, out_$i62);
    call {:si_unique_call 140} {:cexpr "_min2"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_706;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_705;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_704;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_703;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p52, $mul.ref(out_$i56, 16)), $mul.ref(8, 1));
    goto corral_source_split_702;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    goto corral_source_split_701;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i32.i64(out_$i55);
    goto corral_source_split_700;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    goto corral_source_split_699;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_698;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_697;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p50, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_696;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_695;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_694;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    call {:si_unique_call 139} {:cexpr "_min1"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_693;

  $bb11:
    call out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i45, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_vslice_dummy_var_117 := lo_write_simple_loop_$bb11(in_$p0, in_$p3, in_$p4, in_$p5, in_$p6, out_$p27, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i45, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_vslice_dummy_var_117);
    goto $bb11_last;

  $bb11_last:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_692;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i44 == 1;
    assume false;
    return;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i33;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_748;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p27);
    goto corral_source_split_747;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} bio_advance_iter(out_$p39, out_$p40, out_$i42);
    goto corral_source_split_746;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.6, out_$p41);
    goto corral_source_split_745;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_744;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_743;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_742;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_741;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} out_vslice_dummy_var_117 := _cond_resched();
    goto corral_source_split_740;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} ___might_sleep(.str.8, 238, 0);
    goto corral_source_split_739;

  $bb14:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume out_$i29 == 1;
    goto corral_source_split_690;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i19;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_688;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_687;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_686;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_9 := $M.0;
    out_cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 138} out_cmdloc_dummy_var_11 := $memcpy.i8(out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_$p24, out_$p25, 24, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_11;
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_684;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_683;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 136)), $mul.ref(32, 1));
    goto corral_source_split_682;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_681;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_680;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_679;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb20:
    assume !(out_$i76 == 1);
    goto corral_source_split_754;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i29 == 1);
    goto $bb10;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i45;
    goto $bb10;

  $bb18:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_750;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i45, out_$i30, out_$i36, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$i19, out_$i105, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_vslice_dummy_var_117 := lo_write_simple_loop_$bb6(in_$p0, in_$p3, in_$p4, in_$p5, in_$p6, in_$p14, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p69, out_$i70, out_$i71, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i45, out_$i30, out_$i36, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$i19, out_$i105, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_vslice_dummy_var_117);
    return;

  exit:
    return;
}



procedure lo_write_simple_loop_$bb6(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p14: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$i55: i32, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p69: ref, in_$i70: i32, in_$i71: i64, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i1, in_$i77: i32, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p84: ref, in_$i85: i32, in_$i86: i64, in_$p88: ref, in_$i89: i32, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i45: i32, in_$i30: i32, in_$i36: i32, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$i103: i64, in_$i104: i1, in_$i19: i32, in_$i105: i32, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8, in_vslice_dummy_var_117: i32) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p54: ref, out_$i55: i32, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p69: ref, out_$i70: i32, out_$i71: i64, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i1, out_$i77: i32, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p84: ref, out_$i85: i32, out_$i86: i64, out_$p88: ref, out_$i89: i32, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i45: i32, out_$i30: i32, out_$i36: i32, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$i103: i64, out_$i104: i1, out_$i19: i32, out_$i105: i32, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8, out_vslice_dummy_var_117: i32);
  modifies $M.0, $M.9, $CurrAddr, $M.6;



implementation lo_read_transfer_loop_$bb31(in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$p75: ref) returns (out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$p75: ref)
{

  entry:
    out_$p76, out_$p77, out_$i78, out_$i79, out_$p75 := in_$p76, in_$p77, in_$i78, in_$i79, in_$p75;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_908;

  $bb33:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$p75 := out_$p77;
    goto $bb33_dummy;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i64(out_$i78, 0);
    goto corral_source_split_914;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(out_$p77);
    goto corral_source_split_913;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_912;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p75, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_911;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} zero_fill_bio(out_$p75);
    goto corral_source_split_910;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p76, out_$p77, out_$i78, out_$i79, out_$p75 := lo_read_transfer_loop_$bb31(out_$p76, out_$p77, out_$i78, out_$i79, out_$p75);
    return;

  exit:
    return;
}



procedure lo_read_transfer_loop_$bb31(in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$p75: ref) returns (out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$p75: ref);



implementation lo_read_transfer_loop_$bb15(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p35: ref, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$i51: i64, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i64, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$p63: ref, in_$i64: i32, in_$i65: i64, in_$i66: i1, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$i86: i1, in_$p88: ref, in_$i89: i32, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p95: ref, in_$i96: i32, in_$i97: i64, in_$p99: ref, in_$i100: i32, in_$p102: ref, in_$i103: i32, in_$i104: i32, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p110: ref, in_$i111: i32, in_$i112: i64, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i1, in_$i118: i32, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p125: ref, in_$i126: i32, in_$i127: i64, in_$p129: ref, in_$i130: i32, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8) returns (out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$i51: i64, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i64, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$p63: ref, out_$i64: i32, out_$i65: i64, out_$i66: i1, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$i86: i1, out_$p88: ref, out_$i89: i32, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p95: ref, out_$i96: i32, out_$i97: i64, out_$p99: ref, out_$i100: i32, out_$p102: ref, out_$i103: i32, out_$i104: i32, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p110: ref, out_$i111: i32, out_$i112: i64, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i1, out_$i118: i32, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p125: ref, out_$i126: i32, out_$i127: i64, out_$p129: ref, out_$i130: i32, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8)
{

  entry:
    out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p88, out_$i89, out_$p90, out_$p91, out_$p92, out_$p93, out_$p95, out_$i96, out_$i97, out_$p99, out_$i100, out_$p102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p110, out_$i111, out_$i112, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p125, out_$i126, out_$i127, out_$p129, out_$i130, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20 := in_$i38, in_$p39, in_$p40, in_$p41, in_$i42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p80, in_$p81, in_$p82, in_$p83, in_$i84, in_$i85, in_$i86, in_$p88, in_$i89, in_$p90, in_$p91, in_$p92, in_$p93, in_$p95, in_$i96, in_$i97, in_$p99, in_$i100, in_$p102, in_$i103, in_$i104, in_$p105, in_$p106, in_$p107, in_$p108, in_$p110, in_$i111, in_$i112, in_$p114, in_$p115, in_$p116, in_$i117, in_$i118, in_$p119, in_$p120, in_$p121, in_$p122, in_$p123, in_$p125, in_$i126, in_$i127, in_$p129, in_$i130, in_$p132, in_$i133, in_$i134, in_$p135, in_$p136, in_$p137, in_cmdloc_dummy_var_18, in_cmdloc_dummy_var_19, in_cmdloc_dummy_var_20;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_825;

  $bb39:
    assume {:verifier.code 0} true;
    assume out_$i86 == 1;
    goto $bb39_dummy;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i32(out_$i85, 0);
    goto corral_source_split_935;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i32($M.0, in_$p35);
    goto corral_source_split_934;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} bio_advance_iter(out_$p81, out_$p82, out_$i84);
    goto corral_source_split_933;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i32($M.8, out_$p83);
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_931;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_930;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_929;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_928;

  $bb25:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i64(out_$i65, out_$i49);
    goto corral_source_split_892;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i32.i64(out_$i64);
    goto corral_source_split_891;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.8, out_$p63);
    goto corral_source_split_890;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_889;

  $bb22:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i60;
    assume true;
    goto $bb22;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} out_$i60 := lo_do_transfer(in_$p0, 0, in_$p9, 0, out_$p55, out_$i57, out_$i58, out_$i59);
    call {:si_unique_call 166} {:cexpr "ret"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$i59 := $ashr.i64(out_$i38, 9);
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i64.i32(out_$i49);
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.8, out_$p56);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.8, out_$p54);
    goto corral_source_split_879;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_878;

  $bb18:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i49;
    assume true;
    goto $bb18;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i64(out_$i49, 0);
    goto corral_source_split_870;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} out_$i49 := vfs_iter_read(out_$p48, in_$p7, in_$p3);
    call {:si_unique_call 162} {:cexpr "len"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_869;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_867;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} iov_iter_bvec(in_$p7, 4, in_$p5, 1, out_$i46);
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i32.i64(out_$i45);
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.6, out_$p44);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p43, out_$i42);
    goto corral_source_split_862;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.8, out_$p41);
    goto corral_source_split_860;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p40, 0);
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p39, in_$p9);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_855;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.7, in_$p3);
    call {:si_unique_call 159} {:cexpr "offset"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_854;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_18 := $M.8;
    out_cmdloc_dummy_var_19 := $M.8;
    call {:si_unique_call 169} out_cmdloc_dummy_var_20 := $memcpy.i8(out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_$p136, out_$p137, 16, $zext.i32.i64(8), 0 == 1);
    $M.8 := out_cmdloc_dummy_var_20;
    goto corral_source_split_963;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    out_$p137 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_962;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    out_$p136 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_961;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, out_$p135, out_$i134);
    goto corral_source_split_960;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_959;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    out_$i134 := $add.i32(out_$i130, out_$i133);
    goto corral_source_split_958;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.0, out_$p132);
    goto corral_source_split_957;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_956;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.0, out_$p129);
    goto corral_source_split_955;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(out_$p123, $mul.ref(out_$i127, 16)), $mul.ref(12, 1));
    goto corral_source_split_954;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    goto corral_source_split_953;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i32.i64(out_$i126);
    goto corral_source_split_952;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i32($M.0, out_$p125);
    goto corral_source_split_951;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_950;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.0, out_$p122);
    goto corral_source_split_949;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(out_$p121, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_948;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    out_$p121 := $load.ref($M.0, out_$p120);
    goto corral_source_split_947;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_946;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, out_$p119, out_$i118);
    goto corral_source_split_945;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_944;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_943;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    out_$i118 := out_$i104;
    goto $bb43;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    out_$i118 := out_$i89;
    goto $bb43;

  $bb41:
    assume out_$i117 == 1;
    goto corral_source_split_939;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    out_$i117 := $ult.i32(out_$i89, out_$i104);
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p116, out_$p115);
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_850;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.0, out_$p114);
    goto corral_source_split_849;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p108, $mul.ref(out_$i112, 16)), $mul.ref(0, 1));
    goto corral_source_split_848;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    goto corral_source_split_847;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i32.i64(out_$i111);
    goto corral_source_split_846;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i32($M.0, out_$p110);
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.0, out_$p107);
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p106, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.0, out_$p105);
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$i104 := $sub.i32(out_$i100, out_$i103);
    call {:si_unique_call 158} {:cexpr "_min2"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i32($M.0, out_$p102);
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_837;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.0, out_$p99);
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p93, $mul.ref(out_$i97, 16)), $mul.ref(8, 1));
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i32.i64(out_$i96);
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.0, out_$p95);
    goto corral_source_split_832;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_831;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_830;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p91, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_829;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.0, out_$p88);
    call {:si_unique_call 157} {:cexpr "_min1"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_826;

  $bb42:
    assume !(out_$i117 == 1);
    goto corral_source_split_941;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p88, out_$i89, out_$p90, out_$p91, out_$p92, out_$p93, out_$p95, out_$i96, out_$i97, out_$p99, out_$i100, out_$p102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p110, out_$i111, out_$i112, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p125, out_$i126, out_$i127, out_$p129, out_$i130, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20 := lo_read_transfer_loop_$bb15(in_$p0, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p35, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p88, out_$i89, out_$p90, out_$p91, out_$p92, out_$p93, out_$p95, out_$i96, out_$i97, out_$p99, out_$i100, out_$p102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p110, out_$i111, out_$i112, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p125, out_$i126, out_$i127, out_$p129, out_$i130, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20);
    return;

  exit:
    return;
}



procedure lo_read_transfer_loop_$bb15(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p35: ref, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$i51: i64, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i64, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$p63: ref, in_$i64: i32, in_$i65: i64, in_$i66: i1, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$i86: i1, in_$p88: ref, in_$i89: i32, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p95: ref, in_$i96: i32, in_$i97: i64, in_$p99: ref, in_$i100: i32, in_$p102: ref, in_$i103: i32, in_$i104: i32, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p110: ref, in_$i111: i32, in_$i112: i64, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i1, in_$i118: i32, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p125: ref, in_$i126: i32, in_$i127: i64, in_$p129: ref, in_$i130: i32, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8) returns (out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$i51: i64, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i64, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$p63: ref, out_$i64: i32, out_$i65: i64, out_$i66: i1, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$i86: i1, out_$p88: ref, out_$i89: i32, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p95: ref, out_$i96: i32, out_$i97: i64, out_$p99: ref, out_$i100: i32, out_$p102: ref, out_$i103: i32, out_$i104: i32, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p110: ref, out_$i111: i32, out_$i112: i64, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i1, out_$i118: i32, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p125: ref, out_$i126: i32, out_$i127: i64, out_$p129: ref, out_$i130: i32, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8);
  modifies $M.0, $M.9, $CurrAddr, $M.3, $M.6, $M.8;



implementation lo_read_transfer_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p24: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$i51: i64, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i64, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$p63: ref, in_$i64: i32, in_$i65: i64, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$p75: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$i86: i1, in_$p88: ref, in_$i89: i32, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p95: ref, in_$i96: i32, in_$i97: i64, in_$p99: ref, in_$i100: i32, in_$p102: ref, in_$i103: i32, in_$i104: i32, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p110: ref, in_$i111: i32, in_$i112: i64, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i1, in_$i118: i32, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p125: ref, in_$i126: i32, in_$i127: i64, in_$p129: ref, in_$i130: i32, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i64, in_$i145: i1, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8) returns (out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$i51: i64, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i64, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$p63: ref, out_$i64: i32, out_$i65: i64, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$p75: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$i86: i1, out_$p88: ref, out_$i89: i32, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p95: ref, out_$i96: i32, out_$i97: i64, out_$p99: ref, out_$i100: i32, out_$p102: ref, out_$i103: i32, out_$i104: i32, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p110: ref, out_$i111: i32, out_$i112: i64, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i1, out_$i118: i32, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p125: ref, out_$i126: i32, out_$i127: i64, out_$p129: ref, out_$i130: i32, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i64, out_$i145: i1, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8)
{

  entry:
    out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$p75, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p88, out_$i89, out_$p90, out_$p91, out_$p92, out_$p93, out_$p95, out_$i96, out_$i97, out_$p99, out_$i100, out_$p102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p110, out_$i111, out_$i112, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p125, out_$i126, out_$i127, out_$p129, out_$i130, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20 := in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p35, in_$i36, in_$i37, in_$i38, in_$p39, in_$p40, in_$p41, in_$i42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72, in_$i73, in_$i74, in_$p76, in_$p77, in_$i78, in_$i79, in_$p75, in_$p80, in_$p81, in_$p82, in_$p83, in_$i84, in_$i85, in_$i86, in_$p88, in_$i89, in_$p90, in_$p91, in_$p92, in_$p93, in_$p95, in_$i96, in_$i97, in_$p99, in_$i100, in_$p102, in_$i103, in_$i104, in_$p105, in_$p106, in_$p107, in_$p108, in_$p110, in_$i111, in_$i112, in_$p114, in_$p115, in_$p116, in_$i117, in_$i118, in_$p119, in_$p120, in_$p121, in_$p122, in_$p123, in_$p125, in_$i126, in_$i127, in_$p129, in_$i130, in_$p132, in_$i133, in_$i134, in_$p135, in_$p136, in_$p137, in_$p138, in_$p139, in_$p140, in_$p141, in_$p142, in_$p143, in_$i144, in_$i145, in_cmdloc_dummy_var_15, in_cmdloc_dummy_var_16, in_cmdloc_dummy_var_17, in_cmdloc_dummy_var_18, in_cmdloc_dummy_var_19, in_cmdloc_dummy_var_20;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb45:
    assume {:verifier.code 0} true;
    assume out_$i145 == 1;
    goto $bb45_dummy;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    out_$i145 := $ne.i64(out_$i144, 0);
    goto corral_source_split_926;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    out_$i144 := $p2i.ref.i64(out_$p143);
    goto corral_source_split_925;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    out_$p143 := $load.ref($M.0, in_$p24);
    goto corral_source_split_924;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p142, out_$p141);
    goto corral_source_split_923;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_922;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    out_$p141 := $load.ref($M.0, out_$p140);
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p139, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_920;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    out_$p139 := $load.ref($M.0, out_$p138);
    goto corral_source_split_919;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_918;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb27:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb30;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb34:
    assume !(out_$i79 == 1);
    goto corral_source_split_916;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i64(out_$i78, 0);
    goto corral_source_split_914;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(out_$p77);
    goto corral_source_split_913;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_912;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p75, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_911;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} zero_fill_bio(out_$p75);
    goto corral_source_split_910;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb31:
    call out_$p76, out_$p77, out_$i78, out_$i79, out_$p75 := lo_read_transfer_loop_$bb31(out_$p76, out_$p77, out_$i78, out_$i79, out_$p75);
    goto $bb31_last;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_908;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    out_$p75 := out_$p72;
    goto $bb31;

  $bb33:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$p75 := out_$p77;
    assume false;
    return;

  $bb28:
    assume out_$i74 == 1;
    goto corral_source_split_906;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, 0);
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p1, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_901;

  $bb26:
    assume out_$i70 == 1;
    goto corral_source_split_900;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_897;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_896;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p1, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_895;

  $bb24:
    assume out_$i66 == 1;
    goto corral_source_split_894;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i64(out_$i65, out_$i49);
    goto corral_source_split_892;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i32.i64(out_$i64);
    goto corral_source_split_891;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.8, out_$p63);
    goto corral_source_split_890;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_889;

  $bb22:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i60;
    assume true;
    goto $bb22;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} out_$i60 := lo_do_transfer(in_$p0, 0, in_$p9, 0, out_$p55, out_$i57, out_$i58, out_$i59);
    call {:si_unique_call 166} {:cexpr "ret"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$i59 := $ashr.i64(out_$i38, 9);
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i64.i32(out_$i49);
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.8, out_$p56);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.8, out_$p54);
    goto corral_source_split_879;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_878;

  $bb18:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i49;
    assume true;
    goto $bb18;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i64(out_$i49, 0);
    goto corral_source_split_870;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} out_$i49 := vfs_iter_read(out_$p48, in_$p7, in_$p3);
    call {:si_unique_call 162} {:cexpr "len"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_869;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_867;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} iov_iter_bvec(in_$p7, 4, in_$p5, 1, out_$i46);
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i32.i64(out_$i45);
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.6, out_$p44);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p43, out_$i42);
    goto corral_source_split_862;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.8, out_$p41);
    goto corral_source_split_860;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p40, 0);
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p39, in_$p9);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_855;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.7, in_$p3);
    call {:si_unique_call 159} {:cexpr "offset"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_854;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_18 := $M.8;
    out_cmdloc_dummy_var_19 := $M.8;
    call {:si_unique_call 169} out_cmdloc_dummy_var_20 := $memcpy.i8(out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_$p136, out_$p137, 16, $zext.i32.i64(8), 0 == 1);
    $M.8 := out_cmdloc_dummy_var_20;
    goto corral_source_split_963;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    out_$p137 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_962;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    out_$p136 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_961;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, out_$p135, out_$i134);
    goto corral_source_split_960;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_959;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    out_$i134 := $add.i32(out_$i130, out_$i133);
    goto corral_source_split_958;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.0, out_$p132);
    goto corral_source_split_957;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_956;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.0, out_$p129);
    goto corral_source_split_955;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(out_$p123, $mul.ref(out_$i127, 16)), $mul.ref(12, 1));
    goto corral_source_split_954;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    goto corral_source_split_953;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i32.i64(out_$i126);
    goto corral_source_split_952;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i32($M.0, out_$p125);
    goto corral_source_split_951;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_950;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.0, out_$p122);
    goto corral_source_split_949;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(out_$p121, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_948;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    out_$p121 := $load.ref($M.0, out_$p120);
    goto corral_source_split_947;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_946;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, out_$p119, out_$i118);
    goto corral_source_split_945;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_944;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_943;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    out_$i118 := out_$i104;
    goto $bb43;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    out_$i118 := out_$i89;
    goto $bb43;

  $bb41:
    assume out_$i117 == 1;
    goto corral_source_split_939;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    out_$i117 := $ult.i32(out_$i89, out_$i104);
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p116, out_$p115);
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_850;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.0, out_$p114);
    goto corral_source_split_849;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p108, $mul.ref(out_$i112, 16)), $mul.ref(0, 1));
    goto corral_source_split_848;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    goto corral_source_split_847;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i32.i64(out_$i111);
    goto corral_source_split_846;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i32($M.0, out_$p110);
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.0, out_$p107);
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p106, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.0, out_$p105);
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$i104 := $sub.i32(out_$i100, out_$i103);
    call {:si_unique_call 158} {:cexpr "_min2"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i32($M.0, out_$p102);
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_837;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.0, out_$p99);
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p93, $mul.ref(out_$i97, 16)), $mul.ref(8, 1));
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i32.i64(out_$i96);
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.0, out_$p95);
    goto corral_source_split_832;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_831;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_830;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p91, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_829;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.0, out_$p88);
    call {:si_unique_call 157} {:cexpr "_min1"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_826;

  $bb15:
    call out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p88, out_$i89, out_$p90, out_$p91, out_$p92, out_$p93, out_$p95, out_$i96, out_$i97, out_$p99, out_$i100, out_$p102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p110, out_$i111, out_$i112, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p125, out_$i126, out_$i127, out_$p129, out_$i130, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20 := lo_read_transfer_loop_$bb15(in_$p0, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, out_$p35, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p88, out_$i89, out_$p90, out_$p91, out_$p92, out_$p93, out_$p95, out_$i96, out_$i97, out_$p99, out_$i100, out_$p102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p110, out_$i111, out_$i112, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p125, out_$i126, out_$i127, out_$p129, out_$i130, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20);
    goto $bb15_last;

  $bb15_last:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb39:
    assume {:verifier.code 0} true;
    assume out_$i86 == 1;
    assume false;
    return;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i32(out_$i85, 0);
    goto corral_source_split_935;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i32($M.0, out_$p35);
    goto corral_source_split_934;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} bio_advance_iter(out_$p81, out_$p82, out_$i84);
    goto corral_source_split_933;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i32($M.8, out_$p83);
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_931;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_930;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_929;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_928;

  $bb25:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb12:
    assume out_$i37 == 1;
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_820;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_15 := $M.0;
    out_cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 156} out_cmdloc_dummy_var_17 := $memcpy.i8(out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_$p32, out_$p33, 24, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_17;
    goto corral_source_split_818;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_817;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_816;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 136)), $mul.ref(32, 1));
    goto corral_source_split_815;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_814;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_813;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_812;

  $bb42:
    assume !(out_$i117 == 1);
    goto corral_source_split_941;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb14;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb40:
    assume !(out_$i86 == 1);
    goto corral_source_split_937;

  $bb45_dummy:
    call {:si_unique_call 1} out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$p75, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p88, out_$i89, out_$p90, out_$p91, out_$p92, out_$p93, out_$p95, out_$i96, out_$i97, out_$p99, out_$i100, out_$p102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p110, out_$i111, out_$i112, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p125, out_$i126, out_$i127, out_$p129, out_$i130, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20 := lo_read_transfer_loop_$bb10(in_$p0, in_$p1, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p24, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$p75, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p88, out_$i89, out_$p90, out_$p91, out_$p92, out_$p93, out_$p95, out_$i96, out_$i97, out_$p99, out_$i100, out_$p102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p110, out_$i111, out_$i112, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p125, out_$i126, out_$i127, out_$p129, out_$i130, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20);
    return;

  exit:
    return;
}



procedure lo_read_transfer_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p24: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$i51: i64, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i64, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$p63: ref, in_$i64: i32, in_$i65: i64, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$p75: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$i86: i1, in_$p88: ref, in_$i89: i32, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p95: ref, in_$i96: i32, in_$i97: i64, in_$p99: ref, in_$i100: i32, in_$p102: ref, in_$i103: i32, in_$i104: i32, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p110: ref, in_$i111: i32, in_$i112: i64, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i1, in_$i118: i32, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p125: ref, in_$i126: i32, in_$i127: i64, in_$p129: ref, in_$i130: i32, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i64, in_$i145: i1, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8) returns (out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$i51: i64, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i64, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$p63: ref, out_$i64: i32, out_$i65: i64, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$p75: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$i86: i1, out_$p88: ref, out_$i89: i32, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p95: ref, out_$i96: i32, out_$i97: i64, out_$p99: ref, out_$i100: i32, out_$p102: ref, out_$i103: i32, out_$i104: i32, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p110: ref, out_$i111: i32, out_$i112: i64, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i1, out_$i118: i32, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p125: ref, out_$i126: i32, out_$i127: i64, out_$p129: ref, out_$i130: i32, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i64, out_$i145: i1, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8);
  modifies $M.0, $M.9, $CurrAddr, $M.3, $M.6, $M.8;



implementation lo_read_simple_loop_$bb24(in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p51: ref) returns (out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p51: ref)
{

  entry:
    out_$p52, out_$p53, out_$i54, out_$i55, out_$p51 := in_$p52, in_$p53, in_$i54, in_$i55, in_$p51;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1060;

  $bb26:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$p51 := out_$p53;
    goto $bb26_dummy;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, 0);
    goto corral_source_split_1066;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_1064;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1063;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} zero_fill_bio(out_$p51);
    goto corral_source_split_1062;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p52, out_$p53, out_$i54, out_$i55, out_$p51 := lo_read_simple_loop_$bb24(out_$p52, out_$p53, out_$i54, out_$i55, out_$p51);
    return;

  exit:
    return;
}



procedure lo_read_simple_loop_$bb24(in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p51: ref) returns (out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p51: ref);



implementation lo_read_simple_loop_$bb11(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p26: ref, in_$p29: ref, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i64, in_$p39: ref, in_$i40: i32, in_$i41: i64, in_$i42: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$p65: ref, in_$i66: i32, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p72: ref, in_$i73: i32, in_$i74: i64, in_$p76: ref, in_$i77: i32, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p87: ref, in_$i88: i32, in_$i89: i64, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i1, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p102: ref, in_$i103: i32, in_$i104: i64, in_$p106: ref, in_$i107: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_vslice_dummy_var_118: i32) returns (out_$p29: ref, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i64, out_$p39: ref, out_$i40: i32, out_$i41: i64, out_$i42: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$p65: ref, out_$i66: i32, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p72: ref, out_$i73: i32, out_$i74: i64, out_$p76: ref, out_$i77: i32, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p87: ref, out_$i88: i32, out_$i89: i64, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i1, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p102: ref, out_$i103: i32, out_$i104: i64, out_$p106: ref, out_$i107: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_vslice_dummy_var_118: i32)
{

  entry:
    out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p39, out_$i40, out_$i41, out_$i42, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p87, out_$i88, out_$i89, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p102, out_$i103, out_$i104, out_$p106, out_$i107, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_vslice_dummy_var_118 := in_$p29, in_$i30, in_$i31, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p39, in_$i40, in_$i41, in_$i42, in_$p57, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$i63, in_$p65, in_$i66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p72, in_$i73, in_$i74, in_$p76, in_$i77, in_$p79, in_$i80, in_$i81, in_$p82, in_$p83, in_$p84, in_$p85, in_$p87, in_$i88, in_$i89, in_$p91, in_$p92, in_$p93, in_$i94, in_$i95, in_$p96, in_$p97, in_$p98, in_$p99, in_$p100, in_$p102, in_$i103, in_$i104, in_$p106, in_$i107, in_$p109, in_$i110, in_$i111, in_$p112, in_$p113, in_$p114, in_cmdloc_dummy_var_24, in_cmdloc_dummy_var_25, in_cmdloc_dummy_var_26, in_vslice_dummy_var_118;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_998;

  $bb32:
    assume {:verifier.code 0} true;
    assume out_$i63 == 1;
    goto $bb32_dummy;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 0);
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, in_$p26);
    goto corral_source_split_1088;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} bio_advance_iter(out_$p58, out_$p59, out_$i61);
    goto corral_source_split_1087;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.6, out_$p60);
    goto corral_source_split_1086;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1085;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1084;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_1083;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1082;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} out_vslice_dummy_var_118 := _cond_resched();
    goto corral_source_split_1081;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} ___might_sleep(.str.8, 302, 0);
    goto corral_source_split_1080;

  $bb18:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, out_$i34);
    goto corral_source_split_1044;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i32.i64(out_$i40);
    goto corral_source_split_1043;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.6, out_$p39);
    goto corral_source_split_1042;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1041;

  $bb14:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i34;
    assume true;
    goto $bb14;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i64(out_$i34, 0);
    goto corral_source_split_1034;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} out_$i34 := vfs_iter_read(out_$p33, in_$p6, in_$p3);
    call {:si_unique_call 180} {:cexpr "len"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_1033;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_1032;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_1031;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} iov_iter_bvec(in_$p6, 4, in_$p4, 1, out_$i31);
    goto corral_source_split_1030;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i32.i64(out_$i30);
    goto corral_source_split_1029;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.6, out_$p29);
    goto corral_source_split_1028;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1027;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_24 := $M.6;
    out_cmdloc_dummy_var_25 := $M.6;
    call {:si_unique_call 185} out_cmdloc_dummy_var_26 := $memcpy.i8(out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_$p113, out_$p114, 16, $zext.i32.i64(8), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_26;
    goto corral_source_split_1117;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    out_$p114 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_1116;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    out_$p113 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_1115;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p112, out_$i111);
    goto corral_source_split_1114;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p7, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1113;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i32(out_$i107, out_$i110);
    goto corral_source_split_1112;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_1111;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1110;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i32($M.0, out_$p106);
    goto corral_source_split_1109;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p100, $mul.ref(out_$i104, 16)), $mul.ref(12, 1));
    goto corral_source_split_1108;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    goto corral_source_split_1107;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i32.i64(out_$i103);
    goto corral_source_split_1106;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i32($M.0, out_$p102);
    goto corral_source_split_1105;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1104;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.0, out_$p99);
    goto corral_source_split_1103;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p98, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_1102;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.0, out_$p97);
    goto corral_source_split_1101;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1100;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p96, out_$i95);
    goto corral_source_split_1099;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1098;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i81;
    goto $bb36;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i66;
    goto $bb36;

  $bb34:
    assume out_$i94 == 1;
    goto corral_source_split_1093;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    out_$i94 := $ult.i32(out_$i66, out_$i81);
    goto corral_source_split_1025;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p93, out_$p92);
    goto corral_source_split_1024;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1023;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_1022;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p85, $mul.ref(out_$i89, 16)), $mul.ref(0, 1));
    goto corral_source_split_1021;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    goto corral_source_split_1020;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i32.i64(out_$i88);
    goto corral_source_split_1019;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.0, out_$p87);
    goto corral_source_split_1018;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1017;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_1016;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p83, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_1015;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.0, out_$p82);
    goto corral_source_split_1014;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1013;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    out_$i81 := $sub.i32(out_$i77, out_$i80);
    call {:si_unique_call 177} {:cexpr "_min2"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_1012;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, out_$p79);
    goto corral_source_split_1011;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1010;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, out_$p76);
    goto corral_source_split_1009;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i74, 16)), $mul.ref(8, 1));
    goto corral_source_split_1008;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    goto corral_source_split_1007;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i32.i64(out_$i73);
    goto corral_source_split_1006;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, out_$p72);
    goto corral_source_split_1005;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1004;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    goto corral_source_split_1003;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p68, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_1002;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_1001;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1000;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    call {:si_unique_call 176} {:cexpr "_min1"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_999;

  $bb35:
    assume !(out_$i94 == 1);
    goto corral_source_split_1095;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p39, out_$i40, out_$i41, out_$i42, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p87, out_$i88, out_$i89, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p102, out_$i103, out_$i104, out_$p106, out_$i107, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_vslice_dummy_var_118 := lo_read_simple_loop_$bb11(in_$p0, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p26, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p39, out_$i40, out_$i41, out_$i42, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p87, out_$i88, out_$i89, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p102, out_$i103, out_$i104, out_$p106, out_$i107, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_vslice_dummy_var_118);
    return;

  exit:
    return;
}



procedure lo_read_simple_loop_$bb11(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p26: ref, in_$p29: ref, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i64, in_$p39: ref, in_$i40: i32, in_$i41: i64, in_$i42: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$p65: ref, in_$i66: i32, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p72: ref, in_$i73: i32, in_$i74: i64, in_$p76: ref, in_$i77: i32, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p87: ref, in_$i88: i32, in_$i89: i64, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i1, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p102: ref, in_$i103: i32, in_$i104: i64, in_$p106: ref, in_$i107: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_vslice_dummy_var_118: i32) returns (out_$p29: ref, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i64, out_$p39: ref, out_$i40: i32, out_$i41: i64, out_$i42: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$p65: ref, out_$i66: i32, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p72: ref, out_$i73: i32, out_$i74: i64, out_$p76: ref, out_$i77: i32, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p87: ref, out_$i88: i32, out_$i89: i64, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i1, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p102: ref, out_$i103: i32, out_$i104: i64, out_$p106: ref, out_$i107: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_vslice_dummy_var_118: i32);
  modifies $M.0, $M.6;



implementation lo_read_simple_loop_$bb6(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p15: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i64, in_$p39: ref, in_$i40: i32, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p51: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$p65: ref, in_$i66: i32, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p72: ref, in_$i73: i32, in_$i74: i64, in_$p76: ref, in_$i77: i32, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p87: ref, in_$i88: i32, in_$i89: i64, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i1, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p102: ref, in_$i103: i32, in_$i104: i64, in_$p106: ref, in_$i107: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_vslice_dummy_var_118: i32) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i64, out_$p39: ref, out_$i40: i32, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p51: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$p65: ref, out_$i66: i32, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p72: ref, out_$i73: i32, out_$i74: i64, out_$p76: ref, out_$i77: i32, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p87: ref, out_$i88: i32, out_$i89: i64, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i1, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p102: ref, out_$i103: i32, out_$i104: i64, out_$p106: ref, out_$i107: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_vslice_dummy_var_118: i32)
{

  entry:
    out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$i54, out_$i55, out_$p51, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p87, out_$i88, out_$i89, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p102, out_$i103, out_$i104, out_$p106, out_$i107, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_vslice_dummy_var_118 := in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$p52, in_$p53, in_$i54, in_$i55, in_$p51, in_$p57, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$i63, in_$p65, in_$i66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p72, in_$i73, in_$i74, in_$p76, in_$i77, in_$p79, in_$i80, in_$i81, in_$p82, in_$p83, in_$p84, in_$p85, in_$p87, in_$i88, in_$i89, in_$p91, in_$p92, in_$p93, in_$i94, in_$i95, in_$p96, in_$p97, in_$p98, in_$p99, in_$p100, in_$p102, in_$i103, in_$i104, in_$p106, in_$i107, in_$p109, in_$i110, in_$i111, in_$p112, in_$p113, in_$p114, in_$p115, in_$p116, in_$p117, in_$p118, in_$p119, in_$p120, in_$i121, in_$i122, in_cmdloc_dummy_var_21, in_cmdloc_dummy_var_22, in_cmdloc_dummy_var_23, in_cmdloc_dummy_var_24, in_cmdloc_dummy_var_25, in_cmdloc_dummy_var_26, in_vslice_dummy_var_118;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb38:
    assume {:verifier.code 0} true;
    assume out_$i122 == 1;
    goto $bb38_dummy;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i64(out_$i121, 0);
    goto corral_source_split_1078;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p120);
    goto corral_source_split_1077;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.0, in_$p15);
    goto corral_source_split_1076;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p119, out_$p118);
    goto corral_source_split_1075;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1074;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.0, out_$p117);
    goto corral_source_split_1073;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(out_$p116, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1072;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.0, out_$p115);
    goto corral_source_split_1071;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1070;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb20:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i50 == 1);
    goto $bb23;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb27:
    assume !(out_$i55 == 1);
    goto corral_source_split_1068;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, 0);
    goto corral_source_split_1066;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_1064;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1063;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} zero_fill_bio(out_$p51);
    goto corral_source_split_1062;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    call out_$p52, out_$p53, out_$i54, out_$i55, out_$p51 := lo_read_simple_loop_$bb24(out_$p52, out_$p53, out_$i54, out_$i55, out_$p51);
    goto $bb24_last;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1060;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    out_$p51 := out_$p48;
    goto $bb24;

  $bb26:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$p51 := out_$p53;
    assume false;
    return;

  $bb21:
    assume out_$i50 == 1;
    goto corral_source_split_1058;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, 0);
    goto corral_source_split_1056;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_1055;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_1054;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p1, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_1053;

  $bb19:
    assume out_$i46 == 1;
    goto corral_source_split_1052;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_1050;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_1049;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_1048;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p1, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_1047;

  $bb17:
    assume out_$i42 == 1;
    goto corral_source_split_1046;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, out_$i34);
    goto corral_source_split_1044;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i32.i64(out_$i40);
    goto corral_source_split_1043;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.6, out_$p39);
    goto corral_source_split_1042;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1041;

  $bb14:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i34;
    assume true;
    goto $bb14;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i64(out_$i34, 0);
    goto corral_source_split_1034;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} out_$i34 := vfs_iter_read(out_$p33, in_$p6, in_$p3);
    call {:si_unique_call 180} {:cexpr "len"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_1033;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_1032;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_1031;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} iov_iter_bvec(in_$p6, 4, in_$p4, 1, out_$i31);
    goto corral_source_split_1030;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i32.i64(out_$i30);
    goto corral_source_split_1029;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.6, out_$p29);
    goto corral_source_split_1028;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1027;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_24 := $M.6;
    out_cmdloc_dummy_var_25 := $M.6;
    call {:si_unique_call 185} out_cmdloc_dummy_var_26 := $memcpy.i8(out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_$p113, out_$p114, 16, $zext.i32.i64(8), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_26;
    goto corral_source_split_1117;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    out_$p114 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_1116;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    out_$p113 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_1115;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p112, out_$i111);
    goto corral_source_split_1114;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p7, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1113;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i32(out_$i107, out_$i110);
    goto corral_source_split_1112;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_1111;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1110;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i32($M.0, out_$p106);
    goto corral_source_split_1109;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p100, $mul.ref(out_$i104, 16)), $mul.ref(12, 1));
    goto corral_source_split_1108;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    goto corral_source_split_1107;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i32.i64(out_$i103);
    goto corral_source_split_1106;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i32($M.0, out_$p102);
    goto corral_source_split_1105;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1104;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.0, out_$p99);
    goto corral_source_split_1103;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p98, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_1102;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.0, out_$p97);
    goto corral_source_split_1101;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1100;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p96, out_$i95);
    goto corral_source_split_1099;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1098;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i81;
    goto $bb36;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i66;
    goto $bb36;

  $bb34:
    assume out_$i94 == 1;
    goto corral_source_split_1093;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    out_$i94 := $ult.i32(out_$i66, out_$i81);
    goto corral_source_split_1025;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p93, out_$p92);
    goto corral_source_split_1024;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1023;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_1022;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p85, $mul.ref(out_$i89, 16)), $mul.ref(0, 1));
    goto corral_source_split_1021;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    goto corral_source_split_1020;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i32.i64(out_$i88);
    goto corral_source_split_1019;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.0, out_$p87);
    goto corral_source_split_1018;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1017;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_1016;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p83, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_1015;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.0, out_$p82);
    goto corral_source_split_1014;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1013;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    out_$i81 := $sub.i32(out_$i77, out_$i80);
    call {:si_unique_call 177} {:cexpr "_min2"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_1012;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, out_$p79);
    goto corral_source_split_1011;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1010;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, out_$p76);
    goto corral_source_split_1009;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i74, 16)), $mul.ref(8, 1));
    goto corral_source_split_1008;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    goto corral_source_split_1007;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i32.i64(out_$i73);
    goto corral_source_split_1006;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, out_$p72);
    goto corral_source_split_1005;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1004;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    goto corral_source_split_1003;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p68, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_1002;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_1001;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1000;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    call {:si_unique_call 176} {:cexpr "_min1"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_999;

  $bb11:
    call out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p39, out_$i40, out_$i41, out_$i42, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p87, out_$i88, out_$i89, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p102, out_$i103, out_$i104, out_$p106, out_$i107, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_vslice_dummy_var_118 := lo_read_simple_loop_$bb11(in_$p0, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, out_$p26, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p39, out_$i40, out_$i41, out_$i42, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p87, out_$i88, out_$i89, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p102, out_$i103, out_$i104, out_$p106, out_$i107, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_vslice_dummy_var_118);
    goto $bb11_last;

  $bb11_last:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_998;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb32:
    assume {:verifier.code 0} true;
    assume out_$i63 == 1;
    assume false;
    return;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 0);
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p26);
    goto corral_source_split_1088;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} bio_advance_iter(out_$p58, out_$p59, out_$i61);
    goto corral_source_split_1087;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.6, out_$p60);
    goto corral_source_split_1086;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1085;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1084;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_1083;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1082;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} out_vslice_dummy_var_118 := _cond_resched();
    goto corral_source_split_1081;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} ___might_sleep(.str.8, 302, 0);
    goto corral_source_split_1080;

  $bb18:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb8:
    assume out_$i28 == 1;
    goto corral_source_split_996;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_994;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_993;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_992;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_21 := $M.0;
    out_cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 175} out_cmdloc_dummy_var_23 := $memcpy.i8(out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_$p23, out_$p24, 24, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_23;
    goto corral_source_split_991;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_990;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_989;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 136)), $mul.ref(32, 1));
    goto corral_source_split_988;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_987;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_986;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_985;

  $bb35:
    assume !(out_$i94 == 1);
    goto corral_source_split_1095;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb10;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb33:
    assume !(out_$i63 == 1);
    goto corral_source_split_1091;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$i54, out_$i55, out_$p51, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p87, out_$i88, out_$i89, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p102, out_$i103, out_$i104, out_$p106, out_$i107, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_vslice_dummy_var_118 := lo_read_simple_loop_$bb6(in_$p0, in_$p1, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p15, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p52, out_$p53, out_$i54, out_$i55, out_$p51, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p87, out_$i88, out_$i89, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p102, out_$i103, out_$i104, out_$p106, out_$i107, out_$p109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_vslice_dummy_var_118);
    return;

  exit:
    return;
}



procedure lo_read_simple_loop_$bb6(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p15: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i64, in_$p39: ref, in_$i40: i32, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p51: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$p65: ref, in_$i66: i32, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p72: ref, in_$i73: i32, in_$i74: i64, in_$p76: ref, in_$i77: i32, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p87: ref, in_$i88: i32, in_$i89: i64, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i1, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p102: ref, in_$i103: i32, in_$i104: i64, in_$p106: ref, in_$i107: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_vslice_dummy_var_118: i32) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i64, out_$p39: ref, out_$i40: i32, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p51: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$p65: ref, out_$i66: i32, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p72: ref, out_$i73: i32, out_$i74: i64, out_$p76: ref, out_$i77: i32, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p87: ref, out_$i88: i32, out_$i89: i64, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i1, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p102: ref, out_$i103: i32, out_$i104: i64, out_$p106: ref, out_$i107: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_vslice_dummy_var_118: i32);
  modifies $M.0, $M.6;



implementation bvec_iter_advance_loop_$bb13(in_$p0: ref, in_$p1: ref, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$i34: i32, in_$i35: i64, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$p57: ref, in_$i58: i32, in_$i59: i64, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i1, in_$i30: i32) returns (out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$i34: i32, out_$i35: i64, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$p57: ref, out_$i58: i32, out_$i59: i64, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i1, out_$i30: i32)
{

  entry:
    out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i30 := in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p54, in_$p55, in_$i56, in_$p57, in_$i58, in_$i59, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i30;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1192;

  $bb24:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i46;
    goto $bb24_dummy;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i46, 0);
    goto corral_source_split_1249;

  $bb22:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p68, out_$i67);
    goto corral_source_split_1247;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1246;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i66, 1);
    goto corral_source_split_1245;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_1244;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1243;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p64, 0);
    goto corral_source_split_1242;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1241;

  $bb21:
    assume out_$i63 == 1;
    goto corral_source_split_1240;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i56, out_$i62);
    goto corral_source_split_1238;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_1237;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(out_$i59, 16)), $mul.ref(8, 1));
    goto corral_source_split_1236;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    goto corral_source_split_1235;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i32.i64(out_$i58);
    goto corral_source_split_1234;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    goto corral_source_split_1233;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1232;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.0, out_$p55);
    goto corral_source_split_1231;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1230;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p54, out_$i53);
    goto corral_source_split_1229;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1228;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i52, out_$i45);
    goto corral_source_split_1227;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, out_$p51);
    goto corral_source_split_1226;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1225;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p50, out_$i49);
    goto corral_source_split_1224;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1223;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    out_$i49 := $sub.i32(out_$i48, out_$i45);
    goto corral_source_split_1222;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_1221;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1220;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    out_$i46 := $sub.i32(out_$i30, out_$i45);
    call {:si_unique_call 206} {:cexpr "bytes"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_1219;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1218;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i43;
    goto $bb20;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i30;
    goto $bb20;

  $bb18:
    assume out_$i44 == 1;
    goto corral_source_split_1214;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    out_$i44 := $ult.i32(out_$i30, out_$i43);
    goto corral_source_split_1212;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1211;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i41;
    goto $bb17;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i32;
    goto $bb17;

  $bb15:
    assume out_$i42 == 1;
    goto corral_source_split_1207;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    out_$i42 := $ult.i32(out_$i32, out_$i41);
    goto corral_source_split_1205;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    out_$i41 := $sub.i32(out_$i38, out_$i40);
    call {:si_unique_call 205} {:cexpr "_min2___0"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_1204;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, out_$p39);
    goto corral_source_split_1203;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1202;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_1201;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(out_$i35, 16)), $mul.ref(8, 1));
    goto corral_source_split_1200;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    goto corral_source_split_1199;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i32.i64(out_$i34);
    goto corral_source_split_1198;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_1197;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_1196;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    call {:si_unique_call 204} {:cexpr "_min1___0"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_1195;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1194;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb16:
    assume !(out_$i42 == 1);
    goto corral_source_split_1209;

  $bb19:
    assume !(out_$i44 == 1);
    goto corral_source_split_1216;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i30 := bvec_iter_advance_loop_$bb13(in_$p0, in_$p1, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i30);
    return;

  exit:
    return;
}



procedure bvec_iter_advance_loop_$bb13(in_$p0: ref, in_$p1: ref, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$i34: i32, in_$i35: i64, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$p57: ref, in_$i58: i32, in_$i59: i64, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i1, in_$i30: i32) returns (out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$i34: i32, out_$i35: i64, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$p57: ref, out_$i58: i32, out_$i59: i64, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i1, out_$i30: i32);
  modifies $M.0;



implementation loop_set_fd_loop_$bb12(in_$p2: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p15: ref)
{

  entry:
    out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p15 := in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p15;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2633;

  $bb20:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p42;
    goto $bb20_dummy;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_2669;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} out_$i43 := is_loop_device(out_$p42);
    call {:si_unique_call 518} {:cexpr "tmp"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_2668;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_2667;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p37, $mul.ref(0, 872)), $mul.ref(240, 1));
    goto corral_source_split_2666;

  $bb18:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 0);
    goto corral_source_split_2662;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_2661;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 872)), $mul.ref(460, 1));
    goto corral_source_split_2660;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_2659;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_2658;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_2657;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_2656;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_2655;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_2654;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_2653;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 1000)), $mul.ref(968, 1));
    goto corral_source_split_2652;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2651;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_2650;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_2649;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p15, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_2648;

  $bb15:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i23, out_$i24);
    goto corral_source_split_2644;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_2643;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_2642;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_2641;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_2640;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 1000)), $mul.ref(968, 1));
    goto corral_source_split_2639;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_2638;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_2637;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_2636;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 504)), $mul.ref(496, 1));
    goto corral_source_split_2635;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p15 := loop_set_fd_loop_$bb12(in_$p2, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p15);
    return;

  exit:
    return;
}



procedure loop_set_fd_loop_$bb12(in_$p2: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p15: ref);



implementation loop_queue_write_work_loop_$bb5(in_$p1: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i1) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i1)
{

  entry:
    out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18 := in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i18 == 1;
    goto $bb7_dummy;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 0);
    goto corral_source_split_3445;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} out_$i17 := list_empty(in_$p1);
    call {:si_unique_call 633} {:cexpr "tmp"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3444;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} loop_handle_cmd(out_$p15);
    goto corral_source_split_3443;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} list_del_init(out_$p16);
    goto corral_source_split_3442;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p14, $mul.ref($sub.ref(0, 88), 104)), $mul.ref(88, 1));
    goto corral_source_split_3441;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(out_$p14, $mul.ref($sub.ref(0, 88), 104));
    goto corral_source_split_3440;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_3439;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_3438;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3437;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18 := loop_queue_write_work_loop_$bb5(in_$p1, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18);
    return;

  exit:
    return;
}



procedure loop_queue_write_work_loop_$bb5(in_$p1: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i1) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i1);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.3;



implementation loop_queue_write_work_loop_$bb1(in_$p1: ref, in_$p2: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$i20: i32, in_$i21: i1) returns (out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$i20: i32, out_$i21: i1)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21 := in_$p8, in_$p9, in_$i10, in_$i11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 376), 872)), $mul.ref(360, 1));
    goto corral_source_split_3428;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i21 == 1;
    goto $bb10_dummy;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 0);
    goto corral_source_split_3452;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} out_$i20 := list_empty(out_$p19);
    call {:si_unique_call 636} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_3451;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 376), 872)), $mul.ref(360, 1));
    goto corral_source_split_3450;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} spin_lock_irq(in_$p7);
    goto corral_source_split_3449;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb4;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb8:
    assume !(out_$i18 == 1);
    goto corral_source_split_3447;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 0);
    goto corral_source_split_3445;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} out_$i17 := list_empty(in_$p1);
    call {:si_unique_call 633} {:cexpr "tmp"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3444;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} loop_handle_cmd(out_$p15);
    goto corral_source_split_3443;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} list_del_init(out_$p16);
    goto corral_source_split_3442;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p14, $mul.ref($sub.ref(0, 88), 104)), $mul.ref(88, 1));
    goto corral_source_split_3441;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(out_$p14, $mul.ref($sub.ref(0, 88), 104));
    goto corral_source_split_3440;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_3439;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_3438;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3437;

  $bb5:
    call out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18 := loop_queue_write_work_loop_$bb5(in_$p1, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18);
    goto $bb5_last;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i18 == 1;
    assume false;
    return;

  $bb2:
    assume out_$i11 == 1;
    goto corral_source_split_3435;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 0);
    goto corral_source_split_3433;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} out_$i10 := list_empty(in_$p1);
    call {:si_unique_call 629} {:cexpr "tmp"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_3432;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} spin_unlock_irq(out_$p9);
    goto corral_source_split_3431;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 376), 872)), $mul.ref(280, 1));
    goto corral_source_split_3430;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} list_splice_init(out_$p8, in_$p1);
    goto corral_source_split_3429;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21 := loop_queue_write_work_loop_$bb1(in_$p1, in_$p2, in_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21);
    return;

  exit:
    return;
}



procedure loop_queue_write_work_loop_$bb1(in_$p1: ref, in_$p2: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$i20: i32, in_$i21: i1) returns (out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$i20: i32, out_$i21: i1);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.3;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p31: ref, in_$p33: ref, in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$p45: ref, in_$p47: ref, in_$p48: ref, in_$p50: ref, in_$p52: ref, in_$p54: ref, in_$p55: ref, in_$p57: ref, in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p64: ref, in_$i111: i32, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i32, in_$i130: i1, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$i144: i32, in_$i145: i1, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i149: i32, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$i153: i64, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i159: i32, in_$i160: i32, in_$i161: i32, in_$i162: i64, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i167: i32, in_$i168: i32, in_$i169: i32, in_$i170: i32, in_$i171: i64, in_$i173: i32, in_$i174: i1, in_$i176: i32, in_$i177: i32, in_$i178: i32, in_$i179: i1, in_$i181: i32, in_$i182: i32, in_$i183: i32, in_$i184: i1, in_$i186: i32, in_$i187: i32, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i1, in_$i192: i1, in_$i193: i1, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i32, in_$i198: i1, in_$p199: ref, in_$i200: i32, in_$i201: i64, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i64, in_$i207: i32, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$p212: ref, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i32, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i221: i32, in_$i222: i64, in_$i224: i32, in_$i225: i1, in_$i227: i32, in_$i228: i32, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i1, in_$i236: i32, in_$i237: i1, in_$i238: i32, in_$i239: i1, in_$i240: i32, in_$i241: i1, in_$i243: i32, in_$i244: i1, in_$i245: i32, in_$i246: i1, in_$i247: i32, in_$i248: i1, in_$i249: i32, in_$i250: i1, in_$i252: i32, in_$i253: i1, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i1, in_$i258: i1, in_$i259: i1, in_$i260: i1, in_$i261: i32, in_$i262: i1, in_$i263: i32, in_$i264: i32, in_$i265: i32, in_$i267: i32, in_$i268: i1, in_$i269: i32, in_$i271: i32, in_$i272: i1, in_$i274: i32, in_$i275: i1, in_$i276: i32, in_$i277: i1, in_$i278: i1, in_$i279: i1, in_$i280: i32, in_$i281: i1, in_$i282: i32, in_$i283: i1, in_$i284: i32, in_$i285: i1, in_$i286: i32, in_$i287: i32, in_$i288: i1, in_$i289: i32, in_$i290: i1, in_$i291: i32, in_$i292: i1, in_$i293: i32, in_$i294: i1, in_$i295: i32, in_$i296: i1, in_$i298: i32, in_$i299: i1, in_$i300: i32, in_$i301: i1, in_$i302: i1, in_$i303: i1, in_$i304: i1, in_$i305: i1, in_$i306: i32, in_$i307: i1, in_$i308: i32, in_$i309: i32, in_$i310: i32, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$i314: i32, in_$i315: i32, in_$i316: i64, in_$i318: i32, in_$i319: i1, in_$p320: ref, in_$i321: i32, in_$i322: i32, in_$i323: i64, in_$i325: i32, in_$i326: i1, in_$p327: ref, in_$i328: i32, in_$i329: i32, in_$i330: i64, in_$i332: i32, in_$i333: i1, in_$p334: ref, in_$i335: i32, in_$i336: i32, in_$i337: i64, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_$i342: i32, in_$i343: i32, in_$i344: i32, in_$i345: i1, in_$i346: i32, in_$i347: i32, in_vslice_dummy_var_157: i64, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i64, in_vslice_dummy_var_165: i64, in_vslice_dummy_var_166: i64, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i64, in_vslice_dummy_var_169: i64, in_vslice_dummy_var_170: i64, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: ref, in_vslice_dummy_var_173: i32, in_vslice_dummy_var_174: i64, in_vslice_dummy_var_175: i32, in_vslice_dummy_var_176: i32, in_vslice_dummy_var_177: i32, in_vslice_dummy_var_178: i32) returns (out_$i111: i32, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i32, out_$i130: i1, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$i144: i32, out_$i145: i1, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i149: i32, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$i153: i64, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i159: i32, out_$i160: i32, out_$i161: i32, out_$i162: i64, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i167: i32, out_$i168: i32, out_$i169: i32, out_$i170: i32, out_$i171: i64, out_$i173: i32, out_$i174: i1, out_$i176: i32, out_$i177: i32, out_$i178: i32, out_$i179: i1, out_$i181: i32, out_$i182: i32, out_$i183: i32, out_$i184: i1, out_$i186: i32, out_$i187: i32, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i1, out_$i192: i1, out_$i193: i1, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i32, out_$i198: i1, out_$p199: ref, out_$i200: i32, out_$i201: i64, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i64, out_$i207: i32, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$p212: ref, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i32, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i221: i32, out_$i222: i64, out_$i224: i32, out_$i225: i1, out_$i227: i32, out_$i228: i32, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i1, out_$i236: i32, out_$i237: i1, out_$i238: i32, out_$i239: i1, out_$i240: i32, out_$i241: i1, out_$i243: i32, out_$i244: i1, out_$i245: i32, out_$i246: i1, out_$i247: i32, out_$i248: i1, out_$i249: i32, out_$i250: i1, out_$i252: i32, out_$i253: i1, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i1, out_$i258: i1, out_$i259: i1, out_$i260: i1, out_$i261: i32, out_$i262: i1, out_$i263: i32, out_$i264: i32, out_$i265: i32, out_$i267: i32, out_$i268: i1, out_$i269: i32, out_$i271: i32, out_$i272: i1, out_$i274: i32, out_$i275: i1, out_$i276: i32, out_$i277: i1, out_$i278: i1, out_$i279: i1, out_$i280: i32, out_$i281: i1, out_$i282: i32, out_$i283: i1, out_$i284: i32, out_$i285: i1, out_$i286: i32, out_$i287: i32, out_$i288: i1, out_$i289: i32, out_$i290: i1, out_$i291: i32, out_$i292: i1, out_$i293: i32, out_$i294: i1, out_$i295: i32, out_$i296: i1, out_$i298: i32, out_$i299: i1, out_$i300: i32, out_$i301: i1, out_$i302: i1, out_$i303: i1, out_$i304: i1, out_$i305: i1, out_$i306: i32, out_$i307: i1, out_$i308: i32, out_$i309: i32, out_$i310: i32, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$i314: i32, out_$i315: i32, out_$i316: i64, out_$i318: i32, out_$i319: i1, out_$p320: ref, out_$i321: i32, out_$i322: i32, out_$i323: i64, out_$i325: i32, out_$i326: i1, out_$p327: ref, out_$i328: i32, out_$i329: i32, out_$i330: i64, out_$i332: i32, out_$i333: i1, out_$p334: ref, out_$i335: i32, out_$i336: i32, out_$i337: i64, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_$i342: i32, out_$i343: i32, out_$i344: i32, out_$i345: i1, out_$i346: i32, out_$i347: i32, out_vslice_dummy_var_157: i64, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i64, out_vslice_dummy_var_165: i64, out_vslice_dummy_var_166: i64, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i64, out_vslice_dummy_var_169: i64, out_vslice_dummy_var_170: i64, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: ref, out_vslice_dummy_var_173: i32, out_vslice_dummy_var_174: i64, out_vslice_dummy_var_175: i32, out_vslice_dummy_var_176: i32, out_vslice_dummy_var_177: i32, out_vslice_dummy_var_178: i32)
{

  entry:
    out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i173, out_$i174, out_$i176, out_$i177, out_$i178, out_$i179, out_$i181, out_$i182, out_$i183, out_$i184, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i209, out_$i210, out_$p211, out_$p212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$i224, out_$i225, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i267, out_$i268, out_$i269, out_$i271, out_$i272, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$p313, out_$i314, out_$i315, out_$i316, out_$i318, out_$i319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i332, out_$i333, out_$p334, out_$i335, out_$i336, out_$i337, out_$i339, out_$i340, out_$p341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178 := in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$p142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$p148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i155, in_$i156, in_$p157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i164, in_$i165, in_$p166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i173, in_$i174, in_$i176, in_$i177, in_$i178, in_$i179, in_$i181, in_$i182, in_$i183, in_$i184, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$p199, in_$i200, in_$i201, in_$i203, in_$i204, in_$p205, in_$i206, in_$i207, in_$i209, in_$i210, in_$p211, in_$p212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$p220, in_$i221, in_$i222, in_$i224, in_$i225, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i267, in_$i268, in_$i269, in_$i271, in_$i272, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$p313, in_$i314, in_$i315, in_$i316, in_$i318, in_$i319, in_$p320, in_$i321, in_$i322, in_$i323, in_$i325, in_$i326, in_$p327, in_$i328, in_$i329, in_$i330, in_$i332, in_$i333, in_$p334, in_$i335, in_$i336, in_$i337, in_$i339, in_$i340, in_$p341, in_$i342, in_$i343, in_$i344, in_$i345, in_$i346, in_$i347, in_vslice_dummy_var_157, in_vslice_dummy_var_158, in_vslice_dummy_var_159, in_vslice_dummy_var_160, in_vslice_dummy_var_161, in_vslice_dummy_var_162, in_vslice_dummy_var_163, in_vslice_dummy_var_164, in_vslice_dummy_var_165, in_vslice_dummy_var_166, in_vslice_dummy_var_167, in_vslice_dummy_var_168, in_vslice_dummy_var_169, in_vslice_dummy_var_170, in_vslice_dummy_var_171, in_vslice_dummy_var_172, in_vslice_dummy_var_173, in_vslice_dummy_var_174, in_vslice_dummy_var_175, in_vslice_dummy_var_176, in_vslice_dummy_var_177, in_vslice_dummy_var_178;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 979} out_$i111 := __VERIFIER_nondet_int();
    call {:si_unique_call 980} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i111);
    call {:si_unique_call 981} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i111);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb42_dummy;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb31:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 986} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4514;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} out_vslice_dummy_var_157 := loop_attr_do_show_partscan(in_$p25, in_$p27, in_$p23);
    goto corral_source_split_4513;

  $bb35:
    assume out_$i130 == 1;
    goto corral_source_split_4512;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 1);
    goto corral_source_split_4510;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    out_$i129 := $M.39;
    goto corral_source_split_4509;

  $bb33:
    assume out_$i128 == 1;
    goto corral_source_split_4508;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_4506:
    assume {:verifier.code 1} true;
    call {:si_unique_call 982} out_$i127 := __VERIFIER_nondet_int();
    call {:si_unique_call 983} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i127);
    call {:si_unique_call 984} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i127);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb30:
    assume out_$i126 == 1;
    goto corral_source_split_4506;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    out_$i126 := $ne.i32(out_$i125, 0);
    goto corral_source_split_4504;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    out_$i125 := $M.39;
    goto corral_source_split_4503;

  $bb28:
    assume out_$i124 == 1;
    goto corral_source_split_4502;

  $bb24:
    assume out_$i122 == 1;
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i111, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb18:
    assume out_$i119 == 1;
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i32(out_$i111, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb3:
    assume out_$i112 == 1;
    assume {:verifier.code 0} true;
    out_$i119 := $slt.i32(out_$i111, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i112 := $slt.i32(out_$i111, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} ldv_stop();
    goto corral_source_split_4516;

  $bb34:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb44:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb58:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb60:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 993} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(3);
    goto corral_source_split_4544;

  $bb59:
    assume out_$i145 == 1;
    goto corral_source_split_4543;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 0);
    goto corral_source_split_4541;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    out_$i144 := $M.52;
    goto corral_source_split_4540;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.52 := out_$i143;
    call {:si_unique_call 992} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_4539;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} out_$i143 := xor_init(out_$p142, in_$p31);
    goto corral_source_split_4538;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    out_$p142 := $M.30;
    goto corral_source_split_4537;

  $bb57:
    assume out_$i141 == 1;
    goto corral_source_split_4536;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 2);
    goto corral_source_split_4534;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    out_$i140 := $M.40;
    goto corral_source_split_4533;

  $bb55:
    assume out_$i139 == 1;
    goto corral_source_split_4532;

  $bb53:
    assume out_$i138 == 1;
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i134, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb46:
    assume out_$i135 == 1;
    assume {:verifier.code 0} true;
    out_$i138 := $slt.i32(out_$i134, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i135 := $slt.i32(out_$i134, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_4518:
    assume {:verifier.code 1} true;
    call {:si_unique_call 988} out_$i134 := __VERIFIER_nondet_int();
    call {:si_unique_call 989} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i134);
    call {:si_unique_call 990} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i134);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i133 == 1;
    goto corral_source_split_4518;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i32(out_$i132, 0);
    goto corral_source_split_4496;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    out_$i132 := $M.40;
    goto corral_source_split_4495;

  $bb26:
    assume out_$i123 == 1;
    goto corral_source_split_4494;

  $bb25:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i111, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb71:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 999} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_4580;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} out_vslice_dummy_var_160 := transfer_xor(out_$p166, out_$i167, in_$p29, out_$i168, in_$p33, out_$i169, out_$i170, out_$i171);
    goto corral_source_split_4579;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i64($M.29, in_$p0);
    goto corral_source_split_4578;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    out_$i170 := $load.i32($M.29, in_$p2);
    goto corral_source_split_4577;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    out_$i169 := $load.i32($M.29, in_$p1);
    goto corral_source_split_4576;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i32($M.29, in_$p4);
    goto corral_source_split_4575;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i32($M.29, in_$p3);
    goto corral_source_split_4574;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    out_$p166 := $M.30;
    goto corral_source_split_4573;

  $bb70:
    assume out_$i165 == 1;
    goto corral_source_split_4572;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 2);
    goto corral_source_split_4570;

  $bb69:
    assume {:verifier.code 0} true;
    out_$i164 := $M.40;
    goto corral_source_split_4569;

  $bb68:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 997} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(3);
    goto corral_source_split_4567;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} out_vslice_dummy_var_159 := transfer_xor(out_$p157, out_$i158, in_$p29, out_$i159, in_$p33, out_$i160, out_$i161, out_$i162);
    goto corral_source_split_4566;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i64($M.29, in_$p0);
    goto corral_source_split_4565;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    out_$i161 := $load.i32($M.29, in_$p2);
    goto corral_source_split_4564;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i32($M.29, in_$p1);
    goto corral_source_split_4563;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i32($M.29, in_$p4);
    goto corral_source_split_4562;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i32($M.29, in_$p3);
    goto corral_source_split_4561;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    out_$p157 := $M.30;
    goto corral_source_split_4560;

  $bb67:
    assume out_$i156 == 1;
    goto corral_source_split_4559;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 3);
    goto corral_source_split_4557;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i155 := $M.40;
    goto corral_source_split_4556;

  $bb65:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 995} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_4554;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} out_vslice_dummy_var_158 := transfer_xor(out_$p148, out_$i149, in_$p29, out_$i150, in_$p33, out_$i151, out_$i152, out_$i153);
    goto corral_source_split_4553;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i64($M.29, in_$p0);
    goto corral_source_split_4552;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i32($M.29, in_$p2);
    goto corral_source_split_4551;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i32($M.29, in_$p1);
    goto corral_source_split_4550;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i32($M.29, in_$p4);
    goto corral_source_split_4549;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i32($M.29, in_$p3);
    goto corral_source_split_4548;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    out_$p148 := $M.30;
    goto corral_source_split_4547;

  $bb64:
    assume out_$i147 == 1;
    goto corral_source_split_4546;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 1);
    goto corral_source_split_4530;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    out_$i146 := $M.40;
    goto corral_source_split_4529;

  $bb54:
    assume !(out_$i138 == 1);
    goto corral_source_split_4528;

  $bb74:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $M.48 := out_$i177;
    call {:si_unique_call 1002} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i177);
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    out_$i177 := $add.i32(out_$i176, 1);
    goto corral_source_split_4586;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    out_$i176 := $M.48;
    goto corral_source_split_4585;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1001} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_4584;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} out_vslice_dummy_var_161 := ldv_setup_11();
    goto corral_source_split_4583;

  $bb73:
    assume out_$i174 == 1;
    goto corral_source_split_4582;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 1);
    goto corral_source_split_4522;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    out_$i173 := $M.40;
    goto corral_source_split_4521;

  $bb48:
    assume out_$i136 == 1;
    goto corral_source_split_4520;

  $bb47:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    out_$i136 := $slt.i32(out_$i134, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb80:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $M.48 := out_$i187;
    call {:si_unique_call 1008} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i187);
    goto corral_source_split_4604;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    out_$i187 := $sub.i32(out_$i186, 1);
    goto corral_source_split_4603;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    out_$i186 := $M.48;
    goto corral_source_split_4602;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1007} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_4601;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} out_vslice_dummy_var_163 := ldv_release_11();
    goto corral_source_split_4600;

  $bb79:
    assume out_$i184 == 1;
    goto corral_source_split_4599;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i183, 2);
    goto corral_source_split_4597;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i183 := $M.40;
    goto corral_source_split_4596;

  $bb77:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $M.48 := out_$i182;
    call {:si_unique_call 1005} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i182);
    goto corral_source_split_4594;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    out_$i182 := $sub.i32(out_$i181, 1);
    goto corral_source_split_4593;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    out_$i181 := $M.48;
    goto corral_source_split_4592;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_4591;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} out_vslice_dummy_var_162 := ldv_release_11();
    goto corral_source_split_4590;

  $bb76:
    assume out_$i179 == 1;
    goto corral_source_split_4589;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 3);
    goto corral_source_split_4526;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    out_$i178 := $M.40;
    goto corral_source_split_4525;

  $bb50:
    assume out_$i137 == 1;
    goto corral_source_split_4524;

  $bb49:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i134, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} ldv_stop();
    goto corral_source_split_4606;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i137 == 1);
    goto $bb52;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(out_$i139 == 1);
    goto $bb52;

  $bb86:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb102:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4635;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} out_vslice_dummy_var_164 := loop_control_ioctl(out_$p199, out_$i200, out_$i201);
    goto corral_source_split_4634;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i64($M.29, in_$p10);
    goto corral_source_split_4633;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    out_$i200 := $load.i32($M.29, in_$p9);
    goto corral_source_split_4632;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    out_$p199 := $M.32;
    goto corral_source_split_4631;

  $bb101:
    assume out_$i198 == 1;
    goto corral_source_split_4630;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i32(out_$i197, 2);
    goto corral_source_split_4628;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    out_$i197 := $M.41;
    goto corral_source_split_4627;

  $bb99:
    assume out_$i196 == 1;
    goto corral_source_split_4626;

  $bb97:
    assume out_$i195 == 1;
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i190, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb88:
    assume out_$i191 == 1;
    assume {:verifier.code 0} true;
    out_$i195 := $slt.i32(out_$i190, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i191 := $slt.i32(out_$i190, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_4608:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1010} out_$i190 := __VERIFIER_nondet_int();
    call {:si_unique_call 1011} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i190);
    call {:si_unique_call 1012} {:cexpr "tmp___26"} boogie_si_record_i32(out_$i190);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb85:
    assume out_$i189 == 1;
    goto corral_source_split_4608;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    out_$i189 := $ne.i32(out_$i188, 0);
    goto corral_source_split_4500;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    out_$i188 := $M.41;
    goto corral_source_split_4499;

  $bb27:
    assume !(out_$i123 == 1);
    goto corral_source_split_4498;

  $bb106:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1016} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4642;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} out_vslice_dummy_var_165 := noop_llseek(out_$p205, out_$i206, out_$i207);
    goto corral_source_split_4641;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    out_$i207 := $load.i32($M.29, in_$p7);
    goto corral_source_split_4640;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    out_$i206 := $load.i64($M.29, in_$p6);
    goto corral_source_split_4639;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    out_$p205 := $M.32;
    goto corral_source_split_4638;

  $bb105:
    assume out_$i204 == 1;
    goto corral_source_split_4637;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 2);
    goto corral_source_split_4624;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    out_$i203 := $M.41;
    goto corral_source_split_4623;

  $bb98:
    assume !(out_$i195 == 1);
    goto corral_source_split_4622;

  $bb109:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb111:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $M.48 := out_$i217;
    call {:si_unique_call 1020} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i217);
    goto corral_source_split_4656;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    out_$i217 := $add.i32(out_$i216, 1);
    goto corral_source_split_4655;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    out_$i216 := $M.48;
    goto corral_source_split_4654;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1019} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4653;

  $bb110:
    assume out_$i215 == 1;
    goto corral_source_split_4652;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 0);
    goto corral_source_split_4650;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    out_$i214 := $M.53;
    goto corral_source_split_4649;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $M.53 := out_$i213;
    call {:si_unique_call 1018} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i213);
    goto corral_source_split_4648;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} out_$i213 := ldv_nonseekable_open_20(out_$p211, out_$p212);
    goto corral_source_split_4647;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    out_$p212 := $M.32;
    goto corral_source_split_4646;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    out_$p211 := $M.31;
    goto corral_source_split_4645;

  $bb108:
    assume out_$i210 == 1;
    goto corral_source_split_4644;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 1);
    goto corral_source_split_4612;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    out_$i209 := $M.41;
    goto corral_source_split_4611;

  $bb90:
    assume out_$i192 == 1;
    goto corral_source_split_4610;

  $bb89:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    out_$i192 := $slt.i32(out_$i190, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb115:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1022} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4663;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} out_vslice_dummy_var_166 := loop_control_ioctl(out_$p220, out_$i221, out_$i222);
    goto corral_source_split_4662;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    out_$i222 := $load.i64($M.29, in_$p5);
    goto corral_source_split_4661;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    out_$i221 := $load.i32($M.29, in_$p8);
    goto corral_source_split_4660;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    out_$p220 := $M.32;
    goto corral_source_split_4659;

  $bb114:
    assume out_$i219 == 1;
    goto corral_source_split_4658;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 2);
    goto corral_source_split_4616;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    out_$i218 := $M.41;
    goto corral_source_split_4615;

  $bb92:
    assume out_$i193 == 1;
    goto corral_source_split_4614;

  $bb91:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    out_$i193 := $slt.i32(out_$i190, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb118:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $M.48 := out_$i228;
    call {:si_unique_call 1025} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i228);
    goto corral_source_split_4670;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    out_$i228 := $sub.i32(out_$i227, 1);
    goto corral_source_split_4669;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    out_$i227 := $M.48;
    goto corral_source_split_4668;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1024} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4667;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} out_vslice_dummy_var_167 := ldv_release_3();
    goto corral_source_split_4666;

  $bb117:
    assume out_$i225 == 1;
    goto corral_source_split_4665;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i224, 2);
    goto corral_source_split_4620;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    out_$i224 := $M.41;
    goto corral_source_split_4619;

  $bb94:
    assume out_$i194 == 1;
    goto corral_source_split_4618;

  $bb93:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    out_$i194 := $eq.i32(out_$i190, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} ldv_stop();
    goto corral_source_split_4672;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb95:
    assume {:verifier.code 0} true;
    assume !(out_$i194 == 1);
    goto $bb96;

  $bb100:
    assume {:verifier.code 0} true;
    assume !(out_$i196 == 1);
    goto $bb96;

  $bb124:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb129:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1031} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4682;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} out_vslice_dummy_var_168 := loop_attr_do_show_autoclear(in_$p38, in_$p35, in_$p36);
    goto corral_source_split_4681;

  $bb128:
    assume out_$i234 == 1;
    goto corral_source_split_4680;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    out_$i234 := $eq.i32(out_$i233, 1);
    goto corral_source_split_4678;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    out_$i233 := $M.42;
    goto corral_source_split_4677;

  $bb126:
    assume out_$i232 == 1;
    goto corral_source_split_4676;

  $bb125:
    assume {:verifier.code 0} true;
    out_$i232 := $eq.i32(out_$i231, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_4674:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1027} out_$i231 := __VERIFIER_nondet_int();
    call {:si_unique_call 1028} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i231);
    call {:si_unique_call 1029} {:cexpr "tmp___27"} boogie_si_record_i32(out_$i231);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb123:
    assume out_$i230 == 1;
    goto corral_source_split_4674;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    out_$i230 := $ne.i32(out_$i229, 0);
    goto corral_source_split_4484;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    out_$i229 := $M.42;
    goto corral_source_split_4483;

  $bb20:
    assume out_$i120 == 1;
    goto corral_source_split_4482;

  $bb19:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    out_$i120 := $slt.i32(out_$i111, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} ldv_stop();
    goto corral_source_split_4684;

  $bb127:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb136:
    assume !(out_$i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb141:
    assume !(out_$i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1037} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_4694;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} out_vslice_dummy_var_169 := loop_attr_do_show_offset(in_$p43, in_$p40, in_$p41);
    goto corral_source_split_4693;

  $bb140:
    assume out_$i241 == 1;
    goto corral_source_split_4692;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i240, 1);
    goto corral_source_split_4690;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    out_$i240 := $M.43;
    goto corral_source_split_4689;

  $bb138:
    assume out_$i239 == 1;
    goto corral_source_split_4688;

  $bb137:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i32(out_$i238, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_4686:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1033} out_$i238 := __VERIFIER_nondet_int();
    call {:si_unique_call 1034} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i238);
    call {:si_unique_call 1035} {:cexpr "tmp___28"} boogie_si_record_i32(out_$i238);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb135:
    assume out_$i237 == 1;
    goto corral_source_split_4686;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    out_$i237 := $ne.i32(out_$i236, 0);
    goto corral_source_split_4488;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    out_$i236 := $M.43;
    goto corral_source_split_4487;

  $bb22:
    assume out_$i121 == 1;
    goto corral_source_split_4486;

  $bb21:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i111, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} ldv_stop();
    goto corral_source_split_4696;

  $bb139:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb148:
    assume !(out_$i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} invoke_work_2();
    goto corral_source_split_4699;

  $bb147:
    assume out_$i244 == 1;
    goto corral_source_split_4698;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    out_$i244 := $ne.i32(out_$i243, 0);
    goto corral_source_split_4492;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    out_$i243 := $M.44;
    goto corral_source_split_4491;

  $bb23:
    assume !(out_$i121 == 1);
    goto corral_source_split_4490;

  $bb151:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb156:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1044} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_4709;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} out_vslice_dummy_var_170 := loop_attr_do_show_sizelimit(in_$p47, in_$p45, in_$p48);
    goto corral_source_split_4708;

  $bb155:
    assume out_$i250 == 1;
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i249, 1);
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    out_$i249 := $M.45;
    goto corral_source_split_4704;

  $bb153:
    assume out_$i248 == 1;
    goto corral_source_split_4703;

  $bb152:
    assume {:verifier.code 0} true;
    out_$i248 := $eq.i32(out_$i247, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_4701:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1040} out_$i247 := __VERIFIER_nondet_int();
    call {:si_unique_call 1041} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i247);
    call {:si_unique_call 1042} {:cexpr "tmp___29"} boogie_si_record_i32(out_$i247);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb150:
    assume out_$i246 == 1;
    goto corral_source_split_4701;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    out_$i246 := $ne.i32(out_$i245, 0);
    goto corral_source_split_4472;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    out_$i245 := $M.45;
    goto corral_source_split_4471;

  $bb14:
    assume out_$i117 == 1;
    goto corral_source_split_4470;

  $bb5:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    out_$i117 := $slt.i32(out_$i111, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i111, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} ldv_stop();
    goto corral_source_split_4711;

  $bb154:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb163:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} invoke_work_1();
    goto corral_source_split_4714;

  $bb162:
    assume out_$i253 == 1;
    goto corral_source_split_4713;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    out_$i253 := $ne.i32(out_$i252, 0);
    goto corral_source_split_4476;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    out_$i252 := $M.46;
    goto corral_source_split_4475;

  $bb16:
    assume out_$i118 == 1;
    goto corral_source_split_4474;

  $bb15:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    out_$i118 := $slt.i32(out_$i111, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb166:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb178:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1051} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} out_vslice_dummy_var_171 := loop_init_request(in_$p55, in_$p54, out_$i263, out_$i264, out_$i265);
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    out_$i265 := $load.i32($M.29, in_$p13);
    goto corral_source_split_4733;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    out_$i264 := $load.i32($M.29, in_$p11);
    goto corral_source_split_4732;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    out_$i263 := $load.i32($M.29, in_$p12);
    goto corral_source_split_4731;

  $bb177:
    assume out_$i262 == 1;
    goto corral_source_split_4730;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    out_$i262 := $eq.i32(out_$i261, 1);
    goto corral_source_split_4728;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    out_$i261 := $M.47;
    goto corral_source_split_4727;

  $bb175:
    assume out_$i260 == 1;
    goto corral_source_split_4726;

  $bb168:
    assume out_$i257 == 1;
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i256, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb167:
    assume {:verifier.code 0} true;
    out_$i257 := $slt.i32(out_$i256, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_4716:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1047} out_$i256 := __VERIFIER_nondet_int();
    call {:si_unique_call 1048} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i256);
    call {:si_unique_call 1049} {:cexpr "tmp___30"} boogie_si_record_i32(out_$i256);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb165:
    assume out_$i255 == 1;
    goto corral_source_split_4716;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    out_$i255 := $ne.i32(out_$i254, 0);
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    out_$i254 := $M.47;
    goto corral_source_split_4479;

  $bb17:
    assume !(out_$i118 == 1);
    goto corral_source_split_4478;

  $bb182:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1053} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4740;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} out_vslice_dummy_var_172 := blk_mq_map_queue(in_$p57, out_$i269);
    goto corral_source_split_4739;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    out_$i269 := $load.i32($M.29, in_$p14);
    goto corral_source_split_4738;

  $bb181:
    assume out_$i268 == 1;
    goto corral_source_split_4737;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    out_$i268 := $eq.i32(out_$i267, 1);
    goto corral_source_split_4720;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    out_$i267 := $M.47;
    goto corral_source_split_4719;

  $bb170:
    assume out_$i258 == 1;
    goto corral_source_split_4718;

  $bb169:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    out_$i258 := $slt.i32(out_$i256, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb185:
    assume !(out_$i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1055} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4744;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} out_vslice_dummy_var_173 := loop_queue_rq(in_$p50, in_$p52);
    goto corral_source_split_4743;

  $bb184:
    assume out_$i272 == 1;
    goto corral_source_split_4742;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    out_$i272 := $eq.i32(out_$i271, 1);
    goto corral_source_split_4724;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    out_$i271 := $M.47;
    goto corral_source_split_4723;

  $bb172:
    assume out_$i259 == 1;
    goto corral_source_split_4722;

  $bb171:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    out_$i259 := $eq.i32(out_$i256, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} ldv_stop();
    goto corral_source_split_4746;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb173:
    assume {:verifier.code 0} true;
    assume !(out_$i259 == 1);
    goto $bb174;

  $bb176:
    assume {:verifier.code 0} true;
    assume !(out_$i260 == 1);
    goto $bb174;

  $bb191:
    assume !(out_$i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb201:
    assume {:verifier.code 0} true;
    assume !(out_$i281 == 1);
    goto $bb202;

  $bb204:
    assume {:verifier.code 0} true;
    assume !(out_$i283 == 1);
    goto $bb202;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    out_$i283 := $eq.i32(out_$i282, 0);
    goto corral_source_split_4760;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    out_$i282 := $M.48;
    goto corral_source_split_4759;

  $bb200:
    assume out_$i281 == 1;
    goto corral_source_split_4758;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    out_$i281 := $eq.i32(out_$i280, 2);
    goto corral_source_split_4756;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    out_$i280 := $M.49;
    goto corral_source_split_4755;

  $bb198:
    assume out_$i279 == 1;
    goto corral_source_split_4754;

  $bb193:
    assume out_$i277 == 1;
    assume {:verifier.code 0} true;
    out_$i279 := $eq.i32(out_$i276, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb192:
    assume {:verifier.code 0} true;
    out_$i277 := $slt.i32(out_$i276, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_4748:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1057} out_$i276 := __VERIFIER_nondet_int();
    call {:si_unique_call 1058} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i276);
    call {:si_unique_call 1059} {:cexpr "tmp___31"} boogie_si_record_i32(out_$i276);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb190:
    assume out_$i275 == 1;
    goto corral_source_split_4748;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    out_$i275 := $ne.i32(out_$i274, 0);
    goto corral_source_split_4460;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    out_$i274 := $M.49;
    goto corral_source_split_4459;

  $bb7:
    assume out_$i114 == 1;
    goto corral_source_split_4458;

  $bb6:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    out_$i114 := $slt.i32(out_$i111, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb209:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb214:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1076} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4791;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} ldv_initialize_loop_func_table_11();
    goto corral_source_split_4790;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1074} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_4789;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1073} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4788;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1072} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1071} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_4786;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1070} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1069} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_4784;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} ldv_initialize_block_device_operations_5();
    goto corral_source_split_4783;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1067} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1066} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4781;

  $bb213:
    assume out_$i290 == 1;
    goto corral_source_split_4780;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    out_$i290 := $eq.i32(out_$i289, 0);
    goto corral_source_split_4778;

  $bb212:
    assume {:verifier.code 0} true;
    out_$i289 := $M.54;
    goto corral_source_split_4777;

  $bb211:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    out_$i288 := $ne.i32(out_$i287, 0);
    goto corral_source_split_4772;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    out_$i287 := $M.54;
    goto corral_source_split_4771;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $M.54 := out_$i286;
    call {:si_unique_call 1064} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i286);
    goto corral_source_split_4770;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} out_$i286 := loop_init();
    goto corral_source_split_4769;

  $bb208:
    assume out_$i285 == 1;
    goto corral_source_split_4768;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i284, 1);
    goto corral_source_split_4752;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    out_$i284 := $M.49;
    goto corral_source_split_4751;

  $bb195:
    assume out_$i278 == 1;
    goto corral_source_split_4750;

  $bb194:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i276, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} ldv_stop();
    goto corral_source_split_4793;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb196:
    assume {:verifier.code 0} true;
    assume !(out_$i278 == 1);
    goto $bb197;

  $bb199:
    assume {:verifier.code 0} true;
    assume !(out_$i279 == 1);
    goto $bb197;

  $bb221:
    assume !(out_$i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb226:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1082} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_4803;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} out_vslice_dummy_var_174 := loop_attr_do_show_backing_file(in_$p59, in_$p62, in_$p60);
    goto corral_source_split_4802;

  $bb225:
    assume out_$i296 == 1;
    goto corral_source_split_4801;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    out_$i296 := $eq.i32(out_$i295, 1);
    goto corral_source_split_4799;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    out_$i295 := $M.50;
    goto corral_source_split_4798;

  $bb223:
    assume out_$i294 == 1;
    goto corral_source_split_4797;

  $bb222:
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i32(out_$i293, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_4795:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1078} out_$i293 := __VERIFIER_nondet_int();
    call {:si_unique_call 1079} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i293);
    call {:si_unique_call 1080} {:cexpr "tmp___32"} boogie_si_record_i32(out_$i293);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb220:
    assume out_$i292 == 1;
    goto corral_source_split_4795;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    out_$i292 := $ne.i32(out_$i291, 0);
    goto corral_source_split_4464;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    out_$i291 := $M.50;
    goto corral_source_split_4463;

  $bb9:
    assume out_$i115 == 1;
    goto corral_source_split_4462;

  $bb8:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    out_$i115 := $slt.i32(out_$i111, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} ldv_stop();
    goto corral_source_split_4805;

  $bb224:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb233:
    assume !(out_$i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb247:
    assume !(out_$i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $M.48 := out_$i310;
    call {:si_unique_call 1089} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i310);
    goto corral_source_split_4831;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    out_$i310 := $sub.i32(out_$i309, 1);
    goto corral_source_split_4830;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    out_$i309 := $M.48;
    goto corral_source_split_4829;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1088} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4828;

  SeqInstr_81:
    goto corral_source_split_4827;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} lo_release(in_$p64, out_$i308);
    goto SeqInstr_80;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    out_$i308 := $load.i32($M.29, in_$p15);
    goto corral_source_split_4826;

  $bb246:
    assume out_$i307 == 1;
    goto corral_source_split_4825;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    out_$i307 := $eq.i32(out_$i306, 2);
    goto corral_source_split_4823;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    out_$i306 := $M.51;
    goto corral_source_split_4822;

  $bb244:
    assume out_$i305 == 1;
    goto corral_source_split_4821;

  $bb242:
    assume out_$i304 == 1;
    assume {:verifier.code 0} true;
    out_$i305 := $eq.i32(out_$i300, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb235:
    assume out_$i301 == 1;
    assume {:verifier.code 0} true;
    out_$i304 := $slt.i32(out_$i300, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb234:
    assume {:verifier.code 0} true;
    out_$i301 := $slt.i32(out_$i300, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_4807:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1084} out_$i300 := __VERIFIER_nondet_int();
    call {:si_unique_call 1085} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i300);
    call {:si_unique_call 1086} {:cexpr "tmp___33"} boogie_si_record_i32(out_$i300);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb232:
    assume out_$i299 == 1;
    goto corral_source_split_4807;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    out_$i299 := $ne.i32(out_$i298, 0);
    goto corral_source_split_4468;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    out_$i298 := $M.51;
    goto corral_source_split_4467;

  $bb11:
    assume out_$i116 == 1;
    goto corral_source_split_4466;

  $bb10:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i111, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb254:
    assume !(out_$i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1093} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_4850;

  SeqInstr_87:
    goto corral_source_split_4849;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} out_vslice_dummy_var_176 := lo_ioctl(out_$p320, out_$i321, out_$i322, out_$i323);
    goto SeqInstr_86;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    out_$i323 := $load.i64($M.29, in_$p22);
    goto corral_source_split_4848;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    out_$i322 := $load.i32($M.29, in_$p19);
    goto corral_source_split_4847;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    out_$i321 := $load.i32($M.29, in_$p18);
    goto corral_source_split_4846;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    out_$p320 := $M.38;
    goto corral_source_split_4845;

  $bb253:
    assume out_$i319 == 1;
    goto corral_source_split_4844;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    out_$i319 := $eq.i32(out_$i318, 2);
    goto corral_source_split_4842;

  $bb252:
    assume {:verifier.code 0} true;
    out_$i318 := $M.51;
    goto corral_source_split_4841;

  $bb251:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    goto $bb252;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1091} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4839;

  SeqInstr_84:
    goto corral_source_split_4838;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} out_vslice_dummy_var_175 := lo_ioctl(out_$p313, out_$i314, out_$i315, out_$i316);
    goto SeqInstr_83;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    out_$i316 := $load.i64($M.29, in_$p22);
    goto corral_source_split_4837;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    out_$i315 := $load.i32($M.29, in_$p19);
    goto corral_source_split_4836;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    out_$i314 := $load.i32($M.29, in_$p18);
    goto corral_source_split_4835;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    out_$p313 := $M.38;
    goto corral_source_split_4834;

  $bb250:
    assume out_$i312 == 1;
    goto corral_source_split_4833;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    out_$i312 := $eq.i32(out_$i311, 1);
    goto corral_source_split_4819;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    out_$i311 := $M.51;
    goto corral_source_split_4818;

  $bb243:
    assume !(out_$i304 == 1);
    goto corral_source_split_4817;

  $bb260:
    assume !(out_$i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1097} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_4869;

  SeqInstr_93:
    goto corral_source_split_4868;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} out_vslice_dummy_var_178 := lo_compat_ioctl(out_$p334, out_$i335, out_$i336, out_$i337);
    goto SeqInstr_92;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    out_$i337 := $load.i64($M.29, in_$p17);
    goto corral_source_split_4867;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    out_$i336 := $load.i32($M.29, in_$p16);
    goto corral_source_split_4866;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    out_$i335 := $load.i32($M.29, in_$p21);
    goto corral_source_split_4865;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    out_$p334 := $M.38;
    goto corral_source_split_4864;

  $bb259:
    assume out_$i333 == 1;
    goto corral_source_split_4863;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    out_$i333 := $eq.i32(out_$i332, 2);
    goto corral_source_split_4861;

  $bb258:
    assume {:verifier.code 0} true;
    out_$i332 := $M.51;
    goto corral_source_split_4860;

  $bb257:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1095} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4858;

  SeqInstr_90:
    goto corral_source_split_4857;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} out_vslice_dummy_var_177 := lo_compat_ioctl(out_$p327, out_$i328, out_$i329, out_$i330);
    goto SeqInstr_89;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    out_$i330 := $load.i64($M.29, in_$p17);
    goto corral_source_split_4856;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    out_$i329 := $load.i32($M.29, in_$p16);
    goto corral_source_split_4855;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    out_$i328 := $load.i32($M.29, in_$p21);
    goto corral_source_split_4854;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    out_$p327 := $M.38;
    goto corral_source_split_4853;

  $bb256:
    assume out_$i326 == 1;
    goto corral_source_split_4852;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    out_$i326 := $eq.i32(out_$i325, 1);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    out_$i325 := $M.51;
    goto corral_source_split_4810;

  $bb237:
    assume out_$i302 == 1;
    goto corral_source_split_4809;

  $bb236:
    assume !(out_$i301 == 1);
    assume {:verifier.code 0} true;
    out_$i302 := $slt.i32(out_$i300, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb263:
    assume !(out_$i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb265:
    assume !(out_$i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    goto $bb266;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $M.48 := out_$i347;
    call {:si_unique_call 1101} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i347);
    goto corral_source_split_4883;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    out_$i347 := $add.i32(out_$i346, 1);
    goto corral_source_split_4882;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    out_$i346 := $M.48;
    goto corral_source_split_4881;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1100} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_4880;

  $bb264:
    assume out_$i345 == 1;
    goto corral_source_split_4879;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    out_$i345 := $eq.i32(out_$i344, 0);
    goto corral_source_split_4877;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    out_$i344 := $M.55;
    goto corral_source_split_4876;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $M.55 := out_$i343;
    call {:si_unique_call 1099} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i343);
    goto corral_source_split_4875;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} out_$i343 := lo_open(out_$p341, out_$i342);
    goto corral_source_split_4874;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    out_$i342 := $load.i32($M.29, in_$p20);
    goto corral_source_split_4873;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    out_$p341 := $M.38;
    goto corral_source_split_4872;

  $bb262:
    assume out_$i340 == 1;
    goto corral_source_split_4871;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    out_$i340 := $eq.i32(out_$i339, 1);
    goto corral_source_split_4815;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    out_$i339 := $M.51;
    goto corral_source_split_4814;

  $bb239:
    assume out_$i303 == 1;
    goto corral_source_split_4813;

  $bb238:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    out_$i303 := $eq.i32(out_$i300, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} ldv_stop();
    goto corral_source_split_4885;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb240:
    assume {:verifier.code 0} true;
    assume !(out_$i303 == 1);
    goto $bb241;

  $bb245:
    assume {:verifier.code 0} true;
    assume !(out_$i305 == 1);
    goto $bb241;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} ldv_stop();
    goto corral_source_split_4887;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i116 == 1);
    goto $bb13;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    goto $bb13;

  $bb42_dummy:
    call {:si_unique_call 1} out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i173, out_$i174, out_$i176, out_$i177, out_$i178, out_$i179, out_$i181, out_$i182, out_$i183, out_$i184, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i209, out_$i210, out_$p211, out_$p212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$i224, out_$i225, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i267, out_$i268, out_$i269, out_$i271, out_$i272, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$p313, out_$i314, out_$i315, out_$i316, out_$i318, out_$i319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i332, out_$i333, out_$p334, out_$i335, out_$i336, out_$i337, out_$i339, out_$i340, out_$p341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p25, in_$p27, in_$p29, in_$p31, in_$p33, in_$p35, in_$p36, in_$p38, in_$p40, in_$p41, in_$p43, in_$p45, in_$p47, in_$p48, in_$p50, in_$p52, in_$p54, in_$p55, in_$p57, in_$p59, in_$p60, in_$p62, in_$p64, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i173, out_$i174, out_$i176, out_$i177, out_$i178, out_$i179, out_$i181, out_$i182, out_$i183, out_$i184, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i209, out_$i210, out_$p211, out_$p212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$i224, out_$i225, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i267, out_$i268, out_$i269, out_$i271, out_$i272, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$p313, out_$i314, out_$i315, out_$i316, out_$i318, out_$i319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i332, out_$i333, out_$p334, out_$i335, out_$i336, out_$i337, out_$i339, out_$i340, out_$p341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p31: ref, in_$p33: ref, in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$p45: ref, in_$p47: ref, in_$p48: ref, in_$p50: ref, in_$p52: ref, in_$p54: ref, in_$p55: ref, in_$p57: ref, in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p64: ref, in_$i111: i32, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i32, in_$i130: i1, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$i144: i32, in_$i145: i1, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i149: i32, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$i153: i64, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i159: i32, in_$i160: i32, in_$i161: i32, in_$i162: i64, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i167: i32, in_$i168: i32, in_$i169: i32, in_$i170: i32, in_$i171: i64, in_$i173: i32, in_$i174: i1, in_$i176: i32, in_$i177: i32, in_$i178: i32, in_$i179: i1, in_$i181: i32, in_$i182: i32, in_$i183: i32, in_$i184: i1, in_$i186: i32, in_$i187: i32, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i1, in_$i192: i1, in_$i193: i1, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i32, in_$i198: i1, in_$p199: ref, in_$i200: i32, in_$i201: i64, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i64, in_$i207: i32, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$p212: ref, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i32, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i221: i32, in_$i222: i64, in_$i224: i32, in_$i225: i1, in_$i227: i32, in_$i228: i32, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i1, in_$i236: i32, in_$i237: i1, in_$i238: i32, in_$i239: i1, in_$i240: i32, in_$i241: i1, in_$i243: i32, in_$i244: i1, in_$i245: i32, in_$i246: i1, in_$i247: i32, in_$i248: i1, in_$i249: i32, in_$i250: i1, in_$i252: i32, in_$i253: i1, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i1, in_$i258: i1, in_$i259: i1, in_$i260: i1, in_$i261: i32, in_$i262: i1, in_$i263: i32, in_$i264: i32, in_$i265: i32, in_$i267: i32, in_$i268: i1, in_$i269: i32, in_$i271: i32, in_$i272: i1, in_$i274: i32, in_$i275: i1, in_$i276: i32, in_$i277: i1, in_$i278: i1, in_$i279: i1, in_$i280: i32, in_$i281: i1, in_$i282: i32, in_$i283: i1, in_$i284: i32, in_$i285: i1, in_$i286: i32, in_$i287: i32, in_$i288: i1, in_$i289: i32, in_$i290: i1, in_$i291: i32, in_$i292: i1, in_$i293: i32, in_$i294: i1, in_$i295: i32, in_$i296: i1, in_$i298: i32, in_$i299: i1, in_$i300: i32, in_$i301: i1, in_$i302: i1, in_$i303: i1, in_$i304: i1, in_$i305: i1, in_$i306: i32, in_$i307: i1, in_$i308: i32, in_$i309: i32, in_$i310: i32, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$i314: i32, in_$i315: i32, in_$i316: i64, in_$i318: i32, in_$i319: i1, in_$p320: ref, in_$i321: i32, in_$i322: i32, in_$i323: i64, in_$i325: i32, in_$i326: i1, in_$p327: ref, in_$i328: i32, in_$i329: i32, in_$i330: i64, in_$i332: i32, in_$i333: i1, in_$p334: ref, in_$i335: i32, in_$i336: i32, in_$i337: i64, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_$i342: i32, in_$i343: i32, in_$i344: i32, in_$i345: i1, in_$i346: i32, in_$i347: i32, in_vslice_dummy_var_157: i64, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i64, in_vslice_dummy_var_165: i64, in_vslice_dummy_var_166: i64, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i64, in_vslice_dummy_var_169: i64, in_vslice_dummy_var_170: i64, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: ref, in_vslice_dummy_var_173: i32, in_vslice_dummy_var_174: i64, in_vslice_dummy_var_175: i32, in_vslice_dummy_var_176: i32, in_vslice_dummy_var_177: i32, in_vslice_dummy_var_178: i32) returns (out_$i111: i32, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i32, out_$i130: i1, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$i144: i32, out_$i145: i1, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i149: i32, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$i153: i64, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i159: i32, out_$i160: i32, out_$i161: i32, out_$i162: i64, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i167: i32, out_$i168: i32, out_$i169: i32, out_$i170: i32, out_$i171: i64, out_$i173: i32, out_$i174: i1, out_$i176: i32, out_$i177: i32, out_$i178: i32, out_$i179: i1, out_$i181: i32, out_$i182: i32, out_$i183: i32, out_$i184: i1, out_$i186: i32, out_$i187: i32, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i1, out_$i192: i1, out_$i193: i1, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i32, out_$i198: i1, out_$p199: ref, out_$i200: i32, out_$i201: i64, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i64, out_$i207: i32, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$p212: ref, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i32, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i221: i32, out_$i222: i64, out_$i224: i32, out_$i225: i1, out_$i227: i32, out_$i228: i32, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i1, out_$i236: i32, out_$i237: i1, out_$i238: i32, out_$i239: i1, out_$i240: i32, out_$i241: i1, out_$i243: i32, out_$i244: i1, out_$i245: i32, out_$i246: i1, out_$i247: i32, out_$i248: i1, out_$i249: i32, out_$i250: i1, out_$i252: i32, out_$i253: i1, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i1, out_$i258: i1, out_$i259: i1, out_$i260: i1, out_$i261: i32, out_$i262: i1, out_$i263: i32, out_$i264: i32, out_$i265: i32, out_$i267: i32, out_$i268: i1, out_$i269: i32, out_$i271: i32, out_$i272: i1, out_$i274: i32, out_$i275: i1, out_$i276: i32, out_$i277: i1, out_$i278: i1, out_$i279: i1, out_$i280: i32, out_$i281: i1, out_$i282: i32, out_$i283: i1, out_$i284: i32, out_$i285: i1, out_$i286: i32, out_$i287: i32, out_$i288: i1, out_$i289: i32, out_$i290: i1, out_$i291: i32, out_$i292: i1, out_$i293: i32, out_$i294: i1, out_$i295: i32, out_$i296: i1, out_$i298: i32, out_$i299: i1, out_$i300: i32, out_$i301: i1, out_$i302: i1, out_$i303: i1, out_$i304: i1, out_$i305: i1, out_$i306: i32, out_$i307: i1, out_$i308: i32, out_$i309: i32, out_$i310: i32, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$i314: i32, out_$i315: i32, out_$i316: i64, out_$i318: i32, out_$i319: i1, out_$p320: ref, out_$i321: i32, out_$i322: i32, out_$i323: i64, out_$i325: i32, out_$i326: i1, out_$p327: ref, out_$i328: i32, out_$i329: i32, out_$i330: i64, out_$i332: i32, out_$i333: i1, out_$p334: ref, out_$i335: i32, out_$i336: i32, out_$i337: i64, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_$i342: i32, out_$i343: i32, out_$i344: i32, out_$i345: i1, out_$i346: i32, out_$i347: i32, out_vslice_dummy_var_157: i64, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i64, out_vslice_dummy_var_165: i64, out_vslice_dummy_var_166: i64, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i64, out_vslice_dummy_var_169: i64, out_vslice_dummy_var_170: i64, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: ref, out_vslice_dummy_var_173: i32, out_vslice_dummy_var_174: i64, out_vslice_dummy_var_175: i32, out_vslice_dummy_var_176: i32, out_vslice_dummy_var_177: i32, out_vslice_dummy_var_178: i32);
  modifies $M.39, $M.0, $M.40, $M.52, $M.3, $M.48, $M.41, $M.26, $CurrAddr, $M.53, $M.42, $M.43, $M.10, $M.12, $M.14, $M.16, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.45, $M.33, $M.34, $M.35, $M.36, $M.47, $M.11, $M.13, $M.15, $M.17, $M.30, $M.50, $M.38, $M.51, $M.49, $M.54, $M.24, $M.57, $M.31, $M.32, $M.25, $M.1, $M.2, assertsPassed, $M.21, $M.22, $M.23, $M.55;



implementation loop_init_loop_$bb24(in_$p0: ref, in_$i33: i32, in_$i39: i32, in_$i40: i1, in_$i37: i32, in_vslice_dummy_var_182: i32) returns (out_$i39: i32, out_$i40: i1, out_$i37: i32, out_vslice_dummy_var_182: i32)
{

  entry:
    out_$i39, out_$i40, out_$i37, out_vslice_dummy_var_182 := in_$i39, in_$i40, in_$i37, in_vslice_dummy_var_182;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_4986;

  $bb26:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := out_$i39;
    goto $bb26_dummy;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i39, in_$i33);
    goto corral_source_split_4990;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i37, 1);
    call {:si_unique_call 1130} {:cexpr "i"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_4989;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} out_vslice_dummy_var_182 := loop_add(in_$p0, out_$i37);
    goto corral_source_split_4988;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i39, out_$i40, out_$i37, out_vslice_dummy_var_182 := loop_init_loop_$bb24(in_$p0, in_$i33, out_$i39, out_$i40, out_$i37, out_vslice_dummy_var_182);
    return;

  exit:
    return;
}



procedure loop_init_loop_$bb24(in_$p0: ref, in_$i33: i32, in_$i39: i32, in_$i40: i1, in_$i37: i32, in_vslice_dummy_var_182: i32) returns (out_$i39: i32, out_$i40: i1, out_$i37: i32, out_vslice_dummy_var_182: i32);
  modifies $M.0, $M.26, $CurrAddr;


