var $M.0: i32;

var $M.1: i32;

var $M.2: i32;

var $M.3: i32;

var $M.4: i32;

var $M.5: i32;

var $M.6: i32;

var $M.7: [ref]i8;

var $M.8: [ref]ref;

var $M.9: [ref]i8;

var $M.10: i32;

var $M.11: i32;

var $M.12: i32;

var $M.13: [ref]i8;

var $M.14: [ref]i32;

var $M.15: [ref]i8;

var $M.16: [ref]ref;

var $M.17: [ref]ref;

var $M.18: [ref]i8;

var $M.19: [ref]i64;

var $M.20: [ref]i32;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]ref;

var $M.24: [ref]i64;

var $M.25: [ref]i64;

var $M.26: i32;

var $M.27: i32;

var $M.28: i32;

var $M.29: i32;

var $M.30: i32;

var $M.31: i32;

var $M.32: i32;

var $M.33: [ref]i8;

var $M.34: [ref]ref;

var $M.37: [ref]ref;

var $M.38: [ref]i8;

var $M.39: [ref]i32;

var $M.40: [ref]ref;

var $M.41: [ref]i8;

var $M.42: [ref]ref;

var $M.43: [ref]ref;

var $M.44: [ref]ref;

var $M.45: [ref]i32;

var $M.46: [ref]ref;

var $M.47: [ref]ref;

var $M.48: [ref]ref;

var $M.49: [ref]ref;

var $M.50: [ref]ref;

var $M.51: [ref]i8;

var $M.52: [ref]ref;

var $M.53: [ref]ref;

var $M.54: [ref]ref;

var $M.57: [ref]i64;

var $M.58: [ref]ref;

var $M.90: [ref]i8;

var $M.91: [ref]i8;

var $M.92: [ref]i8;

var $M.93: [ref]i8;

var $M.94: [ref]i8;

var $M.95: [ref]i8;

var $M.96: [ref]i8;

var $M.97: [ref]i8;

var $M.98: [ref]i8;

var $M.99: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 542481);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const {:count 15} seq_client_load: ref;

axiom seq_client_load == $sub.ref(0, 1084);

const seq_default_timer_class: ref;

axiom seq_default_timer_class == $sub.ref(0, 2112);

const seq_default_timer_sclass: ref;

axiom seq_default_timer_sclass == $sub.ref(0, 3140);

const seq_default_timer_card: ref;

axiom seq_default_timer_card == $sub.ref(0, 4168);

const seq_default_timer_device: ref;

axiom seq_default_timer_device == $sub.ref(0, 5196);

const seq_default_timer_subdevice: ref;

axiom seq_default_timer_subdevice == $sub.ref(0, 6224);

const seq_default_timer_resolution: ref;

axiom seq_default_timer_resolution == $sub.ref(0, 7252);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 8280);

const announce_port: ref;

axiom announce_port == $sub.ref(0, 9308);

const sysclient: ref;

axiom sysclient == $sub.ref(0, 10336);

const queue_list_lock: ref;

axiom queue_list_lock == $sub.ref(0, 11432);

const snd_seq_f_ops: ref;

axiom snd_seq_f_ops == $sub.ref(0, 12672);

const {:count 30} ioctl_tables: ref;

axiom ioctl_tables == $sub.ref(0, 14176);

const register_mutex: ref;

axiom register_mutex == $sub.ref(0, 15368);

const clients_lock: ref;

axiom clients_lock == $sub.ref(0, 16464);

const ldv_mutex_timer_mutex: ref;

axiom ldv_mutex_timer_mutex == $sub.ref(0, 17492);

const ldv_mutex_register_mutex: ref;

axiom ldv_mutex_register_mutex == $sub.ref(0, 18520);

const ldv_mutex_power_lock: ref;

axiom ldv_mutex_power_lock == $sub.ref(0, 19548);

const ldv_mutex_ports_mutex: ref;

axiom ldv_mutex_ports_mutex == $sub.ref(0, 20576);

const ldv_mutex_mutex: ref;

axiom ldv_mutex_mutex == $sub.ref(0, 21604);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 22632);

const ldv_mutex_cred_guard_mutex: ref;

axiom ldv_mutex_cred_guard_mutex == $sub.ref(0, 23660);

const timer_entry: ref;

axiom timer_entry == $sub.ref(0, 24692);

const clients_entry: ref;

axiom clients_entry == $sub.ref(0, 25724);

const queues_entry: ref;

axiom queues_entry == $sub.ref(0, 26756);

const num_queues: ref;

axiom num_queues == $sub.ref(0, 27784);

const {:count 8} queue_list: ref;

axiom queue_list == $sub.ref(0, 28872);

const client_usage: ref;

axiom client_usage == $sub.ref(0, 29904);

const {:count 192} clienttab: ref;

axiom clienttab == $sub.ref(0, 32464);

const {:count 192} clienttablock: ref;

axiom clienttablock == $sub.ref(0, 33680);

const {:count 282} .str.34: ref;

axiom .str.34 == $sub.ref(0, 34986);

const {:count 282} .str.63: ref;

axiom .str.63 == $sub.ref(0, 36292);

const {:count 53} .str.66: ref;

axiom .str.66 == $sub.ref(0, 37369);

const {:count 282} .str.57: ref;

axiom .str.57 == $sub.ref(0, 38675);

const {:count 53} .str.59: ref;

axiom .str.59 == $sub.ref(0, 39752);

const {:count 283} .str.22: ref;

axiom .str.22 == $sub.ref(0, 41059);

const {:count 11} .str.6: ref;

axiom .str.6 == $sub.ref(0, 42094);

const {:count 6} .str.7: ref;

axiom .str.7 == $sub.ref(0, 43124);

const {:count 6} .str.23: ref;

axiom .str.23 == $sub.ref(0, 44154);

const {:count 54} .str.62: ref;

axiom .str.62 == $sub.ref(0, 45232);

const .str: ref;

axiom .str == $sub.ref(0, 46305);

const {:count 281} .str.1: ref;

axiom .str.1 == $sub.ref(0, 47610);

const {:count 39} .str.2: ref;

axiom .str.2 == $sub.ref(0, 48673);

const {:count 5} .str.67: ref;

axiom .str.67 == $sub.ref(0, 49702);

const {:count 286} .str.3: ref;

axiom .str.3 == $sub.ref(0, 51012);

const {:count 161} .str.8: ref;

axiom .str.8 == $sub.ref(0, 52197);

const {:count 39} .str.94: ref;

axiom .str.94 == $sub.ref(0, 53260);

const {:count 57} .str.95: ref;

axiom .str.95 == $sub.ref(0, 54341);

const {:count 4} .str.9: ref;

axiom .str.9 == $sub.ref(0, 55369);

const {:count 39} .str.89: ref;

axiom .str.89 == $sub.ref(0, 56432);

const {:count 281} .str.50: ref;

axiom .str.50 == $sub.ref(0, 57737);

const {:count 3} .str.55: ref;

axiom .str.55 == $sub.ref(0, 58764);

const {:count 168} .str.107: ref;

axiom .str.107 == $sub.ref(0, 59956);

const {:count 27} .str.108: ref;

axiom .str.108 == $sub.ref(0, 61007);

const {:count 30} .str.109: ref;

axiom .str.109 == $sub.ref(0, 62061);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 47} .str.4: ref;

axiom .str.4 == $sub.ref(0, 63132);

const {:count 18} .str.5: ref;

axiom .str.5 == $sub.ref(0, 64174);

const snd_ecards_limit: ref;

axiom snd_ecards_limit == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 45} .str.25: ref;

axiom .str.25 == $sub.ref(0, 65243);

const {:count 19} .str.70: ref;

axiom .str.70 == $sub.ref(0, 66286);

const {:count 44} .str.71: ref;

axiom .str.71 == $sub.ref(0, 67354);

const {:count 12} .str.60: ref;

axiom .str.60 == $sub.ref(0, 68390);

const {:count 41} .str.61: ref;

axiom .str.61 == $sub.ref(0, 69455);

const {:count 282} .str.78: ref;

axiom .str.78 == $sub.ref(0, 70761);

const {:count 23} .str.118: ref;

axiom .str.118 == $sub.ref(0, 71808);

const {:count 24} .str.119: ref;

axiom .str.119 == $sub.ref(0, 72856);

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 7} .str.75: ref;

axiom .str.75 == $sub.ref(0, 73887);

const {:count 6} .str.76: ref;

axiom .str.76 == $sub.ref(0, 74917);

const {:count 9} .str.77: ref;

axiom .str.77 == $sub.ref(0, 75950);

const {:count 53} .str.96: ref;

axiom .str.96 == $sub.ref(0, 77027);

const {:count 20} .str.92: ref;

axiom .str.92 == $sub.ref(0, 78071);

const {:count 21} .str.93: ref;

axiom .str.93 == $sub.ref(0, 79116);

const {:count 29} .str.26: ref;

axiom .str.26 == $sub.ref(0, 80169);

const {:count 22} .str.27: ref;

axiom .str.27 == $sub.ref(0, 81215);

const {:count 20} .str.28: ref;

axiom .str.28 == $sub.ref(0, 82259);

const {:count 24} .str.69: ref;

axiom .str.69 == $sub.ref(0, 83307);

const {:count 3} .str.115: ref;

axiom .str.115 == $sub.ref(0, 84334);

const {:count 7} .str.85: ref;

axiom .str.85 == $sub.ref(0, 85365);

const {:count 8} .str.86: ref;

axiom .str.86 == $sub.ref(0, 86397);

const {:count 6} .str.87: ref;

axiom .str.87 == $sub.ref(0, 87427);

const {:count 25} .str.72: ref;

axiom .str.72 == $sub.ref(0, 88476);

const {:count 27} .str.73: ref;

axiom .str.73 == $sub.ref(0, 89527);

const {:count 18} .str.74: ref;

axiom .str.74 == $sub.ref(0, 90569);

const {:count 13} .str.10: ref;

axiom .str.10 == $sub.ref(0, 91606);

const {:count 21} .str.11: ref;

axiom .str.11 == $sub.ref(0, 92651);

const {:count 21} .str.12: ref;

axiom .str.12 == $sub.ref(0, 93696);

const {:count 21} .str.13: ref;

axiom .str.13 == $sub.ref(0, 94741);

const {:count 2} .str.14: ref;

axiom .str.14 == $sub.ref(0, 95767);

const {:count 5} .str.16: ref;

axiom .str.16 == $sub.ref(0, 96796);

const {:count 7} .str.17: ref;

axiom .str.17 == $sub.ref(0, 97827);

const {:count 24} .str.15: ref;

axiom .str.15 == $sub.ref(0, 98875);

const {:count 17} .str.18: ref;

axiom .str.18 == $sub.ref(0, 99916);

const {:count 5} .str.19: ref;

axiom .str.19 == $sub.ref(0, 100945);

const {:count 16} .str.20: ref;

axiom .str.20 == $sub.ref(0, 101985);

const {:count 27} .str.29: ref;

axiom .str.29 == $sub.ref(0, 103036);

const {:count 27} .str.30: ref;

axiom .str.30 == $sub.ref(0, 104087);

const {:count 27} .str.31: ref;

axiom .str.31 == $sub.ref(0, 105138);

const {:count 27} .str.32: ref;

axiom .str.32 == $sub.ref(0, 106189);

const {:count 27} .str.33: ref;

axiom .str.33 == $sub.ref(0, 107240);

const {:count 30} .str.98: ref;

axiom .str.98 == $sub.ref(0, 108294);

const {:count 20} .str.99: ref;

axiom .str.99 == $sub.ref(0, 109338);

const {:count 21} .str.100: ref;

axiom .str.100 == $sub.ref(0, 110383);

const {:count 3} .str.101: ref;

axiom .str.101 == $sub.ref(0, 111410);

const {:count 6} .str.102: ref;

axiom .str.102 == $sub.ref(0, 112440);

const {:count 8} .str.103: ref;

axiom .str.103 == $sub.ref(0, 113472);

const {:count 5} .str.104: ref;

axiom .str.104 == $sub.ref(0, 114501);

const snd_seq_root: ref;

axiom snd_seq_root == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 16} .str.35: ref;

axiom .str.35 == $sub.ref(0, 115541);

const {:count 25} .str.36: ref;

axiom .str.36 == $sub.ref(0, 116590);

const {:count 7} .str.38: ref;

axiom .str.38 == $sub.ref(0, 117621);

const {:count 5} .str.39: ref;

axiom .str.39 == $sub.ref(0, 118650);

const {:count 25} .str.37: ref;

axiom .str.37 == $sub.ref(0, 119699);

const {:count 25} .str.40: ref;

axiom .str.40 == $sub.ref(0, 120748);

const {:count 25} .str.41: ref;

axiom .str.41 == $sub.ref(0, 121797);

const {:count 8} .str.43: ref;

axiom .str.43 == $sub.ref(0, 122829);

const {:count 8} .str.44: ref;

axiom .str.44 == $sub.ref(0, 123861);

const {:count 25} .str.42: ref;

axiom .str.42 == $sub.ref(0, 124910);

const {:count 25} .str.45: ref;

axiom .str.45 == $sub.ref(0, 125959);

const {:count 25} .str.46: ref;

axiom .str.46 == $sub.ref(0, 127008);

const {:count 25} .str.47: ref;

axiom .str.47 == $sub.ref(0, 128057);

const {:count 32} .str.48: ref;

axiom .str.48 == $sub.ref(0, 129113);

const {:count 25} .str.49: ref;

axiom .str.49 == $sub.ref(0, 130162);

const {:count 4} .str.21: ref;

axiom .str.21 == $sub.ref(0, 131190);

const {:count 13} .str.88: ref;

axiom .str.88 == $sub.ref(0, 132227);

const {:count 25} .str.90: ref;

axiom .str.90 == $sub.ref(0, 133276);

const {:count 15} .str.91: ref;

axiom .str.91 == $sub.ref(0, 134315);

const {:count 15} .str.83: ref;

axiom .str.83 == $sub.ref(0, 135354);

const {:count 15} .str.56: ref;

axiom .str.56 == $sub.ref(0, 136393);

const {:count 41} .str.24: ref;

axiom .str.24 == $sub.ref(0, 137458);

const {:count 43} .str.68: ref;

axiom .str.68 == $sub.ref(0, 138525);

const {:count 9} .str.97: ref;

axiom .str.97 == $sub.ref(0, 139558);

const {:count 39} .str.110: ref;

axiom .str.110 == $sub.ref(0, 140621);

const {:count 25} .str.111: ref;

axiom .str.111 == $sub.ref(0, 141670);

const {:count 25} .str.112: ref;

axiom .str.112 == $sub.ref(0, 142719);

const {:count 16} .str.113: ref;

axiom .str.113 == $sub.ref(0, 143759);

const {:count 40} .str.64: ref;

axiom .str.64 == $sub.ref(0, 144823);

const {:count 21} .str.65: ref;

axiom .str.65 == $sub.ref(0, 145868);

const {:count 45} .str.58: ref;

axiom .str.58 == $sub.ref(0, 146937);

const {:count 19} .str.52: ref;

axiom .str.52 == $sub.ref(0, 147980);

const {:count 8} .str.79: ref;

axiom .str.79 == $sub.ref(0, 149012);

const {:count 31} .str.80: ref;

axiom .str.80 == $sub.ref(0, 150067);

const {:count 43} .str.81: ref;

axiom .str.81 == $sub.ref(0, 151134);

const {:count 8} .str.82: ref;

axiom .str.82 == $sub.ref(0, 152166);

const {:count 16} .str.116: ref;

axiom .str.116 == $sub.ref(0, 153206);

const {:count 17} .str.117: ref;

axiom .str.117 == $sub.ref(0, 154247);

const {:count 6} .str.54: ref;

axiom .str.54 == $sub.ref(0, 155277);

const {:count 10} .str.106: ref;

axiom .str.106 == $sub.ref(0, 156311);

const {:count 39} .str.51: ref;

axiom .str.51 == $sub.ref(0, 157374);

const {:count 16} .str.53: ref;

axiom .str.53 == $sub.ref(0, 158414);

const {:count 162} .str.105: ref;

axiom .str.105 == $sub.ref(0, 159600);

const {:count 16} .str.114: ref;

axiom .str.114 == $sub.ref(0, 160640);

const {:count 12} .str.84: ref;

axiom .str.84 == $sub.ref(0, 161676);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 162708);

const {:count 3} .str.1.252: ref;

axiom .str.1.252 == $sub.ref(0, 163735);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 164773);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 165801);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 166833);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 167865);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $M.0 := 1;
    call {:si_unique_call 0} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 1} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 2} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 3} {:cexpr "ldv_mutex_ports_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 4} {:cexpr "ldv_mutex_power_lock"} boogie_si_record_i32(1);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 5} {:cexpr "ldv_mutex_register_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 6} {:cexpr "ldv_mutex_timer_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    return;
}



const ldv_handler_precall: ref;

axiom ldv_handler_precall == $sub.ref(0, 168897);

procedure ldv_handler_precall();
  free requires assertsPassed;



implementation ldv_handler_precall()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 169929);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i0 := $M.0;
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} ldv_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} ldv_error();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.2;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.3;
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} ldv_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.4;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} ldv_error();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i10 := $M.5;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i11 == 1);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} ldv_error();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i12 := $M.6;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i13 == 1);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} ldv_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i13 == 1;
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i11 == 1;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 170961);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 14} __VERIFIER_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const queue_delete: ref;

axiom queue_delete == $sub.ref(0, 171993);

procedure queue_delete($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation queue_delete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.7, $p1);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} vslice_dummy_var_109 := snd_seq_timer_stop($p2);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_110 := snd_seq_timer_close($p0);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} snd_use_lock_sync_helper($p5, .str.34, 213);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} snd_seq_prioq_delete($p6);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} snd_seq_prioq_delete($p7);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} snd_seq_timer_delete($p8);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} kfree($p9);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    return;
}



const snd_seq_timer_stop: ref;

axiom snd_seq_timer_stop == $sub.ref(0, 173025);

procedure snd_seq_timer_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_timer_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $i5: i32;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(80, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.7, $p1);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(0, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.7, $p7);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.7, $p11);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i13 := $and.i8($i12, $sub.i8(0, 2));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p11, $i13);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(80, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.7, $p14);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} vslice_dummy_var_111 := snd_timer_pause($p15);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const snd_seq_timer_close: ref;

axiom snd_seq_timer_close == $sub.ref(0, 174057);

procedure snd_seq_timer_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_timer_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i16: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.7, $p1);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 23} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 25} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 28} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(80, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.7, $p17);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(80, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.7, $p21);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} vslice_dummy_var_112 := snd_timer_stop($p22);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(80, 1));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.7, $p24);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} vslice_dummy_var_113 := snd_timer_close($p25);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(80, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p27, $0.ref);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} warn_slowpath_fmt.ref.i32.ref.ref(.str.63, 373, .str.6, .str.67);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_use_lock_sync_helper: ref;

axiom snd_use_lock_sync_helper == $sub.ref(0, 175089);

procedure snd_use_lock_sync_helper($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation snd_use_lock_sync_helper($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i11: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i9: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} {:cexpr "snd_use_lock_sync_helper:arg:line"} boogie_si_record_i32($i2);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $i3 := atomic_read($p0);
    call {:si_unique_call 33} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i7 := atomic_read($p0);
    call {:si_unique_call 38} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i9 := 1250;
    goto $bb8;

  $bb8:
    call $i10, $i13, $i14, $i15, $i9, vslice_dummy_var_115 := snd_use_lock_sync_helper_loop_$bb8($p0, $i10, $i13, $i14, $i15, $i9, vslice_dummy_var_115);
    goto $bb8_last;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} vslice_dummy_var_115 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i9, 1);
    call {:si_unique_call 43} {:cexpr "max_count"} boogie_si_record_i32($i13);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i14 := atomic_read($p0);
    call {:si_unique_call 45} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 0);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i15 == 1);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb14_dummy;

  $bb10:
    assume $i10 == 1;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i11 := atomic_read($p0);
    call {:si_unique_call 40} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} __snd_printk.i32.ref.i32.ref.i32.ref.i32(0, .str.1, 102, .str.2, $i11, $p1, $i2);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i5 := atomic_read($p0);
    call {:si_unique_call 35} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} vslice_dummy_var_114 := printk.ref.i32.ref.i32(.str, $i5, $p1, $i2);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_161;
}



const snd_seq_prioq_delete: ref;

axiom snd_seq_prioq_delete == $sub.ref(0, 176121);

procedure snd_seq_prioq_delete($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_prioq_delete($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.7, $p0);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p0, $0.ref);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.7, $p4);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} kfree($p13);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $p10, $i11, $i12 := snd_seq_prioq_delete_loop_$bb10($p1, $p7, $p10, $i11, $i12);
    goto $bb10_last;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $p10 := snd_seq_prioq_cell_out($p1);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} snd_seq_cell_free($p10);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.7, $p7);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 0);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i12 == 1);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12_dummy;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} __snd_printk.i32.ref.i32.ref(1, .str.57, 145, .str.59);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const snd_seq_timer_delete: ref;

axiom snd_seq_timer_delete == $sub.ref(0, 177153);

procedure snd_seq_timer_delete($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_timer_delete($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i8;
  var $i6: i8;
  var $p8: ref;
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.7, $p0);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p0, $0.ref);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.7, $p4);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i6 := $and.i8($i5, $sub.i8(0, 2));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, $i6);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} vslice_dummy_var_116 := snd_seq_timer_stop($p1);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} snd_seq_timer_reset($p1);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} kfree($p8);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} __snd_printk.i32.ref.i32.ref(1, .str.63, 144, .str.66);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 178185);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} free_($p0);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 179217);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 55} $free($p0);
    return;
}



const __snd_printk: ref;

axiom __snd_printk == $sub.ref(0, 180249);

procedure __snd_printk.i32.ref.i32.ref($i0: i32, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __snd_printk.i32.ref.i32.ref($i0: i32, $p1: ref, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} {:cexpr "__snd_printk:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 57} {:cexpr "__snd_printk:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    return;
}



procedure __snd_printk.i32.ref.i32.ref.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32);
  free requires assertsPassed;



implementation __snd_printk.i32.ref.i32.ref.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} {:cexpr "__snd_printk:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 59} {:cexpr "__snd_printk:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    return;
}



procedure __snd_printk.i32.ref.i32.ref.i32.i32.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation __snd_printk.i32.ref.i32.ref.i32.i32.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: i32, p.6: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} {:cexpr "__snd_printk:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 61} {:cexpr "__snd_printk:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    return;
}



procedure __snd_printk.i32.ref.i32.ref.i32.i32.i32.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32);
  free requires assertsPassed;



implementation __snd_printk.i32.ref.i32.ref.i32.i32.i32.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} {:cexpr "__snd_printk:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 63} {:cexpr "__snd_printk:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    return;
}



procedure __snd_printk.i32.ref.i32.ref.i32.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __snd_printk.i32.ref.i32.ref.i32.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} {:cexpr "__snd_printk:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 65} {:cexpr "__snd_printk:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    return;
}



procedure __snd_printk.i32.ref.i32.ref.i32.ref.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: ref, p.6: i32);
  free requires assertsPassed;



implementation __snd_printk.i32.ref.i32.ref.i32.ref.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: ref, p.6: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} {:cexpr "__snd_printk:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 67} {:cexpr "__snd_printk:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    return;
}



const snd_seq_timer_reset: ref;

axiom snd_seq_timer_reset == $sub.ref(0, 181281);

procedure snd_seq_timer_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_timer_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $p2 := spinlock_check($p1);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i3 := _raw_spin_lock_irqsave($p2);
    call {:si_unique_call 70} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p5, 0);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(12, 1)), $mul.ref(4, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p7, 0);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p9, 0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(24, 1)), $mul.ref(16, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p11, 0);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} spin_unlock_irqrestore($p12, $i3);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 182313);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 183345);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 1} true;
    call {:si_unique_call 72} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 73} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 184377);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 185409);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    return;
}



const snd_seq_prioq_cell_out: ref;

axiom snd_seq_prioq_cell_out == $sub.ref(0, 186441);

procedure snd_seq_prioq_cell_out($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_prioq_cell_out($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p5 := spinlock_check($p4);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 80} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.7, $p7);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} spin_unlock_irqrestore($p25, $i6);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p3 := $p8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.7, $p11);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p13, $p12);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.7, $p14);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p8);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i16, $i17);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p20, $0.ref);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.7, $p21);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32($i22, 1);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p24, $i23);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p19, $0.ref);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} __snd_printk.i32.ref.i32.ref(1, .str.57, 289, .str.62);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const snd_seq_cell_free: ref;

axiom snd_seq_cell_free == $sub.ref(0, 187473);

procedure snd_seq_cell_free($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_cell_free($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p53: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 82} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 84} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 87} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.7, $p14);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    call {:si_unique_call 88} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i18);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 90} {:cexpr "tmp___1"} boogie_si_record_i64($i22);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i18, 0);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 93} {:cexpr "tmp___2"} boogie_si_record_i64($i27);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p15, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $p30 := spinlock_check($p29);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i31 := _raw_spin_lock_irqsave($p30);
    call {:si_unique_call 96} {:cexpr "flags"} boogie_si_record_i64($i31);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} free_cell($p15, $p0);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.7, $p33);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 12);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 4);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p15, $mul.ref(0, 216)), $mul.ref(56, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i62 := waitqueue_active($p61);
    call {:si_unique_call 100} {:cexpr "tmp___5"} boogie_si_record_i32($i62);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p15, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} spin_unlock_irqrestore($p67, $i31);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i63 == 1;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i64 := snd_seq_output_ok($p15);
    call {:si_unique_call 102} {:cexpr "tmp___4"} boogie_si_record_i32($i64);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i65 == 1;
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p15, $mul.ref(0, 216)), $mul.ref(56, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} __wake_up($p66, 3, 1, $0.ref);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.7, $p41);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 1073741824);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb16:
    assume $i44 == 1;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.7, $p48);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb18:
    assume $i52 == 1;
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p53 := $p49;
    goto $bb21;

  $bb21:
    call $p54, $p55, $p56, $p57, $p58, $i59, $i60, $p53 := snd_seq_cell_free_loop_$bb21($p15, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $p53);
    goto $bb21_last;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.7, $p54);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p15, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.7, $p56);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p53, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p58, $p57);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} free_cell($p15, $p53);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p55);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i60 == 1);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $p53 := $p55;
    goto $bb23_dummy;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} warn_slowpath_fmt.ref.i32.ref.ref(.str.22, 257, .str.6, .str.23);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} warn_slowpath_fmt.ref.i32.ref.ref(.str.22, 254, .str.6, .str.7);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_383;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 188505);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 106} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 189537);

procedure warn_slowpath_fmt.ref.i32.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    return;
}



procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    return;
}



const free_cell: ref;

axiom free_cell == $sub.ref(0, 190569);

procedure free_cell($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation free_cell($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.7, $p2);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p4, $p3);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p5, $p1);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(20, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} atomic_dec($p6);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    return;
}



const waitqueue_active: ref;

axiom waitqueue_active == $sub.ref(0, 191601);

procedure waitqueue_active($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation waitqueue_active($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i2 := list_empty($p1);
    call {:si_unique_call 111} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const snd_seq_output_ok: ref;

axiom snd_seq_output_ok == $sub.ref(0, 192633);

procedure snd_seq_output_ok($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_seq_output_ok($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $i1 := snd_seq_pool_available($p0);
    call {:si_unique_call 113} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(28, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.7, $p2);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i1, $i3);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 193665);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 115} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    return;
}



const snd_seq_pool_available: ref;

axiom snd_seq_pool_available == $sub.ref(0, 194697);

procedure snd_seq_pool_available($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_seq_pool_available($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(20, 1));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i2 := atomic_read($p1);
    call {:si_unique_call 117} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.7, $p3);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, $i2);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 195729);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.7, $p1);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 196761);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.7, $p1);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 197793);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 118} devirtbounce(0, $p1, $p1);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 198825);

procedure printk.ref.i32.ref.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 1} true;
    call {:si_unique_call 119} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 120} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const schedule_timeout_uninterruptible: ref;

axiom schedule_timeout_uninterruptible == $sub.ref(0, 199857);

procedure schedule_timeout_uninterruptible($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout_uninterruptible($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 121} {:cexpr "schedule_timeout_uninterruptible:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 1} true;
    call {:si_unique_call 122} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 123} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const snd_timer_stop: ref;

axiom snd_timer_stop == $sub.ref(0, 200889);

procedure snd_timer_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_timer_stop($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 1} true;
    call {:si_unique_call 124} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 125} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const snd_timer_close: ref;

axiom snd_timer_close == $sub.ref(0, 201921);

procedure snd_timer_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_timer_close($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 1} true;
    call {:si_unique_call 126} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 127} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const snd_timer_pause: ref;

axiom snd_timer_pause == $sub.ref(0, 202953);

procedure snd_timer_pause($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_timer_pause($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 1} true;
    call {:si_unique_call 128} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 129} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 203985);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $i0 := devirtbounce.1(0, kernel_stack);
    call {:si_unique_call 131} {:cexpr "pfo_ret__"} boogie_si_record_i64($i0);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 8152);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const clientptr: ref;

axiom clientptr == $sub.ref(0, 205017);

procedure clientptr($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation clientptr($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} {:cexpr "clientptr:arg:clientid"} boogie_si_record_i32($i0);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i0, 191);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i0);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref($i4, 8));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.8, $p5);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p3 := $p6;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} __snd_printk.i32.ref.i32.ref.i32(1, .str.3, 191, .str.4, $i0);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const seq_free_client: ref;

axiom seq_free_client == $sub.ref(0, 206049);

procedure seq_free_client($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.8, $M.10, $M.7, $M.5, assertsPassed, $M.23, $M.26, $CurrAddr, $M.13, $M.15, $M.3, $M.33, $M.37, $M.6, $M.41, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation seq_free_client($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} ldv_mutex_lock_33(register_mutex);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(0, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.7, $p1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.7, $p10);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(0, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.7, $p12);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str.3, 369, .str.95, $i11, $i13);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} ldv_mutex_unlock_34(register_mutex);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.7, $p14);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} snd_seq_system_broadcast($i15, 0, 61);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} vslice_dummy_var_117 := seq_free_client1($p0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} usage_free(client_usage, 1);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb9;

  $bb10:
    assume $i6 == 1;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} __snd_printk.i32.ref.i32.ref.i32(0, .str.3, 359, .str.94, $i8);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_33: ref;

axiom ldv_mutex_lock_33 == $sub.ref(0, 207081);

procedure ldv_mutex_lock_33($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_lock_33($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} ldv_mutex_lock_register_mutex($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} mutex_lock($p0);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const seq_free_client1: ref;

axiom seq_free_client1 == $sub.ref(0, 208113);

procedure seq_free_client1($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.8, $M.7, $M.23, $M.26, $CurrAddr, $M.3, $M.13, $M.15, $M.33, assertsPassed, $M.37, $M.6, $M.41, $M.10, $M.16, $M.5, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation seq_free_client1($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} vslice_dummy_var_118 := snd_seq_delete_all_ports($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.7, $p4);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} snd_seq_queue_client_leave($i5);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p6 := spinlock_check(clients_lock);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $i7 := _raw_spin_lock_irqsave($p6);
    call {:si_unique_call 147} {:cexpr "flags"} boogie_si_record_i64($i7);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.7, $p8);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref($i10, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p11, 1);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.7, $p12);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref($i14, 8));
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p15, $0.ref);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} spin_unlock_irqrestore(clients_lock, $i7);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} snd_use_lock_sync_helper($p16, .str.3, 342);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.7, $p17);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} snd_seq_queue_client_termination($i18);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.7, $p19);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $p25 := spinlock_check(clients_lock);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $i26 := _raw_spin_lock_irqsave($p25);
    call {:si_unique_call 154} {:cexpr "flags"} boogie_si_record_i64($i26);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.7, $p27);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref($i29, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p30, 0);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} spin_unlock_irqrestore(clients_lock, $i26);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} vslice_dummy_var_119 := snd_seq_pool_delete($p23);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usage_free: ref;

axiom usage_free == $sub.ref(0, 209145);

procedure usage_free($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.10;



implementation usage_free($p0: ref, $i1: i32)
{
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} {:cexpr "usage_free:arg:num"} boogie_si_record_i32($i1);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, $i1);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $M.10 := $i4;
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_34: ref;

axiom ldv_mutex_unlock_34 == $sub.ref(0, 210177);

procedure ldv_mutex_unlock_34($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_unlock_34($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} ldv_mutex_unlock_register_mutex($p0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} mutex_unlock($p0);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const snd_seq_system_broadcast: ref;

axiom snd_seq_system_broadcast == $sub.ref(0, 211209);

procedure snd_seq_system_broadcast($i0: i32, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr, $M.13, $M.15, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_system_broadcast($i0: i32, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i8;
  var $p7: ref;
  var $i8: i32;
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 160} {:cexpr "snd_seq_system_broadcast:arg:client"} boogie_si_record_i32($i0);
    call {:si_unique_call 161} {:cexpr "snd_seq_system_broadcast:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 162} {:cexpr "snd_seq_system_broadcast:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i4 := setheader($p3, $i0, $i1);
    call {:si_unique_call 164} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i2);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i6);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i8 := $M.11;
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} vslice_dummy_var_120 := snd_seq_kernel_client_dispatch($i8, $p3, 0, 0);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const setheader: ref;

axiom setheader == $sub.ref(0, 212241);

procedure setheader($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation setheader($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $p15: ref;
  var $i16: i32;
  var $i17: i8;
  var $p19: ref;
  var $i20: i32;
  var $i21: i8;
  var $p23: ref;
  var $p25: ref;
  var $i26: i8;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i5: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} {:cexpr "setheader:arg:client"} boogie_si_record_i32($i1);
    call {:si_unique_call 167} {:cexpr "setheader:arg:port"} boogie_si_record_i32($i2);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i3 := $M.12;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.7;
    call {:si_unique_call 168} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p6, 0, 28, $zext.i32.i64(1), 0 == 1);
    $M.7 := cmdloc_dummy_var_1;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.7, $p7);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 243);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p12, $i11);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.7, $p13);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p15, $i14);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i16 := $M.11;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p19, $i17);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i20 := $M.12;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(1, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p23, $i21);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p25, $sub.i8(0, 2));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i1);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p29, $i26);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i2);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p33, $i30);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;
}



const snd_seq_kernel_client_dispatch: ref;

axiom snd_seq_kernel_client_dispatch == $sub.ref(0, 213273);

procedure snd_seq_kernel_client_dispatch($i0: i32, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.13, $M.15, $CurrAddr, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_kernel_client_dispatch($i0: i32, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $i19: i8;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $i33: i32;
  var $i32: i32;
  var $p34: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} {:cexpr "snd_seq_kernel_client_dispatch:arg:client"} boogie_si_record_i32($i0);
    call {:si_unique_call 170} {:cexpr "snd_seq_kernel_client_dispatch:arg:atomic"} boogie_si_record_i32($i2);
    call {:si_unique_call 171} {:cexpr "snd_seq_kernel_client_dispatch:arg:hop"} boogie_si_record_i32($i3);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 172} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i6);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 174} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i6, 0);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 177} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(3, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p18, $sub.i8(0, 3));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i0);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p21, $i19);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i22 := check_event_type_and_length($p1);
    call {:si_unique_call 179} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p24 := snd_seq_client_use_ptr($i0);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p24);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(4, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.7, $p28);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i33 := snd_seq_deliver_event($p24, $p1, $i2, $i3);
    call {:si_unique_call 182} {:cexpr "result"} boogie_si_record_i32($i33);
    assume {:verifier.code 0} true;
    $i32 := $i33;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p24, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} atomic_dec($p34);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i17 := $i32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 1);
    goto $bb16;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} warn_slowpath_fmt.ref.i32.ref.ref(.str.3, 2436, .str.6, .str.9);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const check_event_type_and_length: ref;

axiom check_event_type_and_length == $sub.ref(0, 214305);

procedure check_event_type_and_length($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation check_event_type_and_length($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.7, $p1);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(3, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.7, $p33);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 253);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb29:
    assume $i36 == 1;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb18;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.7, $p19);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i22 := $ule.i32($i21, 129);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i22 == 1);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.7, $p23);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i32($i25, 139);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i26 == 1);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.7, $p29);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 1073741823);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i32($i31, 1073741822);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb18;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb22;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.7, $p10);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 129);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.7, $p14);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i17 := $ule.i32($i16, 139);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb15;

  $bb16:
    assume $i17 == 1;
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb18;
}



const snd_seq_client_use_ptr: ref;

axiom snd_seq_client_use_ptr == $sub.ref(0, 215337);

procedure snd_seq_client_use_ptr($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.13, $M.15, $CurrAddr;



implementation snd_seq_client_use_ptr($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $i24: i1;
  var $i25: i64;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p11: ref;
  var $i12: i64;
  var $p54: ref;
  var $p5: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 186} {:cexpr "snd_seq_client_use_ptr:arg:clientid"} boogie_si_record_i32($i0);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 0);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i0, 191);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p6 := spinlock_check(clients_lock);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i7 := _raw_spin_lock_irqsave($p6);
    call {:si_unique_call 190} {:cexpr "flags"} boogie_si_record_i64($i7);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $p8 := clientptr($i0);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i0);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref($i13, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.9, $p14);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i16 := $sext.i8.i32($i15);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} spin_unlock_irqrestore(clients_lock, $i7);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $p18 := current_thread_info();
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.7, $p19);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 134217472);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb15:
    assume $i23 == 1;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i24 := $sle.i32($i0, 15);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i24 == 1);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i37 := $sle.i32($i0, 127);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $p49 := spinlock_check(clients_lock);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i50 := _raw_spin_lock_irqsave($p49);
    call {:si_unique_call 200} {:cexpr "flags"} boogie_si_record_i64($i50);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p51 := clientptr($i0);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} spin_unlock_irqrestore(clients_lock, $i50);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i53 == 1;
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p11, $i12 := $p51, $i50;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p11, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} atomic_inc($p54);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} spin_unlock_irqrestore(clients_lock, $i12);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p5 := $p11;
    goto $bb6;

  $bb36:
    assume $i37 == 1;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i0, $sub.i32(0, 16));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i39 := $sdiv.i32($i38, 4);
    call {:si_unique_call 202} {:cexpr "card"} boogie_si_record_i32($i39);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.7, snd_ecards_limit);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i39, $i40);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb38:
    assume $i41 == 1;
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i39);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i42, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.15, $p43);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i45 := $sext.i8.i32($i44);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} snd_seq_device_load_drivers();
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i46 == 1;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i39);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i47, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p48, 1);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} snd_request_card($i39);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb17:
    assume $i24 == 1;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i0);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref($i25, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.13, $p26);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i32($i27);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb19:
    assume $i29 == 1;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i0);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref($i30, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p31, 1);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.14, seq_client_load);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.14, seq_client_load);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, $i0);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(1, 4)));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(1, 4)));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, $i0);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(2, 4)));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, 0);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(2, 4)));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, $i0);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(3, 4)));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i63, 0);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(3, 4)));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, $i0);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(4, 4)));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 0);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(4, 4)));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, $i0);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(5, 4)));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i71, 0);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(5, 4)));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, $i0);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(6, 4)));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i75, 0);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(6, 4)));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, $i0);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(7, 4)));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i79, 0);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(7, 4)));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, $i0);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(8, 4)));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i83, 0);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(8, 4)));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, $i0);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(9, 4)));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i87, 0);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(9, 4)));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, $i0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(10, 4)));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i91, 0);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(10, 4)));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, $i0);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(11, 4)));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i95, 0);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(11, 4)));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, $i0);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(12, 4)));
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i99, 0);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(12, 4)));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, $i0);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(13, 4)));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i103, 0);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(13, 4)));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, $i0);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(14, 4)));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i107, 0);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(14, 4)));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, $i0);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} vslice_dummy_var_121 := __request_module.i1.ref.i32(1, .str.5, $i0);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb140:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb136:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb29;

  $bb133:
    assume {:verifier.code 0} true;
    assume $i104 == 1;
    goto $bb24;

  $bb129:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb29;

  $bb126:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb24;

  $bb122:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb29;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i96 == 1;
    goto $bb24;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb29;

  $bb112:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb24;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb29;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb24;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb29;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb24;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb29;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb24;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb29;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb24;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb29;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb24;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb29;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb24;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb29;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb24;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb29;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb24;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb29;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb24;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb29;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb24;

  $bb12:
    assume $i17 == 1;
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} spin_unlock_irqrestore(clients_lock, $i7);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb6;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p11, $i12 := $p8, $i7;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} __snd_printk.i32.ref.i32.ref.i32(1, .str.3, 204, .str.4, $i0);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const snd_seq_deliver_event: ref;

axiom snd_seq_deliver_event == $sub.ref(0, 216369);

procedure snd_seq_deliver_event($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.13, $M.15, $CurrAddr, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_deliver_event($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i34: i32;
  var $i33: i32;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} {:cexpr "snd_seq_deliver_event:arg:atomic"} boogie_si_record_i32($i2);
    call {:si_unique_call 207} {:cexpr "snd_seq_deliver_event:arg:hop"} boogie_si_record_i32($i3);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    call {:si_unique_call 208} {:cexpr "hop"} boogie_si_record_i32($i4);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 9);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(3, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.7, $p23);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 254);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i26 == 1);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.7, $p28);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 254);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i34 := snd_seq_deliver_single_event($p0, $p1, 0, $i2, $i4);
    call {:si_unique_call 213} {:cexpr "result"} boogie_si_record_i32($i34);
    assume {:verifier.code 0} true;
    $i33 := $i34;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i22 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i32 := deliver_to_subscribers($p0, $p1, $i2, $i4);
    call {:si_unique_call 211} {:cexpr "result"} boogie_si_record_i32($i32);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.7, $p7);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(1, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.7, $p11);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.7, $p15);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(14, 1)), $mul.ref(1, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.7, $p19);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} __snd_printk.i32.ref.i32.ref.i32.i32.i32.i32(1, .str.3, 863, .str.89, $i9, $i13, $i17, $i21);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 31);
    goto $bb3;
}



const deliver_to_subscribers: ref;

axiom deliver_to_subscribers == $sub.ref(0, 217401);

procedure deliver_to_subscribers($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr, $M.13, $M.15, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation deliver_to_subscribers($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $i31: i32;
  var $p32: ref;
  var $i69: i32;
  var $i70: i32;
  var $i29: i32;
  var $i30: i32;
  var $i56: i32;
  var $i57: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i1;
  var $i78: i32;
  var $i12: i32;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 215} {:cexpr "deliver_to_subscribers:arg:atomic"} boogie_si_record_i32($i2);
    call {:si_unique_call 216} {:cexpr "deliver_to_subscribers:arg:hop"} boogie_si_record_i32($i3);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(1, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.7, $p6);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $p9 := snd_seq_port_use_ptr($p0, $i8);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p4);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.7;
    cmdloc_dummy_var_3 := $M.7;
    call {:si_unique_call 218} cmdloc_dummy_var_4 := $memcpy.i8(cmdloc_dummy_var_2, cmdloc_dummy_var_3, $p13, $p14, 32, $zext.i32.i64(8), 0 == 1);
    $M.7 := cmdloc_dummy_var_4;
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i2, 0);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    $p18 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(24, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} down_read($p18);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p20 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.7, $p20);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref($sub.ref(0, 80), 120));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 80), 120)), $mul.ref(80, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    $p26 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i25, $i27);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i29, $i30 := 0, 0;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i56, $i57 := $i30, $i29;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i2, 0);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i71 == 1);
    $p73 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(24, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} up_read($p73);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p1);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p4);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.7;
    cmdloc_dummy_var_12 := $M.7;
    call {:si_unique_call 229} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p74, $p75, 32, $zext.i32.i64(8), 0 == 1);
    $M.7 := cmdloc_dummy_var_13;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p9, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} atomic_dec($p76);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i57, 0);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i77 == 1);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i78 := $i56;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i12 := $i78;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb26:
    assume $i77 == 1;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i78 := $i57;
    goto $bb28;

  $bb23:
    assume $i71 == 1;
    $p72 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(168, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} _raw_read_unlock($p72);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i31, $p32 := 0, $p23;
    goto $bb11;

  $bb11:
    call $p33, $p35, $p36, $p37, $p39, $i40, $i41, $i42, $p44, $i45, $i46, $p48, $i49, $i50, $i52, $i53, $i54, $i55, $i58, $p59, $p60, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $i31, $p32, $i69, $i70, cmdloc_dummy_var_5, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, vslice_dummy_var_122 := deliver_to_subscribers_loop_$bb11($p0, $p1, $i2, $i3, $p4, $i27, $p33, $p35, $p36, $p37, $p39, $i40, $i41, $i42, $p44, $i45, $i46, $p48, $i49, $i50, $i52, $i53, $i54, $i55, $i58, $p59, $p60, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $i31, $p32, $i69, $i70, cmdloc_dummy_var_5, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, vslice_dummy_var_122);
    goto $bb11_last;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(14, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p33);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p35);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.7;
    cmdloc_dummy_var_6 := $M.7;
    call {:si_unique_call 221} cmdloc_dummy_var_7 := $memcpy.i8(cmdloc_dummy_var_5, cmdloc_dummy_var_6, $p36, $p37, 2, $zext.i32.i64(2), 0 == 1);
    $M.7 := cmdloc_dummy_var_7;
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.7, $p39);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 2);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i52 := snd_seq_deliver_single_event($p0, $p1, 0, $i2, $i3);
    call {:si_unique_call 224} {:cexpr "err"} boogie_si_record_i32($i52);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 0);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i54, $i55 := $i31, $i52;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i31, 1);
    call {:si_unique_call 225} {:cexpr "num_ev"} boogie_si_record_i32($i58);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p1);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p4);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.7;
    cmdloc_dummy_var_9 := $M.7;
    call {:si_unique_call 226} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p59, $p60, 32, $zext.i32.i64(8), 0 == 1);
    $M.7 := cmdloc_dummy_var_10;
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 120)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.7, $p62);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p64, $mul.ref($sub.ref(0, 80), 120));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p64, $mul.ref($sub.ref(0, 80), 120)), $mul.ref(80, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, $i27);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i69, $i70 := $i52, $i58;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i29, $i30 := $i69, $i70;
    goto $bb10;

  $bb20:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i31, $p32 := $i58, $p65;
    goto $bb20_dummy;

  $bb16:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i56, $i57 := $i54, $i55;
    goto $bb18;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.7, $p44);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.7, $p48);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 4);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} vslice_dummy_var_122 := update_timestamp_of_queue($p1, $i46, $i50);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i16 == 1;
    $p17 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(168, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} _raw_read_lock($p17);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_994;
}



const snd_seq_deliver_single_event: ref;

axiom snd_seq_deliver_single_event == $sub.ref(0, 218433);

procedure snd_seq_deliver_single_event($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.15, $M.7, $M.16, $CurrAddr, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_deliver_single_event($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i8;
  var $i33: i8;
  var $i34: i8;
  var $i35: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i54: i32;
  var $p13: ref;
  var $i14: i32;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $i70: i1;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} {:cexpr "snd_seq_deliver_single_event:arg:filter"} boogie_si_record_i32($i2);
    call {:si_unique_call 232} {:cexpr "snd_seq_deliver_single_event:arg:atomic"} boogie_si_record_i32($i3);
    call {:si_unique_call 233} {:cexpr "snd_seq_deliver_single_event:arg:hop"} boogie_si_record_i32($i4);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(3, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.7, $p5);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 253);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 234} {:cexpr "direct"} boogie_si_record_i32($i9);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p10 := get_event_dest_client($p1, $i2);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(14, 1)), $mul.ref(1, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.7, $p16);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $p19 := snd_seq_port_use_ptr($p10, $i18);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $i22 := check_port_perm($p19, 2);
    call {:si_unique_call 238} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p19);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(640, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.7, $p25);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p10, $mul.ref(0, 424)), $mul.ref(0, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.7, $p37);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i38, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 2);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p13, $i14 := $p19, $i54;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p13);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p10);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i14, 0);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i73 := $i14;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $r := $i73;
    return;

  $bb36:
    assume $i70 == 1;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i9, 0);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb38;

  $bb39:
    assume $i71 == 1;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i72 := bounce_error_event($p0, $p1, $i14, $i3, $i4);
    call {:si_unique_call 247} {:cexpr "result"} boogie_si_record_i32($i72);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb41;

  $bb33:
    assume $i68 == 1;
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p10, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} atomic_dec($p69);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i65 == 1;
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p13, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} atomic_dec($p66);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p19, $mul.ref(0, 672)), $mul.ref(616, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.7, $p55);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p19, $mul.ref(0, 672)), $mul.ref(616, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.7, $p59);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p19, $mul.ref(0, 672)), $mul.ref(632, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.7, $p61);
    call {:si_unique_call 242} $i63 := devirtbounce.2($p60, $p1, $i9, $p62, $i3, $i4);
    call {:si_unique_call 243} {:cexpr "result"} boogie_si_record_i32($i63);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i54 := $i63;
    goto $bb25;

  $bb26:
    assume $i58 == 1;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 2);
    goto $bb25;

  $bb15:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i38, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb19;

  $bb20:
    assume $i41 == 1;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p10, $mul.ref(0, 424)), $mul.ref(400, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.7, $p44);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 2);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb25;

  $bb22:
    assume $i47 == 1;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p10, $mul.ref(0, 424)), $mul.ref(400, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.7, $p50);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $i52 := snd_seq_fifo_event_in($p51, $p1);
    call {:si_unique_call 241} {:cexpr "result"} boogie_si_record_i32($i52);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb24;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p19, $mul.ref(0, 672)), $mul.ref(644, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.7, $p29);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p19, $mul.ref(0, 672)), $mul.ref(640, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.7, $p31);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i33 := $lshr.i8($i32, 3);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i34 := $and.i8($i33, 1);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} vslice_dummy_var_123 := update_timestamp_of_queue($p1, $i30, $i35);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p13, $i14 := $p19, $sub.i32(0, 1);
    goto $bb3;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p13, $i14 := $p19, $sub.i32(0, 2);
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p13, $i14 := $0.ref, $sub.i32(0, 2);
    goto $bb3;
}



const get_event_dest_client: ref;

axiom get_event_dest_client == $sub.ref(0, 219465);

procedure get_event_dest_client($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.13, $M.15, $CurrAddr;



implementation get_event_dest_client($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} {:cexpr "get_event_dest_client:arg:filter"} boogie_si_record_i32($i1);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.7, $p3);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $p6 := snd_seq_client_use_ptr($i5);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p6);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(4, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.7, $p11);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(76, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.7, $p15);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i1, 0);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p9 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb15:
    assume $i25 == 1;
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(76, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.7, $p26);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, $i1);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb17;

  $bb18:
    assume $i29 == 1;
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} atomic_dec($p30);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.7, $p18);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 424)), $mul.ref(80, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i23 := variable_test_bit($i20, $p22);
    call {:si_unique_call 252} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;
}



const snd_seq_port_use_ptr: ref;

axiom snd_seq_port_use_ptr == $sub.ref(0, 220497);

procedure snd_seq_port_use_ptr($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation snd_seq_port_use_ptr($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p16: ref;
  var $p38: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} {:cexpr "snd_seq_port_use_ptr:arg:num"} boogie_si_record_i32($i1);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(144, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} _raw_read_lock($p5);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.7, $p7);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 80), 672));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 80), 672)), $mul.ref(80, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(128, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i12, $i14);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(144, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} _raw_read_unlock($p38);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p16 := $p10;
    goto $bb8;

  $bb8:
    call $p18, $i19, $i20, $i21, $p22, $p31, $p32, $p33, $p34, $p35, $i36, $i37, $p16 := snd_seq_port_use_ptr_loop_$bb8($i1, $i14, $p18, $i19, $i20, $i21, $p22, $p31, $p32, $p33, $p34, $p35, $i36, $i37, $p16);
    goto $bb8_last;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.7, $p18);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, $i1);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p22 := $p16;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 672)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.7, $p31);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref($sub.ref(0, 80), 672));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p33, $mul.ref($sub.ref(0, 80), 672)), $mul.ref(80, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, $i14);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb17:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $p16 := $p34;
    goto $bb17_dummy;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(640, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.7, $p24);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p22, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} atomic_inc($p28);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(144, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} _raw_read_unlock($p29);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p4 := $p22;
    goto $bb3;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1226;
}



const check_port_perm: ref;

axiom check_port_perm == $sub.ref(0, 221529);

procedure check_port_perm($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation check_port_perm($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} {:cexpr "check_port_perm:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(648, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.7, $p2);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $i1);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, $i1);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const update_timestamp_of_queue: ref;

axiom update_timestamp_of_queue == $sub.ref(0, 222561);

procedure update_timestamp_of_queue($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation update_timestamp_of_queue($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $p38: ref;
  var $p39: ref;
  var $i7: i32;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 260} {:cexpr "update_timestamp_of_queue:arg:queue"} boogie_si_record_i32($i1);
    call {:si_unique_call 261} {:cexpr "update_timestamp_of_queue:arg:real_time"} boogie_si_record_i32($i2);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $p4 := queueptr($i1);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i1);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(3, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p9, $i8);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.7, $p10);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 254);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p15, $i14);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i2, 0);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.7, $p31);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i33 := snd_seq_timer_get_cur_tick($p32);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p35, $i33);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.7, $p36);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p38, $i37);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} atomic_dec($p39);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.7, $p19);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i21 := snd_seq_timer_get_cur_time($p20);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p22, $i21);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p18);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.7;
    cmdloc_dummy_var_15 := $M.7;
    call {:si_unique_call 264} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p23, $p24, 8, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_16;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.7, $p25);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 1);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p30, $i29);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const snd_seq_fifo_event_in: ref;

axiom snd_seq_fifo_event_in == $sub.ref(0, 223593);

procedure snd_seq_fifo_event_in($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.16, $CurrAddr, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_fifo_event_in($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 268} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 270} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 273} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(104, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} atomic_inc($p17);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.7, $p18);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i20 := snd_seq_event_dup($p19, $p1, $p2, 1, $0.ref);
    call {:si_unique_call 276} {:cexpr "err"} boogie_si_record_i32($i20);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $p26 := spinlock_check($p25);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i27 := _raw_spin_lock_irqsave($p26);
    call {:si_unique_call 281} {:cexpr "flags"} boogie_si_record_i64($i27);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.7, $p28);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.16, $p2);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p37, $p36);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.7, $p38);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.7, $p44);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 1);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p47, $i46);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} spin_unlock_irqrestore($p48, $i27);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(112, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $i50 := waitqueue_active($p49);
    call {:si_unique_call 284} {:cexpr "tmp___2"} boogie_si_record_i32($i50);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(104, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} atomic_dec($p53);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(112, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} __wake_up($p52, 3, 1, $0.ref);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i41 == 1;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.16, $p2);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p43, $p42);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.16, $p2);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.7, $p33);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p35, $p32);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i20, $sub.i32(0, 12));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(104, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} atomic_dec($p24);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i16 := $i20;
    goto $bb6;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} atomic_inc($p23);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} warn_slowpath_fmt.ref.i32.ref.ref(.str.50, 184, .str.6, .str.55);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bounce_error_event: ref;

axiom bounce_error_event == $sub.ref(0, 224625);

procedure bounce_error_event($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.13, $M.15, $CurrAddr, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation bounce_error_event($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i8;
  var $p30: ref;
  var $p32: ref;
  var $i33: i8;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $i17: i32;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 288} {:cexpr "bounce_error_event:arg:err"} boogie_si_record_i32($i2);
    call {:si_unique_call 289} {:cexpr "bounce_error_event:arg:atomic"} boogie_si_record_i32($i3);
    call {:si_unique_call 290} {:cexpr "bounce_error_event:arg:hop"} boogie_si_record_i32($i4);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(76, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.7, $p8);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 4);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(4, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.7, $p13);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p5);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.7;
    call {:si_unique_call 291} cmdloc_dummy_var_18 := $memset.i8(cmdloc_dummy_var_17, $p18, 0, 28, $zext.i32.i64(8), 0 == 1);
    $M.7 := cmdloc_dummy_var_18;
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p19, $sub.i8(0, 106));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p20, 0);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(3, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p21, $sub.i8(0, 3));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p23, 0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(1, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p25, 1);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.7, $p26);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p30, $i28);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(1, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.7, $p32);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(14, 1)), $mul.ref(1, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p35, $i33);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(14, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p38);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p39);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.7;
    cmdloc_dummy_var_20 := $M.7;
    call {:si_unique_call 292} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p40, $p41, 2, $zext.i32.i64(2), 0 == 1);
    $M.7 := cmdloc_dummy_var_21;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p44, $p1);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i2);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, $i46);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $M.7 := $store.i16($M.7, $p51, $i48);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i4, 1);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i53 := snd_seq_deliver_single_event($0.ref, $p5, 0, $i3, $i52);
    call {:si_unique_call 294} {:cexpr "result"} boogie_si_record_i32($i53);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 0);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i17 := $i53;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb10:
    assume $i54 == 1;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(116, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.7, $p55);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i56, 1);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(116, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p58, $i57);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i17 := $i53;
    goto $bb8;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 225657);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 226689);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 227721);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 295} devirtbounce(0, $p1, $p1);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    return;
}



const snd_seq_event_dup: ref;

axiom snd_seq_event_dup == $sub.ref(0, 228753);

procedure snd_seq_event_dup($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.7, $M.17, $M.19, $CurrAddr, $M.20, $M.21, $M.22;



implementation snd_seq_event_dup($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i77: i1;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i1;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $i121: i1;
  var $i122: i64;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p113: ref;
  var $p114: ref;
  var $i126: i64;
  var $p127: ref;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $p131: ref;
  var $i82: i32;
  var $p132: ref;
  var $i26: i32;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 298} {:cexpr "snd_seq_event_dup:arg:nonblock"} boogie_si_record_i32($i3);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p2, $0.ref);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.7, $p7);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 12);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 4);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i21, $i22 := 0, 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.7, $p23);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i25 := $sle.i32($i24, $i22);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $i27 := snd_seq_cell_alloc($p0, $p5, $i3, $p4);
    call {:si_unique_call 302} {:cexpr "err"} boogie_si_record_i32($i27);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.17, $p5);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p1);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.7;
    cmdloc_dummy_var_23 := $M.7;
    call {:si_unique_call 303} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p31, $p32, 32, $zext.i32.i64(8), 0 == 1);
    $M.7 := cmdloc_dummy_var_24;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.7, $p33);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 12);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 4);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.17, $p5);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p2, $p131);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.7, $p40);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 1073741824);
    call {:si_unique_call 304} {:cexpr "is_chained"} boogie_si_record_i32($i42);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.7, $p45);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, $sub.i64(0, 2147483648));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i64.i32($i48);
    call {:si_unique_call 305} {:cexpr "is_usrptr"} boogie_si_record_i32($i49);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i21, 1073741824);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.17, $p5);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p55, $i50);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.17, $p5);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p56, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p60, $0.ref);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.7, $p63);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.7, $p68);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i70 := $sub.i32($i22, 1);
    call {:si_unique_call 306} {:cexpr "ncells"} boogie_si_record_i32($i70);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i71 := $sgt.i32($i22, 0);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb13:
    assume $i71 == 1;
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i72, $p73, $p74, $p75, $i76 := $i70, $p69, $0.ref, $p64, $i21;
    goto $bb16;

  $bb16:
    call $i77, $i78, $i79, $i80, $i81, $p83, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p93, $p95, $p96, $p97, $i98, $i99, $p100, $p101, $p102, $i103, $i104, $i105, $p106, $p107, $p108, $p109, $p110, $p111, $p112, $i115, $p116, $p117, $p118, $i119, $i120, $i121, $i122, $p123, $p124, $p125, $p113, $p114, $i126, $p127, $i128, $i129, $i130, $i72, $p73, $p74, $p75, $i76, cmdloc_dummy_var_25, cmdloc_dummy_var_26, cmdloc_dummy_var_27, cmdloc_dummy_var_28, cmdloc_dummy_var_29, cmdloc_dummy_var_30 := snd_seq_event_dup_loop_$bb16($p0, $i3, $p4, $p5, $p6, $i42, $i49, $i77, $i78, $i79, $i80, $i81, $p83, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p93, $p95, $p96, $p97, $i98, $i99, $p100, $p101, $p102, $i103, $i104, $i105, $p106, $p107, $p108, $p109, $p110, $p111, $p112, $i115, $p116, $p117, $p118, $i119, $i120, $i121, $i122, $p123, $p124, $p125, $p113, $p114, $i126, $p127, $i128, $i129, $i130, $i72, $p73, $p74, $p75, $i76, cmdloc_dummy_var_25, cmdloc_dummy_var_26, cmdloc_dummy_var_27, cmdloc_dummy_var_28, cmdloc_dummy_var_29, cmdloc_dummy_var_30);
    goto $bb16_last;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i76, 28);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := 28;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $i79 := snd_seq_cell_alloc($p0, $p6, $i3, $p4);
    call {:si_unique_call 308} {:cexpr "err"} boogie_si_record_i32($i79);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i79, 0);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i81 := $i79;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.17, $p5);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p83, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.7, $p87);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, 0);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p74);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.17, $p6);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i42, 0);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i49, 0);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p113, $p114 := $p73, $p75;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i126 := $sext.i32.i64($i78);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p113, $mul.ref($i126, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i128 := $sub.i32($i76, $i78);
    call {:si_unique_call 311} {:cexpr "len"} boogie_si_record_i32($i128);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i129 := $sub.i32($i72, 1);
    call {:si_unique_call 312} {:cexpr "ncells"} boogie_si_record_i32($i129);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i130 := $sgt.i32($i72, 0);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i130 == 1);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb43:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    $i72, $p73, $p74, $p75, $i76 := $i129, $p127, $p102, $p114, $i128;
    goto $bb43_dummy;

  $bb37:
    assume $i115 == 1;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.17, $p6);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p116, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i78);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i120 := copy_from_user($p118, $p73, $i119);
    call {:si_unique_call 314} {:cexpr "tmp___0"} boogie_si_record_i64($i120);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i120, 0);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i121 == 1);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i122 := $sext.i32.i64($i78);
    call {:si_unique_call 315} {:cexpr "__len"} boogie_si_record_i64($i122);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.17, $p6);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.7;
    cmdloc_dummy_var_29 := $M.7;
    call {:si_unique_call 316} cmdloc_dummy_var_30 := $memcpy.i8(cmdloc_dummy_var_28, cmdloc_dummy_var_29, $p125, $p73, $i122, $zext.i32.i64(1), 0 == 1);
    $M.7 := cmdloc_dummy_var_30;
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i121 == 1;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 14);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.17, $p5);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} snd_seq_cell_free($p132);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i26 := $i82;
    goto $bb6;

  $bb31:
    assume $i103 == 1;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p75);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb33;

  $bb34:
    assume $i105 == 1;
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.17, $p6);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p75, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p107);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p108);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.7;
    cmdloc_dummy_var_26 := $M.7;
    call {:si_unique_call 310} cmdloc_dummy_var_27 := $memcpy.i8(cmdloc_dummy_var_25, cmdloc_dummy_var_26, $p109, $p110, 32, $zext.i32.i64(8), 0 == 1);
    $M.7 := cmdloc_dummy_var_27;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p75, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.7, $p111);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p113, $p114 := $p73, $p112;
    goto $bb36;

  $bb28:
    assume $i99 == 1;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.17, $p6);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p74, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p101, $p100);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i90 == 1;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.17, $p6);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.17, $p5);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p93, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p97, $p91);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb23;

  $bb18:
    assume $i77 == 1;
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i78 := $i76;
    goto $bb20;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i26 := $i27;
    goto $bb6;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.7, $p14);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 1073741823);
    call {:si_unique_call 299} {:cexpr "extlen"} boogie_si_record_i32($i16);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 27);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i19 := $udiv.i64($i18, 28);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    call {:si_unique_call 300} {:cexpr "ncells"} boogie_si_record_i32($i20);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i21, $i22 := $i16, $i20;
    goto $bb3;

  $bb43_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1565;
}



const snd_seq_cell_alloc: ref;

axiom snd_seq_cell_alloc == $sub.ref(0, 229785);

procedure snd_seq_cell_alloc($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.19, $M.7, $M.20, $M.21, $M.22, $CurrAddr;



implementation snd_seq_cell_alloc($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $i62: i32;
  var $i17: i32;
  var $p67: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 319} {:cexpr "snd_seq_cell_alloc:arg:nonblock"} boogie_si_record_i32($i2);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.17 := $store.ref($M.17, $p1, $0.ref);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $p9 := get_current();
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} init_waitqueue_entry($p4, $p9);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $p11 := spinlock_check($p10);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i12 := _raw_spin_lock_irqsave($p11);
    call {:si_unique_call 324} {:cexpr "flags"} boogie_si_record_i64($i12);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.7, $p13);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.7, $p18);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(32, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.7, $p40);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.7, $p43);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i46 == 1);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(44, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.7, $p63);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, 1);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(44, 1));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p66, $i65);
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 11);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $M.17 := $store.ref($M.17, $p1, $p44);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i17 := $i62;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} spin_unlock_irqrestore($p67, $i12);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i8 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb28:
    assume $i46 == 1;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p44, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.7, $p47);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p49, $p48);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(20, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} atomic_inc($p50);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(20, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i52 := atomic_read($p51);
    call {:si_unique_call 339} {:cexpr "used"} boogie_si_record_i32($i52);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(36, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.7, $p53);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i54, $i52);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(48, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.7, $p57);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 1);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(48, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p60, $i59);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p44, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p61, $0.ref);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i62 := 0;
    goto $bb33;

  $bb30:
    assume $i55 == 1;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(36, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p56, $i52);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb25:
    assume $i42 == 1;
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb7;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call $p22, $i23, $p24, $i25, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $p33, $i34, $i35, $i36, $p37, $i38, $i39 := snd_seq_cell_alloc_loop_$bb12($p0, $i2, $p4, $p5, $p18, $p22, $i23, $p24, $i25, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $p33, $i34, $i35, $i36, $p37, $i38, $i39);
    goto $bb12_last;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(32, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.7, $p37);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i39 == 1);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb22:
    assume $i39 == 1;
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, $p5, 1);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $p22 := get_current();
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.19, $p5);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref(0, 9576)), $mul.ref(0, 1));
    call {:si_unique_call 328} $i25 := devirtbounce.3(0, $p24, $i23, $p24);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, $p5, $i25);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(56, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} add_wait_queue($p26, $p4);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} spin_unlock_irq($p27);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} schedule();
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} spin_lock_irq($p28);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(56, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} remove_wait_queue($p29, $p4);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $p30 := get_current();
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $i31 := signal_pending($p30);
    call {:si_unique_call 336} {:cexpr "tmp___6"} boogie_si_record_i32($i31);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.7, $p18);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i35 == 1);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb18_dummy;

  $bb15:
    assume $i32 == 1;
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 512);
    goto $bb7;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} __snd_printk.i32.ref.i32.ref(1, .str.22, 302, .str.109);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i2, 0);
    goto corral_source_split_1686;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 230817);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i22: i64;
  var $i13: i64;
  var vslice_dummy_var_124: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 342} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 343} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} might_fault();
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 346} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 350} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32(1, 0);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 354} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32(1, 0);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} vslice_dummy_var_124 := ldv__builtin_expect($i30, 0);
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} warn_slowpath_fmt.ref.i32.ref(.str.107, 66, .str.108);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i21 := _copy_from_user($p0, $p1, $i20);
    call {:si_unique_call 352} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i12 := _copy_from_user($p0, $p1, $i11);
    call {:si_unique_call 348} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 231849);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const might_fault: ref;

axiom might_fault == $sub.ref(0, 232881);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 233913);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 357} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 1} true;
    call {:si_unique_call 358} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 359} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 234945);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $p0 := devirtbounce.4(0, current_task);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const init_waitqueue_entry: ref;

axiom init_waitqueue_entry == $sub.ref(0, 235977);

procedure init_waitqueue_entry($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.20, $M.21, $M.22;



implementation init_waitqueue_entry($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p2, 0);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p4, $p1);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p5, default_wake_function);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    return;
}



const add_wait_queue: ref;

axiom add_wait_queue == $sub.ref(0, 237009);

procedure add_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation add_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 238041);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} _raw_spin_unlock_irq($p2);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 239073);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 240105);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} _raw_spin_lock_irq($p2);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    return;
}



const remove_wait_queue: ref;

axiom remove_wait_queue == $sub.ref(0, 241137);

procedure remove_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 242169);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 364} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 366} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 243201);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 9576)), $mul.ref(8, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.18, $p2);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 369} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 244233);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i4 := variable_test_bit($i1, $p3);
    call {:si_unique_call 372} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 245265);

procedure variable_test_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 374} $i2 := devirtbounce.5(0, $p1, $i0);
    call {:si_unique_call 375} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 246297);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 247329);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    return;
}



const default_wake_function: ref;

axiom default_wake_function == $sub.ref(0, 248361);

procedure default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const queueptr: ref;

axiom queueptr == $sub.ref(0, 249393);

procedure queueptr($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation queueptr($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} {:cexpr "queueptr:arg:queueid"} boogie_si_record_i32($i0);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 0);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i0, 7);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $p4 := spinlock_check(queue_list_lock);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 379} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i0);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref($i6, 8));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.23, $p7);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} spin_unlock_irqrestore(queue_list_lock, $i5);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p3 := $p8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} atomic_inc($p11);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const snd_seq_timer_get_cur_time: ref;

axiom snd_seq_timer_get_cur_time == $sub.ref(0, 250425);

procedure snd_seq_timer_get_cur_time($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation snd_seq_timer_get_cur_time($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i64;
  var $i31: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i64;
  var $i49: i32;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(12, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.7;
    cmdloc_dummy_var_32 := $M.7;
    call {:si_unique_call 385} cmdloc_dummy_var_33 := $memcpy.i8(cmdloc_dummy_var_31, cmdloc_dummy_var_32, $p5, $p6, 8, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_33;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(0, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.7, $p8);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p1);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p2);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.7;
    cmdloc_dummy_var_35 := $M.7;
    call {:si_unique_call 389} cmdloc_dummy_var_36 := $memcpy.i8(cmdloc_dummy_var_34, cmdloc_dummy_var_35, $p57, $p58, 8, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_36;
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p1);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.7, $p59);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $r := $i60;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} do_gettimeofday($p3);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.24, $p12);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(112, 1)), $mul.ref(8, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.7, $p16);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i14, $i18);
    call {:si_unique_call 387} {:cexpr "usec"} boogie_si_record_i32($i19);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i20 == 1);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.7, $p40);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i42 := $mul.i32($i19, 1000);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i41, $i42);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p44, $i43);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.7, $p45);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.25, $p47);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i64.i32($i48);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.7, $p51);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32($i49, $i53);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i46, $i54);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p56, $i55);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} snd_seq_sanity_real_time___0($p2);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.7, $p21);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i23 := $mul.i32($i19, 1000);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i22, $i23);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 1000000000);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p26, $i25);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.7, $p27);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.25, $p29);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i30);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.7, $p33);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i31, $i35);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i28, $i36);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, $sub.i32(0, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p39, $i38);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const snd_seq_timer_get_cur_tick: ref;

axiom snd_seq_timer_get_cur_tick == $sub.ref(0, 251457);

procedure snd_seq_timer_get_cur_tick($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_seq_timer_get_cur_tick($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.7, $p2);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const do_gettimeofday: ref;

axiom do_gettimeofday == $sub.ref(0, 252489);

procedure do_gettimeofday($p0: ref);
  free requires assertsPassed;



implementation do_gettimeofday($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    return;
}



const snd_seq_sanity_real_time___0: ref;

axiom snd_seq_sanity_real_time___0 == $sub.ref(0, 253521);

procedure snd_seq_sanity_real_time___0($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_sanity_real_time___0($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.7, $p1);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 999999999);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p4, $i5, $i6, $p7, $p8, $i9, $i10, $p11, $i12, $i13 := snd_seq_sanity_real_time___0_loop_$bb4($p0, $p1, $p4, $i5, $i6, $p7, $p8, $i9, $i10, $p11, $i12, $i13);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.7, $p4);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1000000000);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p7, $i6);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.7, $p8);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 1);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p11, $i10);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.7, $p1);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 999999999);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const _raw_read_lock: ref;

axiom _raw_read_lock == $sub.ref(0, 254553);

procedure _raw_read_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_read_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    return;
}



const _raw_read_unlock: ref;

axiom _raw_read_unlock == $sub.ref(0, 255585);

procedure _raw_read_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_read_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    return;
}



const down_read: ref;

axiom down_read == $sub.ref(0, 256617);

procedure down_read($p0: ref);
  free requires assertsPassed;



implementation down_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    return;
}



const up_read: ref;

axiom up_read == $sub.ref(0, 257649);

procedure up_read($p0: ref);
  free requires assertsPassed;



implementation up_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    return;
}



const __request_module: ref;

axiom __request_module == $sub.ref(0, 258681);

procedure __request_module.i1.ref.i32($i0: i1, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __request_module.i1.ref.i32($i0: i1, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 390} {:cexpr "__request_module:arg:arg0"} boogie_si_record_i1($i0);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 1} true;
    call {:si_unique_call 391} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 392} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const snd_request_card: ref;

axiom snd_request_card == $sub.ref(0, 259713);

procedure snd_request_card($i0: i32);
  free requires assertsPassed;



implementation snd_request_card($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} {:cexpr "snd_request_card:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    return;
}



const snd_seq_device_load_drivers: ref;

axiom snd_seq_device_load_drivers == $sub.ref(0, 260745);

procedure snd_seq_device_load_drivers();
  free requires assertsPassed;



implementation snd_seq_device_load_drivers()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_register_mutex: ref;

axiom ldv_mutex_unlock_register_mutex == $sub.ref(0, 261777);

procedure ldv_mutex_unlock_register_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_unlock_register_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} ldv_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 395} {:cexpr "ldv_mutex_register_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 262809);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    return;
}



const snd_seq_delete_all_ports: ref;

axiom snd_seq_delete_all_ports == $sub.ref(0, 263841);

procedure snd_seq_delete_all_ports($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr, $M.3, $M.13, $M.15, assertsPassed, $M.37, $M.41, $M.8, $M.9, $M.10, $M.16, $M.23, $M.26, $M.33, $M.6, $M.5, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_delete_all_ports($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p27: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p25: ref;
  var $p26: ref;
  var $p45: ref;
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(216, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} ldv_mutex_lock_161($p2);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(144, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i4 := _raw_write_lock_irqsave($p3);
    call {:si_unique_call 399} {:cexpr "flags"} boogie_si_record_i64($i4);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(128, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i6 := list_empty($p5);
    call {:si_unique_call 401} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} INIT_LIST_HEAD($p1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(120, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p10, 0);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(144, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} _raw_write_unlock_irqrestore($p11, $i4);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.7, $p12);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 80), 672));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p14, $mul.ref($sub.ref(0, 80), 672)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.7, $p17);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref($sub.ref(0, 80), 672));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref($sub.ref(0, 80), 672)), $mul.ref(80, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p1);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i22, $i23);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(216, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} ldv_mutex_unlock_162($p45);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p25, $p26 := $p20, $p15;
    goto $bb7;

  $bb7:
    call $p27, $p29, $i30, $i31, $p33, $i34, $i35, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $p25, $p26, vslice_dummy_var_125 := snd_seq_delete_all_ports_loop_$bb7($p0, $i23, $p27, $p29, $i30, $i31, $p33, $i34, $i35, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $p25, $p26, vslice_dummy_var_125);
    goto $bb7_last;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 672)), $mul.ref(80, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} list_del($p27);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.7, $p29);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.7, $p33);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} snd_seq_system_broadcast($i31, $i35, 64);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vslice_dummy_var_125 := port_delete($p0, $p26);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 672)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.7, $p38);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref($sub.ref(0, 80), 672));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p25, $mul.ref(0, 672)), $mul.ref(80, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, $i23);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i44 == 1);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $p25, $p26 := $p41, $p25;
    goto $bb9_dummy;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(128, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} list_add($p1, $p8);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(128, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} list_del_init($p9);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2055;
}



const snd_seq_queue_client_leave: ref;

axiom snd_seq_queue_client_leave == $sub.ref(0, 264873);

procedure snd_seq_queue_client_leave($i0: i32);
  free requires assertsPassed;
  modifies $M.7, $M.23, $M.26, $M.33, $M.6, assertsPassed, $CurrAddr;



implementation snd_seq_queue_client_leave($i0: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i1;
  var $p127: ref;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $i131: i64;
  var $i132: i1;
  var $p133: ref;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $i137: i64;
  var $i138: i1;
  var $p139: ref;
  var $i140: i64;
  var $i141: i1;
  var $p142: ref;
  var $i143: i64;
  var $i144: i1;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} {:cexpr "snd_seq_queue_client_leave:arg:client"} boogie_si_record_i32($i0);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $p1 := queue_list_remove(0, $i0);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $p124 := queue_list_remove(1, $i0);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i126 := $ne.i64($i125, 0);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $p127 := queue_list_remove(2, $i0);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p127);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i128, 0);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $p130 := queue_list_remove(3, $i0);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p130);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $p133 := queue_list_remove(4, $i0);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p133);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $p136 := queue_list_remove(5, $i0);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i138 := $ne.i64($i137, 0);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $p139 := queue_list_remove(6, $i0);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p139);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i141 := $ne.i64($i140, 0);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $p142 := queue_list_remove(7, $i0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i143 := $p2i.ref.i64($p142);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i143, 0);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $p4 := queueptr(0);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i9 := variable_test_bit($i0, $p8);
    call {:si_unique_call 416} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} atomic_dec($p18);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $p19 := queueptr(1);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i24 := variable_test_bit($i0, $p23);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p19, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} atomic_dec($p33);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $p34 := queueptr(2);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p34, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i39 := variable_test_bit($i0, $p38);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p34, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} atomic_dec($p48);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $p49 := queueptr(3);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p49, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i54 := variable_test_bit($i0, $p53);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p49, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} atomic_dec($p63);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p64 := queueptr(4);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p64, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i69 := variable_test_bit($i0, $p68);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p64, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} atomic_dec($p78);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $p79 := queueptr(5);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i84 := variable_test_bit($i0, $p83);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} atomic_dec($p93);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $p94 := queueptr(6);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i96 := $eq.i64($i95, 0);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p94, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i99 := variable_test_bit($i0, $p98);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p94, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} atomic_dec($p108);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $p109 := queueptr(7);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i111 := $eq.i64($i110, 0);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p109, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i114 := variable_test_bit($i0, $p113);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p109, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} atomic_dec($p123);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb70:
    assume $i115 == 1;
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p109, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.7, $p116);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} snd_seq_prioq_leave($p117, $i0, 0);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p109, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.7, $p118);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} snd_seq_prioq_leave($p119, $i0, 0);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p109, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.7, $p120);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} vslice_dummy_var_133 := snd_seq_queue_use($i121, $i0, 0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    goto $bb72;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i111 == 1;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb62:
    assume $i100 == 1;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p94, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.7, $p101);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} snd_seq_prioq_leave($p102, $i0, 0);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p94, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.7, $p103);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} snd_seq_prioq_leave($p104, $i0, 0);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p94, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.7, $p105);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} vslice_dummy_var_132 := snd_seq_queue_use($i106, $i0, 0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    goto $bb64;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb59:
    assume $i96 == 1;
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb54:
    assume $i85 == 1;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.7, $p86);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} snd_seq_prioq_leave($p87, $i0, 0);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.7, $p88);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} snd_seq_prioq_leave($p89, $i0, 0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p79, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.7, $p90);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} vslice_dummy_var_131 := snd_seq_queue_use($i91, $i0, 0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i81 == 1;
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb46:
    assume $i70 == 1;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p64, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.7, $p71);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} snd_seq_prioq_leave($p72, $i0, 0);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p64, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.7, $p73);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} snd_seq_prioq_leave($p74, $i0, 0);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p64, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.7, $p75);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} vslice_dummy_var_130 := snd_seq_queue_use($i76, $i0, 0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    goto $bb48;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i66 == 1;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb38:
    assume $i55 == 1;
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p49, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.7, $p56);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} snd_seq_prioq_leave($p57, $i0, 0);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p49, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.7, $p58);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} snd_seq_prioq_leave($p59, $i0, 0);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p49, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.7, $p60);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} vslice_dummy_var_129 := snd_seq_queue_use($i61, $i0, 0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i51 == 1;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb30:
    assume $i40 == 1;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p34, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.7, $p41);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} snd_seq_prioq_leave($p42, $i0, 0);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p34, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.7, $p43);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} snd_seq_prioq_leave($p44, $i0, 0);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p34, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.7, $p45);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} vslice_dummy_var_128 := snd_seq_queue_use($i46, $i0, 0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i36 == 1;
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb22:
    assume $i25 == 1;
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p19, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.7, $p26);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} snd_seq_prioq_leave($p27, $i0, 0);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p19, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.7, $p28);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} snd_seq_prioq_leave($p29, $i0, 0);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p19, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.7, $p30);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vslice_dummy_var_127 := snd_seq_queue_use($i31, $i0, 0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i21 == 1;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb14:
    assume $i10 == 1;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.7, $p11);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} snd_seq_prioq_leave($p12, $i0, 0);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.7, $p13);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} snd_seq_prioq_leave($p14, $i0, 0);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.7, $p15);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vslice_dummy_var_126 := snd_seq_queue_use($i16, $i0, 0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i6 == 1;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb98:
    assume $i144 == 1;
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} queue_delete($p142);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb94:
    assume $i141 == 1;
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} queue_delete($p139);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb90:
    assume $i138 == 1;
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} queue_delete($p136);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb86:
    assume $i135 == 1;
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} queue_delete($p133);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb82:
    assume $i132 == 1;
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} queue_delete($p130);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb78:
    assume $i129 == 1;
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} queue_delete($p127);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb74:
    assume $i126 == 1;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} queue_delete($p124);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb3:
    assume $i3 == 1;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} queue_delete($p1);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const snd_seq_queue_client_termination: ref;

axiom snd_seq_queue_client_termination == $sub.ref(0, 265905);

procedure snd_seq_queue_client_termination($i0: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_queue_client_termination($i0: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i8;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i8;
  var $i42: i8;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i8;
  var $i70: i8;
  var $i71: i8;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i98: i8;
  var $i99: i8;
  var $i100: i8;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i127: i8;
  var $i128: i8;
  var $i129: i8;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $p152: ref;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $i156: i8;
  var $i157: i8;
  var $i158: i8;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i8;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i64;
  var $i177: i1;
  var $p178: ref;
  var $p179: ref;
  var $i180: i64;
  var $p181: ref;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $i185: i8;
  var $i186: i8;
  var $i187: i8;
  var $p188: ref;
  var $p189: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i8;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $p199: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i64;
  var $i206: i1;
  var $p207: ref;
  var $p208: ref;
  var $i209: i64;
  var $p210: ref;
  var $i211: i32;
  var $i212: i1;
  var $p213: ref;
  var $i214: i8;
  var $i215: i8;
  var $i216: i8;
  var $p217: ref;
  var $p218: ref;
  var $i219: i32;
  var $i220: i1;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $i224: i8;
  var $i225: i32;
  var $i226: i1;
  var $p227: ref;
  var $p228: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} {:cexpr "snd_seq_queue_client_termination:arg:client"} boogie_si_record_i32($i0);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $p1 := queueptr(0);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $p5 := spinlock_check($p4);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 480} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, $i0);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} spin_unlock_irqrestore($p14, $i6);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.7, $p15);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, $i0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} atomic_dec($p29);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $p30 := queueptr(1);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p30, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $p34 := spinlock_check($p33);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $i35 := _raw_spin_lock_irqsave($p34);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p30, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.7, $p36);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, $i0);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p30, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} spin_unlock_irqrestore($p43, $i35);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p30, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.7, $p44);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, $i0);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p30, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} atomic_dec($p58);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p59 := queueptr(2);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p59, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p63 := spinlock_check($p62);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i64 := _raw_spin_lock_irqsave($p63);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p59, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.7, $p65);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, $i0);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p59, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} spin_unlock_irqrestore($p72, $i64);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p59, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.7, $p73);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, $i0);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p59, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} atomic_dec($p87);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $p88 := queueptr(3);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, 0);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p88, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p92 := spinlock_check($p91);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i93 := _raw_spin_lock_irqsave($p92);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p88, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.7, $p94);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, $i0);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p88, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} spin_unlock_irqrestore($p101, $i93);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p88, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.7, $p102);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, $i0);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p88, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} atomic_dec($p116);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $p117 := queueptr(4);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i119 := $eq.i64($i118, 0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p117, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $p121 := spinlock_check($p120);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i122 := _raw_spin_lock_irqsave($p121);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p117, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.7, $p123);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, $i0);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p117, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} spin_unlock_irqrestore($p130, $i122);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p117, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.7, $p131);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, $i0);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p117, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} atomic_dec($p145);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $p146 := queueptr(5);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p146);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i148 := $eq.i64($i147, 0);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p146, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $p150 := spinlock_check($p149);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i151 := _raw_spin_lock_irqsave($p150);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p146, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.7, $p152);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, $i0);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p146, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} spin_unlock_irqrestore($p159, $i151);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p146, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.7, $p160);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, $i0);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p146, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} atomic_dec($p174);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p175 := queueptr(6);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p175);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i177 := $eq.i64($i176, 0);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p175, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $p179 := spinlock_check($p178);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i180 := _raw_spin_lock_irqsave($p179);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p175, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.7, $p181);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, $i0);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p175, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} spin_unlock_irqrestore($p188, $i180);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p175, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.7, $p189);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, $i0);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p175, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} atomic_dec($p203);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p204 := queueptr(7);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i205 := $p2i.ref.i64($p204);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i206 := $eq.i64($i205, 0);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p204, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p208 := spinlock_check($p207);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $i209 := _raw_spin_lock_irqsave($p208);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p204, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i211 := $load.i32($M.7, $p210);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, $i0);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i212} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p204, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} spin_unlock_irqrestore($p217, $i209);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p204, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.7, $p218);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, $i0);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p204, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} atomic_dec($p232);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb108:
    assume $i220 == 1;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p204, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.7, $p221);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p222);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i224 := $load.i8($M.7, $p223);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i225 := $zext.i8.i32($i224);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i226 := $ne.i32($i225, 0);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p204, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.7, $p230);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} snd_seq_timer_reset($p231);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb111:
    assume $i226 == 1;
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p204, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p228 := $load.ref($M.7, $p227);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} vslice_dummy_var_141 := snd_seq_timer_stop($p228);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb105:
    assume $i212 == 1;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p204, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.7, $p213);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i215 := $and.i8($i214, $sub.i8(0, 3));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i216 := $or.i8($i215, 2);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p213, $i216);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb102:
    assume $i206 == 1;
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb94:
    assume $i191 == 1;
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p175, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.7, $p192);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.7, $p194);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i32($i195);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p175, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.7, $p201);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} snd_seq_timer_reset($p202);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb97:
    assume $i197 == 1;
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p175, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.7, $p198);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} vslice_dummy_var_140 := snd_seq_timer_stop($p199);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb91:
    assume $i183 == 1;
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p175, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.7, $p184);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i186 := $and.i8($i185, $sub.i8(0, 3));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i187 := $or.i8($i186, 2);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p184, $i187);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb88:
    assume $i177 == 1;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb80:
    assume $i162 == 1;
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p146, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.7, $p163);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.7, $p165);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i166);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i167, 0);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p146, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.7, $p172);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} snd_seq_timer_reset($p173);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb83:
    assume $i168 == 1;
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p146, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.7, $p169);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} vslice_dummy_var_139 := snd_seq_timer_stop($p170);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb77:
    assume $i154 == 1;
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p146, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.7, $p155);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i157 := $and.i8($i156, $sub.i8(0, 3));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i158 := $or.i8($i157, 2);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p155, $i158);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb74:
    assume $i148 == 1;
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb66:
    assume $i133 == 1;
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p117, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.7, $p134);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.7, $p136);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p117, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.7, $p143);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} snd_seq_timer_reset($p144);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb69:
    assume $i139 == 1;
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p117, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.7, $p140);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_138 := snd_seq_timer_stop($p141);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb63:
    assume $i125 == 1;
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p117, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.7, $p126);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i128 := $and.i8($i127, $sub.i8(0, 3));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i129 := $or.i8($i128, 2);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p126, $i129);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i119 == 1;
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb52:
    assume $i104 == 1;
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p88, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.7, $p105);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.7, $p107);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p88, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.7, $p114);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} snd_seq_timer_reset($p115);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb55:
    assume $i110 == 1;
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p88, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.7, $p111);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_137 := snd_seq_timer_stop($p112);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb49:
    assume $i96 == 1;
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p88, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.7, $p97);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i99 := $and.i8($i98, $sub.i8(0, 3));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i100 := $or.i8($i99, 2);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p97, $i100);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i90 == 1;
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb38:
    assume $i75 == 1;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p59, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.7, $p76);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.7, $p78);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p59, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.7, $p85);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} snd_seq_timer_reset($p86);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb41:
    assume $i81 == 1;
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p59, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.7, $p82);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_136 := snd_seq_timer_stop($p83);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume $i67 == 1;
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p59, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.7, $p68);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i70 := $and.i8($i69, $sub.i8(0, 3));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i71 := $or.i8($i70, 2);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p68, $i71);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i61 == 1;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb24:
    assume $i46 == 1;
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p30, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.7, $p47);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.7, $p49);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p30, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.7, $p56);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} snd_seq_timer_reset($p57);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb27:
    assume $i52 == 1;
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p30, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.7, $p53);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_135 := snd_seq_timer_stop($p54);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21:
    assume $i38 == 1;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p30, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.7, $p39);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i41 := $and.i8($i40, $sub.i8(0, 3));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i42 := $or.i8($i41, 2);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p39, $i42);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i32 == 1;
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.7, $p18);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.7, $p20);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.7, $p27);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} snd_seq_timer_reset($p28);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.7, $p24);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} vslice_dummy_var_134 := snd_seq_timer_stop($p25);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.7, $p10);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i12 := $and.i8($i11, $sub.i8(0, 3));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i13 := $or.i8($i12, 2);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p10, $i13);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i3 == 1;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const snd_seq_pool_delete: ref;

axiom snd_seq_pool_delete == $sub.ref(0, 266937);

procedure snd_seq_pool_delete($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_pool_delete($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var vslice_dummy_var_142: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.7, $p0);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p0, $0.ref);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} vslice_dummy_var_142 := snd_seq_pool_done($p1);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} kfree($p5);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_seq_pool_done: ref;

axiom snd_seq_pool_done == $sub.ref(0, 267969);

procedure snd_seq_pool_done($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_pool_done($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i27: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i14: i32;
  var vslice_dummy_var_143: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 536} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 538} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 541} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $p16 := spinlock_check($p15);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i17 := _raw_spin_lock_irqsave($p16);
    call {:si_unique_call 544} {:cexpr "flags"} boogie_si_record_i64($i17);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(32, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p18, 1);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} spin_unlock_irqrestore($p19, $i17);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(56, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i21 := waitqueue_active($p20);
    call {:si_unique_call 547} {:cexpr "tmp___2"} boogie_si_record_i32($i21);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(20, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i25 := atomic_read($p24);
    call {:si_unique_call 550} {:cexpr "tmp___4"} boogie_si_record_i32($i25);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, 0);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $p36 := spinlock_check($p35);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i37 := _raw_spin_lock_irqsave($p36);
    call {:si_unique_call 556} {:cexpr "flags"} boogie_si_record_i64($i37);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.7, $p38);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p40, $0.ref);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p41, $0.ref);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p42, 0);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} spin_unlock_irqrestore($p43, $i37);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p39);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} vfree($p44);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $p46 := spinlock_check($p45);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i47 := _raw_spin_lock_irqsave($p46);
    call {:si_unique_call 561} {:cexpr "flags"} boogie_si_record_i64($i47);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(32, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p48, 0);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} spin_unlock_irqrestore($p49, $i47);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i27 := 1250;
    goto $bb14;

  $bb14:
    call $i28, $i32, $i33, $i34, $i27, vslice_dummy_var_143 := snd_seq_pool_done_loop_$bb14($p24, $i28, $i32, $i33, $i34, $i27, vslice_dummy_var_143);
    goto $bb14_last;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} vslice_dummy_var_143 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i27, 1);
    call {:si_unique_call 564} {:cexpr "max_count"} boogie_si_record_i32($i32);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i33 := atomic_read($p24);
    call {:si_unique_call 566} {:cexpr "tmp___4"} boogie_si_record_i32($i33);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i33, 0);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb20:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i27 := $i32;
    goto $bb20_dummy;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(20, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i30 := atomic_read($p29);
    call {:si_unique_call 552} {:cexpr "tmp___3"} boogie_si_record_i32($i30);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} __snd_printk.i32.ref.i32.ref.i32(0, .str.22, 497, .str.25, $i30);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(56, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} __wake_up($p23, 3, 1, $0.ref);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} warn_slowpath_fmt.ref.i32.ref.ref(.str.22, 484, .str.6, .str.23);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2764;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 269001);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    return;
}



const queue_list_remove: ref;

axiom queue_list_remove == $sub.ref(0, 270033);

procedure queue_list_remove($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.7, $M.23, $M.26;



implementation queue_list_remove($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i8;
  var $i16: i8;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p23: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} {:cexpr "queue_list_remove:arg:id"} boogie_si_record_i32($i0);
    call {:si_unique_call 568} {:cexpr "queue_list_remove:arg:client"} boogie_si_record_i32($i1);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $p2 := spinlock_check(queue_list_lock);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i3 := _raw_spin_lock_irqsave($p2);
    call {:si_unique_call 571} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i0);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref($i4, 8));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.23, $p5);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} spin_unlock_irqrestore(queue_list_lock, $i3);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p22 := $0.ref;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $r := $p22;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} spin_lock($p9);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.7, $p10);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, $i1);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} spin_unlock($p23);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.7, $p13);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i14, $sub.i8(0, 3));
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i16 := $or.i8($i15, 2);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p13, $i16);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} spin_unlock($p17);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i0);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref($i18, 8));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p19, $0.ref);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i20 := $M.26;
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i20, 1);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $M.26 := $i21;
    call {:si_unique_call 574} {:cexpr "num_queues"} boogie_si_record_i32($i21);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} spin_unlock_irqrestore(queue_list_lock, $i3);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p22 := $p6;
    goto $bb5;
}



const snd_seq_prioq_leave: ref;

axiom snd_seq_prioq_leave == $sub.ref(0, 271065);

procedure snd_seq_prioq_leave($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_prioq_leave($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p46: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p52: ref;
  var $p10: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p56: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} {:cexpr "snd_seq_prioq_leave:arg:client"} boogie_si_record_i32($i1);
    call {:si_unique_call 579} {:cexpr "snd_seq_prioq_leave:arg:timestamp"} boogie_si_record_i32($i2);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $p4 := spinlock_check($p3);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 582} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.7, $p6);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} spin_unlock_irqrestore($p53, $i5);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p10);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i55 == 1;
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p56 := $p10;
    goto $bb24;

  $bb24:
    call $p57, $p58, $i59, $i60, $p56 := snd_seq_prioq_leave_loop_$bb24($p57, $p58, $i59, $i60, $p56);
    goto $bb24_last;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.7, $p57);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} snd_seq_cell_free($p56);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i60 == 1);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb26:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $p56 := $p58;
    goto $bb26_dummy;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p11, $p12, $p13, $p14 := $0.ref, $0.ref, $0.ref, $p7;
    goto $bb4;

  $bb4:
    call $p15, $p16, $i17, $i18, $p19, $p20, $i21, $i22, $i23, $p24, $p25, $p26, $p27, $p28, $p29, $p30, $p31, $i32, $i33, $i34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $i43, $i44, $p46, $p45, $p47, $p48, $p49, $i50, $i51, $p11, $p12, $p13, $p14, $p52 := snd_seq_prioq_leave_loop_$bb4($p0, $i1, $i2, $p15, $p16, $i17, $i18, $p19, $p20, $i21, $i22, $i23, $p24, $p25, $p26, $p27, $p28, $p29, $p30, $p31, $i32, $i33, $i34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $i43, $i44, $p46, $p45, $p47, $p48, $p49, $i50, $i51, $p11, $p12, $p13, $p14, $p52);
    goto $bb4_last;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.7, $p15);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i17 := prioq_match($p14, $i1, $i2);
    call {:si_unique_call 584} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $p47, $p48, $p49 := $p14, $p12, $p11;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p16);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p52 := $p48;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p10 := $p52;
    goto $bb3;

  $bb18:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $p11, $p12, $p13, $p14 := $p49, $p48, $p47, $p16;
    goto $bb18_dummy;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.7, $p19);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p14);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i21, $i22);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.7, $p27);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p13, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p29, $p28);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.7, $p30);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p14);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i32, $i33);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.7, $p38);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i39, 1);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p41, $i40);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p42, $0.ref);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p12);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p46, $p14);
    assume {:verifier.code 0} true;
    $p45 := $p12;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p47, $p48, $p49 := $p13, $p45, $p14;
    goto $bb17;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p45 := $p14;
    goto $bb16;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.7, $p35);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p37, $p36);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.7, $p24);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p26, $p25);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb26_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2922;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2855;
}



const snd_seq_queue_use: ref;

axiom snd_seq_queue_use == $sub.ref(0, 272097);

procedure snd_seq_queue_use($i0: i32, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.33, $M.6, assertsPassed, $CurrAddr;



implementation snd_seq_queue_use($i0: i32, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p36: ref;
  var $p37: ref;
  var $i6: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} {:cexpr "snd_seq_queue_use:arg:queueid"} boogie_si_record_i32($i0);
    call {:si_unique_call 588} {:cexpr "snd_seq_queue_use:arg:client"} boogie_si_record_i32($i1);
    call {:si_unique_call 589} {:cexpr "snd_seq_queue_use:arg:use"} boogie_si_record_i32($i2);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $p3 := queueptr($i0);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(288, 1));
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} ldv_mutex_lock_93($p7);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i2, 0);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(280, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.7, $p25);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} vslice_dummy_var_144 := snd_seq_timer_close($p3);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(288, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} ldv_mutex_unlock_94($p36);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} atomic_dec($p37);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i2, 0);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} vslice_dummy_var_145 := snd_seq_timer_open($p3);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(280, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.7, $p29);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb18;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.7, $p32);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} snd_seq_timer_defaults($p33);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $i11 := test_and_set_bit($i1, $p10);
    call {:si_unique_call 593} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i19 := test_and_clear_bit($i1, $p18);
    call {:si_unique_call 595} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(280, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.7, $p21);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32($i22, 1);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(280, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p24, $i23);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(280, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.7, $p13);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(280, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p16, $i15);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const ldv_mutex_lock_93: ref;

axiom ldv_mutex_lock_93 == $sub.ref(0, 273129);

procedure ldv_mutex_lock_93($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_lock_93($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} ldv_mutex_lock_timer_mutex($p0);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} mutex_lock($p0);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 274161);

procedure test_and_set_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_set_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 604} $i2 := devirtbounce.6(0, $p1, $i0, $p1);
    call {:si_unique_call 605} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 275193);

procedure test_and_clear_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_clear_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 607} $i2 := devirtbounce.6(0, $p1, $i0, $p1);
    call {:si_unique_call 608} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const snd_seq_timer_defaults: ref;

axiom snd_seq_timer_defaults == $sub.ref(0, 276225);

procedure snd_seq_timer_defaults($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_timer_defaults($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $p6: ref;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p1, 96);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(4, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p2, 500000);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} snd_seq_timer_set_tick_resolution($p0);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.7, $p3);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, $sub.i8(0, 2));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i5);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(52, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p6, 0);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i7 := $M.27;
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p9, $i7);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i10 := $M.28;
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(56, 1)), $mul.ref(4, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p12, $i10);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i13 := $M.29;
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p15, $i13);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i16 := $M.30;
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(56, 1)), $mul.ref(12, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p18, $i16);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i19 := $M.31;
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p21, $i19);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i22 := $M.32;
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(96, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p24, $i23);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(108, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p25, 65536);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(104, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p26, 65536);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    return;
}



const snd_seq_timer_open: ref;

axiom snd_seq_timer_open == $sub.ref(0, 277257);

procedure snd_seq_timer_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.33, $CurrAddr;



implementation snd_seq_timer_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i19: i32;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p3 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.7, $p4);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 613} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 615} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 618} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(80, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.7, $p20);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p2);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.7, $p25);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} vslice_dummy_var_146 := sprintf.ref.ref.i32($p24, .str.70, $i26);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(52, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.7, $p28);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.7, $p32);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p2);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(56, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.7, $p39);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i41 := snd_timer_open($p1, $p37, $p38, $i40);
    call {:si_unique_call 621} {:cexpr "err"} boogie_si_record_i32($i41);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.34, $p1);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 200)), $mul.ref(40, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p67, snd_seq_timer_interrupt);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.34, $p1);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 200)), $mul.ref(56, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p70, $p0);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.34, $p1);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 200)), $mul.ref(16, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.7, $p72);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i73, 8);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.34, $p1);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 200)), $mul.ref(16, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p76, $i74);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.34, $p1);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(80, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p78, $p77);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.7, $p44);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb19;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.7, $p48);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 1);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i50 == 1);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(56, 1)), $mul.ref(12, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.7, $p52);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i64 := $i41;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, 0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i65 == 1;
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} __snd_printk.i32.ref.i32.ref.i32(0, .str.63, 357, .str.71, $i64);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i19 := $i64;
    goto $bb6;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p3);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.33;
    call {:si_unique_call 622} cmdloc_dummy_var_38 := $memset.i8(cmdloc_dummy_var_37, $p55, 0, 20, $zext.i32.i64(4), 0 == 1);
    $M.33 := cmdloc_dummy_var_38;
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p56, 1);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p57, 2);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p58, $sub.i32(0, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p59, 0);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p2);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.7, $p61);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i63 := snd_timer_open($p1, $p60, $p3, $i62);
    call {:si_unique_call 624} {:cexpr "err"} boogie_si_record_i32($i63);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb23;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 200)), $mul.ref(56, 1)), $mul.ref(4, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p36, 2);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 16);
    goto $bb6;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} warn_slowpath_fmt.ref.i32.ref.ref(.str.63, 335, .str.6, .str.67);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_94: ref;

axiom ldv_mutex_unlock_94 == $sub.ref(0, 278289);

procedure ldv_mutex_unlock_94($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_unlock_94($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} ldv_mutex_unlock_timer_mutex($p0);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} mutex_unlock($p0);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_timer_mutex: ref;

axiom ldv_mutex_unlock_timer_mutex == $sub.ref(0, 279321);

procedure ldv_mutex_unlock_timer_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_unlock_timer_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} ldv_error();
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 629} {:cexpr "ldv_mutex_timer_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 280353);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const snd_timer_open: ref;

axiom snd_timer_open == $sub.ref(0, 281385);

procedure snd_timer_open($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_timer_open($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 630} {:cexpr "snd_timer_open:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 1} true;
    call {:si_unique_call 631} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 632} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const snd_seq_timer_interrupt: ref;

axiom snd_seq_timer_interrupt == $sub.ref(0, 282417);

procedure snd_seq_timer_interrupt($p0: ref, $i1: i64, $i2: i64);



const snd_seq_inc_time_nsec: ref;

axiom snd_seq_inc_time_nsec == $sub.ref(0, 283449);

procedure snd_seq_inc_time_nsec($p0: ref, $i1: i64);



const snd_seq_timer_update_tick: ref;

axiom snd_seq_timer_update_tick == $sub.ref(0, 284481);

procedure snd_seq_timer_update_tick($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_timer_update_tick($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} {:cexpr "snd_seq_timer_update_tick:arg:resolution"} boogie_si_record_i64($i1);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.7, $p2);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.7, $p5);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, $i1);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p8, $i7);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.7, $p9);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.7, $p11);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.7, $p13);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i15 := $udiv.i64($i12, $i14);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i10, $i16);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p18, $i17);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.7, $p19);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.7, $p21);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i23 := $urem.i64($i20, $i22);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p24, $i23);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_seq_check_queue: ref;

axiom snd_seq_check_queue == $sub.ref(0, 285513);

procedure snd_seq_check_queue($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.7, $M.13, $M.15, $CurrAddr, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_check_queue($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i8;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i8;
  var $i21: i8;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p28: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p53: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $p81: ref;
  var $i82: i8;
  var $i83: i8;
  var $p84: ref;
  var $i80: i64;
  var $p85: ref;
  var $i86: i8;
  var $i87: i8;
  var $p88: ref;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} {:cexpr "snd_seq_check_queue:arg:atomic"} boogie_si_record_i32($i1);
    call {:si_unique_call 635} {:cexpr "snd_seq_check_queue:arg:hop"} boogie_si_record_i32($i2);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p6 := spinlock_check($p5);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i7 := _raw_spin_lock_irqsave($p6);
    call {:si_unique_call 638} {:cexpr "flags"} boogie_si_record_i64($i7);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(100, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.7, $p9);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.7, $p18);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i20 := $and.i8($i19, $sub.i8(0, 9));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i21 := $or.i8($i20, 8);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p18, $i21);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} spin_unlock_irqrestore($p22, $i7);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $p23, $p24, $p25, $i26, $i27, $p29, $p30, $p32, $p34, $p35, $i36, $i37, $p38, $p39, $p40, $i41, $i42, $p44, $p45, $i46, $i47, $p28, $p48, $p49, $p50, $i51, $i52, $p54, $p55, $p56, $p58, $p59, $i60, $i61, $p62, $p63, $p64, $i65, $i66, $p68, $p69, $i70, $i71, $p53, $p72, $p73, $i74, $p75, $p76, $i77, $i78, $i79, $p81, $i82, $i83, $p84, $i80, vslice_dummy_var_147, vslice_dummy_var_148 := snd_seq_check_queue_loop_$bb8($p0, $i1, $i2, $p23, $p24, $p25, $i26, $i27, $p29, $p30, $p32, $p34, $p35, $i36, $i37, $p38, $p39, $p40, $i41, $i42, $p44, $p45, $i46, $i47, $p28, $p48, $p49, $p50, $i51, $i52, $p54, $p55, $p56, $p58, $p59, $i60, $i61, $p62, $p63, $p64, $i65, $i66, $p68, $p69, $i70, $i71, $p53, $p72, $p73, $i74, $p75, $p76, $i77, $i78, $i79, $p81, $i82, $i83, $p84, $i80, vslice_dummy_var_147, vslice_dummy_var_148);
    goto $bb8_last;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.7, $p23);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $p25 := snd_seq_prioq_cell_peek($p24);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.7, $p48);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $p50 := snd_seq_prioq_cell_peek($p49);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $p73 := spinlock_check($p72);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i74 := _raw_spin_lock_irqsave($p73);
    call {:si_unique_call 655} {:cexpr "flags"} boogie_si_record_i64($i74);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p0);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p75, $mul.ref(100, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.7, $p76);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i80 := $i74;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.7, $p85);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i87 := $and.i8($i86, $sub.i8(0, 9));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p85, $i87);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} spin_unlock_irqrestore($p88, $i80);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb39:
    assume $i79 == 1;
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.7, $p81);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i83 := $and.i8($i82, $sub.i8(0, 5));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p81, $i83);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} spin_unlock_irqrestore($p84, $i74);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    goto corral_source_split_3320_dummy;

  $bb24:
    assume $i52 == 1;
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p53 := $p50;
    goto $bb27;

  $bb27:
    call $p54, $p55, $p56, $p58, $p59, $i60, $i61, $p62, $p63, $p64, $i65, $i66, $p68, $p69, $i70, $i71, $p53, vslice_dummy_var_148 := snd_seq_check_queue_loop_$bb27($p0, $i1, $i2, $p48, $p54, $p55, $p56, $p58, $p59, $i60, $i61, $p62, $p63, $p64, $i65, $i66, $p68, $p69, $i70, $i71, $p53, vslice_dummy_var_148);
    goto $bb27_last;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.7, $p54);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 200)), $mul.ref(12, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i60 := snd_seq_compare_real_time($p56, $p59);
    call {:si_unique_call 649} {:cexpr "tmp___1"} boogie_si_record_i32($i60);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i61 == 1);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume $i61 == 1;
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.7, $p62);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $p64 := snd_seq_prioq_cell_out($p63);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.7, $p48);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $p69 := snd_seq_prioq_cell_peek($p68);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i71 == 1);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb36:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $p53 := $p69;
    goto $bb36_dummy;

  $bb31:
    assume $i66 == 1;
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} vslice_dummy_var_148 := snd_seq_dispatch_event($p64, $i1, $i2);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p28 := $p25;
    goto $bb12;

  $bb12:
    call $p29, $p30, $p32, $p34, $p35, $i36, $i37, $p38, $p39, $p40, $i41, $i42, $p44, $p45, $i46, $i47, $p28, vslice_dummy_var_147 := snd_seq_check_queue_loop_$bb12($p0, $i1, $i2, $p23, $p29, $p30, $p32, $p34, $p35, $i36, $i37, $p38, $p39, $p40, $i41, $i42, $p44, $p45, $i46, $i47, $p28, vslice_dummy_var_147);
    goto $bb12_last;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.7, $p29);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 200)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $i36 := snd_seq_compare_tick_time($p32, $p35);
    call {:si_unique_call 643} {:cexpr "tmp___0"} boogie_si_record_i32($i36);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.7, $p38);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $p40 := snd_seq_prioq_cell_out($p39);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.7, $p23);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $p45 := snd_seq_prioq_cell_peek($p44);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i47 == 1);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb21:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $p28 := $p45;
    goto $bb21_dummy;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vslice_dummy_var_147 := snd_seq_dispatch_event($p40, $i1, $i2);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.7, $p13);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i14, $sub.i8(0, 5));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i16 := $or.i8($i15, 4);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p13, $i16);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} spin_unlock_irqrestore($p17, $i7);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb36_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3276;

  $bb21_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3239;

  corral_source_split_3320_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3231;
}



const snd_seq_compare_tick_time: ref;

axiom snd_seq_compare_tick_time == $sub.ref(0, 286545);

procedure snd_seq_compare_tick_time($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_seq_compare_tick_time($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.7, $p0);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.7, $p1);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i4 := $uge.i32($i2, $i3);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const snd_seq_dispatch_event: ref;

axiom snd_seq_dispatch_event == $sub.ref(0, 287577);

procedure snd_seq_dispatch_event($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.15, $M.7, $CurrAddr, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_dispatch_event($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i8;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $p112: ref;
  var $i113: i32;
  var $i111: i32;
  var $p114: ref;
  var $i17: i32;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 659} {:cexpr "snd_seq_dispatch_event:arg:atomic"} boogie_si_record_i32($i1);
    call {:si_unique_call 660} {:cexpr "snd_seq_dispatch_event:arg:hop"} boogie_si_record_i32($i2);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 661} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i6);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 663} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i6, 0);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 666} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.7, $p20);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $p23 := snd_seq_client_use_ptr($i22);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.7, $p27);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 5);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i113 := snd_seq_deliver_event($p23, $p112, $i1, $i2);
    call {:si_unique_call 673} {:cexpr "result"} boogie_si_record_i32($i113);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} snd_seq_cell_free($p0);
    assume {:verifier.code 0} true;
    $i111 := $i113;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p23, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} atomic_dec($p114);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i17 := $i111;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p3);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p31);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.7;
    cmdloc_dummy_var_40 := $M.7;
    call {:si_unique_call 669} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p32, $p33, 32, $zext.i32.i64(8), 0 == 1);
    $M.7 := cmdloc_dummy_var_41;
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p34, 6);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i35 := snd_seq_deliver_event($p23, $p3, $i1, $i2);
    call {:si_unique_call 671} {:cexpr "result"} boogie_si_record_i32($i35);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p37, 7);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.7, $p38);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i40, 16);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p43, $i42);
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.7, $p44);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i47, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    $p102 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.7, $p104);
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p108, $i105);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i109 := snd_seq_enqueue_event($p0, $i1, $i2);
    call {:si_unique_call 676} {:cexpr "tmp___1"} boogie_si_record_i32($i109);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i109, 0);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i111 := $i35;
    goto $bb26;

  $bb23:
    assume $i110 == 1;
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} snd_seq_cell_free($p0);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i49 == 1;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.7, $p63);
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.7, $p67);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i69 := $urem.i32($i68, 1000);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i70 := $mul.i32($i69, 1000000);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i64, $i70);
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p74, $i71);
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.7, $p77);
    $p79 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.7, $p81);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i83 := $udiv.i32($i82, 1000);
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.7, $p86);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i88 := $udiv.i32($i87, 1000000000);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i83, $i88);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i78, $i89);
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p93, $i90);
    $p94 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.7, $p96);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i98 := $urem.i32($i97, 1000000000);
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p101, $i98);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i47, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb18;

  $bb19:
    assume $i50 == 1;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.7, $p52);
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.7, $p56);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i53, $i57);
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p60, $i58);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} snd_seq_cell_free($p0);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} warn_slowpath_fmt.ref.i32.ref.ref(.str.3, 900, .str.6, .str.7);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_seq_prioq_cell_peek: ref;

axiom snd_seq_prioq_cell_peek == $sub.ref(0, 288609);

procedure snd_seq_prioq_cell_peek($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation snd_seq_prioq_cell_peek($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.7, $p4);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p3 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} __snd_printk.i32.ref.i32.ref(1, .str.57, 325, .str.62);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const snd_seq_compare_real_time: ref;

axiom snd_seq_compare_real_time == $sub.ref(0, 289641);

procedure snd_seq_compare_real_time($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_seq_compare_real_time($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.7, $p2);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.7, $p4);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i3, $i5);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.7, $p8);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.7, $p10);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, $i11);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.7, $p13);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.7, $p15);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i17 := $uge.i32($i14, $i16);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;
}



const snd_seq_enqueue_event: ref;

axiom snd_seq_enqueue_event == $sub.ref(0, 290673);

procedure snd_seq_enqueue_event($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.13, $M.15, $CurrAddr, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_enqueue_event($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i8;
  var $p64: ref;
  var $p66: ref;
  var $i67: i8;
  var $p69: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i81: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} {:cexpr "snd_seq_enqueue_event:arg:atomic"} boogie_si_record_i32($i1);
    call {:si_unique_call 681} {:cexpr "snd_seq_enqueue_event:arg:hop"} boogie_si_record_i32($i2);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 682} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 684} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 687} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.7, $p18);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    call {:si_unique_call 688} {:cexpr "dest"} boogie_si_record_i32($i20);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $p21 := queueptr($i20);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.7, $p25);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 2);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.7, $p71);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i74, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i74, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p21, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.7, $p82);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i84 := snd_seq_prioq_cell_in($p83, $p0);
    call {:si_unique_call 694} {:cexpr "err"} boogie_si_record_i32($i84);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i81 := $i84;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i81, 0);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} snd_seq_check_queue($p21, $i1, $i2);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p21, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} atomic_dec($p87);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb34:
    assume $i85 == 1;
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p21, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} atomic_dec($p86);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i16 := $i81;
    goto $bb6;

  $bb27:
    assume $i76 == 1;
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i74, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb29;

  $bb30:
    assume $i77 == 1;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p21, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.7, $p78);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i80 := snd_seq_prioq_cell_in($p79, $p0);
    call {:si_unique_call 692} {:cexpr "err"} boogie_si_record_i32($i80);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i81 := $i80;
    goto $bb32;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.7, $p31);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i34, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.7, $p58);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 253);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p64, $i62);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.7, $p66);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p69, $i67);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume $i36 == 1;
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p21, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.7, $p54);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 200)), $mul.ref(12, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} snd_seq_inc_real_time($p53, $p56);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i34, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb18;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.7, $p40);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p21, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.7, $p42);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 200)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.7, $p45);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i41, $i46);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p50, $i47);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} warn_slowpath_fmt.ref.i32.ref.ref(.str.34, 381, .str.6, .str.7);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_seq_inc_real_time: ref;

axiom snd_seq_inc_real_time == $sub.ref(0, 291705);

procedure snd_seq_inc_real_time($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_inc_real_time($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.7, $p2);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.7, $p4);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i3, $i5);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p7, $i6);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.7, $p8);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.7, $p10);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i9, $i11);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p13, $i12);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} snd_seq_sanity_real_time($p0);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    return;
}



const snd_seq_prioq_cell_in: ref;

axiom snd_seq_prioq_cell_in == $sub.ref(0, 292737);

procedure snd_seq_prioq_cell_in($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_prioq_cell_in($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i5: i64;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i65: i1;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p76: ref;
  var $p77: ref;
  var $p52: ref;
  var $p53: ref;
  var $p63: ref;
  var $p64: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i4);
    call {:si_unique_call 699} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i7);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 701} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 704} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.7, $p20);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 16);
    call {:si_unique_call 705} {:cexpr "prior"} boogie_si_record_i32($i23);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $p25 := spinlock_check($p24);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i26 := _raw_spin_lock_irqsave($p25);
    call {:si_unique_call 708} {:cexpr "flags"} boogie_si_record_i64($i26);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.7, $p27);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.7, $p48);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p52, $p53 := $p49, $0.ref;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p63, $p64 := $p52, $p53;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p64);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p81, $p63);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.7, $p82);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p63);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i84, $i85);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p63);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i89 := $eq.i64($i88, 0);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.7, $p91);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i92, 1);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p94, $i93);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} spin_unlock_irqrestore($p95, $i26);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb47:
    assume $i89 == 1;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p90, $p1);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i86 == 1;
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p87, $p1);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i79 == 1;
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p64, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p80, $p1);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i54, $p55, $p56 := 10000, $0.ref, $p49;
    goto $bb23;

  $bb23:
    call $p57, $p58, $i59, $i60, $p61, $p62, $i65, $i66, $p67, $p68, $p69, $p70, $i71, $i72, $i74, $i75, $i54, $p55, $p56, $p76, $p77 := snd_seq_prioq_cell_in_loop_$bb23($p1, $i23, $p57, $p58, $i59, $i60, $p61, $p62, $i65, $i66, $p67, $p68, $p69, $p70, $i71, $i72, $i74, $i75, $i54, $p55, $p56, $p76, $p77);
    goto $bb23_last;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p56, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i59 := compare_timestamp_rel($p57, $p58);
    call {:si_unique_call 713} {:cexpr "tmp___3"} boogie_si_record_i32($i59);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, 0);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p61, $p62 := $p56, $p55;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i60 == 1);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i59, 0);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p56, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.7, $p69);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i71 := $sub.i32($i54, 1);
    call {:si_unique_call 714} {:cexpr "count"} boogie_si_record_i32($i71);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 0);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p70);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p76, $p77 := $p70, $p56;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p52, $p53 := $p76, $p77;
    goto $bb22;

  $bb38:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i54, $p55, $p56 := $i71, $p56, $p70;
    goto $bb38_dummy;

  $bb35:
    assume $i72 == 1;
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} spin_unlock_irqrestore($p73, $i26);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} __snd_printk.i32.ref.i32.ref(0, .str.57, 263, .str.61);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb9;

  $bb28:
    assume $i65 == 1;
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i23, 0);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p67, $p68 := $p56, $p55;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb30;

  $bb31:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p63, $p64 := $p67, $p68;
    goto $bb27;

  $bb25:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p63, $p64 := $p61, $p62;
    goto $bb27;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i23, 0);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb13;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.7, $p33);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i36 := compare_timestamp($p32, $p35);
    call {:si_unique_call 710} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i37 == 1;
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.7, $p38);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p40, $p1);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p41, $p1);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p42, $0.ref);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.7, $p43);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p46, $i45);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} spin_unlock_irqrestore($p47, $i26);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb9;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} warn_slowpath_fmt.ref.i32.ref.ref(.str.57, 219, .str.6, .str.60);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb38_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3692;
}



const compare_timestamp: ref;

axiom compare_timestamp == $sub.ref(0, 293769);

procedure compare_timestamp($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation compare_timestamp($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.7, $p2);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i17 := snd_seq_compare_real_time($p14, $p16);
    call {:si_unique_call 721} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i12 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i11 := snd_seq_compare_tick_time($p8, $p10);
    call {:si_unique_call 719} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const compare_timestamp_rel: ref;

axiom compare_timestamp_rel == $sub.ref(0, 294801);

procedure compare_timestamp_rel($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation compare_timestamp_rel($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.7, $p2);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.7, $p24);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.7, $p28);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i32($i25, $i29);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.7, $p33);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.7, $p37);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i34, $i38);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb10:
    assume $i39 == 1;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.7, $p42);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.7, $p46);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i48 := $ugt.i32($i43, $i47);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i48 == 1);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.7, $p51);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.7, $p55);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i52, $i56);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i57 == 1);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 1);
    goto $bb5;

  $bb14:
    assume $i57 == 1;
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb5;

  $bb12:
    assume $i48 == 1;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb5;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb5;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.7, $p8);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.7, $p11);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i9, $i12);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.7, $p16);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.7, $p19);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i17, $i20);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 1);
    goto $bb5;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb5;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb5;
}



const snd_seq_sanity_real_time: ref;

axiom snd_seq_sanity_real_time == $sub.ref(0, 295833);

procedure snd_seq_sanity_real_time($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_sanity_real_time($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.7, $p1);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 999999999);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p4, $i5, $i6, $p7, $p8, $i9, $i10, $p11, $i12, $i13 := snd_seq_sanity_real_time_loop_$bb4($p0, $p1, $p4, $i5, $i6, $p7, $p8, $i9, $i10, $p11, $i12, $i13);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.7, $p4);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1000000000);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p7, $i6);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.7, $p8);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 1);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p11, $i10);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.7, $p1);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 999999999);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const snd_seq_timer_set_tick_resolution: ref;

axiom snd_seq_timer_set_tick_resolution == $sub.ref(0, 296865);

procedure snd_seq_timer_set_tick_resolution($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_timer_set_tick_resolution($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $p30: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $p37: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(4, 1));
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.7, $p1);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i3 := $ule.i32($i2, 999999);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(4, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.7, $p13);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.7, $p15);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i17 := $urem.i32($i14, $i16);
    call {:si_unique_call 722} {:cexpr "s"} boogie_si_record_i32($i17);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i17, 1000);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.7, $p19);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i21 := $udiv.i32($i18, $i20);
    call {:si_unique_call 723} {:cexpr "s"} boogie_si_record_i32($i21);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(4, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.7, $p22);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.7, $p24);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i26 := $udiv.i32($i23, $i25);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i27 := $mul.i32($i26, 1000);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p30, $i28);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.7, $p32);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i21);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i33, $i34);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p37, $i35);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.7, $p39);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(24, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} snd_seq_timer_update_tick($p44, 0);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i41 == 1;
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p43, 1);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(4, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.7, $p4);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, 1000);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i9 := $udiv.i32($i6, $i8);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p12, $i10);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_timer_mutex: ref;

axiom ldv_mutex_lock_timer_mutex == $sub.ref(0, 297897);

procedure ldv_mutex_lock_timer_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_lock_timer_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} ldv_error();
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.6 := 2;
    call {:si_unique_call 726} {:cexpr "ldv_mutex_timer_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 298929);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    return;
}



const prioq_match: ref;

axiom prioq_match == $sub.ref(0, 299961);

procedure prioq_match($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation prioq_match($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $i16: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} {:cexpr "prioq_match:arg:client"} boogie_si_record_i32($i1);
    call {:si_unique_call 728} {:cexpr "prioq_match:arg:timestamp"} boogie_si_record_i32($i2);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.7, $p5);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i1);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.7, $p11);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $i1);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i2, 0);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.7, $p18);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i21, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.7, $p33);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i35 == 1);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.7, $p39);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb6;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb24;

  $bb12:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i21, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb16;

  $bb17:
    assume $i24 == 1;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.7, $p27);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i29 == 1;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb6;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 300993);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} _raw_spin_lock($p2);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 302025);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} _raw_spin_unlock($p2);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 303057);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 304089);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_161: ref;

axiom ldv_mutex_lock_161 == $sub.ref(0, 305121);

procedure ldv_mutex_lock_161($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_161($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} ldv_mutex_lock_ports_mutex($p0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} mutex_lock($p0);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const _raw_write_lock_irqsave: ref;

axiom _raw_write_lock_irqsave == $sub.ref(0, 306153);

procedure _raw_write_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_write_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 1} true;
    call {:si_unique_call 733} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 734} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 307185);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.7, $p2);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} __list_add($p0, $p1, $p3);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 308217);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} __list_del_entry($p0);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} INIT_LIST_HEAD($p0);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 309249);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p1, $p0);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p2, $p0);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    return;
}



const _raw_write_unlock_irqrestore: ref;

axiom _raw_write_unlock_irqrestore == $sub.ref(0, 310281);

procedure _raw_write_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_write_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} {:cexpr "_raw_write_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 311313);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    return;
}



const port_delete: ref;

axiom port_delete == $sub.ref(0, 312345);

procedure port_delete($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.13, $M.15, $M.37, $CurrAddr, $M.41, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $M.3, assertsPassed, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation port_delete($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i8;
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $p45: ref;
  var vslice_dummy_var_149: i64;
  var vslice_dummy_var_150: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(640, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.7, $p2);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i4 := $and.i8($i3, $sub.i8(0, 3));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i5 := $or.i8($i4, 2);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i5);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} snd_use_lock_sync_helper($p6, .str.78, 327);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(104, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} clear_subscriber_list($p0, $p1, $p7, 0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(360, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} clear_subscriber_list($p0, $p1, $p8, 1);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(624, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.7, $p9);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(16, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.7, $p18);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 743} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i21);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 745} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i21, 0);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} vslice_dummy_var_149 := ldv__builtin_expect($i29, 0);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(360, 1)), $mul.ref(16, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.7, $p32);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    call {:si_unique_call 748} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i35);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 750} {:cexpr "tmp___0"} boogie_si_record_i64($i39);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i35, 0);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} vslice_dummy_var_150 := ldv__builtin_expect($i43, 0);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p1);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} kfree($p45);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} warn_slowpath_fmt.ref.i32.ref.ref(.str.78, 337, .str.6, .str.119);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} warn_slowpath_fmt.ref.i32.ref.ref(.str.78, 336, .str.6, .str.118);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(624, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.7, $p13);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(632, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.7, $p15);
    call {:si_unique_call 742} devirtbounce.7($p14, $p16);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_162: ref;

axiom ldv_mutex_unlock_162 == $sub.ref(0, 313377);

procedure ldv_mutex_unlock_162($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_162($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} ldv_mutex_unlock_ports_mutex($p0);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} mutex_unlock($p0);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_ports_mutex: ref;

axiom ldv_mutex_unlock_ports_mutex == $sub.ref(0, 314409);

procedure ldv_mutex_unlock_ports_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_ports_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} ldv_error();
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 757} {:cexpr "ldv_mutex_ports_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const clear_subscriber_list: ref;

axiom clear_subscriber_list == $sub.ref(0, 315441);

procedure clear_subscriber_list($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.13, $M.15, $M.37, $M.7, $CurrAddr, $M.41, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $M.3, assertsPassed, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation clear_subscriber_list($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p22: ref;
  var $p23: ref;
  var $p29: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i1;
  var $p38: ref;
  var $p40: ref;
  var $p39: ref;
  var $p41: ref;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p14: ref;
  var $p15: ref;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 759} {:cexpr "clear_subscriber_list:arg:grptype"} boogie_si_record_i32($i3);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.7, $p6);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.7, $p8);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p7);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i11, $i12);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p14, $p15 := $p9, $p7;
    goto $bb4;

  $bb4:
    call $i16, $p17, $p18, $p20, $p21, $p24, $p25, $p27, $p28, $p22, $p23, $p29, $i31, $i32, $p33, $i34, $i35, $p36, $i37, $p38, $p40, $p39, $p41, $i42, $p43, $p44, $p45, $p46, $p47, $p49, $p50, $p51, $p52, $p53, $p54, $i55, $i56, $p14, $p15, vslice_dummy_var_151, vslice_dummy_var_152 := clear_subscriber_list_loop_$bb4($p0, $p1, $p2, $i3, $p4, $i11, $i16, $p17, $p18, $p20, $p21, $p24, $p25, $p27, $p28, $p22, $p23, $p29, $i31, $i32, $p33, $i34, $i35, $p36, $i37, $p38, $p40, $p39, $p41, $i42, $p43, $p44, $p45, $p46, $p47, $p49, $p50, $p51, $p52, $p53, $p54, $i55, $i56, $p14, $p15, vslice_dummy_var_151, vslice_dummy_var_152);
    goto $bb4_last;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i3, 0);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p15);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref($sub.ref(0, 96), 120));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p24, $mul.ref($sub.ref(0, 96), 120)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p28 := get_client_port($p27, $p4);
    assume {:verifier.code 0} true;
    $p22, $p23 := $p25, $p28;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} list_del($p15);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p22, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} vslice_dummy_var_151 := unsubscribe_port($p0, $p1, $p2, $p29, 0);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p23);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.7, $p53);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p14);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i11, $i55);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i56 == 1);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb21:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $p14, $p15 := $p54, $p14;
    goto $bb21_dummy;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p22, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i34 := atomic_dec_and_test($p33);
    call {:si_unique_call 765} {:cexpr "tmp"} boogie_si_record_i32($i34);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i3, 0);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(104, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p39 := $p40;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p39, $mul.ref(0, 256)), $mul.ref(24, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} down_write($p41);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i3, 0);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p22, $mul.ref(0, 120)), $mul.ref(80, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} list_del($p44);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p39, $mul.ref(0, 256)), $mul.ref(24, 1));
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} up_write($p45);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.37, $p4);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p22, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} vslice_dummy_var_152 := unsubscribe_port($p46, $p23, $p39, $p47, 1);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p22);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} kfree($p49);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} atomic_dec($p50);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.37, $p4);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} atomic_dec($p52);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p22, $mul.ref(0, 120)), $mul.ref(96, 1));
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} list_del($p43);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(360, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p39 := $p38;
    goto $bb16;

  $bb11:
    assume $i35 == 1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p22);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} kfree($p36);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p15);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref($sub.ref(0, 80), 120));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p17, $mul.ref($sub.ref(0, 80), 120)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $p21 := get_client_port($p20, $p4);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p22, $p23 := $p18, $p21;
    goto $bb8;

  $bb21_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4125;
}



const get_client_port: ref;

axiom get_client_port == $sub.ref(0, 316473);

procedure get_client_port($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.13, $M.15, $M.37, $CurrAddr;



implementation get_client_port($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.7, $p2);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $p5 := snd_seq_client_use_ptr($i4);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p1, $p5);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.37, $p1);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.37, $p1);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.7, $p10);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $p13 := snd_seq_port_use_ptr($p9, $i12);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $p13;
    goto $bb6;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.37, $p1);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} atomic_dec($p17);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p1, $0.ref);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const unsubscribe_port: ref;

axiom unsubscribe_port == $sub.ref(0, 317505);

procedure unsubscribe_port($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.41, $M.13, $M.15, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $CurrAddr, $M.3, assertsPassed, $M.37, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation unsubscribe_port($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $p44: ref;
  var $p45: ref;
  var $i8: i32;
  var vslice_dummy_var_153: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} {:cexpr "unsubscribe_port:arg:send_ack"} boogie_si_record_i32($i4);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(16, 1));
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.7, $p5);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(16, 1));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.7, $p9);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i10, 1);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(16, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p12, $i11);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.7, $p13);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i4, 0);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(8, 1));
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.7, $p44);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} module_put($p45);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i8 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(0, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.7, $p32);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb16;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.7, $p36);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.7, $p40);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} vslice_dummy_var_153 := snd_seq_client_notify_subscription($i38, $i42, $p3, 67);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(640, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.7, $p18);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i21 == 1);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(16, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.7, $p22);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb7;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.7, $p25);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(632, 1));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.7, $p27);
    call {:si_unique_call 779} $i29 := devirtbounce.8($p26, $p28, $p3);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 780} {:cexpr "err"} boogie_si_record_i32($i29);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb13;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 318537);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 784} devirtbounce.9(0, $p2, $p1, $p2);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.38, $p1);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const down_write: ref;

axiom down_write == $sub.ref(0, 319569);

procedure down_write($p0: ref);
  free requires assertsPassed;



implementation down_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    return;
}



const up_write: ref;

axiom up_write == $sub.ref(0, 320601);

procedure up_write($p0: ref);
  free requires assertsPassed;



implementation up_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    return;
}



const snd_seq_client_notify_subscription: ref;

axiom snd_seq_client_notify_subscription == $sub.ref(0, 321633);

procedure snd_seq_client_notify_subscription($i0: i32, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr, $M.13, $M.15, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_client_notify_subscription($i0: i32, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 786} {:cexpr "snd_seq_client_notify_subscription:arg:client"} boogie_si_record_i32($i0);
    call {:si_unique_call 787} {:cexpr "snd_seq_client_notify_subscription:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 788} {:cexpr "snd_seq_client_notify_subscription:arg:evtype"} boogie_si_record_i32($i3);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.7;
    call {:si_unique_call 789} cmdloc_dummy_var_43 := $memset.i8(cmdloc_dummy_var_42, $p5, 0, 28, $zext.i32.i64(8), 0 == 1);
    $M.7 := cmdloc_dummy_var_43;
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i3);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i6);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(2, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p10);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p11);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.7;
    cmdloc_dummy_var_45 := $M.7;
    call {:si_unique_call 790} cmdloc_dummy_var_46 := $memcpy.i8(cmdloc_dummy_var_44, cmdloc_dummy_var_45, $p12, $p13, 2, $zext.i32.i64(2), 0 == 1);
    $M.7 := cmdloc_dummy_var_46;
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p16);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p17);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.7;
    cmdloc_dummy_var_48 := $M.7;
    call {:si_unique_call 791} cmdloc_dummy_var_49 := $memcpy.i8(cmdloc_dummy_var_47, cmdloc_dummy_var_48, $p18, $p19, 2, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_49;
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i20 := snd_seq_system_notify($i0, $i1, $p4);
    call {:si_unique_call 793} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;
}



const module_put: ref;

axiom module_put == $sub.ref(0, 322665);

procedure module_put($p0: ref);
  free requires assertsPassed;



implementation module_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    return;
}



const snd_seq_system_notify: ref;

axiom snd_seq_system_notify == $sub.ref(0, 323697);

procedure snd_seq_system_notify($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.13, $M.15, $CurrAddr, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_system_notify($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i8;
  var $p7: ref;
  var $i8: i32;
  var $i9: i8;
  var $p11: ref;
  var $i12: i8;
  var $p14: ref;
  var $i15: i8;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} {:cexpr "snd_seq_system_notify:arg:client"} boogie_si_record_i32($i0);
    call {:si_unique_call 795} {:cexpr "snd_seq_system_notify:arg:port"} boogie_si_record_i32($i1);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, 0);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i4 := $M.11;
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i5);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i8 := $M.12;
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(1, 1));
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p11, $i9);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i0);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p14, $i12);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i1);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(14, 1)), $mul.ref(1, 1));
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p17, $i15);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i18 := $M.11;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i19 := snd_seq_kernel_client_dispatch($i18, $p2, 0, 0);
    call {:si_unique_call 797} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 324729);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 325761);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_ports_mutex: ref;

axiom ldv_mutex_lock_ports_mutex == $sub.ref(0, 326793);

procedure ldv_mutex_lock_ports_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_ports_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} ldv_error();
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 799} {:cexpr "ldv_mutex_ports_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_register_mutex: ref;

axiom ldv_mutex_lock_register_mutex == $sub.ref(0, 327825);

procedure ldv_mutex_lock_register_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_lock_register_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} ldv_error();
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.5 := 2;
    call {:si_unique_call 801} {:cexpr "ldv_mutex_register_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 328857);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 803} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 329889);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const snd_enter_user: ref;

axiom snd_enter_user == $sub.ref(0, 330921);

procedure snd_enter_user() returns ($r: i64);



const snd_seq_do_ioctl: ref;

axiom snd_seq_do_ioctl == $sub.ref(0, 331953);

procedure snd_seq_do_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.13, $M.15, $M.7, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $CurrAddr, $M.3, assertsPassed, $M.37, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_do_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p21: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i10: i32;

  $bb0:
    call {:si_unique_call 805} {:cexpr "snd_seq_do_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, $sub.i32(0, 2147200255));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, $sub.i32(0, 2147200255));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p2);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.39, ioctl_tables);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i33 := $lshr.i32($i1, 8);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 255);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i1, 255);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} __snd_printk.i32.ref.i32.ref.i32.i32.i32(1, .str.3, 2264, .str.96, $i1, $i34, $i35);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 25);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb16:
    assume $i20 == 1;
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p21 := ioctl_tables;
    goto $bb19;

  $bb19:
    call $p22, $i23, $i24, $p25, $p29, $p30, $i31, $i32, $p21 := snd_seq_do_ioctl_loop_$bb19($i1, $p22, $i23, $i24, $p25, $p29, $p30, $i31, $i32, $p21);
    goto $bb19_last;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.39, $p22);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, $i1);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p25 := $p21;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p21, $mul.ref(1, 16));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p21, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.39, $p30);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i32 == 1);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb24:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p21 := $p29;
    goto $bb24_dummy;

  $bb21:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.40, $p26);
    call {:si_unique_call 813} $i28 := devirtbounce.11($p27, $p0, $p2);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 814} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i10 := $i28;
    goto $bb10;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 14);
    goto $bb10;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} might_fault();
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.7, $p11);
    call {:si_unique_call 807} {:cexpr "__pu_val___0"} boogie_si_record_i32($i12);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    call {:si_unique_call 808} $i14 := devirtbounce.10(0, $i12, $p13);
    call {:si_unique_call 809} {:cexpr "__ret_pu___0"} boogie_si_record_i32($i14);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i16 := (if $i15 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i10 := $i16;
    goto $bb10;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, $sub.i32(0, 2147200256));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} might_fault();
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    call {:si_unique_call 811} $i7 := devirtbounce.10(0, 65537, $p6);
    call {:si_unique_call 812} {:cexpr "__ret_pu"} boogie_si_record_i32($i7);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i9 := (if $i8 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb10;

  $bb24_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4391;
}



const snd_leave_user: ref;

axiom snd_leave_user == $sub.ref(0, 332985);

procedure snd_leave_user($i0: i64);



const seq_create_client1: ref;

axiom seq_create_client1 == $sub.ref(0, 334017);

procedure seq_create_client1($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.7, $M.8, $CurrAddr;



implementation seq_create_client1($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i39: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p8: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $i83: i8;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $i89: i8;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $i95: i8;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $i101: i8;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $i107: i8;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i111: i64;
  var $i112: i1;
  var $i113: i8;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $i119: i8;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i123: i64;
  var $i124: i1;
  var $i125: i8;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $i131: i8;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i64;
  var $i136: i1;
  var $i137: i8;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $i141: i64;
  var $i142: i1;
  var $i143: i8;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i147: i64;
  var $i148: i1;
  var $i149: i8;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $i153: i64;
  var $i154: i1;
  var $i155: i8;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $i159: i64;
  var $i160: i1;
  var $i161: i8;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $i165: i64;
  var $i166: i1;
  var $i167: i8;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $i171: i64;
  var $i172: i1;
  var $i173: i8;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $i177: i64;
  var $i178: i1;
  var $i179: i8;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $i183: i64;
  var $i184: i1;
  var $i185: i8;
  var $i186: i32;
  var $i187: i1;
  var $p188: ref;
  var $i189: i64;
  var $i190: i1;
  var $i191: i8;
  var $i192: i32;
  var $i193: i1;
  var $p194: ref;
  var $i195: i64;
  var $i196: i1;
  var $i197: i8;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $i201: i64;
  var $i202: i1;
  var $i203: i8;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $i207: i64;
  var $i208: i1;
  var $i209: i8;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i213: i64;
  var $i214: i1;
  var $i215: i8;
  var $i216: i32;
  var $i217: i1;
  var $p218: ref;
  var $i219: i64;
  var $i220: i1;
  var $i221: i8;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $i225: i64;
  var $i226: i1;
  var $i227: i8;
  var $i228: i32;
  var $i229: i1;
  var $p230: ref;
  var $i231: i64;
  var $i232: i1;
  var $i233: i8;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $i237: i64;
  var $i238: i1;
  var $i239: i8;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $i243: i64;
  var $i244: i1;
  var $i245: i8;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $i249: i64;
  var $i250: i1;
  var $i251: i8;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $i255: i64;
  var $i256: i1;
  var $i257: i8;
  var $i258: i32;
  var $i259: i1;
  var $p260: ref;
  var $i261: i64;
  var $i262: i1;
  var $i263: i8;
  var $i264: i32;
  var $i265: i1;
  var $p266: ref;
  var $i267: i64;
  var $i268: i1;
  var $i269: i8;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $i273: i64;
  var $i274: i1;
  var $i275: i8;
  var $i276: i32;
  var $i277: i1;
  var $p278: ref;
  var $i279: i64;
  var $i280: i1;
  var $i281: i8;
  var $i282: i32;
  var $i283: i1;
  var $p284: ref;
  var $i285: i64;
  var $i286: i1;
  var $i287: i8;
  var $i288: i32;
  var $i289: i1;
  var $p290: ref;
  var $i291: i64;
  var $i292: i1;
  var $i293: i8;
  var $i294: i32;
  var $i295: i1;
  var $p296: ref;
  var $i297: i64;
  var $i298: i1;
  var $i299: i8;
  var $i300: i32;
  var $i301: i1;
  var $p302: ref;
  var $i303: i64;
  var $i304: i1;
  var $i305: i8;
  var $i306: i32;
  var $i307: i1;
  var $p308: ref;
  var $i309: i64;
  var $i310: i1;
  var $i311: i8;
  var $i312: i32;
  var $i313: i1;
  var $p314: ref;
  var $i315: i64;
  var $i316: i1;
  var $i317: i8;
  var $i318: i32;
  var $i319: i1;
  var $p320: ref;
  var $i321: i64;
  var $i322: i1;
  var $i323: i8;
  var $i324: i32;
  var $i325: i1;
  var $p326: ref;
  var $i327: i64;
  var $i328: i1;
  var $i329: i8;
  var $i330: i32;
  var $i331: i1;
  var $p332: ref;
  var $i333: i64;
  var $i334: i1;
  var $i335: i8;
  var $i336: i32;
  var $i337: i1;
  var $p338: ref;
  var $i339: i64;
  var $i340: i1;
  var $i341: i8;
  var $i342: i32;
  var $i343: i1;
  var $p344: ref;
  var $i345: i64;
  var $i346: i1;
  var $i347: i8;
  var $i348: i32;
  var $i349: i1;
  var $p350: ref;
  var $i351: i64;
  var $i352: i1;
  var $i353: i8;
  var $i354: i32;
  var $i355: i1;
  var $p356: ref;
  var $i357: i64;
  var $i358: i1;
  var $i359: i8;
  var $i360: i32;
  var $i361: i1;
  var $p362: ref;
  var $i363: i64;
  var $i364: i1;
  var $i365: i8;
  var $i366: i32;
  var $i367: i1;
  var $p368: ref;
  var $i369: i64;
  var $i370: i1;
  var $i371: i8;
  var $i372: i32;
  var $i373: i1;
  var $p374: ref;
  var $i375: i64;
  var $i376: i1;
  var $i377: i8;
  var $i378: i32;
  var $i379: i1;
  var $p380: ref;
  var $i381: i64;
  var $i382: i1;
  var $i383: i8;
  var $i384: i32;
  var $i385: i1;
  var $p386: ref;
  var $i387: i64;
  var $i388: i1;
  var $i389: i8;
  var $i390: i32;
  var $i391: i1;
  var $p392: ref;
  var $i393: i64;
  var $i394: i1;
  var $i395: i8;
  var $i396: i32;
  var $i397: i1;
  var $p398: ref;
  var $i399: i64;
  var $i400: i1;
  var $i401: i8;
  var $i402: i32;
  var $i403: i1;
  var $p404: ref;
  var $i405: i64;
  var $i406: i1;
  var $i407: i8;
  var $i408: i32;
  var $i409: i1;
  var $p410: ref;
  var $i411: i64;
  var $i412: i1;
  var $i413: i8;
  var $i414: i32;
  var $i415: i1;
  var $p416: ref;
  var $i417: i64;
  var $i418: i1;
  var $i419: i8;
  var $i420: i32;
  var $i421: i1;
  var $p422: ref;
  var $i423: i64;
  var $i424: i1;
  var $i425: i8;
  var $i426: i32;
  var $i427: i1;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 818} {:cexpr "seq_create_client1:arg:client_index"} boogie_si_record_i32($i0);
    call {:si_unique_call 819} {:cexpr "seq_create_client1:arg:poolsize"} boogie_si_record_i32($i1);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $p4 := kzalloc(424, 208);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $p9 := snd_seq_pool_new($i1);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p10, $p9);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.7, $p11);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 424)), $mul.ref(0, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p16, 0);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} atomic_set($p17, 0);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 424)), $mul.ref(144, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} __rwlock_init($p18, .str.92, $p2);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 424)), $mul.ref(216, 1));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} __mutex_init($p19, .str.93, $p3);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 424)), $mul.ref(128, 1));
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} INIT_LIST_HEAD($p20);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p21 := spinlock_check(clients_lock);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i22 := _raw_spin_lock_irqsave($p21);
    call {:si_unique_call 829} {:cexpr "flags"} boogie_si_record_i64($i22);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i0, 0);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i0);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref($i34, 8));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.8, $p35);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} spin_unlock_irqrestore(clients_lock, $i22);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} vslice_dummy_var_154 := snd_seq_pool_delete($p47);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p5);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} kfree($p49);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb23:
    assume $i38 == 1;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i0);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref($i39, 1));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.9, $p40);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i42 := $sext.i8.i32($i41);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb25;

  $bb26:
    assume $i43 == 1;
    call {:si_unique_call 834} {:cexpr "seq_create_client1:arg:tmp___2"} boogie_si_record_i32($i0);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p44, $i0);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i0);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref($i45, 8));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p46, $p4);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} spin_unlock_irqrestore(clients_lock, $i22);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb3;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(128, 8)));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i26 == 1);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(128, 1)));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i32($i27);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i30 := 128;
    assume {:branchcond $i29} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p31, $i30);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i30);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref($i32, 8));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p33, $p4);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} spin_unlock_irqrestore(clients_lock, $i22);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb3;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(129, 8)));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i52 == 1);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(129, 1)));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i54 := $sext.i8.i32($i53);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i30 := 129;
    assume {:branchcond $i55} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb17;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(130, 8)));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb36, $bb38;

  $bb38:
    assume !($i58 == 1);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(130, 1)));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i60 := $sext.i8.i32($i59);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i30 := 130;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb17;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(131, 8)));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb45;

  $bb45:
    assume !($i64 == 1);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(131, 1)));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i66 := $sext.i8.i32($i65);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i30 := 131;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb17;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(132, 8)));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb52;

  $bb52:
    assume !($i70 == 1);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(132, 1)));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i72 := $sext.i8.i32($i71);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i30 := 132;
    assume {:branchcond $i73} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb17;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(133, 8)));
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb59;

  $bb59:
    assume !($i76 == 1);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(133, 1)));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i78 := $sext.i8.i32($i77);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i30 := 133;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb17;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(134, 8)));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb64, $bb66;

  $bb66:
    assume !($i82 == 1);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(134, 1)));
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i84 := $sext.i8.i32($i83);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i30 := 134;
    assume {:branchcond $i85} true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb17;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(135, 8)));
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb71, $bb73;

  $bb73:
    assume !($i88 == 1);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(135, 1)));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i90 := $sext.i8.i32($i89);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i30 := 135;
    assume {:branchcond $i91} true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb17;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(136, 8)));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb78, $bb80;

  $bb80:
    assume !($i94 == 1);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(136, 1)));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i96 := $sext.i8.i32($i95);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i30 := 136;
    assume {:branchcond $i97} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb17;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i97 == 1;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(137, 8)));
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb85, $bb87;

  $bb87:
    assume !($i100 == 1);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(137, 1)));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i102 := $sext.i8.i32($i101);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i30 := 137;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb17;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(138, 8)));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb94;

  $bb94:
    assume !($i106 == 1);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(138, 1)));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i108 := $sext.i8.i32($i107);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i30 := 138;
    assume {:branchcond $i109} true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb17;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(139, 8)));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p110);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb99, $bb101;

  $bb101:
    assume !($i112 == 1);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(139, 1)));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i114 := $sext.i8.i32($i113);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i30 := 139;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb17;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(140, 8)));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i118 := $ne.i64($i117, 0);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb106, $bb108;

  $bb108:
    assume !($i118 == 1);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(140, 1)));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i120 := $sext.i8.i32($i119);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i30 := 140;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb17;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i121 == 1;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(141, 8)));
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p122);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i124 := $ne.i64($i123, 0);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb113, $bb115;

  $bb115:
    assume !($i124 == 1);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(141, 1)));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i126 := $sext.i8.i32($i125);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i30 := 141;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb17;

  $bb116:
    assume {:verifier.code 0} true;
    assume $i127 == 1;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(142, 8)));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i130 := $ne.i64($i129, 0);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb122;

  $bb122:
    assume !($i130 == 1);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(142, 1)));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i132 := $sext.i8.i32($i131);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i30 := 142;
    assume {:branchcond $i133} true;
    goto $bb123, $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    assume !($i133 == 1);
    goto $bb17;

  $bb123:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(143, 8)));
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p134);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i135, 0);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb127, $bb129;

  $bb129:
    assume !($i136 == 1);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(143, 1)));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i138 := $sext.i8.i32($i137);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i30 := 143;
    assume {:branchcond $i139} true;
    goto $bb130, $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb17;

  $bb130:
    assume {:verifier.code 0} true;
    assume $i139 == 1;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(144, 8)));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p140);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i142 := $ne.i64($i141, 0);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb134, $bb136;

  $bb136:
    assume !($i142 == 1);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(144, 1)));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i144 := $sext.i8.i32($i143);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i30 := 144;
    assume {:branchcond $i145} true;
    goto $bb137, $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb17;

  $bb137:
    assume {:verifier.code 0} true;
    assume $i145 == 1;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(145, 8)));
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p146);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, 0);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb141, $bb143;

  $bb143:
    assume !($i148 == 1);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i149 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(145, 1)));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i150 := $sext.i8.i32($i149);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, 0);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i30 := 145;
    assume {:branchcond $i151} true;
    goto $bb144, $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb17;

  $bb144:
    assume {:verifier.code 0} true;
    assume $i151 == 1;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(146, 8)));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i153 := $p2i.ref.i64($p152);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i154 := $ne.i64($i153, 0);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb148, $bb150;

  $bb150:
    assume !($i154 == 1);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(146, 1)));
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i156 := $sext.i8.i32($i155);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i156, 0);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i30 := 146;
    assume {:branchcond $i157} true;
    goto $bb151, $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb17;

  $bb151:
    assume {:verifier.code 0} true;
    assume $i157 == 1;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(147, 8)));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p158);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i160 := $ne.i64($i159, 0);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb155, $bb157;

  $bb157:
    assume !($i160 == 1);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(147, 1)));
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i162 := $sext.i8.i32($i161);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32($i162, 0);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i30 := 147;
    assume {:branchcond $i163} true;
    goto $bb158, $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb17;

  $bb158:
    assume {:verifier.code 0} true;
    assume $i163 == 1;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(148, 8)));
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p164);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i166 := $ne.i64($i165, 0);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb162, $bb164;

  $bb164:
    assume !($i166 == 1);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(148, 1)));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i168 := $sext.i8.i32($i167);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i30 := 148;
    assume {:branchcond $i169} true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !($i169 == 1);
    goto $bb17;

  $bb165:
    assume {:verifier.code 0} true;
    assume $i169 == 1;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(149, 8)));
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i171 := $p2i.ref.i64($p170);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i172 := $ne.i64($i171, 0);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb169, $bb171;

  $bb171:
    assume !($i172 == 1);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i173 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(149, 1)));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i174 := $sext.i8.i32($i173);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i175 := $ne.i32($i174, 0);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i30 := 149;
    assume {:branchcond $i175} true;
    goto $bb172, $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    assume !($i175 == 1);
    goto $bb17;

  $bb172:
    assume {:verifier.code 0} true;
    assume $i175 == 1;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(150, 8)));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i177 := $p2i.ref.i64($p176);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i178 := $ne.i64($i177, 0);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb176, $bb178;

  $bb178:
    assume !($i178 == 1);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(150, 1)));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i180 := $sext.i8.i32($i179);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i181 := $ne.i32($i180, 0);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i30 := 150;
    assume {:branchcond $i181} true;
    goto $bb179, $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume !($i181 == 1);
    goto $bb17;

  $bb179:
    assume {:verifier.code 0} true;
    assume $i181 == 1;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(151, 8)));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i183 := $p2i.ref.i64($p182);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i184 := $ne.i64($i183, 0);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb183, $bb185;

  $bb185:
    assume !($i184 == 1);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(151, 1)));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i186 := $sext.i8.i32($i185);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i187 := $ne.i32($i186, 0);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i30 := 151;
    assume {:branchcond $i187} true;
    goto $bb186, $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume !($i187 == 1);
    goto $bb17;

  $bb186:
    assume {:verifier.code 0} true;
    assume $i187 == 1;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(152, 8)));
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i189 := $p2i.ref.i64($p188);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i190 := $ne.i64($i189, 0);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb190, $bb192;

  $bb192:
    assume !($i190 == 1);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(152, 1)));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i192 := $sext.i8.i32($i191);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i193 := $ne.i32($i192, 0);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i30 := 152;
    assume {:branchcond $i193} true;
    goto $bb193, $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    assume !($i193 == 1);
    goto $bb17;

  $bb193:
    assume {:verifier.code 0} true;
    assume $i193 == 1;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(153, 8)));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i195 := $p2i.ref.i64($p194);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i196 := $ne.i64($i195, 0);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb197, $bb199;

  $bb199:
    assume !($i196 == 1);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i197 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(153, 1)));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i198 := $sext.i8.i32($i197);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i198, 0);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i30 := 153;
    assume {:branchcond $i199} true;
    goto $bb200, $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    assume !($i199 == 1);
    goto $bb17;

  $bb200:
    assume {:verifier.code 0} true;
    assume $i199 == 1;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(154, 8)));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i201 := $p2i.ref.i64($p200);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i202 := $ne.i64($i201, 0);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb204, $bb206;

  $bb206:
    assume !($i202 == 1);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(154, 1)));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i204 := $sext.i8.i32($i203);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i204, 0);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i30 := 154;
    assume {:branchcond $i205} true;
    goto $bb207, $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb17;

  $bb207:
    assume {:verifier.code 0} true;
    assume $i205 == 1;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(155, 8)));
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i207 := $p2i.ref.i64($p206);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i208 := $ne.i64($i207, 0);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb211, $bb213;

  $bb213:
    assume !($i208 == 1);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i209 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(155, 1)));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i210 := $sext.i8.i32($i209);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i211 := $ne.i32($i210, 0);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i30 := 155;
    assume {:branchcond $i211} true;
    goto $bb214, $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb17;

  $bb214:
    assume {:verifier.code 0} true;
    assume $i211 == 1;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(156, 8)));
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i213 := $p2i.ref.i64($p212);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i214 := $ne.i64($i213, 0);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb218, $bb220;

  $bb220:
    assume !($i214 == 1);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i215 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(156, 1)));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i216 := $sext.i8.i32($i215);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i217 := $ne.i32($i216, 0);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i30 := 156;
    assume {:branchcond $i217} true;
    goto $bb221, $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    assume !($i217 == 1);
    goto $bb17;

  $bb221:
    assume {:verifier.code 0} true;
    assume $i217 == 1;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(157, 8)));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p218);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i220 := $ne.i64($i219, 0);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb225, $bb227;

  $bb227:
    assume !($i220 == 1);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(157, 1)));
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i222 := $sext.i8.i32($i221);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i223 := $ne.i32($i222, 0);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i30 := 157;
    assume {:branchcond $i223} true;
    goto $bb228, $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    assume !($i223 == 1);
    goto $bb17;

  $bb228:
    assume {:verifier.code 0} true;
    assume $i223 == 1;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(158, 8)));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i225 := $p2i.ref.i64($p224);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i226 := $ne.i64($i225, 0);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb232, $bb234;

  $bb234:
    assume !($i226 == 1);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i227 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(158, 1)));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i228 := $sext.i8.i32($i227);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i229 := $ne.i32($i228, 0);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i30 := 158;
    assume {:branchcond $i229} true;
    goto $bb235, $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    assume !($i229 == 1);
    goto $bb17;

  $bb235:
    assume {:verifier.code 0} true;
    assume $i229 == 1;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(159, 8)));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i231 := $p2i.ref.i64($p230);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i232 := $ne.i64($i231, 0);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i232} true;
    goto $bb239, $bb241;

  $bb241:
    assume !($i232 == 1);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i233 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(159, 1)));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i234 := $sext.i8.i32($i233);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i235 := $ne.i32($i234, 0);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i30 := 159;
    assume {:branchcond $i235} true;
    goto $bb242, $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    assume !($i235 == 1);
    goto $bb17;

  $bb242:
    assume {:verifier.code 0} true;
    assume $i235 == 1;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(160, 8)));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i237 := $p2i.ref.i64($p236);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i238 := $ne.i64($i237, 0);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb246, $bb248;

  $bb248:
    assume !($i238 == 1);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i239 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(160, 1)));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i240 := $sext.i8.i32($i239);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i241 := $ne.i32($i240, 0);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i30 := 160;
    assume {:branchcond $i241} true;
    goto $bb249, $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    assume !($i241 == 1);
    goto $bb17;

  $bb249:
    assume {:verifier.code 0} true;
    assume $i241 == 1;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(161, 8)));
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i243 := $p2i.ref.i64($p242);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i244 := $ne.i64($i243, 0);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i244} true;
    goto $bb253, $bb255;

  $bb255:
    assume !($i244 == 1);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i245 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(161, 1)));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i246 := $sext.i8.i32($i245);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i247 := $ne.i32($i246, 0);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i30 := 161;
    assume {:branchcond $i247} true;
    goto $bb256, $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    assume !($i247 == 1);
    goto $bb17;

  $bb256:
    assume {:verifier.code 0} true;
    assume $i247 == 1;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(162, 8)));
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i249 := $p2i.ref.i64($p248);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i250 := $ne.i64($i249, 0);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb260, $bb262;

  $bb262:
    assume !($i250 == 1);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i251 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(162, 1)));
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i252 := $sext.i8.i32($i251);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i253 := $ne.i32($i252, 0);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i30 := 162;
    assume {:branchcond $i253} true;
    goto $bb263, $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    assume !($i253 == 1);
    goto $bb17;

  $bb263:
    assume {:verifier.code 0} true;
    assume $i253 == 1;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(163, 8)));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i255 := $p2i.ref.i64($p254);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i256 := $ne.i64($i255, 0);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb267, $bb269;

  $bb269:
    assume !($i256 == 1);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i257 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(163, 1)));
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i258 := $sext.i8.i32($i257);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i259 := $ne.i32($i258, 0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i30 := 163;
    assume {:branchcond $i259} true;
    goto $bb270, $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    assume !($i259 == 1);
    goto $bb17;

  $bb270:
    assume {:verifier.code 0} true;
    assume $i259 == 1;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $p260 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(164, 8)));
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i261 := $p2i.ref.i64($p260);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i262 := $ne.i64($i261, 0);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb274, $bb276;

  $bb276:
    assume !($i262 == 1);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i263 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(164, 1)));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i264 := $sext.i8.i32($i263);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i265 := $ne.i32($i264, 0);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i30 := 164;
    assume {:branchcond $i265} true;
    goto $bb277, $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    assume !($i265 == 1);
    goto $bb17;

  $bb277:
    assume {:verifier.code 0} true;
    assume $i265 == 1;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    $p266 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(165, 8)));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i267 := $p2i.ref.i64($p266);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i268 := $ne.i64($i267, 0);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb281, $bb283;

  $bb283:
    assume !($i268 == 1);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i269 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(165, 1)));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i270 := $sext.i8.i32($i269);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i271 := $ne.i32($i270, 0);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i30 := 165;
    assume {:branchcond $i271} true;
    goto $bb284, $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    assume !($i271 == 1);
    goto $bb17;

  $bb284:
    assume {:verifier.code 0} true;
    assume $i271 == 1;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    $p272 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(166, 8)));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i273 := $p2i.ref.i64($p272);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i274 := $ne.i64($i273, 0);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i274} true;
    goto $bb288, $bb290;

  $bb290:
    assume !($i274 == 1);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i275 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(166, 1)));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i276 := $sext.i8.i32($i275);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i277 := $ne.i32($i276, 0);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i30 := 166;
    assume {:branchcond $i277} true;
    goto $bb291, $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    assume !($i277 == 1);
    goto $bb17;

  $bb291:
    assume {:verifier.code 0} true;
    assume $i277 == 1;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(167, 8)));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i279 := $p2i.ref.i64($p278);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i280 := $ne.i64($i279, 0);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i280} true;
    goto $bb295, $bb297;

  $bb297:
    assume !($i280 == 1);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i281 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(167, 1)));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i282 := $sext.i8.i32($i281);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i283 := $ne.i32($i282, 0);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i30 := 167;
    assume {:branchcond $i283} true;
    goto $bb298, $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    assume !($i283 == 1);
    goto $bb17;

  $bb298:
    assume {:verifier.code 0} true;
    assume $i283 == 1;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    $p284 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(168, 8)));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i285 := $p2i.ref.i64($p284);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i286 := $ne.i64($i285, 0);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i286} true;
    goto $bb302, $bb304;

  $bb304:
    assume !($i286 == 1);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i287 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(168, 1)));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i288 := $sext.i8.i32($i287);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i289 := $ne.i32($i288, 0);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i30 := 168;
    assume {:branchcond $i289} true;
    goto $bb305, $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    assume !($i289 == 1);
    goto $bb17;

  $bb305:
    assume {:verifier.code 0} true;
    assume $i289 == 1;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    $p290 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(169, 8)));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i291 := $p2i.ref.i64($p290);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i292 := $ne.i64($i291, 0);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i292} true;
    goto $bb309, $bb311;

  $bb311:
    assume !($i292 == 1);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i293 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(169, 1)));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i294 := $sext.i8.i32($i293);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i295 := $ne.i32($i294, 0);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i30 := 169;
    assume {:branchcond $i295} true;
    goto $bb312, $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    assume !($i295 == 1);
    goto $bb17;

  $bb312:
    assume {:verifier.code 0} true;
    assume $i295 == 1;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $p296 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(170, 8)));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i297 := $p2i.ref.i64($p296);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i298 := $ne.i64($i297, 0);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb316, $bb318;

  $bb318:
    assume !($i298 == 1);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i299 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(170, 1)));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i300 := $sext.i8.i32($i299);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i301 := $ne.i32($i300, 0);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i30 := 170;
    assume {:branchcond $i301} true;
    goto $bb319, $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    assume !($i301 == 1);
    goto $bb17;

  $bb319:
    assume {:verifier.code 0} true;
    assume $i301 == 1;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(171, 8)));
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i303 := $p2i.ref.i64($p302);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i304 := $ne.i64($i303, 0);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb323, $bb325;

  $bb325:
    assume !($i304 == 1);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i305 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(171, 1)));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i306 := $sext.i8.i32($i305);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i307 := $ne.i32($i306, 0);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i30 := 171;
    assume {:branchcond $i307} true;
    goto $bb326, $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    assume !($i307 == 1);
    goto $bb17;

  $bb326:
    assume {:verifier.code 0} true;
    assume $i307 == 1;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    $p308 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(172, 8)));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i309 := $p2i.ref.i64($p308);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i310 := $ne.i64($i309, 0);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i310} true;
    goto $bb330, $bb332;

  $bb332:
    assume !($i310 == 1);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i311 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(172, 1)));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i312 := $sext.i8.i32($i311);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i313 := $ne.i32($i312, 0);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i30 := 172;
    assume {:branchcond $i313} true;
    goto $bb333, $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    assume !($i313 == 1);
    goto $bb17;

  $bb333:
    assume {:verifier.code 0} true;
    assume $i313 == 1;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    $p314 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(173, 8)));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i315 := $p2i.ref.i64($p314);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i316 := $ne.i64($i315, 0);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i316} true;
    goto $bb337, $bb339;

  $bb339:
    assume !($i316 == 1);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i317 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(173, 1)));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i318 := $sext.i8.i32($i317);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i319 := $ne.i32($i318, 0);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i30 := 173;
    assume {:branchcond $i319} true;
    goto $bb340, $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    assume !($i319 == 1);
    goto $bb17;

  $bb340:
    assume {:verifier.code 0} true;
    assume $i319 == 1;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(174, 8)));
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i321 := $p2i.ref.i64($p320);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i322 := $ne.i64($i321, 0);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i322} true;
    goto $bb344, $bb346;

  $bb346:
    assume !($i322 == 1);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i323 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(174, 1)));
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i324 := $sext.i8.i32($i323);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i325 := $ne.i32($i324, 0);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i30 := 174;
    assume {:branchcond $i325} true;
    goto $bb347, $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    assume !($i325 == 1);
    goto $bb17;

  $bb347:
    assume {:verifier.code 0} true;
    assume $i325 == 1;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    $p326 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(175, 8)));
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i327 := $p2i.ref.i64($p326);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i328 := $ne.i64($i327, 0);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb351, $bb353;

  $bb353:
    assume !($i328 == 1);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i329 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(175, 1)));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i330 := $sext.i8.i32($i329);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i331 := $ne.i32($i330, 0);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i30 := 175;
    assume {:branchcond $i331} true;
    goto $bb354, $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    assume !($i331 == 1);
    goto $bb17;

  $bb354:
    assume {:verifier.code 0} true;
    assume $i331 == 1;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    $p332 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(176, 8)));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i333 := $p2i.ref.i64($p332);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i334 := $ne.i64($i333, 0);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i334} true;
    goto $bb358, $bb360;

  $bb360:
    assume !($i334 == 1);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i335 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(176, 1)));
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i336 := $sext.i8.i32($i335);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i337 := $ne.i32($i336, 0);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i30 := 176;
    assume {:branchcond $i337} true;
    goto $bb361, $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    assume !($i337 == 1);
    goto $bb17;

  $bb361:
    assume {:verifier.code 0} true;
    assume $i337 == 1;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    $p338 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(177, 8)));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i339 := $p2i.ref.i64($p338);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i340 := $ne.i64($i339, 0);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i340} true;
    goto $bb365, $bb367;

  $bb367:
    assume !($i340 == 1);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i341 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(177, 1)));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i342 := $sext.i8.i32($i341);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i343 := $ne.i32($i342, 0);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i30 := 177;
    assume {:branchcond $i343} true;
    goto $bb368, $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    assume !($i343 == 1);
    goto $bb17;

  $bb368:
    assume {:verifier.code 0} true;
    assume $i343 == 1;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    $p344 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(178, 8)));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i345 := $p2i.ref.i64($p344);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i346 := $ne.i64($i345, 0);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i346} true;
    goto $bb372, $bb374;

  $bb374:
    assume !($i346 == 1);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i347 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(178, 1)));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i348 := $sext.i8.i32($i347);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i349 := $ne.i32($i348, 0);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i30 := 178;
    assume {:branchcond $i349} true;
    goto $bb375, $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    assume !($i349 == 1);
    goto $bb17;

  $bb375:
    assume {:verifier.code 0} true;
    assume $i349 == 1;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(179, 8)));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i351 := $p2i.ref.i64($p350);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i352 := $ne.i64($i351, 0);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i352} true;
    goto $bb379, $bb381;

  $bb381:
    assume !($i352 == 1);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i353 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(179, 1)));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i354 := $sext.i8.i32($i353);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i355 := $ne.i32($i354, 0);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i30 := 179;
    assume {:branchcond $i355} true;
    goto $bb382, $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    assume !($i355 == 1);
    goto $bb17;

  $bb382:
    assume {:verifier.code 0} true;
    assume $i355 == 1;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    $p356 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(180, 8)));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i357 := $p2i.ref.i64($p356);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i358 := $ne.i64($i357, 0);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i358} true;
    goto $bb386, $bb388;

  $bb388:
    assume !($i358 == 1);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i359 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(180, 1)));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i360 := $sext.i8.i32($i359);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i361 := $ne.i32($i360, 0);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i30 := 180;
    assume {:branchcond $i361} true;
    goto $bb389, $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    assume !($i361 == 1);
    goto $bb17;

  $bb389:
    assume {:verifier.code 0} true;
    assume $i361 == 1;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(181, 8)));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i363 := $p2i.ref.i64($p362);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i364 := $ne.i64($i363, 0);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i364} true;
    goto $bb393, $bb395;

  $bb395:
    assume !($i364 == 1);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i365 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(181, 1)));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i366 := $sext.i8.i32($i365);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i367 := $ne.i32($i366, 0);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i30 := 181;
    assume {:branchcond $i367} true;
    goto $bb396, $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    assume !($i367 == 1);
    goto $bb17;

  $bb396:
    assume {:verifier.code 0} true;
    assume $i367 == 1;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    $p368 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(182, 8)));
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i369 := $p2i.ref.i64($p368);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i370 := $ne.i64($i369, 0);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i370} true;
    goto $bb400, $bb402;

  $bb402:
    assume !($i370 == 1);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i371 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(182, 1)));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i372 := $sext.i8.i32($i371);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i373 := $ne.i32($i372, 0);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i30 := 182;
    assume {:branchcond $i373} true;
    goto $bb403, $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    assume !($i373 == 1);
    goto $bb17;

  $bb403:
    assume {:verifier.code 0} true;
    assume $i373 == 1;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    $p374 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(183, 8)));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i375 := $p2i.ref.i64($p374);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i376 := $ne.i64($i375, 0);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i376} true;
    goto $bb407, $bb409;

  $bb409:
    assume !($i376 == 1);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i377 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(183, 1)));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i378 := $sext.i8.i32($i377);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i379 := $ne.i32($i378, 0);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i30 := 183;
    assume {:branchcond $i379} true;
    goto $bb410, $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    assume !($i379 == 1);
    goto $bb17;

  $bb410:
    assume {:verifier.code 0} true;
    assume $i379 == 1;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    $p380 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(184, 8)));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i381 := $p2i.ref.i64($p380);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i382 := $ne.i64($i381, 0);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i382} true;
    goto $bb414, $bb416;

  $bb416:
    assume !($i382 == 1);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i383 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(184, 1)));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i384 := $sext.i8.i32($i383);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i385 := $ne.i32($i384, 0);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i30 := 184;
    assume {:branchcond $i385} true;
    goto $bb417, $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    assume !($i385 == 1);
    goto $bb17;

  $bb417:
    assume {:verifier.code 0} true;
    assume $i385 == 1;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    $p386 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(185, 8)));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i387 := $p2i.ref.i64($p386);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i388 := $ne.i64($i387, 0);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i388} true;
    goto $bb421, $bb423;

  $bb423:
    assume !($i388 == 1);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i389 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(185, 1)));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i390 := $sext.i8.i32($i389);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i391 := $ne.i32($i390, 0);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i30 := 185;
    assume {:branchcond $i391} true;
    goto $bb424, $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    assume !($i391 == 1);
    goto $bb17;

  $bb424:
    assume {:verifier.code 0} true;
    assume $i391 == 1;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    $p392 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(186, 8)));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i393 := $p2i.ref.i64($p392);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i394 := $ne.i64($i393, 0);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i394} true;
    goto $bb428, $bb430;

  $bb430:
    assume !($i394 == 1);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i395 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(186, 1)));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i396 := $sext.i8.i32($i395);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i397 := $ne.i32($i396, 0);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i30 := 186;
    assume {:branchcond $i397} true;
    goto $bb431, $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    assume !($i397 == 1);
    goto $bb17;

  $bb431:
    assume {:verifier.code 0} true;
    assume $i397 == 1;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    $p398 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(187, 8)));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i399 := $p2i.ref.i64($p398);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i400 := $ne.i64($i399, 0);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i400} true;
    goto $bb435, $bb437;

  $bb437:
    assume !($i400 == 1);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i401 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(187, 1)));
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i402 := $sext.i8.i32($i401);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i403 := $ne.i32($i402, 0);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i30 := 187;
    assume {:branchcond $i403} true;
    goto $bb438, $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    assume !($i403 == 1);
    goto $bb17;

  $bb438:
    assume {:verifier.code 0} true;
    assume $i403 == 1;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    $p404 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(188, 8)));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i405 := $p2i.ref.i64($p404);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i406 := $ne.i64($i405, 0);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i406} true;
    goto $bb442, $bb444;

  $bb444:
    assume !($i406 == 1);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i407 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(188, 1)));
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i408 := $sext.i8.i32($i407);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i409 := $ne.i32($i408, 0);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i30 := 188;
    assume {:branchcond $i409} true;
    goto $bb445, $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    assume !($i409 == 1);
    goto $bb17;

  $bb445:
    assume {:verifier.code 0} true;
    assume $i409 == 1;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    $p410 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(189, 8)));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i411 := $p2i.ref.i64($p410);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i412 := $ne.i64($i411, 0);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i412} true;
    goto $bb449, $bb451;

  $bb451:
    assume !($i412 == 1);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i413 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(189, 1)));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i414 := $sext.i8.i32($i413);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i415 := $ne.i32($i414, 0);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i30 := 189;
    assume {:branchcond $i415} true;
    goto $bb452, $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    assume !($i415 == 1);
    goto $bb17;

  $bb452:
    assume {:verifier.code 0} true;
    assume $i415 == 1;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    $p416 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(190, 8)));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i417 := $p2i.ref.i64($p416);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i418 := $ne.i64($i417, 0);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i418} true;
    goto $bb456, $bb458;

  $bb458:
    assume !($i418 == 1);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i419 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(190, 1)));
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i420 := $sext.i8.i32($i419);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i421 := $ne.i32($i420, 0);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i30 := 190;
    assume {:branchcond $i421} true;
    goto $bb459, $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    assume !($i421 == 1);
    goto $bb17;

  $bb459:
    assume {:verifier.code 0} true;
    assume $i421 == 1;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    $p422 := $load.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(191, 8)));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i423 := $p2i.ref.i64($p422);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i424 := $ne.i64($i423, 0);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i424} true;
    goto $bb463, $bb465;

  $bb465:
    assume !($i424 == 1);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i425 := $load.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(191, 1)));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i426 := $sext.i8.i32($i425);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i427 := $ne.i32($i426, 0);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i30 := 191;
    assume {:branchcond $i427} true;
    goto $bb466, $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    assume !($i427 == 1);
    goto $bb17;

  $bb466:
    assume {:verifier.code 0} true;
    assume $i427 == 1;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb463:
    assume {:verifier.code 0} true;
    assume $i424 == 1;
    goto $bb464;

  $bb456:
    assume {:verifier.code 0} true;
    assume $i418 == 1;
    goto $bb457;

  $bb449:
    assume {:verifier.code 0} true;
    assume $i412 == 1;
    goto $bb450;

  $bb442:
    assume {:verifier.code 0} true;
    assume $i406 == 1;
    goto $bb443;

  $bb435:
    assume {:verifier.code 0} true;
    assume $i400 == 1;
    goto $bb436;

  $bb428:
    assume {:verifier.code 0} true;
    assume $i394 == 1;
    goto $bb429;

  $bb421:
    assume {:verifier.code 0} true;
    assume $i388 == 1;
    goto $bb422;

  $bb414:
    assume {:verifier.code 0} true;
    assume $i382 == 1;
    goto $bb415;

  $bb407:
    assume {:verifier.code 0} true;
    assume $i376 == 1;
    goto $bb408;

  $bb400:
    assume {:verifier.code 0} true;
    assume $i370 == 1;
    goto $bb401;

  $bb393:
    assume {:verifier.code 0} true;
    assume $i364 == 1;
    goto $bb394;

  $bb386:
    assume {:verifier.code 0} true;
    assume $i358 == 1;
    goto $bb387;

  $bb379:
    assume {:verifier.code 0} true;
    assume $i352 == 1;
    goto $bb380;

  $bb372:
    assume {:verifier.code 0} true;
    assume $i346 == 1;
    goto $bb373;

  $bb365:
    assume {:verifier.code 0} true;
    assume $i340 == 1;
    goto $bb366;

  $bb358:
    assume {:verifier.code 0} true;
    assume $i334 == 1;
    goto $bb359;

  $bb351:
    assume {:verifier.code 0} true;
    assume $i328 == 1;
    goto $bb352;

  $bb344:
    assume {:verifier.code 0} true;
    assume $i322 == 1;
    goto $bb345;

  $bb337:
    assume {:verifier.code 0} true;
    assume $i316 == 1;
    goto $bb338;

  $bb330:
    assume {:verifier.code 0} true;
    assume $i310 == 1;
    goto $bb331;

  $bb323:
    assume {:verifier.code 0} true;
    assume $i304 == 1;
    goto $bb324;

  $bb316:
    assume {:verifier.code 0} true;
    assume $i298 == 1;
    goto $bb317;

  $bb309:
    assume {:verifier.code 0} true;
    assume $i292 == 1;
    goto $bb310;

  $bb302:
    assume {:verifier.code 0} true;
    assume $i286 == 1;
    goto $bb303;

  $bb295:
    assume {:verifier.code 0} true;
    assume $i280 == 1;
    goto $bb296;

  $bb288:
    assume {:verifier.code 0} true;
    assume $i274 == 1;
    goto $bb289;

  $bb281:
    assume {:verifier.code 0} true;
    assume $i268 == 1;
    goto $bb282;

  $bb274:
    assume {:verifier.code 0} true;
    assume $i262 == 1;
    goto $bb275;

  $bb267:
    assume {:verifier.code 0} true;
    assume $i256 == 1;
    goto $bb268;

  $bb260:
    assume {:verifier.code 0} true;
    assume $i250 == 1;
    goto $bb261;

  $bb253:
    assume {:verifier.code 0} true;
    assume $i244 == 1;
    goto $bb254;

  $bb246:
    assume {:verifier.code 0} true;
    assume $i238 == 1;
    goto $bb247;

  $bb239:
    assume {:verifier.code 0} true;
    assume $i232 == 1;
    goto $bb240;

  $bb232:
    assume {:verifier.code 0} true;
    assume $i226 == 1;
    goto $bb233;

  $bb225:
    assume {:verifier.code 0} true;
    assume $i220 == 1;
    goto $bb226;

  $bb218:
    assume {:verifier.code 0} true;
    assume $i214 == 1;
    goto $bb219;

  $bb211:
    assume {:verifier.code 0} true;
    assume $i208 == 1;
    goto $bb212;

  $bb204:
    assume {:verifier.code 0} true;
    assume $i202 == 1;
    goto $bb205;

  $bb197:
    assume {:verifier.code 0} true;
    assume $i196 == 1;
    goto $bb198;

  $bb190:
    assume {:verifier.code 0} true;
    assume $i190 == 1;
    goto $bb191;

  $bb183:
    assume {:verifier.code 0} true;
    assume $i184 == 1;
    goto $bb184;

  $bb176:
    assume {:verifier.code 0} true;
    assume $i178 == 1;
    goto $bb177;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb170;

  $bb162:
    assume {:verifier.code 0} true;
    assume $i166 == 1;
    goto $bb163;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i160 == 1;
    goto $bb156;

  $bb148:
    assume {:verifier.code 0} true;
    assume $i154 == 1;
    goto $bb149;

  $bb141:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb142;

  $bb134:
    assume {:verifier.code 0} true;
    assume $i142 == 1;
    goto $bb135;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i136 == 1;
    goto $bb128;

  $bb120:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb121;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i124 == 1;
    goto $bb114;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb107;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb100;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb93;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb86;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb79;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb72;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb65;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb58;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb51;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb44;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb37;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb30;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb13;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p5);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} kfree($p15);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;
}



const usage_alloc: ref;

axiom usage_alloc == $sub.ref(0, 335049);

procedure usage_alloc($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.10;



implementation usage_alloc($p0: ref, $i1: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i7: i32;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} {:cexpr "usage_alloc:arg:num"} boogie_si_record_i32($i1);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i1);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $M.10 := $i4;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i7 := $M.10;
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i9 := $M.10;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i7, $i9);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i12 := $M.10;
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $M.10 := $i12;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_seq_pool_new: ref;

axiom snd_seq_pool_new == $sub.ref(0, 336081);

procedure snd_seq_pool_new($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation snd_seq_pool_new($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p7: ref;
  var vslice_dummy_var_155: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 839} {:cexpr "snd_seq_pool_new:arg:poolsize"} boogie_si_record_i32($i0);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $p3 := kzalloc(216, 208);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} vslice_dummy_var_155 := spinlock_check($p8);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} __raw_spin_lock_init($p12, .str.27, $p1);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p13, $0.ref);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p14, $0.ref);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p15, 0);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(20, 1));
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} atomic_set($p16, 0);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(32, 1));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p17, 0);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(56, 1));
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} __init_waitqueue_head($p18, .str.28, $p2);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p19, $i0);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(36, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p20, 0);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p7 := $p3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} __snd_printk.i32.ref.i32.ref(1, .str.22, 530, .str.26);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 337113);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p2, $i1);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    return;
}



const __rwlock_init: ref;

axiom __rwlock_init == $sub.ref(0, 338145);

procedure __rwlock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __rwlock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 339177);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 340209);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 341241);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    return;
}



const mutex_lock_interruptible: ref;

axiom mutex_lock_interruptible == $sub.ref(0, 342273);

procedure mutex_lock_interruptible($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 1} true;
    call {:si_unique_call 847} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 848} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_interruptible_register_mutex: ref;

axiom ldv_mutex_lock_interruptible_register_mutex == $sub.ref(0, 343305);

procedure ldv_mutex_lock_interruptible_register_mutex($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_lock_interruptible_register_mutex($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} ldv_error();
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 850} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 851} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 852} {:cexpr "nondetermined"} boogie_si_record_i32($i3);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 4);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $M.5 := 2;
    call {:si_unique_call 853} {:cexpr "ldv_mutex_register_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const queue_access_lock: ref;

axiom queue_access_lock == $sub.ref(0, 344337);

procedure queue_access_lock($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation queue_access_lock($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i8;
  var $i10: i8;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} {:cexpr "queue_access_lock:arg:client"} boogie_si_record_i32($i1);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p3 := spinlock_check($p2);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 857} {:cexpr "flags"} boogie_si_record_i64($i4);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i5 := check_access($p0, $i1);
    call {:si_unique_call 859} {:cexpr "access_ok"} boogie_si_record_i32($i5);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} spin_unlock_irqrestore($p11, $i4);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.7, $p7);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i9 := $and.i8($i8, $sub.i8(0, 3));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i10 := $or.i8($i9, 2);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i10);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const queue_access_unlock: ref;

axiom queue_access_unlock == $sub.ref(0, 345369);

procedure queue_access_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation queue_access_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i8;
  var $i6: i8;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $p2 := spinlock_check($p1);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i3 := _raw_spin_lock_irqsave($p2);
    call {:si_unique_call 863} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.7, $p4);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i6 := $and.i8($i5, $sub.i8(0, 3));
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, $i6);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} spin_unlock_irqrestore($p7, $i3);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    return;
}



const snd_seq_timer_set_tempo: ref;

axiom snd_seq_timer_set_tempo == $sub.ref(0, 346401);

procedure snd_seq_timer_set_tempo($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_timer_set_tempo($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} {:cexpr "snd_seq_timer_set_tempo:arg:tempo"} boogie_si_record_i32($i1);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 866} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i4);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 868} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i4, 0);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 871} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $sle.i32($i1, 0);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p18 := spinlock_check($p17);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i19 := _raw_spin_lock_irqsave($p18);
    call {:si_unique_call 874} {:cexpr "flags"} boogie_si_record_i64($i19);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(4, 1));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.7, $p20);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i1, $i21);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} spin_unlock_irqrestore($p24, $i19);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(4, 1));
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p23, $i1);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} snd_seq_timer_set_tick_resolution($p0);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} warn_slowpath_fmt.ref.i32.ref.ref(.str.63, 238, .str.6, .str.67);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_seq_timer_set_skew: ref;

axiom snd_seq_timer_set_skew == $sub.ref(0, 347433);

procedure snd_seq_timer_set_skew($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_timer_set_skew($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} {:cexpr "snd_seq_timer_set_skew:arg:skew"} boogie_si_record_i32($i1);
    call {:si_unique_call 878} {:cexpr "snd_seq_timer_set_skew:arg:base"} boogie_si_record_i32($i2);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 879} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 881} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 884} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i2, 65536);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $p19 := spinlock_check($p18);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i20 := _raw_spin_lock_irqsave($p19);
    call {:si_unique_call 888} {:cexpr "flags"} boogie_si_record_i64($i20);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(104, 1));
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p21, $i1);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} spin_unlock_irqrestore($p22, $i20);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} __snd_printk.i32.ref.i32.ref.i32(1, .str.63, 318, .str.69, $i2);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} warn_slowpath_fmt.ref.i32.ref.ref(.str.63, 313, .str.6, .str.67);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const check_access: ref;

axiom check_access == $sub.ref(0, 348465);

procedure check_access($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation check_access($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i11: i1;
  var $i5: i1;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} {:cexpr "check_access:arg:client"} boogie_si_record_i32($i1);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.7, $p2);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i1);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i5 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(100, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.7, $p7);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i11 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i5 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i5);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(100, 1));
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.7, $p13);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 349497);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 892} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 350529);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 895} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $p2 := ldv_malloc($i0);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 351561);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 897} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 1} true;
    call {:si_unique_call 898} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 899} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $p3 := malloc($i0);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i4 := ldv_is_err($p3);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 1} true;
    call {:si_unique_call 902} __VERIFIER_assume($i7);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 352593);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 903} $r := $malloc($i0);
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 353625);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const snd_seq_write_pool_allocated: ref;

axiom snd_seq_write_pool_allocated == $sub.ref(0, 354657);

procedure snd_seq_write_pool_allocated($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_seq_write_pool_allocated($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.7, $p1);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $i3 := snd_seq_total_cells($p2);
    call {:si_unique_call 905} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const snd_seq_total_cells: ref;

axiom snd_seq_total_cells == $sub.ref(0, 355689);

procedure snd_seq_total_cells($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_seq_total_cells($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.7, $p3);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 356721);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 1} true;
    call {:si_unique_call 906} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 907} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const snd_seq_ioctl_system_info: ref;

axiom snd_seq_ioctl_system_info == $sub.ref(0, 357753);

procedure snd_seq_ioctl_system_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $CurrAddr;



implementation snd_seq_ioctl_system_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $p2 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.41;
    call {:si_unique_call 909} cmdloc_dummy_var_51 := $memset.i8(cmdloc_dummy_var_50, $p3, 0, 48, $zext.i32.i64(4), 0 == 1);
    $M.41 := cmdloc_dummy_var_51;
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p4, 8);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p5, 192);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p6, 256);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p7, 256);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i8 := $M.10;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p9, $i8);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $i10 := snd_seq_queue_get_cur_queues();
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(20, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p11, $i10);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $i13 := copy_to_user($p1, $p12, 48);
    call {:si_unique_call 912} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_running_mode: ref;

axiom snd_seq_ioctl_running_mode == $sub.ref(0, 358785);

procedure snd_seq_ioctl_running_mode($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.15, $M.7, $CurrAddr;



implementation snd_seq_ioctl_running_mode($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $p27: ref;
  var $i17: i32;
  var $p28: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i4 := copy_from_user($p3, $p1, 16);
    call {:si_unique_call 915} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.7, $p7);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $p10 := snd_seq_client_use_ptr($i9);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.7, $p13);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.7, $p18);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32($i20, 8);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.7, $p22);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i25 := $ule.i32($i24, 7);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p10, $mul.ref(0, 424)), $mul.ref(384, 1));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p27, $i26);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p10, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} atomic_dec($p28);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i6 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb10;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 2);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_get_client_info: ref;

axiom snd_seq_ioctl_get_client_info == $sub.ref(0, 359817);

procedure snd_seq_ioctl_get_client_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.15, $M.7, $CurrAddr;



implementation snd_seq_ioctl_get_client_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $p2 := $alloc($mul.ref(188, $zext.i32.i64(1)));
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i4 := copy_from_user($p3, $p1, 188);
    call {:si_unique_call 920} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(0, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $p9 := snd_seq_client_use_ptr($i8);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} get_client_info($p9, $p2);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} atomic_dec($p12);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i14 := copy_to_user($p1, $p13, 188);
    call {:si_unique_call 925} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 2);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_set_client_info: ref;

axiom snd_seq_ioctl_set_client_info == $sub.ref(0, 360849);

procedure snd_seq_ioctl_set_client_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation snd_seq_ioctl_set_client_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i6: i32;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var vslice_dummy_var_156: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $p2 := $alloc($mul.ref(188, $zext.i32.i64(1)));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $i4 := copy_from_user($p3, $p1, 188);
    call {:si_unique_call 928} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(0, 1));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.7, $p9);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i8, $i10);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(0, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.7, $p12);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(4, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.7, $p14);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i13, $i15);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.7, $p18);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i20 := $sext.i8.i32($i19);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(72, 1));
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.7, $p27);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(76, 1));
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p29, $i28);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(120, 1));
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.7, $p30);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(116, 1));
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p32, $i31);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i33 := $ugt.i64(32, 63);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(80, 1));
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(84, 1));
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_55 := $M.7;
    cmdloc_dummy_var_56 := $M.7;
    call {:si_unique_call 931} cmdloc_dummy_var_57 := $memcpy.i8(cmdloc_dummy_var_55, cmdloc_dummy_var_56, $p39, $p41, 32, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_57;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(80, 1));
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(84, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_52 := $M.7;
    cmdloc_dummy_var_53 := $M.7;
    call {:si_unique_call 930} cmdloc_dummy_var_54 := $memcpy.i8(cmdloc_dummy_var_52, cmdloc_dummy_var_53, $p35, $p37, 32, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_54;
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(5, 1));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(8, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} vslice_dummy_var_156 := strlcpy($p23, $p25, 64);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_create_port: ref;

axiom snd_seq_ioctl_create_port == $sub.ref(0, 361881);

procedure snd_seq_ioctl_create_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr, $M.3, $M.13, $M.15, assertsPassed, $M.37, $M.41, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_ioctl_create_port($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i8;
  var $p62: ref;
  var $i63: i8;
  var $i64: i8;
  var $i65: i8;
  var $i66: i8;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $i6: i32;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $p2 := $alloc($mul.ref(168, $zext.i32.i64(1)));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i4 := copy_from_user($p3, $p1, 168);
    call {:si_unique_call 934} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.7, $p8);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.7, $p11);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i10, $i12);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(104, 1));
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.7, $p14);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 1);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $p23 := snd_seq_create_port($p0, $i22);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(0, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.7, $p26);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 1);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(0, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.7, $p38);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 2);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(0, 1));
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p86);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p87);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_58 := $M.7;
    cmdloc_dummy_var_59 := $M.7;
    call {:si_unique_call 937} cmdloc_dummy_var_60 := $memcpy.i8(cmdloc_dummy_var_58, cmdloc_dummy_var_59, $p88, $p89, 2, $zext.i32.i64(8), 0 == 1);
    $M.7 := cmdloc_dummy_var_60;
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_158 := snd_seq_set_port_info($p23, $p2);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.7, $p92);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.7, $p96);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} snd_seq_system_broadcast($i94, $i98, 63);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p2);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $i100 := copy_to_user($p1, $p99, 168);
    call {:si_unique_call 941} {:cexpr "tmp___0"} boogie_si_record_i32($i100);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb29:
    assume $i101 == 1;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb20:
    assume $i40 == 1;
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(96, 1));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.7, $p41);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i45 == 1;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p43, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.42, $p46);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p43, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.43, $p53);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(632, 1));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p55, $p54);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p43, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.44, $p56);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(624, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p58, $p57);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p43, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.45, $p59);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(640, 1));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.7, $p62);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i64 := $and.i8($i61, 1);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i65 := $and.i8($i63, $sub.i8(0, 2));
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i66 := $or.i8($i65, $i64);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p62, $i66);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p43, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.46, $p67);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(616, 1));
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p69, $p68);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p43, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.47, $p70);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(240, 1));
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p73, $p71);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p43, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.48, $p74);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(248, 1));
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p77, $p75);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p43, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.49, $p78);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(360, 1)), $mul.ref(240, 1));
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p81, $p79);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p43, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.50, $p82);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(360, 1)), $mul.ref(248, 1));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p85, $p83);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i49 == 1;
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p43, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.42, $p50);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(8, 1));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p52, $p51);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(96, 1));
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.7, $p29);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb16;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.7, $p34);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_157 := snd_seq_delete_port($p0, $i36);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.7, $p19);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_delete_port: ref;

axiom snd_seq_ioctl_delete_port == $sub.ref(0, 362913);

procedure snd_seq_ioctl_delete_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr, $M.3, $M.13, $M.15, assertsPassed, $M.37, $M.41, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_ioctl_delete_port($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $p2 := $alloc($mul.ref(168, $zext.i32.i64(1)));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i4 := copy_from_user($p3, $p1, 168);
    call {:si_unique_call 944} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.7, $p8);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.7, $p11);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i10, $i12);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.7, $p15);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i18 := snd_seq_delete_port($p0, $i17);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 946} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i19 := $sge.i32($i18, 0);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.7, $p20);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.7, $p23);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} snd_seq_system_broadcast($i21, $i25, 64);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_get_port_info: ref;

axiom snd_seq_ioctl_get_port_info == $sub.ref(0, 363945);

procedure snd_seq_ioctl_get_port_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.15, $M.7, $CurrAddr;



implementation snd_seq_ioctl_get_port_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i6: i32;
  var vslice_dummy_var_159: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $p2 := $alloc($mul.ref(168, $zext.i32.i64(1)));
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i4 := copy_from_user($p3, $p1, 168);
    call {:si_unique_call 950} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.7, $p8);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $p11 := snd_seq_client_use_ptr($i10);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.7, $p15);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $p18 := snd_seq_port_use_ptr($p11, $i17);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_159 := snd_seq_get_port_info($p18, $p2);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p18, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} atomic_dec($p23);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p11, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} atomic_dec($p24);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i26 := copy_to_user($p1, $p25, 168);
    call {:si_unique_call 958} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} atomic_dec($p21);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 2);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 6);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_set_port_info: ref;

axiom snd_seq_ioctl_set_port_info == $sub.ref(0, 364977);

procedure snd_seq_ioctl_set_port_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation snd_seq_ioctl_set_port_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $i6: i32;
  var vslice_dummy_var_160: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $p2 := $alloc($mul.ref(168, $zext.i32.i64(1)));
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $i4 := copy_from_user($p3, $p1, 168);
    call {:si_unique_call 961} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.7, $p8);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.7, $p11);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i10, $i12);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.7, $p15);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $p18 := snd_seq_port_use_ptr($p0, $i17);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} vslice_dummy_var_160 := snd_seq_set_port_info($p18, $p2);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p18, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} atomic_dec($p22);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_subscribe_port: ref;

axiom snd_seq_ioctl_subscribe_port == $sub.ref(0, 366009);

procedure snd_seq_ioctl_subscribe_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.15, $M.7, $CurrAddr, $M.41, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $M.3, assertsPassed, $M.37, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_ioctl_subscribe_port($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $i6: i32;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $p2 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $i4 := copy_from_user($p3, $p1, 80);
    call {:si_unique_call 967} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(2, 1)), $mul.ref(0, 1));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.7, $p8);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $p11 := snd_seq_client_use_ptr($i10);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.7, $p19);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $p22 := snd_seq_client_use_ptr($i21);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.7, $p26);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $p29 := snd_seq_port_use_ptr($p22, $i28);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(2, 1)), $mul.ref(1, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.7, $p33);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $p36 := snd_seq_port_use_ptr($p11, $i35);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i39 := check_subscription_permission($p0, $p29, $p36, $p2);
    call {:si_unique_call 973} {:cexpr "result"} boogie_si_record_i32($i39);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 0);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $i41 := snd_seq_port_connect($p0, $p22, $p29, $p11, $p36, $p2);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 975} {:cexpr "result"} boogie_si_record_i32($i41);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p14, $i15, $p16, $p17 := $p22, $i41, $p29, $p36;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p16);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p17);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p14);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p11);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb33:
    assume $i54 == 1;
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p11, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} atomic_dec($p55);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i51 == 1;
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p14, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} atomic_dec($p52);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i48 == 1;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p17, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} atomic_dec($p49);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i45 == 1;
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p16, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} atomic_dec($p46);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i42 == 1;
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} vslice_dummy_var_161 := snd_seq_client_notify_subscription(254, 0, $p2, 66);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $p14, $i15, $p16, $p17 := $p22, $i39, $p29, $p36;
    goto $bb7;

  $bb15:
    assume $i38 == 1;
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p14, $i15, $p16, $p17 := $p22, $sub.i32(0, 22), $p29, $p36;
    goto $bb7;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p14, $i15, $p16, $p17 := $p22, $sub.i32(0, 22), $p29, $0.ref;
    goto $bb7;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p14, $i15, $p16, $p17 := $p22, $sub.i32(0, 22), $0.ref, $0.ref;
    goto $bb7;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p14, $i15, $p16, $p17 := $0.ref, $sub.i32(0, 22), $0.ref, $0.ref;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_unsubscribe_port: ref;

axiom snd_seq_ioctl_unsubscribe_port == $sub.ref(0, 367041);

procedure snd_seq_ioctl_unsubscribe_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.15, $M.7, $CurrAddr, $M.41, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $M.3, assertsPassed, $M.37, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_ioctl_unsubscribe_port($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $i6: i32;
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $p2 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $i4 := copy_from_user($p3, $p1, 80);
    call {:si_unique_call 983} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(2, 1)), $mul.ref(0, 1));
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.7, $p8);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $p11 := snd_seq_client_use_ptr($i10);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.7, $p19);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $p22 := snd_seq_client_use_ptr($i21);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.7, $p26);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $p29 := snd_seq_port_use_ptr($p22, $i28);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(2, 1)), $mul.ref(1, 1));
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.7, $p33);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $p36 := snd_seq_port_use_ptr($p11, $i35);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $i39 := check_subscription_permission($p0, $p29, $p36, $p2);
    call {:si_unique_call 989} {:cexpr "result"} boogie_si_record_i32($i39);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 0);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $i41 := snd_seq_port_disconnect($p0, $p22, $p29, $p11, $p36, $p2);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 991} {:cexpr "result"} boogie_si_record_i32($i41);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p14, $i15, $p16, $p17 := $p22, $i41, $p29, $p36;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p16);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p17);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p14);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p11);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb33:
    assume $i54 == 1;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p11, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} atomic_dec($p55);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i51 == 1;
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p14, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} atomic_dec($p52);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i48 == 1;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p17, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} atomic_dec($p49);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i45 == 1;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p16, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} atomic_dec($p46);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i42 == 1;
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} vslice_dummy_var_162 := snd_seq_client_notify_subscription(254, 0, $p2, 67);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p14, $i15, $p16, $p17 := $p22, $i39, $p29, $p36;
    goto $bb7;

  $bb15:
    assume $i38 == 1;
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p14, $i15, $p16, $p17 := $p22, $sub.i32(0, 6), $p29, $p36;
    goto $bb7;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p14, $i15, $p16, $p17 := $p22, $sub.i32(0, 6), $p29, $0.ref;
    goto $bb7;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p14, $i15, $p16, $p17 := $p22, $sub.i32(0, 6), $0.ref, $0.ref;
    goto $bb7;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p14, $i15, $p16, $p17 := $0.ref, $sub.i32(0, 6), $0.ref, $0.ref;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_create_queue: ref;

axiom snd_seq_ioctl_create_queue == $sub.ref(0, 368073);

procedure snd_seq_ioctl_create_queue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr, $M.23, $M.26, $M.33, $M.6, assertsPassed;



implementation snd_seq_ioctl_create_queue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i8;
  var $p26: ref;
  var $i27: i8;
  var $i28: i8;
  var $i29: i8;
  var $i30: i8;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i6: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $p2 := $alloc($mul.ref(140, $zext.i32.i64(1)));
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i4 := copy_from_user($p3, $p1, 140);
    call {:si_unique_call 999} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.7, $p9);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i11 := $and.i8($i10, 1);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(76, 1));
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.7, $p13);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $i15 := snd_seq_queue_alloc($i8, $i12, $i14);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 1001} {:cexpr "result"} boogie_si_record_i32($i15);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $p17 := queueptr($i15);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.7, $p20);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p22, $i21);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p17, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.7, $p23);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i25 := $and.i8($i24, 1);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.7, $p26);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i28 := $and.i8($i25, 1);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i29 := $and.i8($i27, $sub.i8(0, 2));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i30 := $or.i8($i29, $i28);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p26, $i30);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p17, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.7, $p31);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(4, 1));
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p33, $i32);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(9, 1)), $mul.ref(0, 1));
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.7, $p35);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i37 := $sext.i8.i32($i36);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p17, $mul.ref(0, 464)), $mul.ref(4, 1));
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(9, 1));
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} vslice_dummy_var_164 := strlcpy($p45, $p47, 64);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p17, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} atomic_dec($p49);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p2);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $i51 := copy_to_user($p1, $p50, 140);
    call {:si_unique_call 1007} {:cexpr "tmp___0"} boogie_si_record_i32($i51);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb14:
    assume $i52 == 1;
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(9, 1));
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p17, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.7, $p41);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} vslice_dummy_var_163 := snprintf.ref.i64.ref.i32($p40, 64, .str.97, $i42);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb3;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_delete_queue: ref;

axiom snd_seq_ioctl_delete_queue == $sub.ref(0, 369105);

procedure snd_seq_ioctl_delete_queue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.23, $M.26, $CurrAddr;



implementation snd_seq_ioctl_delete_queue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $p2 := $alloc($mul.ref(140, $zext.i32.i64(1)));
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $i4 := copy_from_user($p3, $p1, 140);
    call {:si_unique_call 1010} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.7, $p9);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $i11 := snd_seq_queue_delete($i8, $i10);
    call {:si_unique_call 1012} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_get_queue_info: ref;

axiom snd_seq_ioctl_get_queue_info == $sub.ref(0, 370137);

procedure snd_seq_ioctl_get_queue_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation snd_seq_ioctl_get_queue_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i8;
  var $p22: ref;
  var $i23: i8;
  var $i24: i8;
  var $i25: i8;
  var $i26: i8;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i6: i32;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var vslice_dummy_var_165: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $p2 := $alloc($mul.ref(140, $zext.i32.i64(1)));
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i4 := copy_from_user($p3, $p1, 140);
    call {:si_unique_call 1015} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $p9 := queueptr($i8);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_61 := $M.7;
    call {:si_unique_call 1017} cmdloc_dummy_var_62 := $memset.i8(cmdloc_dummy_var_61, $p12, 0, 140, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_62;
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.7, $p13);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p15, $i14);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.7, $p16);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(4, 1));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p18, $i17);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.7, $p19);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i21 := $and.i8($i20, 1);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.7, $p22);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i24 := $and.i8($i21, 1);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i25 := $and.i8($i23, $sub.i8(0, 2));
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i26 := $or.i8($i25, $i24);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p22, $i26);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(9, 1));
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(4, 1));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} vslice_dummy_var_165 := strlcpy($p28, $p30, 64);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} atomic_dec($p32);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p2);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $i34 := copy_to_user($p1, $p33, 140);
    call {:si_unique_call 1021} {:cexpr "tmp___0"} boogie_si_record_i32($i34);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_set_queue_info: ref;

axiom snd_seq_ioctl_set_queue_info == $sub.ref(0, 371169);

procedure snd_seq_ioctl_set_queue_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.33, $CurrAddr, $M.6, assertsPassed;



implementation snd_seq_ioctl_set_queue_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i8;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $i6: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $p2 := $alloc($mul.ref(140, $zext.i32.i64(1)));
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $i4 := copy_from_user($p3, $p1, 140);
    call {:si_unique_call 1024} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(4, 1));
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.7, $p9);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i8, $i10);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.7, $p12);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.7, $p14);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $i16 := snd_seq_queue_check_access($i13, $i15);
    call {:si_unique_call 1026} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.7, $p18);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.7, $p20);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.7, $p22);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i24 := $and.i8($i23, 1);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i26 := snd_seq_queue_set_owner($i19, $i21, $i25);
    call {:si_unique_call 1028} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 0);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(8, 1));
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.7, $p29);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.7, $p38);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $p40 := queueptr($i39);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p40, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.7, $p43);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.7, $p45);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i44, $i46);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p40, $mul.ref(0, 464)), $mul.ref(4, 1));
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(9, 1));
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} vslice_dummy_var_167 := strlcpy($p50, $p52, 64);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p40, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} atomic_dec($p54);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb20:
    assume $i47 == 1;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p40, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} atomic_dec($p48);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.7, $p33);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.7, $p35);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} vslice_dummy_var_166 := snd_seq_queue_use($i34, $i36, 1);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_get_named_queue: ref;

axiom snd_seq_ioctl_get_named_queue == $sub.ref(0, 372201);

procedure snd_seq_ioctl_get_named_queue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation snd_seq_ioctl_get_named_queue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i8;
  var $p21: ref;
  var $i22: i8;
  var $i23: i8;
  var $i24: i8;
  var $i25: i8;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $p2 := $alloc($mul.ref(140, $zext.i32.i64(1)));
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i4 := copy_from_user($p3, $p1, 140);
    call {:si_unique_call 1036} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(9, 1));
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $p9 := snd_seq_queue_find_name($p8);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.7, $p12);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p14, $i13);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.7, $p15);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(4, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p17, $i16);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.7, $p18);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i20 := $and.i8($i19, 1);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.7, $p21);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i20, 1);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i24 := $and.i8($i22, $sub.i8(0, 2));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i25 := $or.i8($i24, $i23);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p21, $i25);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} atomic_dec($p26);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p2);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $i28 := copy_to_user($p1, $p27, 140);
    call {:si_unique_call 1040} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_get_queue_status: ref;

axiom snd_seq_ioctl_get_queue_status == $sub.ref(0, 373233);

procedure snd_seq_ioctl_get_queue_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation snd_seq_ioctl_get_queue_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i8;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i7: i32;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $p2 := $alloc($mul.ref(92, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $i5 := copy_from_user($p4, $p1, 92);
    call {:si_unique_call 1044} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(0, 1));
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.7, $p8);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $p10 := queueptr($i9);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_63 := $M.7;
    call {:si_unique_call 1046} cmdloc_dummy_var_64 := $memset.i8(cmdloc_dummy_var_63, $p13, 0, 92, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_64;
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.7, $p14);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(0, 1));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p16, $i15);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.7, $p17);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.7, $p19);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.7, $p21);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.7, $p23);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.7, $p25);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i22, $i26);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p28, $i27);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(12, 1));
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $i30 := snd_seq_timer_get_cur_time($p18);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p3);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p31, $i30);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p29);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p3);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.7;
    cmdloc_dummy_var_66 := $M.7;
    call {:si_unique_call 1048} cmdloc_dummy_var_67 := $memcpy.i8(cmdloc_dummy_var_65, cmdloc_dummy_var_66, $p32, $p33, 8, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_67;
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i34 := snd_seq_timer_get_cur_tick($p18);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(8, 1));
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p35, $i34);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p18);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.7, $p36);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i38 := $and.i8($i37, 1);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(20, 1));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p40, $i39);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.7, $p41);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 92)), $mul.ref(24, 1));
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p43, $i42);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p10, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} atomic_dec($p44);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p2);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i46 := copy_to_user($p1, $p45, 92);
    call {:si_unique_call 1052} {:cexpr "tmp___0"} boogie_si_record_i32($i46);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i47 == 1;
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_get_queue_tempo: ref;

axiom snd_seq_ioctl_get_queue_tempo == $sub.ref(0, 374265);

procedure snd_seq_ioctl_get_queue_tempo($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation snd_seq_ioctl_get_queue_tempo($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i6: i32;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $p2 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $i4 := copy_from_user($p3, $p1, 44);
    call {:si_unique_call 1055} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $p9 := queueptr($i8);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_68 := $M.7;
    call {:si_unique_call 1057} cmdloc_dummy_var_69 := $memset.i8(cmdloc_dummy_var_68, $p12, 0, 44, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_69;
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.7, $p13);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p15, $i14);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.7, $p16);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 200)), $mul.ref(4, 1));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.7, $p18);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p20, $i19);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p17, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.7, $p21);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p23, $i22);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p17, $mul.ref(0, 200)), $mul.ref(104, 1));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.7, $p24);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p26, $i25);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p17, $mul.ref(0, 200)), $mul.ref(108, 1));
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.7, $p27);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p29, $i28);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} atomic_dec($p30);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p2);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $i32 := copy_to_user($p1, $p31, 44);
    call {:si_unique_call 1060} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_set_queue_tempo: ref;

axiom snd_seq_ioctl_set_queue_tempo == $sub.ref(0, 375297);

procedure snd_seq_ioctl_set_queue_tempo($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, $M.7;



implementation snd_seq_ioctl_set_queue_tempo($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $p2 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i4 := copy_from_user($p3, $p1, 44);
    call {:si_unique_call 1063} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $i9 := snd_seq_set_queue_tempo($i8, $p2);
    call {:si_unique_call 1065} {:cexpr "result"} boogie_si_record_i32($i9);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32(0, $i9);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_get_queue_timer: ref;

axiom snd_seq_ioctl_get_queue_timer == $sub.ref(0, 376329);

procedure snd_seq_ioctl_get_queue_timer($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.6, $CurrAddr, assertsPassed;



implementation snd_seq_ioctl_get_queue_timer($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i6: i32;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $p2 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $i4 := copy_from_user($p3, $p1, 96);
    call {:si_unique_call 1068} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $p9 := queueptr($i8);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(288, 1));
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i13 := ldv_mutex_lock_interruptible_39($p12);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    call {:si_unique_call 1071} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.7, $p16);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_70 := $M.7;
    call {:si_unique_call 1073} cmdloc_dummy_var_71 := $memset.i8(cmdloc_dummy_var_70, $p18, 0, 96, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_71;
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.7, $p19);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p21, $i20);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p17, $mul.ref(0, 200)), $mul.ref(52, 1));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.7, $p22);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(4, 1));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p24, $i23);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p17, $mul.ref(0, 200)), $mul.ref(52, 1));
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.7, $p25);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(288, 1));
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} ldv_mutex_unlock_40($p40);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} atomic_dec($p41);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p2);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $i43 := copy_to_user($p1, $p42, 96);
    call {:si_unique_call 1078} {:cexpr "tmp___1"} boogie_si_record_i32($i43);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p17, $mul.ref(0, 200)), $mul.ref(56, 1));
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p30);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p31);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_72 := $M.7;
    cmdloc_dummy_var_73 := $M.7;
    call {:si_unique_call 1074} cmdloc_dummy_var_74 := $memcpy.i8(cmdloc_dummy_var_72, cmdloc_dummy_var_73, $p32, $p33, 20, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_74;
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p17, $mul.ref(0, 200)), $mul.ref(96, 1));
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.7, $p34);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p39, $i36);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} atomic_dec($p15);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 512);
    goto $bb3;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_set_queue_timer: ref;

axiom snd_seq_ioctl_set_queue_timer == $sub.ref(0, 377361);

procedure snd_seq_ioctl_set_queue_timer($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.33, $M.6, $CurrAddr, assertsPassed;



implementation snd_seq_ioctl_set_queue_timer($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i6: i32;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var vslice_dummy_var_168: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $p2 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i4 := copy_from_user($p3, $p1, 96);
    call {:si_unique_call 1081} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(4, 1));
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.7, $p10);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.7, $p12);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $i14 := snd_seq_queue_check_access($i11, $i13);
    call {:si_unique_call 1083} {:cexpr "tmp___1"} boogie_si_record_i32($i14);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.7, $p16);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $p18 := queueptr($i17);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(0, 464)), $mul.ref(288, 1));
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $i22 := ldv_mutex_lock_interruptible_41($p21);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 1086} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p18, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.7, $p25);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.7, $p27);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} vslice_dummy_var_168 := snd_seq_queue_timer_close($i28);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(4, 1));
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.7, $p30);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p26, $mul.ref(0, 200)), $mul.ref(52, 1));
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p32, $i31);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p26, $mul.ref(0, 200)), $mul.ref(52, 1));
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.7, $p33);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.7, $p48);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i50 := snd_seq_queue_timer_open($i49);
    call {:si_unique_call 1091} {:cexpr "result"} boogie_si_record_i32($i50);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p18, $mul.ref(0, 464)), $mul.ref(288, 1));
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} ldv_mutex_unlock_42($p51);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p18, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} atomic_dec($p52);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i6 := $i50;
    goto $bb3;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p26, $mul.ref(0, 200)), $mul.ref(56, 1));
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p36);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p39);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_75 := $M.7;
    cmdloc_dummy_var_76 := $M.7;
    call {:si_unique_call 1089} cmdloc_dummy_var_77 := $memcpy.i8(cmdloc_dummy_var_75, cmdloc_dummy_var_76, $p40, $p41, 20, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_77;
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.7, $p44);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i45);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p26, $mul.ref(0, 200)), $mul.ref(96, 1));
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p47, $i46);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p18, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} atomic_dec($p24);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 512);
    goto $bb3;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 6);
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_get_queue_client: ref;

axiom snd_seq_ioctl_get_queue_client == $sub.ref(0, 378393);

procedure snd_seq_ioctl_get_queue_client($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation snd_seq_ioctl_get_queue_client($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $p2 := $alloc($mul.ref(76, $zext.i32.i64(1)));
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i4 := copy_from_user($p3, $p1, 76);
    call {:si_unique_call 1096} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 76)), $mul.ref(0, 1));
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.7, $p9);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $i11 := snd_seq_queue_is_used($i8, $i10);
    call {:si_unique_call 1098} {:cexpr "used"} boogie_si_record_i32($i11);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 76)), $mul.ref(8, 1));
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p13, $i11);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.7, $p14);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 76)), $mul.ref(4, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p16, $i15);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p2);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $i18 := copy_to_user($p1, $p17, 76);
    call {:si_unique_call 1100} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_set_queue_client: ref;

axiom snd_seq_ioctl_set_queue_client == $sub.ref(0, 379425);

procedure snd_seq_ioctl_set_queue_client($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.33, $CurrAddr, $M.6, assertsPassed;



implementation snd_seq_ioctl_set_queue_client($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $p2 := $alloc($mul.ref(76, $zext.i32.i64(1)));
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i4 := copy_from_user($p3, $p1, 76);
    call {:si_unique_call 1103} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 76)), $mul.ref(8, 1));
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i9 := $sge.i32($i8, 0);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $i18 := snd_seq_ioctl_get_queue_client($p0, $p1);
    call {:si_unique_call 1107} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i6 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 76)), $mul.ref(0, 1));
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.7, $p10);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.7, $p12);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 76)), $mul.ref(8, 1));
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.7, $p14);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i16 := snd_seq_queue_use($i11, $i13, $i15);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 1105} {:cexpr "err"} boogie_si_record_i32($i16);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i6 := $i16;
    goto $bb3;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_get_client_pool: ref;

axiom snd_seq_ioctl_get_client_pool == $sub.ref(0, 380457);

procedure snd_seq_ioctl_get_client_pool($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.15, $M.7, $CurrAddr;



implementation snd_seq_ioctl_get_client_pool($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i6: i32;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $p2 := $alloc($mul.ref(88, $zext.i32.i64(1)));
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $i4 := copy_from_user($p3, $p1, 88);
    call {:si_unique_call 1110} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $p9 := snd_seq_client_use_ptr($i8);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_78 := $M.7;
    call {:si_unique_call 1112} cmdloc_dummy_var_79 := $memset.i8(cmdloc_dummy_var_78, $p12, 0, 88, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_79;
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.7, $p13);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.7, $p15);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p17, $i16);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.7, $p18);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 216)), $mul.ref(28, 1));
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.7, $p20);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p22, $i21);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.7, $p23);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p25, $i24);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p9, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.7, $p26);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $i28 := snd_seq_unused_cells($p27);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p29, $i28);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p9, $mul.ref(0, 424)), $mul.ref(0, 1));
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.7, $p30);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p55, 0);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(20, 1));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p56, 0);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p9, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} atomic_dec($p57);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p2);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} $i59 := copy_to_user($p1, $p58, 88);
    call {:si_unique_call 1117} {:cexpr "tmp___0"} boogie_si_record_i32($i59);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb14:
    assume $i60 == 1;
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p9, $mul.ref(0, 424)), $mul.ref(400, 1));
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.7, $p35);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p37, $i36);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.7, $p38);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(20, 1));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p40, $i39);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p9, $mul.ref(0, 424)), $mul.ref(400, 1));
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.7, $p43);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i46 == 1;
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p9, $mul.ref(0, 424)), $mul.ref(400, 1));
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.7, $p49);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.7, $p51);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} $i53 := snd_seq_unused_cells($p52);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(20, 1));
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p54, $i53);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 2);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_set_client_pool: ref;

axiom snd_seq_ioctl_set_client_pool == $sub.ref(0, 381489);

procedure snd_seq_ioctl_set_client_pool($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.13, $M.15, $CurrAddr;



implementation snd_seq_ioctl_set_client_pool($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i6: i32;
  var vslice_dummy_var_169: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $p2 := $alloc($mul.ref(88, $zext.i32.i64(1)));
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $i4 := copy_from_user($p3, $p1, 88);
    call {:si_unique_call 1120} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.7, $p9);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i8, $i10);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.7, $p12);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i13, 0);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(0, 1));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.7, $p43);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.7, $p78);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i80 := $sgt.i32($i79, 0);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i93 := snd_seq_ioctl_get_client_pool($p0, $p1);
    call {:si_unique_call 1132} {:cexpr "tmp___2"} boogie_si_record_i32($i93);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i6 := $i93;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb41:
    assume $i80 == 1;
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.7, $p81);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.7, $p83);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.7, $p85);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i87 := $sle.i32($i82, $i86);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb43;

  $bb44:
    assume $i87 == 1;
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.7, $p88);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.7, $p90);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 216)), $mul.ref(28, 1));
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p92, $i89);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb26:
    assume $i45 == 1;
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(400, 1));
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.7, $p48);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb28;

  $bb29:
    assume $i51 == 1;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.7, $p52);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i54 := $sgt.i32($i53, 0);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb28;

  $bb31:
    assume $i54 == 1;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.7, $p55);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i57 := $sle.i32($i56, 2000);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb28;

  $bb33:
    assume $i57 == 1;
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.7, $p58);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(400, 1));
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.7, $p62);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i59, $i63);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb28;

  $bb35:
    assume $i64 == 1;
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(400, 1));
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.7, $p67);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.7, $p69);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $i71 := snd_seq_fifo_resize($p68, $i70);
    call {:si_unique_call 1130} {:cexpr "rc"} boogie_si_record_i32($i71);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i71, 0);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.7, $p73);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(400, 1));
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p77, $i74);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i72 == 1;
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i6 := $i71;
    goto $bb3;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.7, $p15);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i16, 2000);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $i18 := snd_seq_write_pool_allocated($p0);
    call {:si_unique_call 1122} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i19 == 1);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.7, $p20);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.7, $p22);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.7, $p24);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i21, $i25);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i27 := snd_seq_write_pool_allocated($p0);
    call {:si_unique_call 1124} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.7, $p34);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.7, $p36);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p38, $i35);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.7, $p39);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i41 := snd_seq_pool_init($p40);
    call {:si_unique_call 1128} {:cexpr "rc"} boogie_si_record_i32($i41);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i42 == 1;
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i6 := $i41;
    goto $bb3;

  $bb18:
    assume $i28 == 1;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.7, $p29);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} snd_seq_queue_client_leave_cells($i30);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.7, $p31);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} vslice_dummy_var_169 := snd_seq_pool_done($p32);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb14;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_get_subscription: ref;

axiom snd_seq_ioctl_get_subscription == $sub.ref(0, 382521);

procedure snd_seq_ioctl_get_subscription($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.15, $M.7, $CurrAddr;



implementation snd_seq_ioctl_get_subscription($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i14: i32;
  var $p15: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i6: i32;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $p2 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $i4 := copy_from_user($p3, $p1, 80);
    call {:si_unique_call 1135} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.7, $p8);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} $p11 := snd_seq_client_use_ptr($i10);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.7, $p17);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $p20 := snd_seq_port_use_ptr($p11, $i19);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 672)), $mul.ref(104, 1));
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(2, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $p25 := snd_seq_port_get_subscription($p23, $p24);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 2);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i14, $p15 := $i31, $p20;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p15);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p11);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i38 := $sge.i32($i14, 0);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb21:
    assume $i38 == 1;
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p2);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i40 := copy_to_user($p1, $p39, 80);
    call {:si_unique_call 1143} {:cexpr "tmp___0"} boogie_si_record_i32($i40);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i41 == 1;
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb18:
    assume $i36 == 1;
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p11, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} atomic_dec($p37);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p15, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} atomic_dec($p34);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p25, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p2);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p28);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_80 := $M.7;
    cmdloc_dummy_var_81 := $M.7;
    call {:si_unique_call 1139} cmdloc_dummy_var_82 := $memcpy.i8(cmdloc_dummy_var_80, cmdloc_dummy_var_81, $p29, $p30, 80, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_82;
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb14;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i14, $p15 := $sub.i32(0, 22), $p20;
    goto $bb7;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i14, $p15 := $sub.i32(0, 22), $0.ref;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_query_next_client: ref;

axiom snd_seq_ioctl_query_next_client == $sub.ref(0, 383553);

procedure snd_seq_ioctl_query_next_client($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.13, $M.15, $CurrAddr;



implementation snd_seq_ioctl_query_next_client($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p18: ref;
  var $p25: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $p2 := $alloc($mul.ref(188, $zext.i32.i64(1)));
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i4 := copy_from_user($p3, $p1, 188);
    call {:si_unique_call 1146} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(0, 1));
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 1);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(0, 1));
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p10, $i9);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(0, 1));
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.7, $p11);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(0, 1));
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.7, $p15);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i16, 191);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p25 := $p18;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p25);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} get_client_info($p25, $p2);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p25, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} atomic_dec($p35);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p2);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} $i37 := copy_to_user($p1, $p36, 188);
    call {:si_unique_call 1151} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb23:
    assume $i38 == 1;
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 2);
    goto $bb3;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call $p19, $i20, $p21, $i22, $i23, $p24, $p26, $i27, $i28, $p29, $i30, $i31, $p32 := snd_seq_ioctl_query_next_client_loop_$bb11($p2, $p15, $p19, $i20, $p21, $i22, $i23, $p24, $p26, $i27, $i28, $p29, $i30, $i31, $p32);
    goto $bb11_last;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(0, 1));
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.7, $p19);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $p21 := snd_seq_client_use_ptr($i20);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p24 := $p21;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(0, 1));
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.7, $p26);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 1);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(0, 1));
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p29, $i28);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.7, $p15);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i31 := $sle.i32($i30, 191);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $p32 := $p21;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p18 := $p32;
    goto $bb10;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb17_dummy;

  $bb13:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p25 := $p24;
    goto $bb15;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 188)), $mul.ref(0, 1));
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p14, 0);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const snd_seq_ioctl_query_next_port: ref;

axiom snd_seq_ioctl_query_next_port == $sub.ref(0, 384585);

procedure snd_seq_ioctl_query_next_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.15, $M.7, $CurrAddr;



implementation snd_seq_ioctl_query_next_port($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i6: i32;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;
  var vslice_dummy_var_170: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $p2 := $alloc($mul.ref(168, $zext.i32.i64(1)));
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $i4 := copy_from_user($p3, $p1, 168);
    call {:si_unique_call 1154} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.7, $p8);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $p11 := snd_seq_client_use_ptr($i10);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.7, $p15);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p21, $i19);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $p22 := snd_seq_port_query_nearest($p11, $p2);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p22, $mul.ref(0, 672)), $mul.ref(0, 1));
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p26);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p27);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_83 := $M.7;
    cmdloc_dummy_var_84 := $M.7;
    call {:si_unique_call 1158} cmdloc_dummy_var_85 := $memcpy.i8(cmdloc_dummy_var_83, cmdloc_dummy_var_84, $p28, $p29, 2, $zext.i32.i64(8), 0 == 1);
    $M.7 := cmdloc_dummy_var_85;
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} vslice_dummy_var_170 := snd_seq_get_port_info($p22, $p2);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p22, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} atomic_dec($p31);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p11, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} atomic_dec($p32);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p2);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $i34 := copy_to_user($p1, $p33, 168);
    call {:si_unique_call 1163} {:cexpr "tmp___0"} boogie_si_record_i32($i34);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb11:
    assume $i35 == 1;
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p11, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} atomic_dec($p25);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 2);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 6);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_remove_events: ref;

axiom snd_seq_ioctl_remove_events == $sub.ref(0, 385617);

procedure snd_seq_ioctl_remove_events($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation snd_seq_ioctl_remove_events($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $p2 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} $i4 := copy_from_user($p3, $p1, 64);
    call {:si_unique_call 1166} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.7, $p18);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 2);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.7, $p22);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} snd_seq_queue_remove_cells($i23, $p2);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(0, 1));
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.7, $p11);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(400, 1));
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.7, $p16);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} snd_seq_fifo_clear($p17);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_ioctl_query_subs: ref;

axiom snd_seq_ioctl_query_subs == $sub.ref(0, 386649);

procedure snd_seq_ioctl_query_subs($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.15, $M.7, $CurrAddr;



implementation snd_seq_ioctl_query_subs($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p30: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p59: ref;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $p72: ref;
  var $i73: i8;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $i42: i32;
  var $p43: ref;
  var $i75: i32;
  var $p80: ref;
  var $p14: ref;
  var $i15: i32;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $i6: i32;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;
  var cmdloc_dummy_var_91: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $p2 := $alloc($mul.ref(88, $zext.i32.i64(1)));
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i4 := copy_from_user($p3, $p1, 88);
    call {:si_unique_call 1171} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.7, $p8);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $p11 := snd_seq_client_use_ptr($i10);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.7, $p17);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p20 := snd_seq_port_use_ptr($p11, $i19);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.7, $p23);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i24, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p14, $i15 := $p20, $sub.i32(0, 6);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p14);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p11);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i87 := $sge.i32($i15, 0);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb43:
    assume $i87 == 1;
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p2);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $i89 := copy_to_user($p1, $p88, 88);
    call {:si_unique_call 1182} {:cexpr "tmp___1"} boogie_si_record_i32($i89);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i90 == 1;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb40:
    assume $i85 == 1;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p11, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} atomic_dec($p86);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i82 == 1;
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p14, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} atomic_dec($p83);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p20, $mul.ref(0, 672)), $mul.ref(360, 1));
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p29 := $p30;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p29, $mul.ref(0, 256)), $mul.ref(24, 1));
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} down_read($p31);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p29, $mul.ref(0, 256)), $mul.ref(16, 1));
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.7, $p32);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p34, $i33);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.7, $p36);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p29, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p37);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i39, $i40);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32(0, 2);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p29, $mul.ref(0, 256)), $mul.ref(24, 1));
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} up_read($p80);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $p14, $i15 := $p20, $i75;
    goto $bb7;

  $bb22:
    assume $i41 == 1;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i42, $p43 := 0, $p37;
    goto $bb25;

  $bb25:
    call $i44, $p45, $i46, $i47, $p48, $p76, $p77, $i78, $i79, $i42, $p43 := snd_seq_ioctl_query_subs_loop_$bb25($p2, $i39, $i44, $p45, $i46, $i47, $p48, $p76, $p77, $i78, $i79, $i42, $p43);
    goto $bb25_last;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i42, 1);
    call {:si_unique_call 1175} {:cexpr "i"} boogie_si_record_i32($i44);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.7, $p45);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i42, $i46);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $p48 := $p43;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p43, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.7, $p76);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i39, $i78);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i79 == 1);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb34:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i42, $p43 := $i44, $p77;
    goto $bb34_dummy;

  $bb27:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.7, $p49);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i51 == 1);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p48);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref($sub.ref(0, 96), 120));
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p60, $mul.ref($sub.ref(0, 96), 120)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p62);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p64);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_89 := $M.7;
    cmdloc_dummy_var_90 := $M.7;
    call {:si_unique_call 1177} cmdloc_dummy_var_91 := $memcpy.i8(cmdloc_dummy_var_89, cmdloc_dummy_var_90, $p65, $p66, 2, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_91;
    assume {:verifier.code 0} true;
    $p59 := $p61;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p59, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.7, $p68);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(20, 1));
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p70, $i69);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p59, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.7, $p72);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(18, 1));
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p74, $i73);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i75 := 0;
    goto $bb32;

  $bb29:
    assume $i51 == 1;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p48);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref($sub.ref(0, 80), 120));
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p52, $mul.ref($sub.ref(0, 80), 120)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p54);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p56);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_86 := $M.7;
    cmdloc_dummy_var_87 := $M.7;
    call {:si_unique_call 1176} cmdloc_dummy_var_88 := $memcpy.i8(cmdloc_dummy_var_86, cmdloc_dummy_var_87, $p57, $p58, 2, $zext.i32.i64(2), 0 == 1);
    $M.7 := cmdloc_dummy_var_88;
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p59 := $p53;
    goto $bb31;

  $bb13:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i24, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb17;

  $bb18:
    assume $i27 == 1;
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p20, $mul.ref(0, 672)), $mul.ref(104, 1));
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p29 := $p28;
    goto $bb20;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $p14, $i15 := $p20, $sub.i32(0, 6);
    goto $bb7;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $p14, $i15 := $0.ref, $sub.i32(0, 6);
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb34_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6963;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 387681);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} {:cexpr "copy_to_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} might_fault();
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $i3 := _copy_to_user($p0, $p1, $i2);
    call {:si_unique_call 1186} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 388713);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1187} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1188} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1189} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snd_seq_fifo_clear: ref;

axiom snd_seq_fifo_clear == $sub.ref(0, 389745);

procedure snd_seq_fifo_clear($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_fifo_clear($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p9: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} atomic_set($p1, 0);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(104, 1));
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} snd_use_lock_sync_helper($p2, .str.50, 166);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} $p4 := spinlock_check($p3);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 1194} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $p6 := fifo_cell_out($p0);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} spin_unlock_irqrestore($p13, $i5);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $p9 := $p6;
    goto $bb4;

  $bb4:
    call $p10, $i11, $i12, $p9 := snd_seq_fifo_clear_loop_$bb4($p0, $p10, $i11, $i12, $p9);
    goto $bb4_last;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} snd_seq_cell_free($p9);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} $p10 := fifo_cell_out($p0);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $p9 := $p10;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7055;
}



const snd_seq_queue_remove_cells: ref;

axiom snd_seq_queue_remove_cells == $sub.ref(0, 390777);

procedure snd_seq_queue_remove_cells($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_queue_remove_cells($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $p125: ref;
  var $i126: i8;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i32;
  var $p147: ref;
  var $i148: i8;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i164: i32;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $i168: i32;
  var $p169: ref;
  var $i170: i8;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} {:cexpr "snd_seq_queue_remove_cells:arg:client"} boogie_si_record_i32($i0);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $p2 := queueptr(0);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} $i7 := variable_test_bit($i0, $p6);
    call {:si_unique_call 1202} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} atomic_dec($p23);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $p24 := queueptr(1);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $i29 := variable_test_bit($i0, $p28);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p24, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} atomic_dec($p45);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} $p46 := queueptr(2);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p46, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $i51 := variable_test_bit($i0, $p50);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p46, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} atomic_dec($p67);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $p68 := queueptr(3);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p68, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $i73 := variable_test_bit($i0, $p72);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p68, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} atomic_dec($p89);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $p90 := queueptr(4);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i92 := $eq.i64($i91, 0);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p90, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $i95 := variable_test_bit($i0, $p94);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p90, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} atomic_dec($p111);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $p112 := queueptr(5);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i114 := $eq.i64($i113, 0);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p112, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $i117 := variable_test_bit($i0, $p116);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p112, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} atomic_dec($p133);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $p134 := queueptr(6);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p134);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i136 := $eq.i64($i135, 0);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p134, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $i139 := variable_test_bit($i0, $p138);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i139, 0);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p134, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} atomic_dec($p155);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $p156 := queueptr(7);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p156);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i158 := $eq.i64($i157, 0);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p156, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p159);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $i161 := variable_test_bit($i0, $p160);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i161, 0);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p156, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} atomic_dec($p177);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb105:
    assume $i162 == 1;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.7, $p163);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i165 := $and.i32($i164, 4);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 0);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb108, $bb110;

  $bb110:
    assume !($i166 == 1);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p156, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.7, $p167);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.7, $p169);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i170);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i168, $i171);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i172 == 1);
    goto $bb107;

  $bb111:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p156, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.7, $p173);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} snd_seq_prioq_remove_events($p174, $i0, $p1);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p156, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.7, $p175);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} snd_seq_prioq_remove_events($p176, $i0, $p1);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i166 == 1;
    goto $bb109;

  $bb102:
    assume $i158 == 1;
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb91:
    assume $i140 == 1;
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.7, $p141);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i143 := $and.i32($i142, 4);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 0);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb94, $bb96;

  $bb96:
    assume !($i144 == 1);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p134, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.7, $p145);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.7, $p147);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i148);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i146, $i149);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i150 == 1);
    goto $bb93;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p134, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.7, $p151);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} snd_seq_prioq_remove_events($p152, $i0, $p1);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p134, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.7, $p153);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} snd_seq_prioq_remove_events($p154, $i0, $p1);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb95;

  $bb88:
    assume $i136 == 1;
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb77:
    assume $i118 == 1;
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.7, $p119);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i121 := $and.i32($i120, 4);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 0);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb80, $bb82;

  $bb82:
    assume !($i122 == 1);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p112, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.7, $p123);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.7, $p125);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i124, $i127);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb79;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p112, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.7, $p129);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} snd_seq_prioq_remove_events($p130, $i0, $p1);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p112, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.7, $p131);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} snd_seq_prioq_remove_events($p132, $i0, $p1);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb81;

  $bb74:
    assume $i114 == 1;
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb63:
    assume $i96 == 1;
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.7, $p97);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 4);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 0);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb66, $bb68;

  $bb68:
    assume !($i100 == 1);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p90, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.7, $p101);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.7, $p103);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i102, $i105);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb65;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p90, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.7, $p107);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} snd_seq_prioq_remove_events($p108, $i0, $p1);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p90, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.7, $p109);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} snd_seq_prioq_remove_events($p110, $i0, $p1);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb67;

  $bb60:
    assume $i92 == 1;
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb49:
    assume $i74 == 1;
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.7, $p75);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 4);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 0);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb54;

  $bb54:
    assume !($i78 == 1);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p68, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.7, $p79);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.7, $p81);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i80, $i83);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb51;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p68, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.7, $p85);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} snd_seq_prioq_remove_events($p86, $i0, $p1);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p68, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.7, $p87);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} snd_seq_prioq_remove_events($p88, $i0, $p1);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb53;

  $bb46:
    assume $i70 == 1;
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb35:
    assume $i52 == 1;
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.7, $p53);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 4);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb40;

  $bb40:
    assume !($i56 == 1);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p46, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.7, $p57);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.7, $p59);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i58, $i61);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb37;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p46, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.7, $p63);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} snd_seq_prioq_remove_events($p64, $i0, $p1);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p46, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.7, $p65);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} snd_seq_prioq_remove_events($p66, $i0, $p1);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb39;

  $bb32:
    assume $i48 == 1;
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb21:
    assume $i30 == 1;
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.7, $p31);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 4);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume !($i34 == 1);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p24, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.7, $p35);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.7, $p37);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i36, $i39);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb23;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p24, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.7, $p41);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} snd_seq_prioq_remove_events($p42, $i0, $p1);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p24, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.7, $p43);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} snd_seq_prioq_remove_events($p44, $i0, $p1);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb25;

  $bb18:
    assume $i26 == 1;
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.7, $p9);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 4);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i12 == 1);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.7, $p13);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.7, $p15);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, $i17);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.7, $p19);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} snd_seq_prioq_remove_events($p20, $i0, $p1);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.7, $p21);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} snd_seq_prioq_remove_events($p22, $i0, $p1);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const snd_seq_prioq_remove_events: ref;

axiom snd_seq_prioq_remove_events == $sub.ref(0, 391809);

procedure snd_seq_prioq_remove_events($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_prioq_remove_events($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p53: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p62: ref;
  var $p10: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p66: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} {:cexpr "snd_seq_prioq_remove_events:arg:client"} boogie_si_record_i32($i1);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $p4 := spinlock_check($p3);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 1244} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.7, $p6);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} spin_unlock_irqrestore($p63, $i5);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p10);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    return;

  $bb24:
    assume $i65 == 1;
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $p66 := $p10;
    goto $bb27;

  $bb27:
    call $p67, $p68, $i69, $i70, $p66 := snd_seq_prioq_remove_events_loop_$bb27($p67, $p68, $i69, $i70, $p66);
    goto $bb27_last;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.7, $p67);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} snd_seq_cell_free($p66);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i70 == 1);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $p66 := $p68;
    goto $bb29_dummy;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $p11, $p12, $p13, $p14 := $0.ref, $0.ref, $0.ref, $p7;
    goto $bb4;

  $bb4:
    call $p15, $p16, $p19, $i20, $i21, $i22, $p23, $i24, $i25, $p26, $p27, $i28, $i29, $i30, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $i41, $p42, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $i50, $i51, $p53, $p52, $p54, $p55, $p56, $p57, $p58, $p59, $i60, $i61, $p11, $p12, $p13, $p14, $p62 := snd_seq_prioq_remove_events_loop_$bb4($p0, $i1, $p2, $p15, $p16, $p19, $i20, $i21, $i22, $p23, $i24, $i25, $p26, $p27, $i28, $i29, $i30, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $i41, $p42, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $i50, $i51, $p53, $p52, $p54, $p55, $p56, $p57, $p58, $p59, $i60, $i61, $p11, $p12, $p13, $p14, $p62);
    goto $bb4_last;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.7, $p15);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.7, $p19);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, $i1);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $p57, $p58, $p59 := $p14, $p12, $p11;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p16);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $p62 := $p58;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $p10 := $p62;
    goto $bb3;

  $bb21:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $p11, $p12, $p13, $p14 := $p59, $p58, $p57, $p16;
    goto $bb21_dummy;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $i24 := prioq_remove_match($p2, $p23);
    call {:si_unique_call 1246} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $p54, $p55, $p56 := $p14, $p12, $p11;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $p57, $p58, $p59 := $p54, $p55, $p56;
    goto $bb20;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.7, $p26);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p14);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i28, $i29);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.7, $p34);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p13, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p36, $p35);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.7, $p37);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p14);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i39, $i40);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.7, $p45);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32($i46, 1);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p48, $i47);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p49, $0.ref);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p12);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i51 == 1);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p53, $p14);
    assume {:verifier.code 0} true;
    $p52 := $p12;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p54, $p55, $p56 := $p13, $p52, $p14;
    goto $bb19;

  $bb16:
    assume $i51 == 1;
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $p52 := $p14;
    goto $bb18;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.7, $p42);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p44, $p43);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.7, $p31);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p33, $p32);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb29_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7436;

  $bb21_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7360;
}



const prioq_remove_match: ref;

axiom prioq_remove_match == $sub.ref(0, 392841);

procedure prioq_remove_match($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation prioq_remove_match($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i59: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i79: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i1;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.7, $p2);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 4);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.7, $p25);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 8);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.7, $p46);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 32);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.7, $p66);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 16);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.7, $p86);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 128);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.7, $p96);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, 256);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.7, $p104);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 512);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i24 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb55:
    assume $i107 == 1;
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.7, $p108);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i110 := $sext.i8.i32($i109);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(2, 1));
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.7, $p111);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i113 := $sext.i8.i32($i112);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i110, $i113);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb57:
    assume $i114 == 1;
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb8;

  $bb47:
    assume $i99 == 1;
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.7, $p100);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb50:
    assume $i103 == 1;
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb8;

  $bb41:
    assume $i89 == 1;
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.7, $p90);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.7, $p93);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i92, $i94);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb43:
    assume $i95 == 1;
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb8;

  $bb32:
    assume $i69 == 1;
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.7, $p70);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 64);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i73 == 1);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i84 := snd_seq_compare_real_time($p81, $p83);
    call {:si_unique_call 1256} {:cexpr "res"} boogie_si_record_i32($i84);
    assume {:verifier.code 0} true;
    $i79 := $i84;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i79, 0);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i85 == 1;
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb8;

  $bb34:
    assume $i73 == 1;
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $i78 := snd_seq_compare_tick_time($p75, $p77);
    call {:si_unique_call 1254} {:cexpr "res"} boogie_si_record_i32($i78);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i79 := $i78;
    goto $bb36;

  $bb23:
    assume $i49 == 1;
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.7, $p50);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 64);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i53 == 1);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $i64 := snd_seq_compare_real_time($p61, $p63);
    call {:si_unique_call 1252} {:cexpr "res"} boogie_si_record_i32($i64);
    assume {:verifier.code 0} true;
    $i59 := $i64;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i59, 0);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i65 == 1;
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb8;

  $bb25:
    assume $i53 == 1;
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i58 := snd_seq_compare_tick_time($p55, $p57);
    call {:si_unique_call 1250} {:cexpr "res"} boogie_si_record_i32($i58);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb27;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.7, $p29);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i32 := $ule.i32($i31, 4);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i32 == 1);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.7, $p33);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i36 := $ugt.i32($i35, 19);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.7, $p39);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(15, 1));
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.7, $p42);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i41, $i44);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i45 == 1;
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb8;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb14;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.7, $p7);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(13, 1)), $mul.ref(0, 1));
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.7, $p11);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i9, $i13);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(14, 1)), $mul.ref(1, 1));
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.7, $p16);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(13, 1)), $mul.ref(1, 1));
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.7, $p20);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i18, $i22);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb4;
}



const fifo_cell_out: ref;

axiom fifo_cell_out == $sub.ref(0, 393873);

procedure fifo_cell_out($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation fifo_cell_out($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.7, $p1);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.7, $p5);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, $p6);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.7, $p8);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p2);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i10, $i11);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p14, $0.ref);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.7, $p15);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i16, 1);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p18, $i17);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p13, $0.ref);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const snd_seq_port_query_nearest: ref;

axiom snd_seq_port_query_nearest == $sub.ref(0, 394905);

procedure snd_seq_port_query_nearest($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation snd_seq_port_query_nearest($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p25: ref;
  var $p26: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p18: ref;
  var $p19: ref;
  var $p55: ref;
  var $p17: ref;
  var $p33: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.7, $p3);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    call {:si_unique_call 1257} {:cexpr "num"} boogie_si_record_i32($i5);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(144, 1));
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} _raw_read_lock($p6);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.7, $p8);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 80), 672));
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 80), 672)), $mul.ref(80, 1));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(128, 1));
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i13, $i15);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p33 := $p17;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p33);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $p65 := $p33;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(144, 1));
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} _raw_read_unlock($p66);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $r := $p65;
    return;

  $bb23:
    assume $i57 == 1;
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p33);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(640, 1));
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.7, $p59);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i62 == 1);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p33, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} atomic_inc($p64);
    assume {:verifier.code 0} true;
    $p63 := $p33;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p65 := $p63;
    goto $bb28;

  $bb25:
    assume $i62 == 1;
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $p63 := $0.ref;
    goto $bb27;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $p18, $p19 := $0.ref, $p11;
    goto $bb4;

  $bb4:
    call $p21, $i22, $i23, $i24, $p28, $i29, $i30, $i31, $p32, $i34, $i35, $p37, $i38, $i39, $p41, $i42, $i43, $i44, $p45, $p46, $p25, $p26, $p48, $p49, $p50, $p51, $p52, $i53, $i54, $p18, $p19, $p55 := snd_seq_port_query_nearest_loop_$bb4($i5, $i15, $p21, $i22, $i23, $i24, $p28, $i29, $i30, $i31, $p32, $i34, $i35, $p37, $i38, $i39, $p41, $i42, $i43, $i44, $p45, $p46, $p25, $p26, $p48, $p49, $p50, $p51, $p52, $i53, $i54, $p18, $p19, $p55);
    goto $bb4_last;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.7, $p21);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, $i5);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.7, $p28);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, $i5);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $p32 := $p19;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p18);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i35 == 1);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.7, $p37);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.7, $p41);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i39, $i43);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $p45, $p46 := $p19, $p18;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p25, $p26 := $p45, $p46;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 672)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.7, $p48);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref($sub.ref(0, 80), 672));
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p50, $mul.ref($sub.ref(0, 80), 672)), $mul.ref(80, 1));
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, $i15);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $p55 := $p26;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $p17 := $p55;
    goto $bb3;

  $bb20:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $p18, $p19 := $p26, $p51;
    goto $bb20_dummy;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p45, $p46 := $p19, $p19;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb15;

  $bb10:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $p33 := $p32;
    goto $bb12;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $p25, $p26 := $p19, $p18;
    goto $bb8;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7648;
}



const snd_seq_get_port_info: ref;

axiom snd_seq_get_port_info == $sub.ref(0, 395937);

procedure snd_seq_get_port_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_get_port_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i5: i64;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i8;
  var $p69: ref;
  var $i18: i32;
  var vslice_dummy_var_171: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i4);
    call {:si_unique_call 1261} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i7);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1263} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1266} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(2, 1));
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(16, 1));
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} vslice_dummy_var_171 := strlcpy($p20, $p22, 64);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(648, 1));
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.7, $p24);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(68, 1));
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p26, $i25);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(652, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.7, $p27);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(72, 1));
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p29, $i28);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(656, 1));
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.7, $p30);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(76, 1));
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p32, $i31);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(660, 1));
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.7, $p33);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(80, 1));
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p35, $i34);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(664, 1));
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.7, $p36);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(84, 1));
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p38, $i37);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(16, 1));
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.7, $p40);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(88, 1));
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p42, $i41);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(360, 1)), $mul.ref(16, 1));
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.7, $p44);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(92, 1));
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p46, $i45);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(104, 1));
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p47, 0);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p0);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(640, 1));
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.7, $p49);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb11:
    assume $i52 == 1;
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(104, 1));
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.7, $p53);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i54, 2);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(104, 1));
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p56, $i55);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p0);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(640, 1));
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.7, $p58);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(644, 1));
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.7, $p66);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(108, 1));
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p69, $i68);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i61 == 1;
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(104, 1));
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.7, $p62);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i63, 4);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(104, 1));
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p65, $i64);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} warn_slowpath_fmt.ref.i32.ref.ref(.str.78, 434, .str.6, .str.83);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 396969);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1268} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1269} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1270} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const get_client_info: ref;

axiom get_client_info == $sub.ref(0, 398001);

procedure get_client_info($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation get_client_info($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;
  var cmdloc_dummy_var_94: [ref]i8;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;
  var vslice_dummy_var_172: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.7, $p2);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 188)), $mul.ref(0, 1));
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p4, $i3);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(0, 1));
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.7, $p5);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 188)), $mul.ref(4, 1));
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p7, $i6);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 188)), $mul.ref(8, 1));
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(5, 1));
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} vslice_dummy_var_172 := strcpy($p9, $p11);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(76, 1));
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.7, $p13);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 188)), $mul.ref(72, 1));
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p15, $i14);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(116, 1));
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.7, $p16);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 188)), $mul.ref(120, 1));
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p18, $i17);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i64(32, 63);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 188)), $mul.ref(84, 1));
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(80, 1));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_95 := $M.7;
    cmdloc_dummy_var_96 := $M.7;
    call {:si_unique_call 1273} cmdloc_dummy_var_97 := $memcpy.i8(cmdloc_dummy_var_95, cmdloc_dummy_var_96, $p25, $p27, 32, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_97;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(120, 1));
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.7, $p28);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 188)), $mul.ref(116, 1));
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p30, $i29);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 188)), $mul.ref(124, 1));
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_98 := $M.7;
    call {:si_unique_call 1274} cmdloc_dummy_var_99 := $memset.i8(cmdloc_dummy_var_98, $p32, 0, 64, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_99;
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 188)), $mul.ref(84, 1));
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(80, 1));
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_92 := $M.7;
    cmdloc_dummy_var_93 := $M.7;
    call {:si_unique_call 1272} cmdloc_dummy_var_94 := $memcpy.i8(cmdloc_dummy_var_92, cmdloc_dummy_var_93, $p21, $p23, 32, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_94;
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_seq_port_get_subscription: ref;

axiom snd_seq_port_get_subscription == $sub.ref(0, 399033);

procedure snd_seq_port_get_subscription($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation snd_seq_port_get_subscription($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p13: ref;
  var $p19: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(24, 1));
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} down_read($p2);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.7, $p4);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 80), 120));
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 80), 120)), $mul.ref(80, 1));
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i9, $i11);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(24, 1));
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} up_read($p28);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $r := $p19;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $p13 := $p7;
    goto $bb4;

  $bb4:
    call $p15, $i16, $i17, $p18, $p21, $p22, $p23, $p24, $p25, $i26, $i27, $p13 := snd_seq_port_get_subscription_loop_$bb4($p1, $i11, $p15, $i16, $i17, $p18, $p21, $p22, $p23, $p24, $p25, $i26, $i27, $p13);
    goto $bb4_last;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $i16 := addr_match($p1, $p15);
    call {:si_unique_call 1277} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $p18 := $p13;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 120)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.7, $p21);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref($sub.ref(0, 80), 120));
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p23, $mul.ref($sub.ref(0, 80), 120)), $mul.ref(80, 1));
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, $i11);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $p13 := $p24;
    goto $bb10_dummy;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $p19 := $p18;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7869;
}



const addr_match: ref;

axiom addr_match == $sub.ref(0, 400065);

procedure addr_match($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation addr_match($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i9: i1;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.7, $p2);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.7, $p5);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, $i7);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i9);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.7, $p10);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.7, $p13);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i12, $i15);
    assume {:verifier.code 0} true;
    $i9 := $i16;
    goto $bb3;
}



const snd_seq_queue_client_leave_cells: ref;

axiom snd_seq_queue_client_leave_cells == $sub.ref(0, 401097);

procedure snd_seq_queue_client_leave_cells($i0: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_queue_client_leave_cells($i0: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} {:cexpr "snd_seq_queue_client_leave_cells:arg:client"} boogie_si_record_i32($i0);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $p1 := queueptr(0);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.7, $p4);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} snd_seq_prioq_leave($p5, $i0, 0);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.7, $p6);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} snd_seq_prioq_leave($p7, $i0, 0);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} atomic_dec($p8);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $p9 := queueptr(1);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.7, $p12);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} snd_seq_prioq_leave($p13, $i0, 0);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.7, $p14);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} snd_seq_prioq_leave($p15, $i0, 0);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} atomic_dec($p16);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $p17 := queueptr(2);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.7, $p20);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} snd_seq_prioq_leave($p21, $i0, 0);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p17, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.7, $p22);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} snd_seq_prioq_leave($p23, $i0, 0);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p17, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} atomic_dec($p24);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $p25 := queueptr(3);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p25, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.7, $p28);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} snd_seq_prioq_leave($p29, $i0, 0);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p25, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.7, $p30);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} snd_seq_prioq_leave($p31, $i0, 0);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p25, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} atomic_dec($p32);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $p33 := queueptr(4);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p33, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.7, $p36);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} snd_seq_prioq_leave($p37, $i0, 0);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p33, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.7, $p38);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} snd_seq_prioq_leave($p39, $i0, 0);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p33, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} atomic_dec($p40);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $p41 := queueptr(5);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p41, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.7, $p44);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} snd_seq_prioq_leave($p45, $i0, 0);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p41, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.7, $p46);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} snd_seq_prioq_leave($p47, $i0, 0);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p41, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} atomic_dec($p48);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $p49 := queueptr(6);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p49, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.7, $p52);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} snd_seq_prioq_leave($p53, $i0, 0);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p49, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.7, $p54);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} snd_seq_prioq_leave($p55, $i0, 0);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p49, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} atomic_dec($p56);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $p57 := queueptr(7);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p57, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.7, $p60);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} snd_seq_prioq_leave($p61, $i0, 0);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p57, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.7, $p62);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} snd_seq_prioq_leave($p63, $i0, 0);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p57, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} atomic_dec($p64);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb39:
    assume $i59 == 1;
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb34:
    assume $i51 == 1;
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i43 == 1;
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume $i35 == 1;
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume $i27 == 1;
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb3:
    assume $i3 == 1;
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const snd_seq_pool_init: ref;

axiom snd_seq_pool_init == $sub.ref(0, 402129);

procedure snd_seq_pool_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_pool_init($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i37: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 1312} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1314} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1317} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.7, $p15);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.7, $p19);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i22 := $mul.i64($i21, 48);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $p23 := vmalloc($i22);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p25, $p23);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.7, $p26);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $p31 := spinlock_check($p30);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $i32 := _raw_spin_lock_irqsave($p31);
    call {:si_unique_call 1322} {:cexpr "flags"} boogie_si_record_i64($i32);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p33, $0.ref);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.7, $p34);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, 0);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.7, $p50);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 1);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i53 := $sdiv.i32($i52, 2);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(28, 1));
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p54, $i53);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(36, 1));
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p55, 0);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.7, $p56);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p58, $i57);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} spin_unlock_irqrestore($p59, $i32);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb17;

  $bb17:
    call $p38, $p39, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $i48, $i49, $i37 := snd_seq_pool_init_loop_$bb17($p0, $p34, $p38, $p39, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $i48, $i49, $i37);
    goto $bb17_last;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.7, $p38);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i37);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p39, $mul.ref($i40, 48));
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p39, $mul.ref($i40, 48)), $mul.ref(32, 1));
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p42, $p0);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.7, $p43);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p39, $mul.ref($i40, 48)), $mul.ref(40, 1));
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p45, $p44);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p46, $p41);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i37, 1);
    call {:si_unique_call 1323} {:cexpr "cell"} boogie_si_record_i32($i47);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.7, $p34);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i48, $i47);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i49 == 1);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb19:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i37 := $i47;
    goto $bb19_dummy;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} __snd_printk.i32.ref.i32.ref(1, .str.22, 454, .str.24);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb6;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} warn_slowpath_fmt.ref.i32.ref.ref(.str.22, 447, .str.6, .str.23);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8090;
}



const snd_seq_fifo_resize: ref;

axiom snd_seq_fifo_resize == $sub.ref(0, 403161);

procedure snd_seq_fifo_resize($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation snd_seq_fifo_resize($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i6: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p46: ref;
  var $i22: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1327} {:cexpr "snd_seq_fifo_resize:arg:poolsize"} boogie_si_record_i32($i1);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.7, $p7);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $i6 := $i10;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i6);
    call {:si_unique_call 1328} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 1330} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1333} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} $p23 := snd_seq_pool_new($i1);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p2, $p23);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.7, $p2);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.7, $p2);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $i28 := snd_seq_pool_init($p27);
    call {:si_unique_call 1336} {:cexpr "tmp___1"} boogie_si_record_i32($i28);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $p32 := spinlock_check($p31);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $i33 := _raw_spin_lock_irqsave($p32);
    call {:si_unique_call 1340} {:cexpr "flags"} boogie_si_record_i64($i33);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.7, $p34);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p3, $p35);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.7, $p36);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.7, $p2);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p39, $p38);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p40, $0.ref);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p41, $0.ref);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p42, 0);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} spin_unlock_irqrestore($p43, $i33);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p37);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} vslice_dummy_var_174 := snd_seq_pool_delete($p3);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $p46 := $p37;
    goto $bb20;

  $bb20:
    call $p47, $p48, $i49, $i50, $p46 := snd_seq_fifo_resize_loop_$bb20($p47, $p48, $i49, $i50, $p46);
    goto $bb20_last;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.7, $p47);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} snd_seq_cell_free($p46);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i50 == 1);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb22:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $p46 := $p48;
    goto $bb22_dummy;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} vslice_dummy_var_173 := snd_seq_pool_delete($p2);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb9;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb9;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} warn_slowpath_fmt.ref.i32.ref.ref(.str.50, 303, .str.6, .str.56);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb22_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8195;
}



const vmalloc: ref;

axiom vmalloc == $sub.ref(0, 404193);

procedure vmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} {:cexpr "vmalloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $p1 := external_alloc();
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const snd_seq_unused_cells: ref;

axiom snd_seq_unused_cells == $sub.ref(0, 405225);

procedure snd_seq_unused_cells($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_seq_unused_cells($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(20, 1));
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $i4 := atomic_read($p3);
    call {:si_unique_call 1347} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.7, $p5);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, $i4);
    call {:si_unique_call 1348} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const snd_seq_queue_is_used: ref;

axiom snd_seq_queue_is_used == $sub.ref(0, 406257);

procedure snd_seq_queue_is_used($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_seq_queue_is_used($i0: i32, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} {:cexpr "snd_seq_queue_is_used:arg:queueid"} boogie_si_record_i32($i0);
    call {:si_unique_call 1350} {:cexpr "snd_seq_queue_is_used:arg:client"} boogie_si_record_i32($i1);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} $p2 := queueptr($i0);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} $i8 := variable_test_bit($i1, $p7);
    call {:si_unique_call 1353} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 1354} {:cexpr "result"} boogie_si_record_i32($i10);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} atomic_dec($p11);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const snd_seq_queue_check_access: ref;

axiom snd_seq_queue_check_access == $sub.ref(0, 407289);

procedure snd_seq_queue_check_access($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_seq_queue_check_access($i0: i32, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} {:cexpr "snd_seq_queue_check_access:arg:queueid"} boogie_si_record_i32($i0);
    call {:si_unique_call 1357} {:cexpr "snd_seq_queue_check_access:arg:client"} boogie_si_record_i32($i1);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $p2 := queueptr($i0);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $p7 := spinlock_check($p6);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 1361} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $i9 := check_access($p2, $i1);
    call {:si_unique_call 1363} {:cexpr "access_ok"} boogie_si_record_i32($i9);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} spin_unlock_irqrestore($p10, $i8);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} atomic_dec($p11);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const ldv_mutex_lock_interruptible_41: ref;

axiom ldv_mutex_lock_interruptible_41 == $sub.ref(0, 408321);

procedure ldv_mutex_lock_interruptible_41($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_lock_interruptible_41($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1367} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i2 := ldv_mutex_lock_interruptible_timer_mutex($p0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 1369} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const snd_seq_queue_timer_close: ref;

axiom snd_seq_queue_timer_close == $sub.ref(0, 409353);

procedure snd_seq_queue_timer_close($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_queue_timer_close($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p6: ref;
  var $i4: i32;
  var vslice_dummy_var_175: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} {:cexpr "snd_seq_queue_timer_close:arg:queueid"} boogie_si_record_i32($i0);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} $p1 := queueptr($i0);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} vslice_dummy_var_175 := snd_seq_timer_close($p1);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} atomic_dec($p6);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const snd_seq_queue_timer_open: ref;

axiom snd_seq_queue_timer_open == $sub.ref(0, 410385);

procedure snd_seq_queue_timer_open($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.33, $CurrAddr;



implementation snd_seq_queue_timer_open($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} {:cexpr "snd_seq_queue_timer_open:arg:queueid"} boogie_si_record_i32($i0);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $p1 := queueptr($i0);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.7, $p5);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $i7 := snd_seq_timer_open($p1);
    call {:si_unique_call 1377} {:cexpr "result"} boogie_si_record_i32($i7);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i7;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} atomic_dec($p11);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i4 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} snd_seq_timer_defaults($p6);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $i9 := snd_seq_timer_open($p1);
    call {:si_unique_call 1380} {:cexpr "result"} boogie_si_record_i32($i9);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const ldv_mutex_unlock_42: ref;

axiom ldv_mutex_unlock_42 == $sub.ref(0, 411417);

procedure ldv_mutex_unlock_42($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_unlock_42($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} ldv_mutex_unlock_timer_mutex($p0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} mutex_unlock($p0);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_timer_mutex: ref;

axiom ldv_mutex_lock_interruptible_timer_mutex == $sub.ref(0, 412449);

procedure ldv_mutex_lock_interruptible_timer_mutex($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_lock_interruptible_timer_mutex($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} ldv_error();
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1385} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1386} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1387} {:cexpr "nondetermined"} boogie_si_record_i32($i3);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 4);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $M.6 := 2;
    call {:si_unique_call 1388} {:cexpr "ldv_mutex_timer_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_interruptible_39: ref;

axiom ldv_mutex_lock_interruptible_39 == $sub.ref(0, 413481);

procedure ldv_mutex_lock_interruptible_39($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_lock_interruptible_39($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1390} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $i2 := ldv_mutex_lock_interruptible_timer_mutex($p0);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 1392} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_40: ref;

axiom ldv_mutex_unlock_40 == $sub.ref(0, 414513);

procedure ldv_mutex_unlock_40($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_unlock_40($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} ldv_mutex_unlock_timer_mutex($p0);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} mutex_unlock($p0);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const snd_seq_set_queue_tempo: ref;

axiom snd_seq_set_queue_tempo == $sub.ref(0, 415545);

procedure snd_seq_set_queue_tempo($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_set_queue_tempo($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} {:cexpr "snd_seq_set_queue_tempo:arg:client"} boogie_si_record_i32($i0);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.7, $p2);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $i4 := snd_seq_queue_check_access($i3, $i0);
    call {:si_unique_call 1397} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.7, $p7);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $i9 := snd_seq_queue_timer_set_tempo($i8, $i0, $p1);
    call {:si_unique_call 1399} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;
}



const snd_seq_queue_timer_set_tempo: ref;

axiom snd_seq_queue_timer_set_tempo == $sub.ref(0, 416577);

procedure snd_seq_queue_timer_set_tempo($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_queue_timer_set_tempo($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} {:cexpr "snd_seq_queue_timer_set_tempo:arg:queueid"} boogie_si_record_i32($i0);
    call {:si_unique_call 1401} {:cexpr "snd_seq_queue_timer_set_tempo:arg:client"} boogie_si_record_i32($i1);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $p3 := queueptr($i0);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $i7 := queue_access_lock($p3, $i1);
    call {:si_unique_call 1404} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.7, $p10);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.7, $p12);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} $i14 := snd_seq_timer_set_tempo($p11, $i13);
    call {:si_unique_call 1407} {:cexpr "result"} boogie_si_record_i32($i14);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i15 := $sge.i32($i14, 0);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i21 := $i14;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i22 := $sge.i32($i21, 0);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i33 := $i21;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} queue_access_unlock($p3);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} atomic_dec($p34);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $i6 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.7, $p23);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb13;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.7, $p26);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.7, $p28);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.7, $p30);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $i32 := snd_seq_timer_set_skew($p27, $i29, $i31);
    call {:si_unique_call 1411} {:cexpr "result"} boogie_si_record_i32($i32);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb16;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.7, $p16);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.7, $p18);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $i20 := snd_seq_timer_set_ppq($p17, $i19);
    call {:si_unique_call 1409} {:cexpr "result"} boogie_si_record_i32($i20);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb10;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} atomic_dec($p9);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const snd_seq_timer_set_ppq: ref;

axiom snd_seq_timer_set_ppq == $sub.ref(0, 417609);

procedure snd_seq_timer_set_ppq($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_timer_set_ppq($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} {:cexpr "snd_seq_timer_set_ppq:arg:ppq"} boogie_si_record_i32($i1);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 1415} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i4);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1417} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i4, 0);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1420} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $sle.i32($i1, 0);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $p18 := spinlock_check($p17);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $i19 := _raw_spin_lock_irqsave($p18);
    call {:si_unique_call 1423} {:cexpr "flags"} boogie_si_record_i64($i19);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p0);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(0, 1));
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.7, $p21);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p29, $i1);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} snd_seq_timer_set_tick_resolution($p0);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} spin_unlock_irqrestore($p30, $i19);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.7, $p25);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, $i1);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb13;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} spin_unlock_irqrestore($p28, $i19);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} __snd_printk.i32.ref.i32.ref(1, .str.63, 265, .str.68);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 16);
    goto $bb6;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} warn_slowpath_fmt.ref.i32.ref.ref(.str.63, 256, .str.6, .str.67);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_seq_queue_find_name: ref;

axiom snd_seq_queue_find_name == $sub.ref(0, 418641);

procedure snd_seq_queue_find_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation snd_seq_queue_find_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $p1 := queueptr(0);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} $p11 := queueptr(1);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $p19 := queueptr(2);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} $p27 := queueptr(3);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $p35 := queueptr(4);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} $p43 := queueptr(5);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $p51 := queueptr(6);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $p59 := queueptr(7);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb55:
    assume $i61 == 1;
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p59, $mul.ref(0, 464)), $mul.ref(4, 1));
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} $i64 := strncmp($p63, $p0, 64);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $p8 := $p59;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p59, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} atomic_dec($p66);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $p9 := $p8;
    goto $bb8;

  $bb48:
    assume $i53 == 1;
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p51, $mul.ref(0, 464)), $mul.ref(4, 1));
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $i56 := strncmp($p55, $p0, 64);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $p8 := $p51;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p51, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} atomic_dec($p58);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb6;

  $bb41:
    assume $i45 == 1;
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p43, $mul.ref(0, 464)), $mul.ref(4, 1));
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $i48 := strncmp($p47, $p0, 64);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $p8 := $p43;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p43, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} atomic_dec($p50);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb6;

  $bb34:
    assume $i37 == 1;
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref(0, 464)), $mul.ref(4, 1));
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} $i40 := strncmp($p39, $p0, 64);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $p8 := $p35;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p35, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} atomic_dec($p42);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb6;

  $bb27:
    assume $i29 == 1;
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p27, $mul.ref(0, 464)), $mul.ref(4, 1));
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} $i32 := strncmp($p31, $p0, 64);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $p8 := $p27;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p27, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} atomic_dec($p34);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb6;

  $bb20:
    assume $i21 == 1;
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref(0, 464)), $mul.ref(4, 1));
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $i24 := strncmp($p23, $p0, 64);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $p8 := $p19;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p19, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} atomic_dec($p26);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb6;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(4, 1));
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} $i16 := strncmp($p15, $p0, 64);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p8 := $p11;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} atomic_dec($p18);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb6;

  $bb3:
    assume $i3 == 1;
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(4, 1));
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $i6 := strncmp($p5, $p0, 64);
    call {:si_unique_call 1430} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $p8 := $p1;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} atomic_dec($p10);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb6;
}



const strncmp: ref;

axiom strncmp == $sub.ref(0, 419673);

procedure strncmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const snd_seq_queue_set_owner: ref;

axiom snd_seq_queue_set_owner == $sub.ref(0, 420705);

procedure snd_seq_queue_set_owner($i0: i32, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_queue_set_owner($i0: i32, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i1;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i8;
  var $i15: i8;
  var $i16: i8;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} {:cexpr "snd_seq_queue_set_owner:arg:queueid"} boogie_si_record_i32($i0);
    call {:si_unique_call 1454} {:cexpr "snd_seq_queue_set_owner:arg:client"} boogie_si_record_i32($i1);
    call {:si_unique_call 1455} {:cexpr "snd_seq_queue_set_owner:arg:locked"} boogie_si_record_i32($i2);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} $p3 := queueptr($i0);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} $i7 := queue_access_lock($p3, $i1);
    call {:si_unique_call 1458} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i2, 0);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.7, $p13);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i12, 1);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i16 := $and.i8($i14, $sub.i8(0, 2));
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i17 := $or.i8($i16, $i15);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p13, $i17);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p18, $i1);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} queue_access_unlock($p3);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} atomic_dec($p19);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} atomic_dec($p9);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const snd_seq_queue_delete: ref;

axiom snd_seq_queue_delete == $sub.ref(0, 421737);

procedure snd_seq_queue_delete($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.23, $M.26;



implementation snd_seq_queue_delete($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} {:cexpr "snd_seq_queue_delete:arg:client"} boogie_si_record_i32($i0);
    call {:si_unique_call 1463} {:cexpr "snd_seq_queue_delete:arg:queueid"} boogie_si_record_i32($i1);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i1, 7);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $p5 := queue_list_remove($i1, $i0);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} queue_delete($p5);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const snd_seq_queue_alloc: ref;

axiom snd_seq_queue_alloc == $sub.ref(0, 422769);

procedure snd_seq_queue_alloc($i0: i32, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.23, $M.26, $M.33, $M.6, $CurrAddr, assertsPassed;



implementation snd_seq_queue_alloc($i0: i32, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $i6: i32;
  var vslice_dummy_var_176: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} {:cexpr "snd_seq_queue_alloc:arg:client"} boogie_si_record_i32($i0);
    call {:si_unique_call 1467} {:cexpr "snd_seq_queue_alloc:arg:locked"} boogie_si_record_i32($i1);
    call {:si_unique_call 1468} {:cexpr "snd_seq_queue_alloc:arg:info_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $p3 := queue_new($i0, $i1);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(108, 1));
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p7, $i2);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} $i8 := queue_list_add($p3);
    call {:si_unique_call 1471} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.7, $p10);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} vslice_dummy_var_176 := snd_seq_queue_use($i11, $i0, 1);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.7, $p13);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} queue_delete($p3);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 423801);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



const queue_new: ref;

axiom queue_new == $sub.ref(0, 424833);

procedure queue_new($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation queue_new($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $p47: ref;
  var $i48: i8;
  var $i49: i8;
  var $i50: i8;
  var $i51: i8;
  var $p52: ref;
  var $i53: i8;
  var $i54: i8;
  var $p9: ref;
  var vslice_dummy_var_177: ref;
  var vslice_dummy_var_178: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1477} {:cexpr "queue_new:arg:owner"} boogie_si_record_i32($i0);
    call {:si_unique_call 1478} {:cexpr "queue_new:arg:locked"} boogie_si_record_i32($i1);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $p5 := kzalloc(464, 208);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} vslice_dummy_var_177 := spinlock_check($p10);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} __raw_spin_lock_init($p14, .str.111, $p2);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} vslice_dummy_var_178 := spinlock_check($p15);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} __raw_spin_lock_init($p19, .str.112, $p3);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(288, 1));
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} __mutex_init($p20, .str.113, $p4);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} atomic_set($p21, 0);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p22, $sub.i32(0, 1));
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $p23 := snd_seq_prioq_new();
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p24, $p23);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $p25 := snd_seq_prioq_new();
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p26, $p25);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $p27 := snd_seq_timer_new();
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p28, $p27);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.7, $p29);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i32 == 1);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.7, $p33);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.7, $p37);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p45, $i0);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i1);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.7, $p47);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $i49 := $and.i8($i46, 1);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $i50 := $and.i8($i48, $sub.i8(0, 2));
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $i51 := $or.i8($i50, $i49);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p47, $i51);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.7, $p52);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i54 := $and.i8($i53, $sub.i8(0, 3));
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p52, $i54);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $p9 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} snd_seq_prioq_delete($p41);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} snd_seq_prioq_delete($p42);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} snd_seq_timer_delete($p43);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p6);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} kfree($p44);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} __snd_printk.i32.ref.i32.ref(1, .str.34, 178, .str.110);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;
}



const queue_list_add: ref;

axiom queue_list_add == $sub.ref(0, 425865);

procedure queue_list_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.7, $M.26;



implementation queue_list_add($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $p1 := spinlock_check(queue_list_lock);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} $i2 := _raw_spin_lock_irqsave($p1);
    call {:si_unique_call 1496} {:cexpr "flags"} boogie_si_record_i64($i2);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.23, queue_list);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.23, $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref(1, 8)));
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.23, $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref(2, 8)));
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i6 := 2;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.23, $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref(3, 8)));
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i6 := 3;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.23, $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref(4, 8)));
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $i6 := 4;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.23, $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref(5, 8)));
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $i6 := 5;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.23, $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref(6, 8)));
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i6 := 6;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.23, $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref(7, 8)));
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i6 := 7;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} spin_unlock_irqrestore(queue_list_lock, $i2);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref($i7, 8));
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p8, $p0);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p9, $i6);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i10 := $M.26;
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $M.26 := $i11;
    call {:si_unique_call 1497} {:cexpr "num_queues"} boogie_si_record_i32($i11);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} spin_unlock_irqrestore(queue_list_lock, $i2);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i12 := $i6;
    goto $bb6;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb4;
}



const snd_seq_prioq_new: ref;

axiom snd_seq_prioq_new == $sub.ref(0, 426897);

procedure snd_seq_prioq_new() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation snd_seq_prioq_new() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p5: ref;
  var vslice_dummy_var_179: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} $p1 := kzalloc(96, 208);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} vslice_dummy_var_179 := spinlock_check($p6);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} __raw_spin_lock_init($p10, .str.52, $p0);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p11, $0.ref);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p12, $0.ref);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p13, 0);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} __snd_printk.i32.ref.i32.ref(1, .str.57, 126, .str.58);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const snd_seq_timer_new: ref;

axiom snd_seq_timer_new == $sub.ref(0, 427929);

procedure snd_seq_timer_new() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation snd_seq_timer_new() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var $p5: ref;
  var vslice_dummy_var_180: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} $p1 := kzalloc(200, 208);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(128, 1));
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} vslice_dummy_var_180 := spinlock_check($p6);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} __raw_spin_lock_init($p10, .str.65, $p0);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} snd_seq_timer_defaults($p2);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} snd_seq_timer_reset($p2);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} __snd_printk.i32.ref.i32.ref(1, .str.63, 123, .str.64);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const check_subscription_permission: ref;

axiom check_subscription_permission == $sub.ref(0, 428961);

procedure check_subscription_permission($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation check_subscription_permission($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.7, $p4);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.7, $p7);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i5, $i9);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.7, $p23);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.7, $p26);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i24, $i28);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.7, $p32);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(2, 1)), $mul.ref(0, 1));
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.7, $p35);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i33, $i37);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $i39 := check_port_perm($p2, 66);
    call {:si_unique_call 1519} {:cexpr "tmp___2"} boogie_si_record_i32($i39);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i40 == 1;
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 1);
    goto $bb8;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $i30 := check_port_perm($p1, 33);
    call {:si_unique_call 1517} {:cexpr "tmp___1"} boogie_si_record_i32($i30);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i31 == 1;
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 1);
    goto $bb8;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.7, $p11);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(2, 1)), $mul.ref(0, 1));
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.7, $p14);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i12, $i16);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $i18 := check_port_perm($p1, 128);
    call {:si_unique_call 1513} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $i21 := check_port_perm($p2, 128);
    call {:si_unique_call 1515} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 1);
    goto $bb8;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 1);
    goto $bb8;
}



const snd_seq_port_disconnect: ref;

axiom snd_seq_port_disconnect == $sub.ref(0, 429993);

procedure snd_seq_port_disconnect($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.41, $M.13, $M.15, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $CurrAddr, $M.3, assertsPassed, $M.37, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_port_disconnect($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i8;
  var $i33: i8;
  var $i34: i8;
  var $p35: ref;
  var $i36: i8;
  var $i37: i8;
  var $i38: i8;
  var $i39: i8;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $p54: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p20: ref;
  var $i55: i32;
  var $p64: ref;
  var $p65: ref;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1));
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 672)), $mul.ref(360, 1));
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(24, 1));
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} down_write($p8);
    $p9 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 672)), $mul.ref(360, 1)), $mul.ref(24, 1));
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} down_write_nested($p9, 1);
    $p11 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.7, $p11);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 80), 120));
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p13, $mul.ref($sub.ref(0, 80), 120)), $mul.ref(80, 1));
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i16, $i18);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 2);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 672)), $mul.ref(360, 1)), $mul.ref(24, 1));
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} up_write($p64);
    $p65 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(24, 1));
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} up_write($p65);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $p20 := $p14;
    goto $bb4;

  $bb4:
    call $p21, $i22, $i23, $p24, $p57, $p58, $p59, $p60, $p61, $i62, $i63, $p20 := snd_seq_port_disconnect_loop_$bb4($p5, $i18, $p21, $i22, $i23, $p24, $p57, $p58, $p59, $p60, $p61, $i62, $i63, $p20);
    goto $bb4_last;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $i22 := match_subs_info($p5, $p21);
    call {:si_unique_call 1523} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $p24 := $p20;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 120)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.7, $p57);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p59, $mul.ref($sub.ref(0, 80), 120));
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p59, $mul.ref($sub.ref(0, 80), 120)), $mul.ref(80, 1));
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, $i18);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i63 == 1);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $p20 := $p60;
    goto $bb10_dummy;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(168, 1));
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} $i26 := _raw_write_lock_irqsave($p25);
    call {:si_unique_call 1525} {:cexpr "flags"} boogie_si_record_i64($i26);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref(0, 120)), $mul.ref(80, 1));
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} list_del($p27);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p24, $mul.ref(0, 120)), $mul.ref(96, 1));
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} list_del($p28);
    $p29 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(168, 1));
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} _raw_write_unlock_irqrestore($p29, $i26);
    $p30 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 672)), $mul.ref(360, 1)), $mul.ref(20, 1));
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.7, $p30);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $i32 := $and.i8(0, 1);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $i33 := $and.i8($i31, $sub.i8(0, 2));
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $i34 := $or.i8($i33, $i32);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p30, $i34);
    $p35 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(20, 1));
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.7, $p35);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i37 := $and.i8(0, 1);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $i38 := $and.i8($i36, $sub.i8(0, 2));
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i39 := $or.i8($i38, $i37);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p35, $i39);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.7, $p40);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.7, $p42);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i41, $i43);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i44);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} vslice_dummy_var_181 := unsubscribe_port($p1, $p2, $p6, $p5, $i45);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.7, $p47);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.7, $p49);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i48, $i50);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} vslice_dummy_var_182 := unsubscribe_port($p3, $p4, $p7, $p5, $i52);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p24);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} kfree($p54);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb8;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8864;
}



const down_write_nested: ref;

axiom down_write_nested == $sub.ref(0, 431025);

procedure down_write_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation down_write_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} {:cexpr "down_write_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    return;
}



const match_subs_info: ref;

axiom match_subs_info == $sub.ref(0, 432057);

procedure match_subs_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation match_subs_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} $i4 := addr_match($p2, $p3);
    call {:si_unique_call 1536} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(2, 1));
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(2, 1));
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} $i8 := addr_match($p6, $p7);
    call {:si_unique_call 1538} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.7, $p10);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.7, $p27);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.7, $p13);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.7, $p15);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i14, $i16);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.7, $p18);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.7, $p21);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i20, $i23);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb10;
}



const snd_seq_port_connect: ref;

axiom snd_seq_port_connect == $sub.ref(0, 433089);

procedure snd_seq_port_connect($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.41, $M.13, $M.15, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $CurrAddr, $M.3, assertsPassed, $M.37, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_port_connect($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p51: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p73: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i64;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $p109: ref;
  var $i110: i8;
  var $i111: i8;
  var $i112: i8;
  var $i113: i8;
  var $p114: ref;
  var $i115: i8;
  var $i116: i8;
  var $i117: i8;
  var $i118: i8;
  var $p119: ref;
  var $p120: ref;
  var $i26: i32;
  var $i27: i32;
  var $i121: i1;
  var $p122: ref;
  var $i123: i32;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i12: i32;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;
  var vslice_dummy_var_183: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1));
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 672)), $mul.ref(360, 1));
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} $p8 := kzalloc(120, 208);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p5);
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_100 := $M.7;
    cmdloc_dummy_var_101 := $M.7;
    call {:si_unique_call 1540} cmdloc_dummy_var_102 := $memcpy.i8(cmdloc_dummy_var_100, cmdloc_dummy_var_101, $p14, $p15, 80, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_102;
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} atomic_set($p16, 2);
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(24, 1));
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} down_write($p17);
    $p18 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 672)), $mul.ref(360, 1)), $mul.ref(24, 1));
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} down_write_nested($p18, 1);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.7, $p19);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 1);
    call {:si_unique_call 1544} {:cexpr "exclusive"} boogie_si_record_i32($i21);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.7, $p85);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.7, $p87);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i86, $i88);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $i90 := $zext.i1.i32($i89);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} $i91 := subscribe_port($p1, $p2, $p6, $p5, $i90);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    call {:si_unique_call 1554} {:cexpr "err"} boogie_si_record_i32($i91);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i91, 0);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.7, $p93);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.7, $p95);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i94, $i96);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $i98 := $zext.i1.i32($i97);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} $i99 := subscribe_port($p3, $p4, $p7, $p5, $i98);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 1556} {:cexpr "err"} boogie_si_record_i32($i99);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i99, 0);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    $p101 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(168, 1));
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $i102 := _raw_write_lock_irqsave($p101);
    call {:si_unique_call 1558} {:cexpr "flags"} boogie_si_record_i64($i102);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(80, 1));
    $p104 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} list_add_tail($p103, $p104);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(96, 1));
    $p106 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 672)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} list_add_tail($p105, $p106);
    $p107 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(168, 1));
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} _raw_write_unlock_irqrestore($p107, $i102);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i21);
    call {:si_unique_call 1562} {:cexpr "tmp___4"} boogie_si_record_i8($i108);
    $p109 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 672)), $mul.ref(360, 1)), $mul.ref(20, 1));
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.7, $p109);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $i111 := $and.i8($i108, 1);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $i112 := $and.i8($i110, $sub.i8(0, 2));
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $i113 := $or.i8($i112, $i111);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p109, $i113);
    $p114 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(20, 1));
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.7, $p114);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $i116 := $and.i8($i108, 1);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $i117 := $and.i8($i115, $sub.i8(0, 2));
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $i118 := $or.i8($i117, $i116);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p114, $i118);
    $p119 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 672)), $mul.ref(360, 1)), $mul.ref(24, 1));
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} up_write($p119);
    $p120 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(24, 1));
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} up_write($p120);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb46:
    assume $i100 == 1;
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $i26, $i27 := $i99, 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i27, 0);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p9);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} kfree($p129);
    $p130 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 672)), $mul.ref(360, 1)), $mul.ref(24, 1));
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} up_write($p130);
    $p131 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(24, 1));
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} up_write($p131);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $i12 := $i26;
    goto $bb3;

  $bb49:
    assume $i121 == 1;
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.7, $p122);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p1, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.7, $p124);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i123, $i125);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $i127 := $zext.i1.i32($i126);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} vslice_dummy_var_183 := unsubscribe_port($p1, $p2, $p6, $p5, $i127);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i92 == 1;
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $i26, $i27 := $i91, 0;
    goto $bb9;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i22 == 1;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} $i24 := list_empty($p23);
    call {:si_unique_call 1546} {:cexpr "tmp___2"} boogie_si_record_i32($i24);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    $p28 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 672)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} $i29 := list_empty($p28);
    call {:si_unique_call 1548} {:cexpr "tmp___3"} boogie_si_record_i32($i29);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p6);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(20, 1));
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.7, $p32);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i35 == 1);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p7);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref(20, 1));
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.7, $p37);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $p42 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.7, $p42);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref($sub.ref(0, 80), 120));
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p44, $mul.ref($sub.ref(0, 80), 120)), $mul.ref(80, 1));
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    $p48 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 672)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i47, $i49);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    $p64 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 672)), $mul.ref(360, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.7, $p64);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref($sub.ref(0, 96), 120));
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p66, $mul.ref($sub.ref(0, 96), 120)), $mul.ref(96, 1));
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    $p70 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 672)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i69, $i71);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb29:
    assume $i72 == 1;
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    $p73 := $p67;
    goto $bb32;

  $bb32:
    call $p74, $i75, $i76, $p78, $p79, $p80, $p81, $p82, $i83, $i84, $p73 := snd_seq_port_connect_loop_$bb32($p5, $i71, $p74, $i75, $i76, $p78, $p79, $p80, $p81, $p82, $i83, $i84, $p73);
    goto $bb32_last;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} $i75 := match_subs_info($p5, $p74);
    call {:si_unique_call 1552} {:cexpr "tmp___1"} boogie_si_record_i32($i75);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p73, $mul.ref(0, 120)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.7, $p78);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p80, $mul.ref($sub.ref(0, 96), 120));
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p80, $mul.ref($sub.ref(0, 96), 120)), $mul.ref(96, 1));
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, $i71);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i84 == 1);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb37:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $p73 := $p81;
    goto $bb37_dummy;

  $bb34:
    assume $i76 == 1;
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $i26, $i27 := $sub.i32(0, 16), 0;
    goto $bb9;

  $bb18:
    assume $i50 == 1;
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $p51 := $p45;
    goto $bb21;

  $bb21:
    call $p52, $i53, $i54, $p56, $p57, $p58, $p59, $p60, $i61, $i62, $p51 := snd_seq_port_connect_loop_$bb21($p5, $i49, $p52, $i53, $i54, $p56, $p57, $p58, $p59, $p60, $i61, $i62, $p51);
    goto $bb21_last;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} $i53 := match_subs_info($p5, $p52);
    call {:si_unique_call 1550} {:cexpr "tmp___0"} boogie_si_record_i32($i53);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.7, $p56);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref($sub.ref(0, 80), 120));
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p58, $mul.ref($sub.ref(0, 80), 120)), $mul.ref(80, 1));
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, $i49);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i62 == 1);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb26:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $p51 := $p59;
    goto $bb26_dummy;

  $bb23:
    assume $i54 == 1;
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $i26, $i27 := $sub.i32(0, 16), 0;
    goto $bb9;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i26, $i27 := $sub.i32(0, 16), 0;
    goto $bb9;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb13;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $i26, $i27 := $sub.i32(0, 16), 0;
    goto $bb9;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $i26, $i27 := $sub.i32(0, 16), 0;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb3;

  $bb37_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9056;

  $bb26_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9027;
}



const subscribe_port: ref;

axiom subscribe_port == $sub.ref(0, 434121);

procedure subscribe_port($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.41, $M.13, $M.15, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $CurrAddr, $M.3, assertsPassed, $M.37, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation subscribe_port($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i12: i32;
  var vslice_dummy_var_184: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} {:cexpr "subscribe_port:arg:send_ack"} boogie_si_record_i32($i4);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(8, 1));
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.7, $p5);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} $i7 := try_module_get($p6);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 1571} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(16, 1));
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.7, $p13);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(16, 1));
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p16, $i15);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(240, 1));
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.7, $p17);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $i42 := $sge.i32($i41, 0);
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i12 := $i41;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i4, 0);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb22;

  $bb23:
    assume $i43 == 1;
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(0, 1));
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.7, $p44);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb22;

  $bb25:
    assume $i46 == 1;
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.7, $p48);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.7, $p52);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} vslice_dummy_var_184 := snd_seq_client_notify_subscription($i50, $i54, $p3, 66);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p1);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(640, 1));
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.7, $p22);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i25 == 1);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(16, 1));
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.7, $p26);
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 1);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb10;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(240, 1));
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.7, $p29);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(632, 1));
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.7, $p31);
    call {:si_unique_call 1572} $i33 := devirtbounce.8($p30, $p32, $p3);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 1573} {:cexpr "err"} boogie_si_record_i32($i33);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i41 := $i33;
    goto $bb19;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 672)), $mul.ref(8, 1));
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.7, $p35);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} module_put($p36);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(16, 1));
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.7, $p37);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i38, 1);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 256)), $mul.ref(16, 1));
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p40, $i39);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb12;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 14);
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 435153);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.7, $p2);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} __list_add($p0, $p3, $p1);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    return;
}



const try_module_get: ref;

axiom try_module_get == $sub.ref(0, 436185);

procedure try_module_get($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation try_module_get($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1577} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1578} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const snd_seq_set_port_info: ref;

axiom snd_seq_set_port_info == $sub.ref(0, 437217);

procedure snd_seq_set_port_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_set_port_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i5: i64;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i8;
  var $p50: ref;
  var $i51: i8;
  var $i52: i8;
  var $i53: i8;
  var $i54: i8;
  var $i55: i8;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i8;
  var $p62: ref;
  var $i63: i8;
  var $i64: i8;
  var $i65: i8;
  var $i66: i8;
  var $i67: i8;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $p71: ref;
  var $i18: i32;
  var vslice_dummy_var_185: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i4);
    call {:si_unique_call 1579} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i7);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1581} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1584} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(2, 1)), $mul.ref(0, 1));
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.7, $p20);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $i22 := $sext.i8.i32($i21);
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(68, 1));
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.7, $p29);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(648, 1));
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p31, $i30);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(72, 1));
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.7, $p32);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(652, 1));
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p34, $i33);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(76, 1));
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.7, $p35);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(656, 1));
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p37, $i36);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(80, 1));
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.7, $p38);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(660, 1));
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p40, $i39);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(84, 1));
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.7, $p41);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(664, 1));
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p43, $i42);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(104, 1));
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.7, $p44);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 2);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(640, 1));
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.7, $p50);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $i52 := $and.i8($i49, 1);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $i53 := $shl.i8($i52, 2);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $i54 := $and.i8($i51, $sub.i8(0, 5));
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $i55 := $or.i8($i54, $i53);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p50, $i55);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(104, 1));
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.7, $p56);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 4);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i59);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(640, 1));
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.7, $p62);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $i64 := $and.i8($i61, 1);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $i65 := $shl.i8($i64, 3);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $i66 := $and.i8($i63, $sub.i8(0, 9));
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $i67 := $or.i8($i66, $i65);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p62, $i67);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(108, 1));
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.7, $p68);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(644, 1));
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p71, $i70);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 672)), $mul.ref(16, 1));
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(2, 1));
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} vslice_dummy_var_185 := strlcpy($p25, $p27, 64);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} warn_slowpath_fmt.ref.i32.ref.ref(.str.78, 404, .str.6, .str.83);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const snd_seq_delete_port: ref;

axiom snd_seq_delete_port == $sub.ref(0, 438249);

procedure snd_seq_delete_port($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.3, assertsPassed, $M.13, $M.15, $M.37, $CurrAddr, $M.41, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_delete_port($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p15: ref;
  var $p27: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} {:cexpr "snd_seq_delete_port:arg:port"} boogie_si_record_i32($i1);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(216, 1));
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} ldv_mutex_lock_159($p2);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(144, 1));
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} $i4 := _raw_write_lock_irqsave($p3);
    call {:si_unique_call 1589} {:cexpr "flags"} boogie_si_record_i64($i4);
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.7, $p6);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 80), 672));
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 80), 672)), $mul.ref(80, 1));
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(128, 1));
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(144, 1));
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} _raw_write_unlock_irqrestore($p36, $i4);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(216, 1));
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} ldv_mutex_unlock_160($p37);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p27);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 2);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $i40 := port_delete($p0, $p27);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 1594} {:cexpr "tmp"} boogie_si_record_i32($i40);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb15;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $p15 := $p9;
    goto $bb4;

  $bb4:
    call $p17, $i18, $i19, $i20, $p21, $p29, $p30, $p31, $p32, $p33, $i34, $i35, $p15 := snd_seq_delete_port_loop_$bb4($i1, $i13, $p17, $i18, $i19, $i20, $p21, $p29, $p30, $p31, $p32, $p33, $i34, $i35, $p15);
    goto $bb4_last;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.7, $p17);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, $i1);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $p21 := $p15;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 672)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.7, $p29);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref($sub.ref(0, 80), 672));
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p31, $mul.ref($sub.ref(0, 80), 672)), $mul.ref(80, 1));
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, $i13);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p32;
    goto $bb10_dummy;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 672)), $mul.ref(80, 1));
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} list_del($p22);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(120, 1));
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.7, $p23);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i24, 1);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(120, 1));
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p26, $i25);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $p27 := $p21;
    goto $bb8;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9323;
}



const ldv_mutex_lock_159: ref;

axiom ldv_mutex_lock_159 == $sub.ref(0, 439281);

procedure ldv_mutex_lock_159($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_159($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} ldv_mutex_lock_ports_mutex($p0);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} mutex_lock($p0);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_160: ref;

axiom ldv_mutex_unlock_160 == $sub.ref(0, 440313);

procedure ldv_mutex_unlock_160($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_160($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} ldv_mutex_unlock_ports_mutex($p0);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} mutex_unlock($p0);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const snd_seq_create_port: ref;

axiom snd_seq_create_port == $sub.ref(0, 441345);

procedure snd_seq_create_port($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.7, $M.3, assertsPassed, $CurrAddr;



implementation snd_seq_create_port($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i8;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i1;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i67: i1;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $i56: i32;
  var $p57: ref;
  var $p82: ref;
  var $i83: i32;
  var $p54: ref;
  var $i55: i32;
  var $p65: ref;
  var $i66: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $i90: i8;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p15: ref;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} {:cexpr "snd_seq_create_port:arg:port"} boogie_si_record_i32($i1);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 1600} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i4);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1602} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i4, 0);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1605} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(120, 1));
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.7, $p16);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 252);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} $p21 := kzalloc(672, 208);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.7, $p25);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p29, $i27);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p31, $sub.i8(0, 1));
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p22, $mul.ref(0, 672)), $mul.ref(8, 1));
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p32, __this_module);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p22, $mul.ref(0, 672)), $mul.ref(16, 1));
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} vslice_dummy_var_186 := sprintf.ref.ref.i32($p34, .str.82, $sub.i32(0, 1));
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p22, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} atomic_set($p36, 0);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p22, $mul.ref(0, 672)), $mul.ref(104, 1));
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} port_subs_info_init($p37);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p22, $mul.ref(0, 672)), $mul.ref(360, 1));
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} port_subs_info_init($p38);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32(0, $i1);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i40 := $i1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(216, 1));
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} ldv_mutex_lock_157($p41);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(144, 1));
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $i43 := _raw_write_lock_irqsave($p42);
    call {:si_unique_call 1615} {:cexpr "flags"} boogie_si_record_i64($i43);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.7, $p45);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref($sub.ref(0, 80), 672));
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p47, $mul.ref($sub.ref(0, 80), 672)), $mul.ref(80, 1));
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(128, 1));
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i50, $i52);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $p54, $i55 := $p48, $i40;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p65, $i66 := $p54, $i55;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p22, $mul.ref(0, 672)), $mul.ref(80, 1));
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p65, $mul.ref(0, 672)), $mul.ref(80, 1));
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} list_add_tail($p84, $p85);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(120, 1));
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.7, $p86);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i87, 1);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(120, 1));
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p89, $i88);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i8($i66);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p92, $i90);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(144, 1));
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} _raw_write_unlock_irqrestore($p93, $i43);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(216, 1));
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} ldv_mutex_unlock_158($p94);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p22, $mul.ref(0, 672)), $mul.ref(16, 1));
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} vslice_dummy_var_187 := sprintf.ref.ref.i32($p96, .str.82, $i66);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $p15 := $p21;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i53 == 1;
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $i56, $p57 := $i40, $p48;
    goto $bb20;

  $bb20:
    call $p59, $i60, $i61, $i62, $p63, $i64, $i67, $p69, $i70, $i71, $i72, $i73, $p75, $p76, $p77, $p78, $p79, $i80, $i81, $i56, $p57, $p82, $i83 := snd_seq_create_port_loop_$bb20($i1, $i52, $p59, $i60, $i61, $i62, $p63, $i64, $i67, $p69, $i70, $i71, $i72, $i73, $p75, $p76, $p77, $p78, $p79, $i80, $i81, $i56, $p57, $p82, $i83);
    goto $bb20_last;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p57, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.7, $p59);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i61, $i56);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $p63, $i64 := $p57, $i56;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i1, 0);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i73 := $i56;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p57, $mul.ref(0, 672)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.7, $p75);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref($sub.ref(0, 80), 672));
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p77, $mul.ref($sub.ref(0, 80), 672)), $mul.ref(80, 1));
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, $i52);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $p82, $i83 := $p78, $i73;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $p54, $i55 := $p82, $i83;
    goto $bb19;

  $bb29:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i56, $p57 := $i73, $p78;
    goto $bb29_dummy;

  $bb26:
    assume $i67 == 1;
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p57, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.7, $p69);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i71, 1);
    call {:si_unique_call 1620} {:cexpr "num"} boogie_si_record_i32($i72);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb28;

  $bb22:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $p65, $i66 := $p63, $i64;
    goto $bb24;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb16;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} __snd_printk.i32.ref.i32.ref(1, .str.78, 208, .str.81);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb6;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.7, $p19);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} __snd_printk.i32.ref.i32.ref.i32(0, .str.78, 201, .str.80, $i20);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} warn_slowpath_fmt.ref.i32.ref.ref(.str.78, 197, .str.6, .str.79);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb29_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9453;
}



const port_subs_info_init: ref;

axiom port_subs_info_init == $sub.ref(0, 442377);

procedure port_subs_info_init($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation port_subs_info_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} INIT_LIST_HEAD($p3);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(16, 1));
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p4, 0);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(20, 1));
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.7, $p5);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $i7 := $and.i8($i6, $sub.i8(0, 2));
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i7);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(168, 1));
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} __rwlock_init($p8, .str.116, $p1);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(24, 1));
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} __init_rwsem($p9, .str.117, $p2);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(240, 1));
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p10, $0.ref);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p11, $0.ref);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_157: ref;

axiom ldv_mutex_lock_157 == $sub.ref(0, 443409);

procedure ldv_mutex_lock_157($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_157($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} ldv_mutex_lock_ports_mutex($p0);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} mutex_lock($p0);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_158: ref;

axiom ldv_mutex_unlock_158 == $sub.ref(0, 444441);

procedure ldv_mutex_unlock_158($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_158($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} ldv_mutex_unlock_ports_mutex($p0);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} mutex_unlock($p0);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const __init_rwsem: ref;

axiom __init_rwsem == $sub.ref(0, 445473);

procedure __init_rwsem($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_rwsem($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    return;
}



const snd_seq_queue_get_cur_queues: ref;

axiom snd_seq_queue_get_cur_queues == $sub.ref(0, 446505);

procedure snd_seq_queue_get_cur_queues() returns ($r: i32);
  free requires assertsPassed;



implementation snd_seq_queue_get_cur_queues() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $i0 := $M.26;
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const no_llseek: ref;

axiom no_llseek == $sub.ref(0, 447537);

procedure no_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);



const snd_seq_read: ref;

axiom snd_seq_read == $sub.ref(0, 448569);

procedure snd_seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.7, $M.53, $M.20, $M.21, $M.22, $M.57, $M.58, $CurrAddr;



implementation snd_seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i64: i1;
  var $i63: i1;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i68: i64;
  var $i69: i32;
  var $p72: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i102: i64;
  var $i103: i32;
  var $i104: i64;
  var $i105: i64;
  var $i106: i64;
  var $i107: i64;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $i120: i64;
  var $i121: i64;
  var $p122: ref;
  var $i111: i32;
  var $i112: i64;
  var $p113: ref;
  var $i114: i64;
  var $p123: ref;
  var $i124: i64;
  var $i125: i1;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $i126: i32;
  var $i127: i64;
  var $i54: i32;
  var $i55: i64;
  var $i70: i64;
  var $i71: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i64;
  var $i131: i1;
  var $p132: ref;
  var $i133: i1;
  var $i134: i1;
  var $i135: i32;
  var $i136: i32;
  var $p137: ref;
  var $i138: i1;
  var $i139: i64;
  var $i140: i64;
  var $i13: i64;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 1632} {:cexpr "snd_seq_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.7, $p6);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} $i9 := snd_seq_file_flags($p0);
    call {:si_unique_call 1634} {:cexpr "tmp"} boogie_si_record_i16($i9);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} $p14 := current_thread_info();
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.7, $p16);
    call {:si_unique_call 1636} $p18 := devirtbounce.12(0, $p1, $i2, $i17);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $i19 := $extractvalue($p18, 0);
    call {:si_unique_call 1637} {:cexpr "flag"} boogie_si_record_i64($i19);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} $i23 := ldv__builtin_expect($i22, 1);
    call {:si_unique_call 1639} {:cexpr "tmp___1"} boogie_si_record_i64($i23);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p8);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    call {:si_unique_call 1640} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i27);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 1642} {:cexpr "tmp___2"} boogie_si_record_i64($i31);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i27, 0);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 1645} {:cexpr "tmp___3"} boogie_si_record_i64($i36);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p8);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(4, 1));
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.51, $p39);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p8, $mul.ref(0, 424)), $mul.ref(400, 1));
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.52, $p45);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p46, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} $i50 := atomic_read($p49);
    call {:si_unique_call 1647} {:cexpr "tmp___4"} boogie_si_record_i32($i50);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $i51 := $sgt.i32($i50, 0);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $M.53 := $store.ref($M.53, $p4, $0.ref);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p46, $mul.ref(0, 208)), $mul.ref(104, 1));
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} atomic_inc($p52);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $i53 := $ugt.i64($i2, 27);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $i54, $i55 := 0, 0;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i70, $i71 := $i55, $i54;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i71, 0);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i136 := $i71;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p46, $mul.ref(0, 208)), $mul.ref(104, 1));
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} atomic_dec($p137);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i136, 0);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i138 == 1);
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $i140 := $i70;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $i13 := $i140;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb62:
    assume $i138 == 1;
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $i139 := $sext.i32.i64($i136);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $i140 := $i139;
    goto $bb64;

  $bb50:
    assume $i128 == 1;
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.53, $p4);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p129);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i71, $sub.i32(0, 11));
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i133 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i135 := $i71;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $i136 := $i135;
    goto $bb61;

  $bb55:
    assume $i133 == 1;
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $i134 := $sgt.i64($i70, 0);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i134 == 1);
    goto $bb57;

  $bb58:
    assume $i134 == 1;
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $i135 := 0;
    goto $bb60;

  $bb52:
    assume $i131 == 1;
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.53, $p4);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} snd_seq_fifo_cell_putback($p46, $p132);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $i56, $p57, $i58 := 0, $p1, $i2;
    goto $bb26;

  $bb26:
    call $p59, $i60, $i61, $i62, $i64, $i63, $i65, $i66, $i67, $i68, $i69, $p72, $p74, $i75, $i76, $i77, $i78, $p79, $p80, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $p88, $p89, $p90, $p91, $i92, $i93, $i94, $i95, $p96, $p97, $p98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $p110, $p115, $p116, $p117, $i118, $i119, $i120, $i121, $p122, $i111, $i112, $p113, $i114, $p123, $i124, $i125, $i56, $p57, $i58, $i126, $i127, cmdloc_dummy_var_103, cmdloc_dummy_var_104, cmdloc_dummy_var_105 := snd_seq_read_loop_$bb26($p0, $p4, $p5, $p46, $p59, $i60, $i61, $i62, $i64, $i63, $i65, $i66, $i67, $i68, $i69, $p72, $p74, $i75, $i76, $i77, $i78, $p79, $p80, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $p88, $p89, $p90, $p91, $i92, $i93, $i94, $i95, $p96, $p97, $p98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $p110, $p115, $p116, $p117, $i118, $i119, $i120, $i121, $p122, $i111, $i112, $p113, $i114, $p123, $i124, $i125, $i56, $p57, $i58, $i126, $i127, cmdloc_dummy_var_103, cmdloc_dummy_var_104, cmdloc_dummy_var_105);
    goto $bb26_last;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.7, $p59);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 2048);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $i63 := 1;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i62 == 1);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $i64 := $sgt.i64($i56, 0);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $i63 := $i64;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $i65 := $zext.i1.i32($i63);
    call {:si_unique_call 1650} {:cexpr "nonblock"} boogie_si_record_i32($i65);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} $i66 := snd_seq_fifo_cell_out($p46, $p4, $i65);
    call {:si_unique_call 1652} {:cexpr "err"} boogie_si_record_i32($i66);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, 0);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $i68, $i69 := $i56, $i66;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.53, $p4);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p72, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.7, $p74);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 12);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 4);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i78 == 1);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.53, $p4);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $i118 := copy_to_user($p57, $p117, 28);
    call {:si_unique_call 1657} {:cexpr "tmp___6"} boogie_si_record_i32($i118);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $i120 := $i56;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i121 := $sub.i64($i58, 28);
    call {:si_unique_call 1665} {:cexpr "count"} boogie_si_record_i64($i121);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p57, $mul.ref(28, 1));
    assume {:verifier.code 0} true;
    $i111, $i112, $p113, $i114 := $i66, $i121, $p122, $i56;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.53, $p4);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} snd_seq_cell_free($p123);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $M.53 := $store.ref($M.53, $p4, $0.ref);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i114, 28);
    call {:si_unique_call 1664} {:cexpr "result"} boogie_si_record_i64($i124);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $i125 := $ugt.i64($i112, 27);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $i126, $i127 := $i111, $i124;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $i54, $i55 := $i126, $i127;
    goto $bb25;

  $bb47:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    $i56, $p57, $i58 := $i124, $p113, $i112;
    goto $bb47_dummy;

  $bb44:
    assume $i119 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $i70, $i71 := $i120, $sub.i32(0, 14);
    goto $bb33;

  $bb35:
    assume $i78 == 1;
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.53, $p4);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p5);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p80);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_103 := $M.7;
    cmdloc_dummy_var_104 := $M.7;
    call {:si_unique_call 1653} cmdloc_dummy_var_105 := $memcpy.i8(cmdloc_dummy_var_103, cmdloc_dummy_var_104, $p81, $p82, 32, $zext.i32.i64(8), 0 == 1);
    $M.7 := cmdloc_dummy_var_105;
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.7, $p85);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 1073741823);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p90, $i87);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p5);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} $i92 := copy_to_user($p57, $p91, 28);
    call {:si_unique_call 1655} {:cexpr "tmp___5"} boogie_si_record_i32($i92);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $i94 := $i56;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i95 := $sub.i64($i58, 28);
    call {:si_unique_call 1658} {:cexpr "count"} boogie_si_record_i64($i95);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p57, $mul.ref(28, 1));
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.53, $p4);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i64.i32($i95);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} $i100 := snd_seq_expand_var_event($p98, $i99, $p96, 0, 28);
    call {:si_unique_call 1660} {:cexpr "err"} boogie_si_record_i32($i100);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i100, 0);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $i102, $i103 := $i56, $i100;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i100);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $i105 := $add.i64($i104, $i56);
    call {:si_unique_call 1661} {:cexpr "result"} boogie_si_record_i64($i105);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $i106 := $sext.i32.i64($i100);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $i107 := $sub.i64($i95, $i106);
    call {:si_unique_call 1662} {:cexpr "count"} boogie_si_record_i64($i107);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $i108 := $sext.i32.i64($i100);
    $i109 := $add.i64(28, $i108);
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p57, $mul.ref($i109, 1));
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $i111, $i112, $p113, $i114 := $i100, $i107, $p110, $i105;
    goto $bb43;

  $bb40:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $i70, $i71 := $i102, $i103;
    goto $bb33;

  $bb37:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i70, $i71 := $i94, $sub.i32(0, 14);
    goto $bb33;

  $bb31:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $i70, $i71 := $i68, $i69;
    goto $bb33;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb29;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} snd_seq_fifo_clear($p46);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 28);
    goto $bb3;

  $bb16:
    assume $i48 == 1;
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 6);
    goto $bb3;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 6);
    goto $bb3;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 6);
    goto $bb3;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} warn_slowpath_fmt.ref.i32.ref.ref(.str.3, 477, .str.6, .str.79);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 14);
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 6);
    goto $bb3;

  $bb47_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9609;
}



const snd_seq_write: ref;

axiom snd_seq_write == $sub.ref(0, 449601);

procedure snd_seq_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.7, $M.16, $CurrAddr, $M.17, $M.19, $M.13, $M.15, $M.20, $M.21, $M.22;



implementation snd_seq_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $i57: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i8;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i64;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $p115: ref;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i103: i32;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i130: i64;
  var $i131: i64;
  var $i132: i64;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $i49: i32;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $i136: i32;
  var $i137: i32;
  var $i47: i32;
  var $i48: i32;
  var $i58: i32;
  var $i59: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i64;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 1669} {:cexpr "snd_seq_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.7, $p5);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} $i8 := snd_seq_file_flags($p0);
    call {:si_unique_call 1671} {:cexpr "tmp"} boogie_si_record_i16($i8);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 2);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p7);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    call {:si_unique_call 1672} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i15);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1674} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i15, 0);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1677} {:cexpr "tmp___1"} boogie_si_record_i64($i24);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p7);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(4, 1));
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.7, $p27);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i30 == 1);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.7, $p31);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.7, $p35);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.7, $p37);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32($i38, 0);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i46 := $ugt.i64($i2, 27);
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $i47, $i48 := 0, $sub.i32(0, 22);
    assume {:branchcond $i46} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i58, $i59 := $i47, $i48;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i58, 0);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i138 == 1);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $i139 := $i59;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $i140 := $sext.i32.i64($i139);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $i12 := $i140;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb63:
    assume $i138 == 1;
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $i139 := $i58;
    goto $bb65;

  $bb26:
    assume $i46 == 1;
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $i49, $p50, $i51, $i52 := $sub.i32(0, 22), $p1, $i2, 0;
    goto $bb29;

  $bb29:
    call $p53, $i54, $i55, $i56, $i57, $p60, $i61, $i62, $p64, $i65, $i66, $i67, $p68, $i69, $i70, $i71, $p75, $i76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $i84, $p85, $p86, $p87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $p95, $p96, $p97, $p98, $p99, $p100, $p101, $i102, $p104, $i105, $i106, $p107, $i108, $i109, $i110, $i111, $p112, $p113, $p115, $i116, $p117, $p118, $p119, $p120, $i103, $p121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i72, $i73, $i74, $i130, $i131, $i132, $p133, $i134, $i135, $i49, $p50, $i51, $i52, $i136, $i137 := snd_seq_write_loop_$bb29($p0, $p4, $p7, $p53, $i54, $i55, $i56, $i57, $p60, $i61, $i62, $p64, $i65, $i66, $i67, $p68, $i69, $i70, $i71, $p75, $i76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $i84, $p85, $p86, $p87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $p95, $p96, $p97, $p98, $p99, $p100, $p101, $i102, $p104, $i105, $i106, $p107, $i108, $i109, $i110, $i111, $p112, $p113, $p115, $i116, $p117, $p118, $p119, $p120, $i103, $p121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i72, $i73, $i74, $i130, $i131, $i132, $p133, $i134, $i135, $i49, $p50, $i51, $i52, $i136, $i137);
    goto $bb29_last;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p4);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64(28);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} $i55 := copy_from_user($p53, $p50, $i54);
    call {:si_unique_call 1683} {:cexpr "tmp___4"} boogie_si_record_i64($i55);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $i57 := $i52;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p7, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.7, $p60);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p64, $i62);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} $i65 := check_event_type_and_length($p4);
    call {:si_unique_call 1685} {:cexpr "tmp___5"} boogie_si_record_i32($i65);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $i67 := $i52;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.7, $p68);
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 255);
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i71 == 1);
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.7, $p75);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    $i78 := $ugt.i32($i77, 149);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $i79 := $i52;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.7, $p80);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 12);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 4);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i84 == 1);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p7, $mul.ref(0, 424)), $mul.ref(384, 1));
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.7, $p104);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i103 := 28;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.7, $p121);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i122, 2048);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 0);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    $i125 := $zext.i1.i32($i124);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} $i126 := snd_seq_client_enqueue_event($p7, $p4, $p0, $i125, 0, 0);
    call {:si_unique_call 1691} {:cexpr "err"} boogie_si_record_i32($i126);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i126, 0);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $i128, $i129 := $i52, $i126;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i72, $i73, $i74 := $i52, $i103, $i126;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $i130 := $sext.i32.i64($i73);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $i131 := $sub.i64($i51, $i130);
    call {:si_unique_call 1686} {:cexpr "count"} boogie_si_record_i64($i131);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i73);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p50, $mul.ref($i132, 1));
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i72, $i73);
    call {:si_unique_call 1687} {:cexpr "written"} boogie_si_record_i32($i134);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $i135 := $ugt.i64($i131, 27);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $i136, $i137 := $i134, $i74;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $i47, $i48 := $i136, $i137;
    goto $bb28;

  $bb60:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    $i49, $p50, $i51, $i52 := $i74, $p133, $i131, $i134;
    goto $bb60_dummy;

  $bb57:
    assume $i127 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $i58, $i59 := $i128, $i129;
    goto $bb33;

  $bb51:
    assume $i106 == 1;
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.7, $p107);
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i109, 12);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 8);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb53;

  $bb54:
    assume $i111 == 1;
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p113, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(1, 4));
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.7, $p115);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} $p117 := compat_ptr($i116);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p120, $p117);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb45:
    assume $i84 == 1;
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.7, $p87);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, 1073741823);
    call {:si_unique_call 1688} {:cexpr "extlen"} boogie_si_record_i32($i89);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i89, 28);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i90);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $i92 := $ugt.i64($i91, $i51);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $i93 := $i52;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i94 := $or.i32($i89, $sub.i32(0, 2147483648));
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p97, $i94);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p50, $mul.ref(28, 1));
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p101, $p98);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $i102 := $add.i32(28, $i89);
    call {:si_unique_call 1689} {:cexpr "len"} boogie_si_record_i32($i102);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $i103 := $i102;
    goto $bb50;

  $bb47:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $i58, $i59 := $i93, $sub.i32(0, 22);
    goto $bb33;

  $bb41:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $i58, $i59 := $i79, $sub.i32(0, 22);
    goto $bb33;

  $bb38:
    assume $i71 == 1;
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    $i72, $i73, $i74 := $i52, 28, $i49;
    goto $bb40;

  $bb35:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $i58, $i59 := $i67, $sub.i32(0, 22);
    goto $bb33;

  $bb31:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $i58, $i59 := $i57, $sub.i32(0, 14);
    goto $bb33;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} $i40 := snd_seq_write_pool_allocated($p7);
    call {:si_unique_call 1679} {:cexpr "tmp___3"} boogie_si_record_i32($i40);
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i41 == 1;
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p7, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.7, $p42);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} $i44 := snd_seq_pool_init($p43);
    call {:si_unique_call 1681} {:cexpr "tmp___2"} boogie_si_record_i32($i44);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 0);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i45 == 1;
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 12);
    goto $bb3;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 6);
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb12;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 6);
    goto $bb3;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} warn_slowpath_fmt.ref.i32.ref.ref(.str.3, 1070, .str.6, .str.79);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 6);
    goto $bb3;

  $bb60_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9791;
}



const snd_seq_poll: ref;

axiom snd_seq_poll == $sub.ref(0, 450633);

procedure snd_seq_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_seq_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i32;
  var $i45: i32;
  var $i52: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.7, $p2);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 1693} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i7);
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1695} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1698} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} $i19 := snd_seq_file_flags($p0);
    call {:si_unique_call 1700} {:cexpr "tmp___2"} boogie_si_record_i16($i19);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 1);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} $i38 := snd_seq_file_flags($p0);
    call {:si_unique_call 1705} {:cexpr "tmp___5"} boogie_si_record_i16($i38);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 2);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i52 := $i37;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $i18 := $i52;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb17:
    assume $i41 == 1;
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} $i42 := snd_seq_write_pool_allocated($p4);
    call {:si_unique_call 1707} {:cexpr "tmp___3"} boogie_si_record_i32($i42);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i43 == 1);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.7, $p46);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} $i48 := snd_seq_pool_poll_wait($p47, $p0, $p1);
    call {:si_unique_call 1710} {:cexpr "tmp___4"} boogie_si_record_i32($i48);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i51 := $i37;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i45 := $i51;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $i52 := $i45;
    goto $bb25;

  $bb22:
    assume $i49 == 1;
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i37, 260);
    call {:si_unique_call 1711} {:cexpr "mask"} boogie_si_record_i32($i50);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb24;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i37, 260);
    call {:si_unique_call 1708} {:cexpr "mask"} boogie_si_record_i32($i44);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb21;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 424)), $mul.ref(400, 1));
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.7, $p25);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb10;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 424)), $mul.ref(400, 1));
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.7, $p31);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} $i33 := snd_seq_fifo_poll_wait($p32, $p0, $p1);
    call {:si_unique_call 1702} {:cexpr "tmp___1"} boogie_si_record_i32($i33);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb16;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $i35 := $or.i32(0, 65);
    call {:si_unique_call 1703} {:cexpr "mask"} boogie_si_record_i32($i35);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb15;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 6);
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} warn_slowpath_fmt.ref.i32.ref.ref(.str.3, 1153, .str.6, .str.79);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_seq_ioctl: ref;

axiom snd_seq_ioctl == $sub.ref(0, 451665);

procedure snd_seq_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.41, $M.13, $M.15, $M.7, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $CurrAddr, $M.3, assertsPassed, $M.37, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i19: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} {:cexpr "snd_seq_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1713} {:cexpr "snd_seq_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.54, $p3);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 1714} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1716} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1719} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i2);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} $i21 := snd_seq_do_ioctl($p5, $i1, $p20);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    call {:si_unique_call 1721} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $i19 := $i22;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64(0, 6);
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} warn_slowpath_fmt.ref.i32.ref.ref(.str.3, 2273, .str.6, .str.79);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_seq_ioctl_compat: ref;

axiom snd_seq_ioctl_compat == $sub.ref(0, 452697);

procedure snd_seq_ioctl_compat($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);



const snd_seq_open: ref;

axiom snd_seq_open == $sub.ref(0, 453729);

procedure snd_seq_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.8, $M.9, $M.10, $M.5, assertsPassed, $CurrAddr, $M.23, $M.26, $M.13, $M.15, $M.3, $M.33, $M.37, $M.6, $M.41, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i8;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i4: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} $i2 := nonseekable_open($p0, $p1);
    call {:si_unique_call 1723} {:cexpr "err"} boogie_si_record_i32($i2);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} $i5 := ldv_mutex_lock_interruptible_35(register_mutex);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    call {:si_unique_call 1725} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} $p7 := seq_create_client1($sub.i32(0, 1), 500);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} $i10 := snd_seq_file_flags($p1);
    call {:si_unique_call 1729} {:cexpr "tmp___0"} boogie_si_record_i16($i10);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    call {:si_unique_call 1730} {:cexpr "mode"} boogie_si_record_i32($i11);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i11, 2);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 424)), $mul.ref(400, 1));
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p26, $0.ref);
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p27, 0);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i11, 1);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} usage_alloc(client_usage, 1);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 424)), $mul.ref(0, 1));
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p41, 1);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} ldv_mutex_unlock_38(register_mutex);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p7, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.7, $p42);
    call {:si_unique_call 1737} {:cexpr "c"} boogie_si_record_i32($i43);
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p45, $p7);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p46, $p1);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p7, $mul.ref(0, 424)), $mul.ref(5, 1));
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} vslice_dummy_var_189 := sprintf.ref.ref.i32($p48, .str.106, $i43);
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} snd_seq_system_broadcast($i43, 0, 60);
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p30, 200);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.7, $p31);
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} $p33 := snd_seq_fifo_new($i32);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p34, $p33);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.7, $p35);
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i38 == 1;
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} vslice_dummy_var_188 := seq_free_client1($p7);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p7);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} kfree($p40);
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} ldv_mutex_unlock_37(register_mutex);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 424)), $mul.ref(4, 1));
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.7, $p20);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $i22 := $and.i8($i21, $sub.i8(0, 3));
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    $i23 := $or.i8($i22, 2);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p20, $i23);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 424)), $mul.ref(4, 1));
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.7, $p14);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $i16 := $and.i8($i15, $sub.i8(0, 2));
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $i17 := $or.i8($i16, 1);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p14, $i17);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} ldv_mutex_unlock_36(register_mutex);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 512);
    goto $bb3;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const snd_seq_release: ref;

axiom snd_seq_release == $sub.ref(0, 454761);

procedure snd_seq_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.8, $M.10, $M.7, $M.5, assertsPassed, $M.23, $M.26, $CurrAddr, $M.13, $M.15, $M.3, $M.33, $M.37, $M.6, $M.41, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.7, $p2);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} seq_free_client($p4);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 424)), $mul.ref(400, 1));
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.7, $p9);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p4);
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} kfree($p16);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 424)), $mul.ref(400, 1));
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} snd_seq_fifo_delete($p15);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const snd_seq_fifo_delete: ref;

axiom snd_seq_fifo_delete == $sub.ref(0, 455793);

procedure snd_seq_fifo_delete($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_fifo_delete($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 1743} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1745} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1748} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.7, $p0);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 1749} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i17);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1751} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i17, 0);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 1754} {:cexpr "tmp___2"} boogie_si_record_i64($i26);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p0, $0.ref);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} snd_seq_fifo_clear($p14);
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p14, $mul.ref(0, 208)), $mul.ref(112, 1));
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} $i29 := waitqueue_active($p28);
    call {:si_unique_call 1757} {:cexpr "tmp___3"} boogie_si_record_i32($i29);
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p14, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.7, $p32);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p14);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} kfree($p41);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p14, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.7, $p36);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} vslice_dummy_var_190 := snd_seq_pool_done($p37);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p14, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} vslice_dummy_var_191 := snd_seq_pool_delete($p39);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p14, $mul.ref(0, 208)), $mul.ref(112, 1));
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} __wake_up($p31, 3, 1, $0.ref);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} warn_slowpath_fmt.ref.i32.ref.ref(.str.50, 134, .str.6, .str.55);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} warn_slowpath_fmt.ref.i32.ref.ref(.str.50, 131, .str.6, .str.54);
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const nonseekable_open: ref;

axiom nonseekable_open == $sub.ref(0, 456825);

procedure nonseekable_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nonseekable_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1762} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1763} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_lock_interruptible_35: ref;

axiom ldv_mutex_lock_interruptible_35 == $sub.ref(0, 457857);

procedure ldv_mutex_lock_interruptible_35($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_lock_interruptible_35($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1765} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} $i2 := ldv_mutex_lock_interruptible_register_mutex($p0);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    call {:si_unique_call 1767} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_36: ref;

axiom ldv_mutex_unlock_36 == $sub.ref(0, 458889);

procedure ldv_mutex_unlock_36($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_unlock_36($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} ldv_mutex_unlock_register_mutex($p0);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} mutex_unlock($p0);
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const snd_seq_file_flags: ref;

axiom snd_seq_file_flags == $sub.ref(0, 459921);

procedure snd_seq_file_flags($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation snd_seq_file_flags($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(132, 1));
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.7, $p1);
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 3;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $i7 := 2;
    goto $bb9;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb7:
    assume $i6 == 1;
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb9;
}



const snd_seq_fifo_new: ref;

axiom snd_seq_fifo_new == $sub.ref(0, 460953);

procedure snd_seq_fifo_new($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation snd_seq_fifo_new($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p7: ref;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1772} {:cexpr "snd_seq_fifo_new:arg:poolsize"} boogie_si_record_i32($i0);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} $p3 := kzalloc(208, 208);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} $p8 := snd_seq_pool_new($i0);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p9, $p8);
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.7, $p10);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.7, $p15);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} $i17 := snd_seq_pool_init($p16);
    call {:si_unique_call 1778} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} vslice_dummy_var_193 := spinlock_check($p22);
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 208)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} __raw_spin_lock_init($p26, .str.52, $p1);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 208)), $mul.ref(104, 1));
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} atomic_set($p27, 0);
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 208)), $mul.ref(112, 1));
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} __init_waitqueue_head($p28, .str.53, $p2);
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} atomic_set($p29, 0);
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p30, $0.ref);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p31, $0.ref);
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p32, 0);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    $p7 := $p3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} vslice_dummy_var_192 := snd_seq_pool_delete($p19);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p4);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} kfree($p21);
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p4);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} kfree($p14);
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} __snd_printk.i32.ref.i32.ref(1, .str.50, 100, .str.51);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const ldv_mutex_unlock_37: ref;

axiom ldv_mutex_unlock_37 == $sub.ref(0, 461985);

procedure ldv_mutex_unlock_37($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_unlock_37($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} ldv_mutex_unlock_register_mutex($p0);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} mutex_unlock($p0);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_38: ref;

axiom ldv_mutex_unlock_38 == $sub.ref(0, 463017);

procedure ldv_mutex_unlock_38($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_mutex_unlock_38($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} ldv_mutex_unlock_register_mutex($p0);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} mutex_unlock($p0);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



const compat_ptr: ref;

axiom compat_ptr == $sub.ref(0, 464049);

procedure compat_ptr($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation compat_ptr($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} {:cexpr "compat_ptr:arg:uptr"} boogie_si_record_i32($i0);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const snd_seq_call_port_info_ioctl: ref;

axiom snd_seq_call_port_info_ioctl == $sub.ref(0, 465081);

procedure snd_seq_call_port_info_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const memdup_user: ref;

axiom memdup_user == $sub.ref(0, 466113);

procedure memdup_user($p0: ref, $i1: i64) returns ($r: ref);



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 467145);

procedure IS_ERR($p0: ref) returns ($r: i64);



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 468177);

procedure PTR_ERR($p0: ref) returns ($r: i64);



const snd_seq_fifo_poll_wait: ref;

axiom snd_seq_fifo_poll_wait == $sub.ref(0, 469209);

procedure snd_seq_fifo_poll_wait($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_seq_fifo_poll_wait($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(112, 1));
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} poll_wait($p1, $p3, $p2);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.7, $p4);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const snd_seq_pool_poll_wait: ref;

axiom snd_seq_pool_poll_wait == $sub.ref(0, 470241);

procedure snd_seq_pool_poll_wait($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_seq_pool_poll_wait($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 216)), $mul.ref(56, 1));
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} poll_wait($p1, $p3, $p2);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} $i4 := snd_seq_output_ok($p0);
    call {:si_unique_call 1794} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const poll_wait: ref;

axiom poll_wait == $sub.ref(0, 471273);

procedure poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.7, $p5);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.7, $p11);
    call {:si_unique_call 1795} devirtbounce.16($p12, $p0, $p1, $p2);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const snd_seq_client_enqueue_event: ref;

axiom snd_seq_client_enqueue_event == $sub.ref(0, 472305);

procedure snd_seq_client_enqueue_event($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.16, $M.17, $M.19, $M.13, $M.15, $CurrAddr, $M.20, $M.21, $M.22;



implementation snd_seq_client_enqueue_event($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i1;
  var $i50: i1;
  var $i49: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1797} {:cexpr "snd_seq_client_enqueue_event:arg:blocking"} boogie_si_record_i32($i3);
    call {:si_unique_call 1798} {:cexpr "snd_seq_client_enqueue_event:arg:atomic"} boogie_si_record_i32($i4);
    call {:si_unique_call 1799} {:cexpr "snd_seq_client_enqueue_event:arg:hop"} boogie_si_record_i32($i5);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(3, 1));
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.7, $p7);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 254);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.7, $p15);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 254);
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(3, 1));
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.7, $p28);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 253);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(3, 1));
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.7, $p37);
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.7, $p40);
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} $i42 := snd_seq_queue_is_used($i39, $i41);
    call {:si_unique_call 1805} {:cexpr "tmp___1"} boogie_si_record_i32($i42);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $i43 := $sle.i32($i42, 0);
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} $i44 := snd_seq_write_pool_allocated($p0);
    call {:si_unique_call 1807} {:cexpr "tmp___2"} boogie_si_record_i32($i44);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(392, 1));
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.7, $p46);
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i3, 0);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $i49 := 1;
    assume {:branchcond $i48} true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i48 == 1);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i4, 0);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $i49 := $i50;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i32($i49);
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} $i52 := snd_seq_event_dup($p47, $p1, $p6, $i51, $p2);
    call {:si_unique_call 1809} {:cexpr "err"} boogie_si_record_i32($i52);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 0);
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.16, $p6);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} $i55 := snd_seq_enqueue_event($p54, $i4, $i5);
    call {:si_unique_call 1811} {:cexpr "err"} boogie_si_record_i32($i55);
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb29:
    assume $i56 == 1;
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.16, $p6);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} snd_seq_cell_free($p57);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    $i26 := $i55;
    goto $bb8;

  $bb26:
    assume $i53 == 1;
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $i26 := $i52;
    goto $bb8;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb24;

  $bb20:
    assume $i45 == 1;
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 6);
    goto $bb8;

  $bb17:
    assume $i43 == 1;
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb8;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.7, $p32);
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 5);
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} $i36 := snd_seq_deliver_event($p0, $p1, $i4, $i5);
    call {:si_unique_call 1803} {:cexpr "tmp___0"} boogie_si_record_i32($i36);
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $i26 := $i36;
    goto $bb8;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(1, 1));
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.7, $p20);
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} $p23 := snd_seq_port_use_ptr($p0, $i22);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p23, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} atomic_dec($p27);
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb8;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(14, 1)), $mul.ref(0, 1));
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p12, $sub.i8(0, 2));
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(3, 1));
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p13, $sub.i8(0, 3));
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_seq_fifo_cell_out: ref;

axiom snd_seq_fifo_cell_out == $sub.ref(0, 473337);

procedure snd_seq_fifo_cell_out($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.20, $M.21, $M.22, $M.7, $M.57, $CurrAddr;



implementation snd_seq_fifo_cell_out($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p26: ref;
  var $p45: ref;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1815} {:cexpr "snd_seq_fifo_cell_out:arg:nonblock"} boogie_si_record_i32($i2);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 1816} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i7);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1818} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1821} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.53 := $store.ref($M.53, $p1, $0.ref);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} $p19 := get_current();
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} init_waitqueue_entry($p3, $p19);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} $p21 := spinlock_check($p20);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} $i22 := _raw_spin_lock_irqsave($p21);
    call {:si_unique_call 1826} {:cexpr "flags"} boogie_si_record_i64($i22);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} $p23 := fifo_cell_out($p0);
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    $p26 := $p23;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} spin_unlock_irqrestore($p45, $i22);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $M.53 := $store.ref($M.53, $p1, $p26);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call $i27, $p29, $i30, $p31, $i32, $p33, $p34, $p35, $p36, $p37, $i38, $i39, $p41, $i42, $i43, $p44 := snd_seq_fifo_cell_out_loop_$bb11($p0, $i2, $p3, $p4, $i27, $p29, $i30, $p31, $i32, $p33, $p34, $p35, $p36, $p37, $i38, $i39, $p41, $i42, $i43, $p44);
    goto $bb11_last;

  $bb12:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.57 := $store.i64($M.57, $p4, 1);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} $p29 := get_current();
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.57, $p4);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p29, $mul.ref(0, 9576)), $mul.ref(0, 1));
    call {:si_unique_call 1830} $i32 := devirtbounce.3(0, $p31, $i30, $p31);
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $M.57 := $store.i64($M.57, $p4, $i32);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(112, 1));
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} add_wait_queue($p33, $p3);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} spin_unlock_irq($p34);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} schedule();
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} spin_lock_irq($p35);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(112, 1));
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} remove_wait_queue($p36, $p3);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} $p37 := get_current();
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} $i38 := signal_pending($p37);
    call {:si_unique_call 1838} {:cexpr "tmp___8"} boogie_si_record_i32($i38);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} $p41 := fifo_cell_out($p0);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $p44 := $p41;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    $p26 := $p44;
    goto $bb10;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb20_dummy;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} spin_unlock_irqrestore($p40, $i22);
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 512);
    goto $bb6;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} spin_unlock_irqrestore($p28, $i22);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 11);
    goto $bb6;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} warn_slowpath_fmt.ref.i32.ref.ref(.str.50, 243, .str.6, .str.55);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const snd_seq_expand_var_event: ref;

axiom snd_seq_expand_var_event == $sub.ref(0, 474369);

procedure snd_seq_expand_var_event($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.58, $CurrAddr, $M.7;



implementation snd_seq_expand_var_event($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1843} {:cexpr "snd_seq_expand_var_event:arg:count"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $M.58 := $store.ref($M.58, $p5, $p2);
    call {:si_unique_call 1844} {:cexpr "snd_seq_expand_var_event:arg:in_kernel"} boogie_si_record_i32($i3);
    call {:si_unique_call 1845} {:cexpr "snd_seq_expand_var_event:arg:size_aligned"} boogie_si_record_i32($i4);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} $i6 := get_var_len($p0);
    call {:si_unique_call 1847} {:cexpr "len"} boogie_si_record_i32($i6);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i4, 0);
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i6;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, $i14);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.7, $p18);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i3, 0);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $p31 := (if $i30 == 1 then seq_copy_in_kernel else seq_copy_in_user);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p5);
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} $i33 := snd_seq_dump_var_event($p0, $p31, $p32);
    call {:si_unique_call 1853} {:cexpr "err"} boogie_si_record_i32($i33);
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $i35 := $i14;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $i8 := $i35;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $i35 := $i33;
    goto $bb22;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i3, 0);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.58, $p5);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.7, $p25);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i6);
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} $i28 := copy_from_user($p22, $p26, $i27);
    call {:si_unique_call 1851} {:cexpr "tmp"} boogie_si_record_i64($i28);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i8 := $i14;
    goto $bb3;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 11);
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    call {:si_unique_call 1848} {:cexpr "snd_seq_expand_var_event:arg:__y"} boogie_si_record_i32($i4);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i4, $sub.i32(0, 1));
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, $i6);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $i12 := $sdiv.i32($i11, $i4);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $i13 := $mul.i32($i12, $i4);
    call {:si_unique_call 1849} {:cexpr "newlen"} boogie_si_record_i32($i13);
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const snd_seq_fifo_cell_putback: ref;

axiom snd_seq_fifo_cell_putback == $sub.ref(0, 475401);

procedure snd_seq_fifo_cell_putback($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation snd_seq_fifo_cell_putback($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} $p5 := spinlock_check($p4);
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 1856} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.7, $p7);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p9, $p8);
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p10, $p1);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.7, $p11);
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p14, $i13);
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} spin_unlock_irqrestore($p15, $i6);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_var_len: ref;

axiom get_var_len == $sub.ref(0, 476433);

procedure get_var_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_var_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.7, $p1);
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 12);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 4);
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.7, $p9);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1073741823);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const seq_copy_in_kernel: ref;

axiom seq_copy_in_kernel == $sub.ref(0, 477465);

procedure seq_copy_in_kernel($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.58;



implementation seq_copy_in_kernel($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;
  var cmdloc_dummy_var_108: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} {:cexpr "seq_copy_in_kernel:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    call {:si_unique_call 1859} {:cexpr "__len"} boogie_si_record_i64($i3);
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.58, $p0);
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_106 := $M.7;
    cmdloc_dummy_var_107 := $M.7;
    call {:si_unique_call 1860} cmdloc_dummy_var_108 := $memcpy.i8(cmdloc_dummy_var_106, cmdloc_dummy_var_107, $p4, $p1, $i3, $zext.i32.i64(1), 0 == 1);
    $M.7 := cmdloc_dummy_var_108;
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.58, $p0);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i2);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p5, $mul.ref($i6, 1));
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $M.58 := $store.ref($M.58, $p0, $p7);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const seq_copy_in_user: ref;

axiom seq_copy_in_user == $sub.ref(0, 478497);

procedure seq_copy_in_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.58;



implementation seq_copy_in_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} {:cexpr "seq_copy_in_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.58, $p0);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} $i4 := copy_to_user($p3, $p1, $i2);
    call {:si_unique_call 1863} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.58, $p0);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i2);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 1));
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $M.58 := $store.ref($M.58, $p0, $p9);
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const snd_seq_dump_var_event: ref;

axiom snd_seq_dump_var_event == $sub.ref(0, 479529);

procedure snd_seq_dump_var_event($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.58, $CurrAddr;



implementation snd_seq_dump_var_event($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p17: ref;
  var $i18: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i49: i1;
  var $i52: i1;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i1;
  var $i50: i32;
  var $p51: ref;
  var $i63: i64;
  var $i64: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} $i4 := get_var_len($p0);
    call {:si_unique_call 1866} {:cexpr "len"} boogie_si_record_i32($i4);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $i5 := $sle.i32($i4, 0);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.7, $p9);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.7, $p35);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 1073741824);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.7, $p46);
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i4, 0);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb28:
    assume $i49 == 1;
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $i50, $p51 := $i4, $p47;
    goto $bb31;

  $bb31:
    call $i52, $i53, $p54, $p55, $i56, $i57, $i58, $i59, $p60, $p61, $i62, $i50, $p51, $i63, $i64 := snd_seq_dump_var_event_loop_$bb31($p1, $p2, $i52, $i53, $p54, $p55, $i56, $i57, $i58, $i59, $p60, $p61, $i62, $i50, $p51, $i63, $i64);
    goto $bb31_last;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p51);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i64 == 1);
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb41:
    assume $i64 == 1;
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i50, 28);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := 28;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p51, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    call {:si_unique_call 1874} $i56 := devirtbounce.17($p1, $p2, $p55, $i53);
    call {:si_unique_call 1875} {:cexpr "err"} boogie_si_record_i32($i56);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i56, 0);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $i58 := $i56;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32($i50, $i53);
    call {:si_unique_call 1876} {:cexpr "len"} boogie_si_record_i32($i59);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p51, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.7, $p60);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i59, 0);
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i62 == 1);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb39:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i50, $p51 := $i59, $p61;
    goto $bb39_dummy;

  $bb36:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $i6 := $i58;
    goto $bb3;

  $bb33:
    assume $i52 == 1;
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $i53 := $i50;
    goto $bb35;

  $bb25:
    assume $i38 == 1;
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.7, $p41);
    call {:si_unique_call 1872} $i43 := devirtbounce.17($p1, $p2, $p42, $i4);
    call {:si_unique_call 1873} {:cexpr "tmp___0"} boogie_si_record_i32($i43);
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $i6 := $i43;
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.7, $p14);
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i4, 0);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $p17, $i18 := $p15, $i4;
    goto $bb10;

  $bb10:
    call $i19, $i20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $p30, $i31, $i32, $p17, $i18 := snd_seq_dump_var_event_loop_$bb10($p1, $p2, $p3, $i19, $i20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $p30, $i31, $i32, $p17, $i18);
    goto $bb10_last;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 32);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := 32;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p3);
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i20);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} $i23 := copy_from_user($p21, $p17, $i22);
    call {:si_unique_call 1868} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p3);
    call {:si_unique_call 1869} $i26 := devirtbounce.17($p1, $p2, $p25, $i20);
    call {:si_unique_call 1870} {:cexpr "err"} boogie_si_record_i32($i26);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 0);
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i20);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p17, $mul.ref($i29, 1));
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i18, $i20);
    call {:si_unique_call 1871} {:cexpr "len"} boogie_si_record_i32($i31);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 0);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i32 == 1);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb21:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p17, $i18 := $p30, $i31;
    goto $bb21_dummy;

  $bb18:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $i6 := $i28;
    goto $bb3;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb14;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  $bb39_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10658;

  $bb21_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10610;
}



const main: ref;

axiom main == $sub.ref(0, 480561);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.53, $M.14, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.12, $M.11, $M.39, $M.40, $M.26, $M.23, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $CurrAddr, $M.41, $M.13, $M.15, $M.20, $M.21, $M.22, $M.57, $M.58, $M.16, $M.33, assertsPassed, $M.17, $M.19, $M.37;



implementation main() returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i15: i1;
  var $i16: i64;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $i14: i32;
  var $i0: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i64;
  var vslice_dummy_var_196: i32;

  $bb0:
    call {:si_unique_call 1877} $initialize();
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} ldv_initialize();
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $i0 := 0;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i14, $i0, $i32, $i33, $i34, vslice_dummy_var_194, vslice_dummy_var_195, vslice_dummy_var_196 := main_loop_$bb1($i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i14, $i0, $i32, $i33, $i34, vslice_dummy_var_194, vslice_dummy_var_195, vslice_dummy_var_196);
    goto $bb1_last;

  corral_source_split_10689:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1881} $i32 := __VERIFIER_nondet_int();
    call {:si_unique_call 1882} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i32);
    call {:si_unique_call 1883} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb45;

  $bb45:
    assume !($i33 == 1);
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i0, 0);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} ldv_check_final_state();
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1884} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1885} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1886} {:cexpr "tmp"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i14 := $i0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $i0 := $i14;
    goto corral_source_split_10727_dummy;

  $bb10:
    assume $i5 == 1;
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} ldv_handler_precall();
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} vslice_dummy_var_195 := snd_seq_ioctl($u1, $u6, $u3);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $i14 := $i0;
    goto $bb26;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i4 == 1;
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} ldv_handler_precall();
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} vslice_dummy_var_194 := snd_seq_poll($u1, $u5);
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $i14 := $i0;
    goto $bb26;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i0, 3);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i0;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    $i14 := $i29;
    goto $bb26;

  $bb39:
    assume $i27 == 1;
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} ldv_handler_precall();
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} vslice_dummy_var_196 := snd_seq_release($u0, $u1);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb41;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i7 == 1);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i0, 2);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i0;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $i14 := $i26;
    goto $bb26;

  $bb33:
    assume $i21 == 1;
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} ldv_handler_precall();
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} $i22 := snd_seq_write($u1, $u2, $u3, $u4);
    call {:si_unique_call 1904} {:cexpr "res_snd_seq_write_28"} boogie_si_record_i64($i22);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} ldv_check_return_value($i23);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $i24 := $slt.i64($i22, 0);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i0, 1);
    call {:si_unique_call 1906} {:cexpr "ldv_s_snd_seq_f_ops_file_operations"} boogie_si_record_i32($i25);
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb38;

  $bb35:
    assume $i24 == 1;
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i0, 1);
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $i14 := $i20;
    goto $bb26;

  $bb27:
    assume $i15 == 1;
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} ldv_handler_precall();
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} $i16 := snd_seq_read($u1, $u2, $u3, $u4);
    call {:si_unique_call 1899} {:cexpr "res_snd_seq_read_14"} boogie_si_record_i64($i16);
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} ldv_check_return_value($i17);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $i18 := $slt.i64($i16, 0);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i0, 1);
    call {:si_unique_call 1901} {:cexpr "ldv_s_snd_seq_f_ops_file_operations"} boogie_si_record_i32($i19);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb32;

  $bb29:
    assume $i18 == 1;
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb12;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, 0);
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb26;

  $bb19:
    assume $i9 == 1;
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} ldv_handler_precall();
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} $i10 := snd_seq_open($u0, $u1);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    call {:si_unique_call 1893} {:cexpr "res_snd_seq_open_12"} boogie_si_record_i32($i10);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} ldv_check_return_value($i10);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i0, 1);
    call {:si_unique_call 1896} {:cexpr "ldv_s_snd_seq_f_ops_file_operations"} boogie_si_record_i32($i12);
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb25;

  $bb21:
    assume $i11 == 1;
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb44;

  corral_source_split_10727_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10689;
}



const ldv_check_return_value: ref;

axiom ldv_check_return_value == $sub.ref(0, 481593);

procedure ldv_check_return_value($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} {:cexpr "ldv_check_return_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 482625);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1910} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 1} true;
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 483657);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 484689);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 485721);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 486753);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 487785);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 488817);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 489849);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 490881);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 491913);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 492945);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 493977);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 495009);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 496041);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1911} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1912} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1913} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1914} __VERIFIER_assume($i4);
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 497073);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 498105);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 499137);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 500169);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 501201);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1915} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1916} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1917} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1918} __VERIFIER_assume($i4);
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 502233);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 503265);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 504297);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 505329);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 506361);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1919} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1920} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1921} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1922} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1923} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1924} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1925} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1926} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1927} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1928} __VERIFIER_assume($i7);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1929} __VERIFIER_assume($i11);
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 507393);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 508425);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 509457);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 510489);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 511521);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 512553);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 513585);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 514617);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 515649);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1930} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1931} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1932} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1933} __VERIFIER_assume($i10);
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 516681);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1934} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1935} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1936} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 517713);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1937} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1938} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 518745);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 519777);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1939} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1940} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 520809);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 521841);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 522873);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 523905);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.14, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.12, $M.11, $M.7, $M.39, $M.40, $M.6, $M.5, $M.4, $M.3, $M.2, $M.1, $M.0, $M.26, $M.23, $M.10, $M.8, $M.9, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99;



implementation __SMACK_static_init()
{

  $bb0:
    $M.14 := $store.i32($M.14, seq_client_load, 14);
    $M.14 := $store.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(1, 4)), $sub.i32(0, 1));
    $M.14 := $store.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(2, 4)), $sub.i32(0, 1));
    $M.14 := $store.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(3, 4)), $sub.i32(0, 1));
    $M.14 := $store.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(4, 4)), $sub.i32(0, 1));
    $M.14 := $store.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(5, 4)), $sub.i32(0, 1));
    $M.14 := $store.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(6, 4)), $sub.i32(0, 1));
    $M.14 := $store.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(7, 4)), $sub.i32(0, 1));
    $M.14 := $store.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(8, 4)), $sub.i32(0, 1));
    $M.14 := $store.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(9, 4)), $sub.i32(0, 1));
    $M.14 := $store.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(10, 4)), $sub.i32(0, 1));
    $M.14 := $store.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(11, 4)), $sub.i32(0, 1));
    $M.14 := $store.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(12, 4)), $sub.i32(0, 1));
    $M.14 := $store.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(13, 4)), $sub.i32(0, 1));
    $M.14 := $store.i32($M.14, $add.ref($add.ref(seq_client_load, $mul.ref(0, 60)), $mul.ref(14, 4)), $sub.i32(0, 1));
    $M.27 := 1;
    call {:si_unique_call 1941} {:cexpr "seq_default_timer_class"} boogie_si_record_i32(1);
    $M.28 := 0;
    call {:si_unique_call 1942} {:cexpr "seq_default_timer_sclass"} boogie_si_record_i32(0);
    $M.29 := $sub.i32(0, 1);
    call {:si_unique_call 1943} {:cexpr "seq_default_timer_card"} boogie_si_record_i32($sub.i32(0, 1));
    $M.30 := 3;
    call {:si_unique_call 1944} {:cexpr "seq_default_timer_device"} boogie_si_record_i32(3);
    $M.31 := 0;
    call {:si_unique_call 1945} {:cexpr "seq_default_timer_subdevice"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 1946} {:cexpr "seq_default_timer_resolution"} boogie_si_record_i32(0);
    call {:si_unique_call 1947} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.12 := $sub.i32(0, 1);
    call {:si_unique_call 1948} {:cexpr "announce_port"} boogie_si_record_i32($sub.i32(0, 1));
    $M.11 := $sub.i32(0, 1);
    call {:si_unique_call 1949} {:cexpr "sysclient"} boogie_si_record_i32($sub.i32(0, 1));
    $M.7 := $store.i32($M.7, queue_list_lock, 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref(queue_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref(queue_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(queue_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref(queue_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(queue_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(queue_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref(queue_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.114);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref(queue_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref(queue_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.39 := $store.i32($M.39, ioctl_tables, $sub.i32(0, 1070574846));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(0, 16)), $mul.ref(8, 1)), snd_seq_ioctl_system_info);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(1, 16)), $mul.ref(0, 1)), $sub.i32(0, 1072671997));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(1, 16)), $mul.ref(8, 1)), snd_seq_ioctl_running_mode);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(2, 16)), $mul.ref(0, 1)), $sub.i32(0, 1061399792));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(2, 16)), $mul.ref(8, 1)), snd_seq_ioctl_get_client_info);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(3, 16)), $mul.ref(0, 1)), 1086083857);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(3, 16)), $mul.ref(8, 1)), snd_seq_ioctl_set_client_info);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(4, 16)), $mul.ref(0, 1)), $sub.i32(0, 1062710496));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(4, 16)), $mul.ref(8, 1)), snd_seq_ioctl_create_port);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(5, 16)), $mul.ref(0, 1)), 1084773153);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(5, 16)), $mul.ref(8, 1)), snd_seq_ioctl_delete_port);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(6, 16)), $mul.ref(0, 1)), $sub.i32(0, 1062710494));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(6, 16)), $mul.ref(8, 1)), snd_seq_ioctl_get_port_info);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(7, 16)), $mul.ref(0, 1)), 1084773155);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(7, 16)), $mul.ref(8, 1)), snd_seq_ioctl_set_port_info);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(8, 16)), $mul.ref(0, 1)), 1079006000);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(8, 16)), $mul.ref(8, 1)), snd_seq_ioctl_subscribe_port);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(9, 16)), $mul.ref(0, 1)), 1079006001);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(9, 16)), $mul.ref(8, 1)), snd_seq_ioctl_unsubscribe_port);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(10, 16)), $mul.ref(0, 1)), $sub.i32(0, 1064545486));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(10, 16)), $mul.ref(8, 1)), snd_seq_ioctl_create_queue);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(11, 16)), $mul.ref(0, 1)), 1082938163);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(11, 16)), $mul.ref(8, 1)), snd_seq_ioctl_delete_queue);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(12, 16)), $mul.ref(0, 1)), $sub.i32(0, 1064545484));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(12, 16)), $mul.ref(8, 1)), snd_seq_ioctl_get_queue_info);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(13, 16)), $mul.ref(0, 1)), $sub.i32(0, 1064545483));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(13, 16)), $mul.ref(8, 1)), snd_seq_ioctl_set_queue_info);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(14, 16)), $mul.ref(0, 1)), $sub.i32(0, 1064545482));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(14, 16)), $mul.ref(8, 1)), snd_seq_ioctl_get_named_queue);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(15, 16)), $mul.ref(0, 1)), $sub.i32(0, 1067691200));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(15, 16)), $mul.ref(8, 1)), snd_seq_ioctl_get_queue_status);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(16, 16)), $mul.ref(0, 1)), $sub.i32(0, 1070836927));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(16, 16)), $mul.ref(8, 1)), snd_seq_ioctl_get_queue_tempo);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(17, 16)), $mul.ref(0, 1)), 1076646722);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(17, 16)), $mul.ref(8, 1)), snd_seq_ioctl_set_queue_tempo);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(18, 16)), $mul.ref(0, 1)), $sub.i32(0, 1067429051));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(18, 16)), $mul.ref(8, 1)), snd_seq_ioctl_get_queue_timer);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(19, 16)), $mul.ref(0, 1)), 1080054598);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(19, 16)), $mul.ref(8, 1)), snd_seq_ioctl_set_queue_timer);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(20, 16)), $mul.ref(0, 1)), $sub.i32(0, 1068739767));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(20, 16)), $mul.ref(8, 1)), snd_seq_ioctl_get_queue_client);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(21, 16)), $mul.ref(0, 1)), 1078743882);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(21, 16)), $mul.ref(8, 1)), snd_seq_ioctl_set_queue_client);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(22, 16)), $mul.ref(0, 1)), $sub.i32(0, 1067953333));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(22, 16)), $mul.ref(8, 1)), snd_seq_ioctl_get_client_pool);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(23, 16)), $mul.ref(0, 1)), 1079530316);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(23, 16)), $mul.ref(8, 1)), snd_seq_ioctl_set_client_pool);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(24, 16)), $mul.ref(0, 1)), $sub.i32(0, 1068477616));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(24, 16)), $mul.ref(8, 1)), snd_seq_ioctl_get_subscription);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(25, 16)), $mul.ref(0, 1)), $sub.i32(0, 1061399727));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(25, 16)), $mul.ref(8, 1)), snd_seq_ioctl_query_next_client);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(26, 16)), $mul.ref(0, 1)), $sub.i32(0, 1062710446));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(26, 16)), $mul.ref(8, 1)), snd_seq_ioctl_query_next_port);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(27, 16)), $mul.ref(0, 1)), 1077957454);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(27, 16)), $mul.ref(8, 1)), snd_seq_ioctl_remove_events);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(28, 16)), $mul.ref(0, 1)), $sub.i32(0, 1067953329));
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(28, 16)), $mul.ref(8, 1)), snd_seq_ioctl_query_subs);
    $M.39 := $store.i32($M.39, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(29, 16)), $mul.ref(0, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(ioctl_tables, $mul.ref(0, 480)), $mul.ref(29, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, register_mutex, 1);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.90);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(register_mutex, $mul.ref(80, 1)));
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(register_mutex, $mul.ref(80, 1)));
    $M.7 := $store.ref($M.7, $add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(112, 1)), register_mutex);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.91);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.7 := $store.i32($M.7, clients_lock, 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref(clients_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref(clients_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(clients_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref(clients_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(clients_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(clients_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref(clients_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.88);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref(clients_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref(clients_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.6 := 0;
    call {:si_unique_call 1950} {:cexpr "ldv_mutex_timer_mutex"} boogie_si_record_i32(0);
    $M.5 := 0;
    call {:si_unique_call 1951} {:cexpr "ldv_mutex_register_mutex"} boogie_si_record_i32(0);
    $M.4 := 0;
    call {:si_unique_call 1952} {:cexpr "ldv_mutex_power_lock"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 1953} {:cexpr "ldv_mutex_ports_mutex"} boogie_si_record_i32(0);
    $M.2 := 0;
    call {:si_unique_call 1954} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(0);
    $M.1 := 0;
    call {:si_unique_call 1955} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.0 := 0;
    call {:si_unique_call 1956} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(0);
    $M.26 := 0;
    call {:si_unique_call 1957} {:cexpr "num_queues"} boogie_si_record_i32(0);
    $M.23 := $store.ref($M.23, queue_list, $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref(1, 8)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref(2, 8)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref(3, 8)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref(4, 8)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref(5, 8)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref(6, 8)), $0.ref);
    $M.23 := $store.ref($M.23, $add.ref($add.ref(queue_list, $mul.ref(0, 64)), $mul.ref(7, 8)), $0.ref);
    $M.10 := 0;
    $M.10 := 0;
    $M.8 := $store.ref($M.8, clienttab, $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(1, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(2, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(3, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(4, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(5, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(6, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(7, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(8, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(9, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(10, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(11, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(12, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(13, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(14, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(15, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(16, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(17, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(18, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(19, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(20, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(21, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(22, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(23, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(24, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(25, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(26, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(27, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(28, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(29, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(30, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(31, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(32, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(33, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(34, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(35, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(36, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(37, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(38, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(39, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(40, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(41, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(42, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(43, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(44, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(45, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(46, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(47, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(48, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(49, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(50, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(51, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(52, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(53, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(54, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(55, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(56, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(57, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(58, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(59, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(60, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(61, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(62, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(63, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(64, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(65, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(66, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(67, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(68, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(69, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(70, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(71, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(72, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(73, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(74, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(75, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(76, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(77, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(78, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(79, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(80, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(81, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(82, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(83, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(84, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(85, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(86, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(87, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(88, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(89, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(90, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(91, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(92, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(93, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(94, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(95, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(96, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(97, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(98, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(99, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(100, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(101, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(102, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(103, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(104, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(105, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(106, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(107, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(108, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(109, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(110, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(111, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(112, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(113, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(114, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(115, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(116, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(117, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(118, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(119, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(120, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(121, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(122, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(123, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(124, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(125, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(126, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(127, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(128, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(129, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(130, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(131, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(132, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(133, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(134, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(135, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(136, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(137, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(138, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(139, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(140, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(141, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(142, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(143, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(144, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(145, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(146, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(147, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(148, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(149, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(150, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(151, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(152, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(153, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(154, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(155, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(156, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(157, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(158, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(159, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(160, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(161, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(162, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(163, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(164, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(165, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(166, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(167, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(168, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(169, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(170, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(171, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(172, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(173, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(174, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(175, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(176, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(177, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(178, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(179, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(180, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(181, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(182, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(183, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(184, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(185, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(186, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(187, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(188, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(189, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(190, 8)), $0.ref);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(clienttab, $mul.ref(0, 1536)), $mul.ref(191, 8)), $0.ref);
    $M.9 := $store.i8($M.9, clienttablock, 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(1, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(2, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(3, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(4, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(5, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(6, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(7, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(8, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(9, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(10, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(11, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(13, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(14, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(15, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(16, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(17, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(18, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(19, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(20, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(21, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(22, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(23, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(24, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(25, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(26, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(27, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(28, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(29, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(30, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(31, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(32, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(33, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(34, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(35, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(36, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(37, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(38, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(39, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(40, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(41, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(42, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(43, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(44, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(45, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(46, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(47, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(48, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(49, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(50, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(51, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(52, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(53, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(54, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(55, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(56, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(57, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(58, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(59, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(60, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(61, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(62, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(63, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(64, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(65, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(66, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(67, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(68, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(69, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(70, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(71, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(72, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(73, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(74, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(75, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(76, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(77, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(78, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(79, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(80, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(81, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(82, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(83, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(84, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(85, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(86, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(87, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(88, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(89, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(90, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(91, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(92, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(93, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(94, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(95, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(96, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(97, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(98, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(99, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(100, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(101, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(102, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(103, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(104, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(105, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(106, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(107, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(108, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(109, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(110, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(111, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(112, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(113, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(114, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(115, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(116, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(117, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(118, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(119, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(120, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(121, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(122, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(123, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(124, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(125, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(126, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(127, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(128, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(129, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(130, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(131, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(132, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(133, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(134, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(135, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(136, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(137, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(138, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(139, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(140, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(141, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(142, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(143, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(144, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(145, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(146, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(147, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(148, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(149, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(150, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(151, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(152, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(153, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(154, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(155, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(156, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(157, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(158, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(159, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(160, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(161, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(162, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(163, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(164, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(165, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(166, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(167, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(168, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(169, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(170, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(171, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(172, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(173, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(174, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(175, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(176, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(177, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(178, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(179, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(180, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(181, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(182, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(183, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(184, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(185, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(186, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(187, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(188, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(189, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(190, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref(clienttablock, $mul.ref(0, 192)), $mul.ref(191, 1)), 0);
    $M.90 := $store.i8($M.90, .str.70, 115);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(1, 1)), 101);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(2, 1)), 113);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(3, 1)), 117);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(4, 1)), 101);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(5, 1)), 110);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(6, 1)), 99);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(7, 1)), 101);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(8, 1)), 114);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(9, 1)), 32);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(10, 1)), 113);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(11, 1)), 117);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(13, 1)), 117);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(14, 1)), 101);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(15, 1)), 32);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(16, 1)), 37);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(17, 1)), 105);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(.str.70, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.91 := $store.i8($M.91, .str.75, 83);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(1, 1)), 121);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(2, 1)), 115);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(3, 1)), 116);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(4, 1)), 101);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(5, 1)), 109);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.92 := $store.i8($M.92, .str.76, 84);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(.str.76, $mul.ref(0, 6)), $mul.ref(1, 1)), 105);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(.str.76, $mul.ref(0, 6)), $mul.ref(2, 1)), 109);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(.str.76, $mul.ref(0, 6)), $mul.ref(3, 1)), 101);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(.str.76, $mul.ref(0, 6)), $mul.ref(4, 1)), 114);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(.str.76, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.93 := $store.i8($M.93, .str.77, 65);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(1, 1)), 110);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(2, 1)), 110);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(3, 1)), 111);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(4, 1)), 117);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(5, 1)), 110);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(6, 1)), 99);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(7, 1)), 101);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(.str.77, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, .str.16, 85);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.16, $mul.ref(0, 5)), $mul.ref(1, 1)), 115);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.16, $mul.ref(0, 5)), $mul.ref(2, 1)), 101);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.16, $mul.ref(0, 5)), $mul.ref(3, 1)), 114);
    $M.94 := $store.i8($M.94, $add.ref($add.ref(.str.16, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.95 := $store.i8($M.95, .str.17, 75);
    $M.95 := $store.i8($M.95, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(1, 1)), 101);
    $M.95 := $store.i8($M.95, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(2, 1)), 114);
    $M.95 := $store.i8($M.95, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(3, 1)), 110);
    $M.95 := $store.i8($M.95, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(4, 1)), 101);
    $M.95 := $store.i8($M.95, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(5, 1)), 108);
    $M.95 := $store.i8($M.95, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i8($M.7, .str.88, 99);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(1, 1)), 108);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(2, 1)), 105);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(3, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(4, 1)), 110);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(5, 1)), 116);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(6, 1)), 115);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(8, 1)), 108);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(9, 1)), 111);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(10, 1)), 99);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(11, 1)), 107);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.88, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, .str.90, 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(1, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(2, 1)), 103);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(3, 1)), 105);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(4, 1)), 115);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(5, 1)), 116);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(6, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(7, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(8, 1)), 95);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(9, 1)), 109);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(10, 1)), 117);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(11, 1)), 116);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(12, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(13, 1)), 120);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(14, 1)), 46);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(15, 1)), 119);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(16, 1)), 97);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(17, 1)), 105);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(18, 1)), 116);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(19, 1)), 95);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(20, 1)), 108);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(21, 1)), 111);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(23, 1)), 107);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.90, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.7 := $store.i8($M.7, .str.91, 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.91, $mul.ref(0, 15)), $mul.ref(1, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.91, $mul.ref(0, 15)), $mul.ref(2, 1)), 103);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.91, $mul.ref(0, 15)), $mul.ref(3, 1)), 105);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.91, $mul.ref(0, 15)), $mul.ref(4, 1)), 115);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.91, $mul.ref(0, 15)), $mul.ref(5, 1)), 116);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.91, $mul.ref(0, 15)), $mul.ref(6, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.91, $mul.ref(0, 15)), $mul.ref(7, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.91, $mul.ref(0, 15)), $mul.ref(8, 1)), 95);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.91, $mul.ref(0, 15)), $mul.ref(9, 1)), 109);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.91, $mul.ref(0, 15)), $mul.ref(10, 1)), 117);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.91, $mul.ref(0, 15)), $mul.ref(11, 1)), 116);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.91, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.91, $mul.ref(0, 15)), $mul.ref(13, 1)), 120);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.91, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.96 := $store.i8($M.96, .str.97, 81);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.97, $mul.ref(0, 9)), $mul.ref(1, 1)), 117);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.97, $mul.ref(0, 9)), $mul.ref(2, 1)), 101);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.97, $mul.ref(0, 9)), $mul.ref(3, 1)), 117);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.97, $mul.ref(0, 9)), $mul.ref(4, 1)), 101);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.97, $mul.ref(0, 9)), $mul.ref(5, 1)), 45);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.97, $mul.ref(0, 9)), $mul.ref(6, 1)), 37);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.97, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.97, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, .str.82, 112);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(1, 1)), 111);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(2, 1)), 114);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(3, 1)), 116);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(4, 1)), 45);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(5, 1)), 37);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.82, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.98 := $store.i8($M.98, .str.106, 67);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(1, 1)), 108);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(2, 1)), 105);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(3, 1)), 101);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(4, 1)), 110);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(5, 1)), 116);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(8, 1)), 100);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(.str.106, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.7 := $store.i8($M.7, .str.114, 113);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(1, 1)), 117);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(2, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(3, 1)), 117);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(4, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(6, 1)), 108);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(7, 1)), 105);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(8, 1)), 115);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(9, 1)), 116);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(13, 1)), 99);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(14, 1)), 107);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.114, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.99 := $store.i8($M.99, .str.84, 85);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(1, 1)), 110);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(2, 1)), 97);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(3, 1)), 109);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(4, 1)), 101);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(6, 1)), 32);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(7, 1)), 112);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(8, 1)), 111);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(9, 1)), 114);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    call {:si_unique_call 1958} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 524937);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 525969);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 527001);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i32, arg4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i32, arg4: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1959} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 528033);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 529065);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 530097);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1960} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 531129);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1961} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 532161);

procedure devirtbounce.7(funcPtr: ref, arg: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 533193);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.13, $M.15, $M.7, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $CurrAddr, $M.3, assertsPassed, $M.37, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i130 := $eq.ref(snd_seq_release, $p0);
    assume true;
    goto $bb34, $bb67;

  $bb67:
    assume !($i130 == 1);
    $i129 := $eq.ref(snd_seq_open, $p0);
    assume {:branchcond $i129} true;
    goto $bb33, $bb66;

  $bb66:
    assume !($i129 == 1);
    $i128 := $eq.ref(snd_seq_poll, $p0);
    assume {:branchcond $i128} true;
    goto $bb32, $bb65;

  $bb65:
    assume !($i128 == 1);
    $i127 := $eq.ref(snd_seq_ioctl_query_subs, $p0);
    assume true;
    goto $bb31, $bb64;

  $bb64:
    assume !($i127 == 1);
    $i126 := $eq.ref(snd_seq_ioctl_remove_events, $p0);
    assume {:branchcond $i126} true;
    goto $bb30, $bb63;

  $bb63:
    assume !($i126 == 1);
    $i125 := $eq.ref(snd_seq_ioctl_query_next_port, $p0);
    assume true;
    goto $bb29, $bb62;

  $bb62:
    assume !($i125 == 1);
    $i124 := $eq.ref(snd_seq_ioctl_query_next_client, $p0);
    assume {:branchcond $i124} true;
    goto $bb28, $bb61;

  $bb61:
    assume !($i124 == 1);
    $i123 := $eq.ref(snd_seq_ioctl_get_subscription, $p0);
    assume {:branchcond $i123} true;
    goto $bb27, $bb60;

  $bb60:
    assume !($i123 == 1);
    $i122 := $eq.ref(snd_seq_ioctl_set_client_pool, $p0);
    assume {:branchcond $i122} true;
    goto $bb26, $bb59;

  $bb59:
    assume !($i122 == 1);
    $i121 := $eq.ref(snd_seq_ioctl_get_client_pool, $p0);
    assume true;
    goto $bb25, $bb58;

  $bb58:
    assume !($i121 == 1);
    $i120 := $eq.ref(snd_seq_ioctl_set_queue_client, $p0);
    assume {:branchcond $i120} true;
    goto $bb24, $bb57;

  $bb57:
    assume !($i120 == 1);
    $i119 := $eq.ref(snd_seq_ioctl_get_queue_client, $p0);
    assume true;
    goto $bb23, $bb56;

  $bb56:
    assume !($i119 == 1);
    $i118 := $eq.ref(snd_seq_ioctl_set_queue_timer, $p0);
    assume {:branchcond $i118} true;
    goto $bb22, $bb55;

  $bb55:
    assume !($i118 == 1);
    $i117 := $eq.ref(snd_seq_ioctl_get_queue_timer, $p0);
    assume {:branchcond $i117} true;
    goto $bb21, $bb54;

  $bb54:
    assume !($i117 == 1);
    $i116 := $eq.ref(snd_seq_ioctl_set_queue_tempo, $p0);
    assume {:branchcond $i116} true;
    goto $bb20, $bb53;

  $bb53:
    assume !($i116 == 1);
    $i115 := $eq.ref(snd_seq_ioctl_get_queue_tempo, $p0);
    assume true;
    goto $bb19, $bb52;

  $bb52:
    assume !($i115 == 1);
    $i114 := $eq.ref(snd_seq_ioctl_get_queue_status, $p0);
    assume {:branchcond $i114} true;
    goto $bb18, $bb51;

  $bb51:
    assume !($i114 == 1);
    $i113 := $eq.ref(snd_seq_ioctl_get_named_queue, $p0);
    assume {:branchcond $i113} true;
    goto $bb17, $bb50;

  $bb50:
    assume !($i113 == 1);
    $i112 := $eq.ref(snd_seq_ioctl_set_queue_info, $p0);
    assume {:branchcond $i112} true;
    goto $bb16, $bb49;

  $bb49:
    assume !($i112 == 1);
    $i111 := $eq.ref(snd_seq_ioctl_get_queue_info, $p0);
    assume true;
    goto $bb15, $bb48;

  $bb48:
    assume !($i111 == 1);
    $i110 := $eq.ref(snd_seq_ioctl_delete_queue, $p0);
    assume {:branchcond $i110} true;
    goto $bb14, $bb47;

  $bb47:
    assume !($i110 == 1);
    $i109 := $eq.ref(snd_seq_ioctl_create_queue, $p0);
    assume {:branchcond $i109} true;
    goto $bb13, $bb46;

  $bb46:
    assume !($i109 == 1);
    $i108 := $eq.ref(snd_seq_ioctl_unsubscribe_port, $p0);
    assume {:branchcond $i108} true;
    goto $bb12, $bb45;

  $bb45:
    assume !($i108 == 1);
    $i107 := $eq.ref(snd_seq_ioctl_subscribe_port, $p0);
    assume {:branchcond $i107} true;
    goto $bb11, $bb44;

  $bb44:
    assume !($i107 == 1);
    $i106 := $eq.ref(snd_seq_ioctl_set_port_info, $p0);
    assume true;
    goto $bb10, $bb43;

  $bb43:
    assume !($i106 == 1);
    $i105 := $eq.ref(snd_seq_ioctl_get_port_info, $p0);
    assume true;
    goto $bb9, $bb42;

  $bb42:
    assume !($i105 == 1);
    $i104 := $eq.ref(snd_seq_ioctl_delete_port, $p0);
    assume {:branchcond $i104} true;
    goto $bb8, $bb41;

  $bb41:
    assume !($i104 == 1);
    $i103 := $eq.ref(snd_seq_ioctl_create_port, $p0);
    assume true;
    goto $bb7, $bb40;

  $bb40:
    assume !($i103 == 1);
    $i102 := $eq.ref(snd_seq_ioctl_set_client_info, $p0);
    assume {:branchcond $i102} true;
    goto $bb6, $bb39;

  $bb39:
    assume !($i102 == 1);
    $i101 := $eq.ref(snd_seq_ioctl_get_client_info, $p0);
    assume true;
    goto $bb5, $bb38;

  $bb38:
    assume !($i101 == 1);
    $i100 := $eq.ref(snd_seq_ioctl_running_mode, $p0);
    assume {:branchcond $i100} true;
    goto $bb4, $bb37;

  $bb37:
    assume !($i100 == 1);
    $i99 := $eq.ref(snd_seq_ioctl_system_info, $p0);
    assume true;
    goto $bb3, $bb36;

  $bb36:
    assume !($i99 == 1);
    $i98 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i98} true;
    goto $bb2, $bb35;

  $bb35:
    assume !($i98 == 1);
    assume false;
    return;

  $bb2:
    assume $i98 == 1;
    call {:si_unique_call 1962} $i1 := __builtinx_object_size();
    $r := $i1;
    return;

  $bb3:
    assume $i99 == 1;
    $p2 := $bitcast.ref.ref(arg);
    $p3 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1963} $i4 := snd_seq_ioctl_system_info($p2, $p3);
    $r := $i4;
    return;

  $bb4:
    assume $i100 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1964} $i7 := snd_seq_ioctl_running_mode($p5, $p6);
    $r := $i7;
    return;

  $bb5:
    assume $i101 == 1;
    $p8 := $bitcast.ref.ref(arg);
    $p9 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1965} $i10 := snd_seq_ioctl_get_client_info($p8, $p9);
    $r := $i10;
    return;

  $bb6:
    assume $i102 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1966} $i13 := snd_seq_ioctl_set_client_info($p11, $p12);
    $r := $i13;
    return;

  $bb7:
    assume $i103 == 1;
    $p14 := $bitcast.ref.ref(arg);
    $p15 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1967} $i16 := snd_seq_ioctl_create_port($p14, $p15);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    $r := $i16;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i104 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1968} $i19 := snd_seq_ioctl_delete_port($p17, $p18);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    $r := $i19;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i105 == 1;
    $p20 := $bitcast.ref.ref(arg);
    $p21 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1969} $i22 := snd_seq_ioctl_get_port_info($p20, $p21);
    $r := $i22;
    return;

  $bb10:
    assume $i106 == 1;
    $p23 := $bitcast.ref.ref(arg);
    $p24 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1970} $i25 := snd_seq_ioctl_set_port_info($p23, $p24);
    $r := $i25;
    return;

  $bb11:
    assume $i107 == 1;
    $p26 := $bitcast.ref.ref(arg);
    $p27 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1971} $i28 := snd_seq_ioctl_subscribe_port($p26, $p27);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    $r := $i28;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i108 == 1;
    $p29 := $bitcast.ref.ref(arg);
    $p30 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1972} $i31 := snd_seq_ioctl_unsubscribe_port($p29, $p30);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    $r := $i31;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i109 == 1;
    $p32 := $bitcast.ref.ref(arg);
    $p33 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1973} $i34 := snd_seq_ioctl_create_queue($p32, $p33);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    $r := $i34;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i110 == 1;
    $p35 := $bitcast.ref.ref(arg);
    $p36 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1974} $i37 := snd_seq_ioctl_delete_queue($p35, $p36);
    $r := $i37;
    return;

  $bb15:
    assume $i111 == 1;
    $p38 := $bitcast.ref.ref(arg);
    $p39 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1975} $i40 := snd_seq_ioctl_get_queue_info($p38, $p39);
    $r := $i40;
    return;

  $bb16:
    assume $i112 == 1;
    $p41 := $bitcast.ref.ref(arg);
    $p42 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1976} $i43 := snd_seq_ioctl_set_queue_info($p41, $p42);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    $r := $i43;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i113 == 1;
    $p44 := $bitcast.ref.ref(arg);
    $p45 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1977} $i46 := snd_seq_ioctl_get_named_queue($p44, $p45);
    $r := $i46;
    return;

  $bb18:
    assume $i114 == 1;
    $p47 := $bitcast.ref.ref(arg);
    $p48 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1978} $i49 := snd_seq_ioctl_get_queue_status($p47, $p48);
    $r := $i49;
    return;

  $bb19:
    assume $i115 == 1;
    $p50 := $bitcast.ref.ref(arg);
    $p51 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1979} $i52 := snd_seq_ioctl_get_queue_tempo($p50, $p51);
    $r := $i52;
    return;

  $bb20:
    assume $i116 == 1;
    $p53 := $bitcast.ref.ref(arg);
    $p54 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1980} $i55 := snd_seq_ioctl_set_queue_tempo($p53, $p54);
    $r := $i55;
    return;

  $bb21:
    assume $i117 == 1;
    $p56 := $bitcast.ref.ref(arg);
    $p57 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1981} $i58 := snd_seq_ioctl_get_queue_timer($p56, $p57);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    $r := $i58;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i118 == 1;
    $p59 := $bitcast.ref.ref(arg);
    $p60 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1982} $i61 := snd_seq_ioctl_set_queue_timer($p59, $p60);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    $r := $i61;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i119 == 1;
    $p62 := $bitcast.ref.ref(arg);
    $p63 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1983} $i64 := snd_seq_ioctl_get_queue_client($p62, $p63);
    $r := $i64;
    return;

  $bb24:
    assume $i120 == 1;
    $p65 := $bitcast.ref.ref(arg);
    $p66 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1984} $i67 := snd_seq_ioctl_set_queue_client($p65, $p66);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    $r := $i67;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i121 == 1;
    $p68 := $bitcast.ref.ref(arg);
    $p69 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1985} $i70 := snd_seq_ioctl_get_client_pool($p68, $p69);
    $r := $i70;
    return;

  $bb26:
    assume $i122 == 1;
    $p71 := $bitcast.ref.ref(arg);
    $p72 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1986} $i73 := snd_seq_ioctl_set_client_pool($p71, $p72);
    $r := $i73;
    return;

  $bb27:
    assume $i123 == 1;
    $p74 := $bitcast.ref.ref(arg);
    $p75 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1987} $i76 := snd_seq_ioctl_get_subscription($p74, $p75);
    $r := $i76;
    return;

  $bb28:
    assume $i124 == 1;
    $p77 := $bitcast.ref.ref(arg);
    $p78 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1988} $i79 := snd_seq_ioctl_query_next_client($p77, $p78);
    $r := $i79;
    return;

  $bb29:
    assume $i125 == 1;
    $p80 := $bitcast.ref.ref(arg);
    $p81 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1989} $i82 := snd_seq_ioctl_query_next_port($p80, $p81);
    $r := $i82;
    return;

  $bb30:
    assume $i126 == 1;
    $p83 := $bitcast.ref.ref(arg);
    $p84 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1990} $i85 := snd_seq_ioctl_remove_events($p83, $p84);
    $r := $i85;
    return;

  $bb31:
    assume $i127 == 1;
    $p86 := $bitcast.ref.ref(arg);
    $p87 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1991} $i88 := snd_seq_ioctl_query_subs($p86, $p87);
    $r := $i88;
    return;

  $bb32:
    assume $i128 == 1;
    $p89 := $bitcast.ref.ref(arg);
    $p90 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1992} $i91 := snd_seq_poll($p89, $p90);
    $r := $i91;
    return;

  $bb33:
    assume $i129 == 1;
    $p92 := $bitcast.ref.ref(arg);
    $p93 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1993} $i94 := snd_seq_open($p92, $p93);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    $r := $i94;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i130 == 1;
    $p95 := $bitcast.ref.ref(arg);
    $p96 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1994} $i97 := snd_seq_release($p95, $p96);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    $r := $i97;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 534225);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 535257);

procedure devirtbounce.10(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1995} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 536289);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.13, $M.15, $M.7, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $CurrAddr, $M.3, assertsPassed, $M.37, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i72 := $eq.ref(snd_seq_release, $p0);
    assume true;
    goto $bb34, $bb67;

  $bb67:
    assume !($i72 == 1);
    $i71 := $eq.ref(snd_seq_open, $p0);
    assume true;
    goto $bb33, $bb66;

  $bb66:
    assume !($i71 == 1);
    $i70 := $eq.ref(snd_seq_poll, $p0);
    assume true;
    goto $bb32, $bb65;

  $bb65:
    assume !($i70 == 1);
    $i69 := $eq.ref(snd_seq_ioctl_query_subs, $p0);
    assume {:branchcond $i69} true;
    goto $bb31, $bb64;

  $bb64:
    assume !($i69 == 1);
    $i68 := $eq.ref(snd_seq_ioctl_remove_events, $p0);
    assume true;
    goto $bb30, $bb63;

  $bb63:
    assume !($i68 == 1);
    $i67 := $eq.ref(snd_seq_ioctl_query_next_port, $p0);
    assume true;
    goto $bb29, $bb62;

  $bb62:
    assume !($i67 == 1);
    $i66 := $eq.ref(snd_seq_ioctl_query_next_client, $p0);
    assume true;
    goto $bb28, $bb61;

  $bb61:
    assume !($i66 == 1);
    $i65 := $eq.ref(snd_seq_ioctl_get_subscription, $p0);
    assume true;
    goto $bb27, $bb60;

  $bb60:
    assume !($i65 == 1);
    $i64 := $eq.ref(snd_seq_ioctl_set_client_pool, $p0);
    assume true;
    goto $bb26, $bb59;

  $bb59:
    assume !($i64 == 1);
    $i63 := $eq.ref(snd_seq_ioctl_get_client_pool, $p0);
    assume true;
    goto $bb25, $bb58;

  $bb58:
    assume !($i63 == 1);
    $i62 := $eq.ref(snd_seq_ioctl_set_queue_client, $p0);
    assume true;
    goto $bb24, $bb57;

  $bb57:
    assume !($i62 == 1);
    $i61 := $eq.ref(snd_seq_ioctl_get_queue_client, $p0);
    assume true;
    goto $bb23, $bb56;

  $bb56:
    assume !($i61 == 1);
    $i60 := $eq.ref(snd_seq_ioctl_set_queue_timer, $p0);
    assume true;
    goto $bb22, $bb55;

  $bb55:
    assume !($i60 == 1);
    $i59 := $eq.ref(snd_seq_ioctl_get_queue_timer, $p0);
    assume {:branchcond $i59} true;
    goto $bb21, $bb54;

  $bb54:
    assume !($i59 == 1);
    $i58 := $eq.ref(snd_seq_ioctl_set_queue_tempo, $p0);
    assume {:branchcond $i58} true;
    goto $bb20, $bb53;

  $bb53:
    assume !($i58 == 1);
    $i57 := $eq.ref(snd_seq_ioctl_get_queue_tempo, $p0);
    assume true;
    goto $bb19, $bb52;

  $bb52:
    assume !($i57 == 1);
    $i56 := $eq.ref(snd_seq_ioctl_get_queue_status, $p0);
    assume true;
    goto $bb18, $bb51;

  $bb51:
    assume !($i56 == 1);
    $i55 := $eq.ref(snd_seq_ioctl_get_named_queue, $p0);
    assume {:branchcond $i55} true;
    goto $bb17, $bb50;

  $bb50:
    assume !($i55 == 1);
    $i54 := $eq.ref(snd_seq_ioctl_set_queue_info, $p0);
    assume true;
    goto $bb16, $bb49;

  $bb49:
    assume !($i54 == 1);
    $i53 := $eq.ref(snd_seq_ioctl_get_queue_info, $p0);
    assume true;
    goto $bb15, $bb48;

  $bb48:
    assume !($i53 == 1);
    $i52 := $eq.ref(snd_seq_ioctl_delete_queue, $p0);
    assume true;
    goto $bb14, $bb47;

  $bb47:
    assume !($i52 == 1);
    $i51 := $eq.ref(snd_seq_ioctl_create_queue, $p0);
    assume true;
    goto $bb13, $bb46;

  $bb46:
    assume !($i51 == 1);
    $i50 := $eq.ref(snd_seq_ioctl_unsubscribe_port, $p0);
    assume true;
    goto $bb12, $bb45;

  $bb45:
    assume !($i50 == 1);
    $i49 := $eq.ref(snd_seq_ioctl_subscribe_port, $p0);
    assume true;
    goto $bb11, $bb44;

  $bb44:
    assume !($i49 == 1);
    $i48 := $eq.ref(snd_seq_ioctl_set_port_info, $p0);
    assume {:branchcond $i48} true;
    goto $bb10, $bb43;

  $bb43:
    assume !($i48 == 1);
    $i47 := $eq.ref(snd_seq_ioctl_get_port_info, $p0);
    assume true;
    goto $bb9, $bb42;

  $bb42:
    assume !($i47 == 1);
    $i46 := $eq.ref(snd_seq_ioctl_delete_port, $p0);
    assume {:branchcond $i46} true;
    goto $bb8, $bb41;

  $bb41:
    assume !($i46 == 1);
    $i45 := $eq.ref(snd_seq_ioctl_create_port, $p0);
    assume {:branchcond $i45} true;
    goto $bb7, $bb40;

  $bb40:
    assume !($i45 == 1);
    $i44 := $eq.ref(snd_seq_ioctl_set_client_info, $p0);
    assume true;
    goto $bb6, $bb39;

  $bb39:
    assume !($i44 == 1);
    $i43 := $eq.ref(snd_seq_ioctl_get_client_info, $p0);
    assume true;
    goto $bb5, $bb38;

  $bb38:
    assume !($i43 == 1);
    $i42 := $eq.ref(snd_seq_ioctl_running_mode, $p0);
    assume true;
    goto $bb4, $bb37;

  $bb37:
    assume !($i42 == 1);
    $i41 := $eq.ref(snd_seq_ioctl_system_info, $p0);
    assume true;
    goto $bb3, $bb36;

  $bb36:
    assume !($i41 == 1);
    $i40 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i40} true;
    goto $bb2, $bb35;

  $bb35:
    assume !($i40 == 1);
    assume false;
    return;

  $bb2:
    assume $i40 == 1;
    call {:si_unique_call 1996} $i1 := __builtinx_object_size();
    $r := $i1;
    return;

  $bb3:
    assume $i41 == 1;
    call {:si_unique_call 1997} $i2 := snd_seq_ioctl_system_info(arg, arg1);
    $r := $i2;
    return;

  $bb4:
    assume $i42 == 1;
    call {:si_unique_call 1998} $i3 := snd_seq_ioctl_running_mode(arg, arg1);
    $r := $i3;
    return;

  $bb5:
    assume $i43 == 1;
    call {:si_unique_call 1999} $i4 := snd_seq_ioctl_get_client_info(arg, arg1);
    $r := $i4;
    return;

  $bb6:
    assume $i44 == 1;
    call {:si_unique_call 2000} $i5 := snd_seq_ioctl_set_client_info(arg, arg1);
    $r := $i5;
    return;

  $bb7:
    assume $i45 == 1;
    call {:si_unique_call 2001} $i6 := snd_seq_ioctl_create_port(arg, arg1);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    $r := $i6;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i46 == 1;
    call {:si_unique_call 2002} $i7 := snd_seq_ioctl_delete_port(arg, arg1);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    $r := $i7;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i47 == 1;
    call {:si_unique_call 2003} $i8 := snd_seq_ioctl_get_port_info(arg, arg1);
    $r := $i8;
    return;

  $bb10:
    assume $i48 == 1;
    call {:si_unique_call 2004} $i9 := snd_seq_ioctl_set_port_info(arg, arg1);
    $r := $i9;
    return;

  $bb11:
    assume $i49 == 1;
    call {:si_unique_call 2005} $i10 := snd_seq_ioctl_subscribe_port(arg, arg1);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    $r := $i10;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i50 == 1;
    call {:si_unique_call 2006} $i11 := snd_seq_ioctl_unsubscribe_port(arg, arg1);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    $r := $i11;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i51 == 1;
    call {:si_unique_call 2007} $i12 := snd_seq_ioctl_create_queue(arg, arg1);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    $r := $i12;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i52 == 1;
    call {:si_unique_call 2008} $i13 := snd_seq_ioctl_delete_queue(arg, arg1);
    $r := $i13;
    return;

  $bb15:
    assume $i53 == 1;
    call {:si_unique_call 2009} $i14 := snd_seq_ioctl_get_queue_info(arg, arg1);
    $r := $i14;
    return;

  $bb16:
    assume $i54 == 1;
    call {:si_unique_call 2010} $i15 := snd_seq_ioctl_set_queue_info(arg, arg1);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    $r := $i15;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i55 == 1;
    call {:si_unique_call 2011} $i16 := snd_seq_ioctl_get_named_queue(arg, arg1);
    $r := $i16;
    return;

  $bb18:
    assume $i56 == 1;
    call {:si_unique_call 2012} $i17 := snd_seq_ioctl_get_queue_status(arg, arg1);
    $r := $i17;
    return;

  $bb19:
    assume $i57 == 1;
    call {:si_unique_call 2013} $i18 := snd_seq_ioctl_get_queue_tempo(arg, arg1);
    $r := $i18;
    return;

  $bb20:
    assume $i58 == 1;
    call {:si_unique_call 2014} $i19 := snd_seq_ioctl_set_queue_tempo(arg, arg1);
    $r := $i19;
    return;

  $bb21:
    assume $i59 == 1;
    call {:si_unique_call 2015} $i20 := snd_seq_ioctl_get_queue_timer(arg, arg1);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    $r := $i20;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i60 == 1;
    call {:si_unique_call 2016} $i21 := snd_seq_ioctl_set_queue_timer(arg, arg1);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    $r := $i21;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i61 == 1;
    call {:si_unique_call 2017} $i22 := snd_seq_ioctl_get_queue_client(arg, arg1);
    $r := $i22;
    return;

  $bb24:
    assume $i62 == 1;
    call {:si_unique_call 2018} $i23 := snd_seq_ioctl_set_queue_client(arg, arg1);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    $r := $i23;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i63 == 1;
    call {:si_unique_call 2019} $i24 := snd_seq_ioctl_get_client_pool(arg, arg1);
    $r := $i24;
    return;

  $bb26:
    assume $i64 == 1;
    call {:si_unique_call 2020} $i25 := snd_seq_ioctl_set_client_pool(arg, arg1);
    $r := $i25;
    return;

  $bb27:
    assume $i65 == 1;
    call {:si_unique_call 2021} $i26 := snd_seq_ioctl_get_subscription(arg, arg1);
    $r := $i26;
    return;

  $bb28:
    assume $i66 == 1;
    call {:si_unique_call 2022} $i27 := snd_seq_ioctl_query_next_client(arg, arg1);
    $r := $i27;
    return;

  $bb29:
    assume $i67 == 1;
    call {:si_unique_call 2023} $i28 := snd_seq_ioctl_query_next_port(arg, arg1);
    $r := $i28;
    return;

  $bb30:
    assume $i68 == 1;
    call {:si_unique_call 2024} $i29 := snd_seq_ioctl_remove_events(arg, arg1);
    $r := $i29;
    return;

  $bb31:
    assume $i69 == 1;
    call {:si_unique_call 2025} $i30 := snd_seq_ioctl_query_subs(arg, arg1);
    $r := $i30;
    return;

  $bb32:
    assume $i70 == 1;
    $p31 := $bitcast.ref.ref(arg);
    $p32 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2026} $i33 := snd_seq_poll($p31, $p32);
    $r := $i33;
    return;

  $bb33:
    assume $i71 == 1;
    $p34 := $bitcast.ref.ref(arg);
    $p35 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2027} $i36 := snd_seq_open($p34, $p35);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    $r := $i36;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i72 == 1;
    $p37 := $bitcast.ref.ref(arg);
    $p38 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2028} $i39 := snd_seq_release($p37, $p38);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    $r := $i39;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 537321);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 538353);

procedure devirtbounce.13(funcPtr: ref, arg: ref) returns ($r: ref);



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 539385);

procedure devirtbounce.14(funcPtr: ref, arg: ref) returns ($r: ref);



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 540417);

procedure devirtbounce.15(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 541449);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 542481);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.58;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(seq_copy_in_user, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i8 == 1);
    $i7 := $eq.ref(seq_copy_in_kernel, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i7 == 1);
    $i6 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    call {:si_unique_call 2029} $i1 := __builtinx_object_size();
    $r := $i1;
    return;

  $bb3:
    assume $i7 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2030} $i3 := seq_copy_in_kernel($p2, arg1, arg2);
    $r := $i3;
    return;

  $bb4:
    assume $i8 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2031} $i5 := seq_copy_in_user($p4, arg1, arg2);
    $r := $i5;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: ref;

const $u2: ref;

const $u3: i64;

const $u4: ref;

const $u5: ref;

const $u6: i32;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.14, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.12, $M.11, $M.7, $M.39, $M.40, $M.6, $M.5, $M.4, $M.3, $M.2, $M.1, $M.0, $M.26, $M.23, $M.10, $M.8, $M.9, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2032} __SMACK_static_init();
    call {:si_unique_call 2033} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.53, $M.14, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.12, $M.11, $M.39, $M.40, $M.26, $M.23, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $CurrAddr, $M.41, $M.13, $M.15, $M.20, $M.21, $M.22, $M.57, $M.58, $M.16, $M.33, $M.17, $M.19, $M.37;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation snd_use_lock_sync_helper_loop_$bb8(in_$p0: ref, in_$i10: i1, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i9: i32, in_vslice_dummy_var_115: i64) returns (out_$i10: i1, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i9: i32, out_vslice_dummy_var_115: i64)
{

  entry:
    out_$i10, out_$i13, out_$i14, out_$i15, out_$i9, out_vslice_dummy_var_115 := in_$i10, in_$i13, in_$i14, in_$i15, in_$i9, in_vslice_dummy_var_115;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_161;

  $bb14:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i13;
    goto $bb14_dummy;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    out_$i15 := $sgt.i32(out_$i14, 0);
    goto corral_source_split_172;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} out_$i14 := atomic_read(in_$p0);
    call {:si_unique_call 45} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_171;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    out_$i13 := $sub.i32(out_$i9, 1);
    call {:si_unique_call 43} {:cexpr "max_count"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_170;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} out_vslice_dummy_var_115 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_169;

  $bb11:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i9, 0);
    goto corral_source_split_163;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i10, out_$i13, out_$i14, out_$i15, out_$i9, out_vslice_dummy_var_115 := snd_use_lock_sync_helper_loop_$bb8(in_$p0, out_$i10, out_$i13, out_$i14, out_$i15, out_$i9, out_vslice_dummy_var_115);
    return;

  exit:
    return;
}



procedure snd_use_lock_sync_helper_loop_$bb8(in_$p0: ref, in_$i10: i1, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i9: i32, in_vslice_dummy_var_115: i64) returns (out_$i10: i1, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i9: i32, out_vslice_dummy_var_115: i64);



implementation snd_seq_prioq_delete_loop_$bb10(in_$p1: ref, in_$p7: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1) returns (out_$p10: ref, out_$i11: i32, out_$i12: i1)
{

  entry:
    out_$p10, out_$i11, out_$i12 := in_$p10, in_$i11, in_$i12;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i12 == 1;
    goto $bb12_dummy;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    out_$i12 := $sgt.i32(out_$i11, 0);
    goto corral_source_split_199;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.7, in_$p7);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} snd_seq_cell_free(out_$p10);
    goto corral_source_split_197;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} out_$p10 := snd_seq_prioq_cell_out(in_$p1);
    goto corral_source_split_196;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$i12 := snd_seq_prioq_delete_loop_$bb10(in_$p1, in_$p7, out_$p10, out_$i11, out_$i12);
    return;

  exit:
    return;
}



procedure snd_seq_prioq_delete_loop_$bb10(in_$p1: ref, in_$p7: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1) returns (out_$p10: ref, out_$i11: i32, out_$i12: i1);
  modifies $M.7;



implementation snd_seq_cell_free_loop_$bb21(in_$p15: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p53: ref) returns (out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p53: ref)
{

  entry:
    out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p53 := in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$p53;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_383;

  $bb23:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$p53 := out_$p55;
    goto $bb23_dummy;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_393;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_392;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} free_cell(in_$p15, out_$p53);
    goto corral_source_split_391;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p58, out_$p57);
    goto corral_source_split_390;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p53, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_389;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.7, out_$p56);
    goto corral_source_split_388;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p15, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_387;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.7, out_$p54);
    goto corral_source_split_386;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p53, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_385;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p53 := snd_seq_cell_free_loop_$bb21(in_$p15, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p53);
    return;

  exit:
    return;
}



procedure snd_seq_cell_free_loop_$bb21(in_$p15: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p53: ref) returns (out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p53: ref);
  modifies $M.7;



implementation deliver_to_subscribers_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$p4: ref, in_$i27: i64, in_$p33: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$i31: i32, in_$p32: ref, in_$i69: i32, in_$i70: i32, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_vslice_dummy_var_122: i32) returns (out_$p33: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$i31: i32, out_$p32: ref, out_$i69: i32, out_$i70: i32, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_vslice_dummy_var_122: i32)
{

  entry:
    out_$p33, out_$p35, out_$p36, out_$p37, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$i52, out_$i53, out_$i54, out_$i55, out_$i58, out_$p59, out_$p60, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i31, out_$p32, out_$i69, out_$i70, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_122 := in_$p33, in_$p35, in_$p36, in_$p37, in_$p39, in_$i40, in_$i41, in_$i42, in_$p44, in_$i45, in_$i46, in_$p48, in_$i49, in_$i50, in_$i52, in_$i53, in_$i54, in_$i55, in_$i58, in_$p59, in_$p60, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$i31, in_$p32, in_$i69, in_$i70, in_cmdloc_dummy_var_5, in_cmdloc_dummy_var_6, in_cmdloc_dummy_var_7, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_vslice_dummy_var_122;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_994;

  $bb20:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i31, out_$p32 := out_$i58, out_$p65;
    goto $bb20_dummy;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    out_$i69, out_$i70 := out_$i52, out_$i58;
    assume true;
    goto $bb20;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i64(out_$i67, in_$i27);
    goto corral_source_split_1033;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i64(out_$p66);
    goto corral_source_split_1032;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p64, $mul.ref($sub.ref(0, 80), 120)), $mul.ref(80, 1));
    goto corral_source_split_1031;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(out_$p64, $mul.ref($sub.ref(0, 80), 120));
    goto corral_source_split_1030;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    out_$p64 := $bitcast.ref.ref(out_$p63);
    goto corral_source_split_1029;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.7, out_$p62);
    goto corral_source_split_1028;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(out_$p32, $mul.ref(0, 120)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_1027;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_8 := $M.7;
    out_cmdloc_dummy_var_9 := $M.7;
    call {:si_unique_call 226} out_cmdloc_dummy_var_10 := $memcpy.i8(out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_$p59, out_$p60, 32, $zext.i32.i64(8), 0 == 1);
    $M.7 := out_cmdloc_dummy_var_10;
    goto corral_source_split_1026;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_1025;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_1024;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i31, 1);
    call {:si_unique_call 225} {:cexpr "num_ev"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_1023;

  $bb17:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    out_$i54, out_$i55 := out_$i31, out_$i52;
    assume true;
    goto $bb17;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i52, 0);
    goto corral_source_split_1016;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} out_$i52 := snd_seq_deliver_single_event(in_$p0, in_$p1, 0, in_$i2, in_$i3);
    call {:si_unique_call 224} {:cexpr "err"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_1015;

  $bb14:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} out_vslice_dummy_var_122 := update_timestamp_of_queue(in_$p1, out_$i46, out_$i50);
    goto corral_source_split_1013;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i32(out_$i49, 4);
    goto corral_source_split_1012;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.7, out_$p48);
    goto corral_source_split_1011;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(out_$p32, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1010;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i45);
    goto corral_source_split_1009;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.7, out_$p44);
    goto corral_source_split_1008;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(out_$p32, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1007;

  $bb13:
    assume out_$i42 == 1;
    goto corral_source_split_1006;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_1004;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    out_$i41 := $and.i32(out_$i40, 2);
    goto corral_source_split_1003;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.7, out_$p39);
    goto corral_source_split_1002;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(out_$p32, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1001;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_5 := $M.7;
    out_cmdloc_dummy_var_6 := $M.7;
    call {:si_unique_call 221} out_cmdloc_dummy_var_7 := $memcpy.i8(out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_$p36, out_$p37, 2, $zext.i32.i64(2), 0 == 1);
    $M.7 := out_cmdloc_dummy_var_7;
    goto corral_source_split_1000;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_999;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_998;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref(out_$p32, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_997;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(14, 1));
    goto corral_source_split_996;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p33, out_$p35, out_$p36, out_$p37, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$i52, out_$i53, out_$i54, out_$i55, out_$i58, out_$p59, out_$p60, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i31, out_$p32, out_$i69, out_$i70, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_122 := deliver_to_subscribers_loop_$bb11(in_$p0, in_$p1, in_$i2, in_$i3, in_$p4, in_$i27, out_$p33, out_$p35, out_$p36, out_$p37, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$i52, out_$i53, out_$i54, out_$i55, out_$i58, out_$p59, out_$p60, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i31, out_$p32, out_$i69, out_$i70, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_122);
    return;

  exit:
    return;
}



procedure deliver_to_subscribers_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$p4: ref, in_$i27: i64, in_$p33: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$i31: i32, in_$p32: ref, in_$i69: i32, in_$i70: i32, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_vslice_dummy_var_122: i32) returns (out_$p33: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$i31: i32, out_$p32: ref, out_$i69: i32, out_$i70: i32, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_vslice_dummy_var_122: i32);
  modifies $M.7, $M.13, $M.15, $M.16, $CurrAddr, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_port_use_ptr_loop_$bb8(in_$i1: i32, in_$i14: i64, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p16: ref) returns (out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p16: ref)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p16 := in_$p18, in_$i19, in_$i20, in_$i21, in_$p22, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$i36, in_$i37, in_$p16;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1226;

  $bb17:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$p16 := out_$p34;
    goto $bb17_dummy;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, in_$i14);
    goto corral_source_split_1256;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_1255;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p33, $mul.ref($sub.ref(0, 80), 672)), $mul.ref(80, 1));
    goto corral_source_split_1254;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p33, $mul.ref($sub.ref(0, 80), 672));
    goto corral_source_split_1253;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_1252;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.7, out_$p31);
    goto corral_source_split_1251;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 672)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_1250;

  $bb11:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    out_$p22 := out_$p16;
    assume true;
    goto $bb11;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, in_$i1);
    goto corral_source_split_1231;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i8.i32(out_$i19);
    goto corral_source_split_1230;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i8($M.7, out_$p18);
    goto corral_source_split_1229;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_1228;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p16 := snd_seq_port_use_ptr_loop_$bb8(in_$i1, in_$i14, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p16);
    return;

  exit:
    return;
}



procedure snd_seq_port_use_ptr_loop_$bb8(in_$i1: i32, in_$i14: i64, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p16: ref) returns (out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p16: ref);



implementation snd_seq_event_dup_loop_$bb16(in_$p0: ref, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i42: i32, in_$i49: i32, in_$i77: i1, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$p83: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p93: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$i103: i1, in_$i104: i64, in_$i105: i1, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i115: i1, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i120: i64, in_$i121: i1, in_$i122: i64, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p113: ref, in_$p114: ref, in_$i126: i64, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8, in_cmdloc_dummy_var_30: [ref]i8) returns (out_$i77: i1, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$p83: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p93: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$i103: i1, out_$i104: i64, out_$i105: i1, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i115: i1, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i120: i64, out_$i121: i1, out_$i122: i64, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p113: ref, out_$p114: ref, out_$i126: i64, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8, out_cmdloc_dummy_var_30: [ref]i8)
{

  entry:
    out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p83, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p93, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p113, out_$p114, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i72, out_$p73, out_$p74, out_$p75, out_$i76, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30 := in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$p83, in_$p85, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p91, in_$p93, in_$p95, in_$p96, in_$p97, in_$i98, in_$i99, in_$p100, in_$p101, in_$p102, in_$i103, in_$i104, in_$i105, in_$p106, in_$p107, in_$p108, in_$p109, in_$p110, in_$p111, in_$p112, in_$i115, in_$p116, in_$p117, in_$p118, in_$i119, in_$i120, in_$i121, in_$i122, in_$p123, in_$p124, in_$p125, in_$p113, in_$p114, in_$i126, in_$p127, in_$i128, in_$i129, in_$i130, in_$i72, in_$p73, in_$p74, in_$p75, in_$i76, in_cmdloc_dummy_var_25, in_cmdloc_dummy_var_26, in_cmdloc_dummy_var_27, in_cmdloc_dummy_var_28, in_cmdloc_dummy_var_29, in_cmdloc_dummy_var_30;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1565;

  $bb43:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i72, out_$p73, out_$p74, out_$p75, out_$i76 := out_$i129, out_$p127, out_$p102, out_$p114, out_$i128;
    goto $bb43_dummy;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$i130 := $sgt.i32(out_$i72, 0);
    goto corral_source_split_1630;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    out_$i129 := $sub.i32(out_$i72, 1);
    call {:si_unique_call 312} {:cexpr "ncells"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    out_$i128 := $sub.i32(out_$i76, out_$i78);
    call {:si_unique_call 311} {:cexpr "len"} boogie_si_record_i32(out_$i128);
    goto corral_source_split_1628;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref(out_$p113, $mul.ref(out_$i126, 1));
    goto corral_source_split_1627;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$i126 := $sext.i32.i64(out_$i78);
    goto corral_source_split_1626;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1625;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p113, out_$p114 := out_$p73, out_$p75;
    goto $bb36;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    out_$p113, out_$p114 := out_$p73, out_$p112;
    goto $bb36;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.7, out_$p111);
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p75, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_1622;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_25 := $M.7;
    out_cmdloc_dummy_var_26 := $M.7;
    call {:si_unique_call 310} out_cmdloc_dummy_var_27 := $memcpy.i8(out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_$p109, out_$p110, 32, $zext.i32.i64(8), 0 == 1);
    $M.7 := out_cmdloc_dummy_var_27;
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    out_$p110 := $bitcast.ref.ref(out_$p108);
    goto corral_source_split_1620;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    out_$p109 := $bitcast.ref.ref(out_$p107);
    goto corral_source_split_1619;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p75, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1618;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p106, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1617;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.17, in_$p6);
    goto corral_source_split_1616;

  $bb34:
    assume out_$i105 == 1;
    goto corral_source_split_1615;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    out_$i105 := $ne.i64(out_$i104, 0);
    goto corral_source_split_1611;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    out_$i104 := $p2i.ref.i64(out_$p75);
    goto corral_source_split_1610;

  $bb31:
    assume out_$i103 == 1;
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i32(in_$i42, 0);
    goto corral_source_split_1607;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.17, in_$p6);
    goto corral_source_split_1606;

  $bb29:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p101, out_$p100);
    goto corral_source_split_1604;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p74, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_1603;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.17, in_$p6);
    goto corral_source_split_1602;

  $bb28:
    assume out_$i99 == 1;
    goto corral_source_split_1601;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i98, 0);
    goto corral_source_split_1599;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i98 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_1598;

  $bb26:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p97, out_$p91);
    goto corral_source_split_1596;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p96, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1595;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    out_$p96 := $bitcast.ref.ref(out_$p95);
    goto corral_source_split_1594;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref($add.ref(out_$p93, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1593;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.17, in_$p5);
    goto corral_source_split_1592;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    goto corral_source_split_1591;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.17, in_$p6);
    goto corral_source_split_1590;

  $bb25:
    assume out_$i90 == 1;
    goto corral_source_split_1589;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i64(out_$i89, 0);
    goto corral_source_split_1587;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_1586;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.7, out_$p87);
    goto corral_source_split_1585;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p86, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1584;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    out_$p86 := $bitcast.ref.ref(out_$p85);
    goto corral_source_split_1583;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($add.ref(out_$p83, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1582;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.17, in_$p5);
    goto corral_source_split_1581;

  $bb22:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    out_$i81 := out_$i79;
    assume true;
    goto $bb22;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i79, 0);
    goto corral_source_split_1573;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} out_$i79 := snd_seq_cell_alloc(in_$p0, in_$p6, in_$i3, in_$p4);
    call {:si_unique_call 308} {:cexpr "err"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_1572;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1571;

  $bb19:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    out_$i78 := 28;
    goto $bb20;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i76;
    goto $bb20;

  $bb18:
    assume out_$i77 == 1;
    goto corral_source_split_1569;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i76, 28);
    goto corral_source_split_1567;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb38:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_28 := $M.7;
    out_cmdloc_dummy_var_29 := $M.7;
    call {:si_unique_call 316} out_cmdloc_dummy_var_30 := $memcpy.i8(out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_$p125, out_$p73, out_$i122, $zext.i32.i64(1), 0 == 1);
    $M.7 := out_cmdloc_dummy_var_30;
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    out_$p125 := $bitcast.ref.ref(out_$p124);
    goto corral_source_split_1646;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p123, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1645;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.17, in_$p6);
    goto corral_source_split_1644;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    out_$i122 := $sext.i32.i64(out_$i78);
    call {:si_unique_call 315} {:cexpr "__len"} boogie_si_record_i64(out_$i122);
    goto corral_source_split_1643;

  $bb40:
    assume !(out_$i121 == 1);
    goto corral_source_split_1642;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i64(out_$i120, 0);
    goto corral_source_split_1638;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} out_$i120 := copy_from_user(out_$p118, out_$p73, out_$i119);
    call {:si_unique_call 314} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i120);
    goto corral_source_split_1637;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    out_$i119 := $sext.i32.i64(out_$i78);
    goto corral_source_split_1636;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    out_$p118 := $bitcast.ref.ref(out_$p117);
    goto corral_source_split_1635;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(out_$p116, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1634;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.17, in_$p6);
    goto corral_source_split_1633;

  $bb37:
    assume out_$i115 == 1;
    goto corral_source_split_1632;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i32(in_$i49, 0);
    goto corral_source_split_1613;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i103 == 1);
    goto $bb33;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i105 == 1);
    goto $bb33;

  $bb43_dummy:
    call {:si_unique_call 1} out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p83, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p93, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p113, out_$p114, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i72, out_$p73, out_$p74, out_$p75, out_$i76, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30 := snd_seq_event_dup_loop_$bb16(in_$p0, in_$i3, in_$p4, in_$p5, in_$p6, in_$i42, in_$i49, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p83, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p93, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p113, out_$p114, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i72, out_$p73, out_$p74, out_$p75, out_$i76, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30);
    return;

  exit:
    return;
}



procedure snd_seq_event_dup_loop_$bb16(in_$p0: ref, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i42: i32, in_$i49: i32, in_$i77: i1, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$p83: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p93: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$i103: i1, in_$i104: i64, in_$i105: i1, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i115: i1, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i120: i64, in_$i121: i1, in_$i122: i64, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p113: ref, in_$p114: ref, in_$i126: i64, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8, in_cmdloc_dummy_var_30: [ref]i8) returns (out_$i77: i1, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$p83: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p93: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$i103: i1, out_$i104: i64, out_$i105: i1, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i115: i1, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i120: i64, out_$i121: i1, out_$i122: i64, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p113: ref, out_$p114: ref, out_$i126: i64, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8, out_cmdloc_dummy_var_30: [ref]i8);
  modifies $M.7, $M.17, $M.19, $M.20, $M.21, $M.22, $CurrAddr;



implementation snd_seq_cell_alloc_loop_$bb12(in_$p0: ref, in_$i2: i32, in_$p4: ref, in_$p5: ref, in_$p18: ref, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i1, in_$p37: ref, in_$i38: i32, in_$i39: i1) returns (out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i1, out_$p37: ref, out_$i38: i32, out_$i39: i1)
{

  entry:
    out_$p22, out_$i23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39 := in_$p22, in_$i23, in_$p24, in_$i25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(in_$i2, 0);
    goto corral_source_split_1686;

  $bb18:
    assume {:verifier.code 0} true;
    assume out_$i35 == 1;
    goto $bb18_dummy;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i64(out_$i34, 0);
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_1710;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.7, in_$p18);
    goto corral_source_split_1709;

  $bb16:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_1705;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} out_$i31 := signal_pending(out_$p30);
    call {:si_unique_call 336} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_1704;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} out_$p30 := get_current();
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} remove_wait_queue(out_$p29, in_$p4);
    goto corral_source_split_1702;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(56, 1));
    goto corral_source_split_1701;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} spin_lock_irq(out_$p28);
    goto corral_source_split_1700;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_1699;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} schedule();
    goto corral_source_split_1698;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} spin_unlock_irq(out_$p27);
    goto corral_source_split_1697;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(144, 1));
    goto corral_source_split_1696;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} add_wait_queue(out_$p26, in_$p4);
    goto corral_source_split_1695;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(56, 1));
    goto corral_source_split_1694;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, in_$p5, out_$i25);
    goto corral_source_split_1692;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p22, $mul.ref(0, 9576)), $mul.ref(0, 1));
    call {:si_unique_call 328} out_$i25 := devirtbounce.3(0, out_$p24, out_$i23, out_$p24);
    goto corral_source_split_1691;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i64($M.19, in_$p5);
    goto corral_source_split_1690;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} out_$p22 := get_current();
    goto corral_source_split_1689;

  $bb13:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, in_$p5, 1);
    goto corral_source_split_1688;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb22:
    assume out_$i39 == 1;
    goto corral_source_split_1722;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 0);
    goto corral_source_split_1718;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.7, out_$p37);
    goto corral_source_split_1717;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(32, 1));
    goto corral_source_split_1716;

  $bb20:
    assume out_$i36 == 1;
    goto corral_source_split_1715;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p22, out_$i23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39 := snd_seq_cell_alloc_loop_$bb12(in_$p0, in_$i2, in_$p4, in_$p5, in_$p18, out_$p22, out_$i23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39);
    return;

  exit:
    return;
}



procedure snd_seq_cell_alloc_loop_$bb12(in_$p0: ref, in_$i2: i32, in_$p4: ref, in_$p5: ref, in_$p18: ref, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i1, in_$p37: ref, in_$i38: i32, in_$i39: i1) returns (out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i1, out_$p37: ref, out_$i38: i32, out_$i39: i1);
  modifies $M.19;



implementation snd_seq_sanity_real_time___0_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i5: i32, in_$i6: i32, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$p11: ref, in_$i12: i32, in_$i13: i1) returns (out_$p4: ref, out_$i5: i32, out_$i6: i32, out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$p11: ref, out_$i12: i32, out_$i13: i1)
{

  entry:
    out_$p4, out_$i5, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13 := in_$p4, in_$i5, in_$i6, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$i12, in_$i13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i13 == 1;
    goto $bb6_dummy;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$i13 := $ugt.i32(out_$i12, 999999999);
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.7, in_$p1);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, out_$p11, out_$i10);
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i9, 1);
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.7, out_$p8);
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, out_$p7, out_$i6);
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$i6 := $sub.i32(out_$i5, 1000000000);
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$i5 := $load.i32($M.7, out_$p4);
    goto corral_source_split_1978;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1977;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p4, out_$i5, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13 := snd_seq_sanity_real_time___0_loop_$bb4(in_$p0, in_$p1, out_$p4, out_$i5, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13);
    return;

  exit:
    return;
}



procedure snd_seq_sanity_real_time___0_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i5: i32, in_$i6: i32, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$p11: ref, in_$i12: i32, in_$i13: i1) returns (out_$p4: ref, out_$i5: i32, out_$i6: i32, out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$p11: ref, out_$i12: i32, out_$i13: i1);
  modifies $M.7;



implementation snd_seq_delete_all_ports_loop_$bb7(in_$p0: ref, in_$i23: i64, in_$p27: ref, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p25: ref, in_$p26: ref, in_vslice_dummy_var_125: i32) returns (out_$p27: ref, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p25: ref, out_$p26: ref, out_vslice_dummy_var_125: i32)
{

  entry:
    out_$p27, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p25, out_$p26, out_vslice_dummy_var_125 := in_$p27, in_$p29, in_$i30, in_$i31, in_$p33, in_$i34, in_$i35, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p25, in_$p26, in_vslice_dummy_var_125;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2055;

  $bb9:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$p25, out_$p26 := out_$p41, out_$p25;
    goto $bb9_dummy;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, in_$i23);
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_2072;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p25, $mul.ref(0, 672)), $mul.ref(80, 1));
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p40, $mul.ref($sub.ref(0, 80), 672));
    goto corral_source_split_2070;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.7, out_$p38);
    goto corral_source_split_2068;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 672)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_2067;

  SeqInstr_54:
    goto corral_source_split_2066;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} out_vslice_dummy_var_125 := port_delete(in_$p0, out_$p26);
    goto SeqInstr_53;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} snd_seq_system_broadcast(out_$i31, out_$i35, 64);
    goto corral_source_split_2065;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_2064;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.7, out_$p33);
    goto corral_source_split_2063;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_2062;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i8.i32(out_$i30);
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i8($M.7, out_$p29);
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} list_del(out_$p27);
    goto corral_source_split_2058;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 672)), $mul.ref(80, 1));
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p27, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p25, out_$p26, out_vslice_dummy_var_125 := snd_seq_delete_all_ports_loop_$bb7(in_$p0, in_$i23, out_$p27, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p25, out_$p26, out_vslice_dummy_var_125);
    return;

  exit:
    return;
}



procedure snd_seq_delete_all_ports_loop_$bb7(in_$p0: ref, in_$i23: i64, in_$p27: ref, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p25: ref, in_$p26: ref, in_vslice_dummy_var_125: i32) returns (out_$p27: ref, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p25: ref, out_$p26: ref, out_vslice_dummy_var_125: i32);
  modifies $M.7, $M.13, $M.15, $M.37, $CurrAddr, $M.41, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $M.3, assertsPassed, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_pool_done_loop_$bb14(in_$p24: ref, in_$i28: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i27: i32, in_vslice_dummy_var_143: i64) returns (out_$i28: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i27: i32, out_vslice_dummy_var_143: i64)
{

  entry:
    out_$i28, out_$i32, out_$i33, out_$i34, out_$i27, out_vslice_dummy_var_143 := in_$i28, in_$i32, in_$i33, in_$i34, in_$i27, in_vslice_dummy_var_143;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2764;

  $bb20:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := out_$i32;
    goto $bb20_dummy;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$i34 := $sgt.i32(out_$i33, 0);
    goto corral_source_split_2799;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} out_$i33 := atomic_read(in_$p24);
    call {:si_unique_call 566} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_2798;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    out_$i32 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 564} {:cexpr "max_count"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_2797;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} out_vslice_dummy_var_143 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_2796;

  $bb17:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 0);
    goto corral_source_split_2766;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i28, out_$i32, out_$i33, out_$i34, out_$i27, out_vslice_dummy_var_143 := snd_seq_pool_done_loop_$bb14(in_$p24, out_$i28, out_$i32, out_$i33, out_$i34, out_$i27, out_vslice_dummy_var_143);
    return;

  exit:
    return;
}



procedure snd_seq_pool_done_loop_$bb14(in_$p24: ref, in_$i28: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i27: i32, in_vslice_dummy_var_143: i64) returns (out_$i28: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i27: i32, out_vslice_dummy_var_143: i64);



implementation snd_seq_prioq_leave_loop_$bb24(in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p56: ref) returns (out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p56: ref)
{

  entry:
    out_$p57, out_$p58, out_$i59, out_$i60, out_$p56 := in_$p57, in_$p58, in_$i59, in_$i60, in_$p56;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2922;

  $bb26:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$p56 := out_$p58;
    goto $bb26_dummy;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_2928;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p58);
    goto corral_source_split_2927;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} snd_seq_cell_free(out_$p56);
    goto corral_source_split_2926;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.7, out_$p57);
    goto corral_source_split_2925;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p56, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2924;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p57, out_$p58, out_$i59, out_$i60, out_$p56 := snd_seq_prioq_leave_loop_$bb24(out_$p57, out_$p58, out_$i59, out_$i60, out_$p56);
    return;

  exit:
    return;
}



procedure snd_seq_prioq_leave_loop_$bb24(in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p56: ref) returns (out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p56: ref);
  modifies $M.7;



implementation snd_seq_prioq_leave_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p46: ref, in_$p45: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p52: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p46: ref, out_$p45: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p52: ref)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p46, out_$p45, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p11, out_$p12, out_$p13, out_$p14, out_$p52 := in_$p15, in_$p16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p46, in_$p45, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p11, in_$p12, in_$p13, in_$p14, in_$p52;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2855;

  $bb18:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$p11, out_$p12, out_$p13, out_$p14 := out_$p49, out_$p48, out_$p47, out_$p16;
    goto $bb18_dummy;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    out_$p52 := out_$p48;
    assume true;
    goto $bb18;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, 0);
    goto corral_source_split_2911;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_2910;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2909;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$p47, out_$p48, out_$p49 := out_$p14, out_$p12, out_$p11;
    goto $bb17;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    out_$p47, out_$p48, out_$p49 := out_$p13, out_$p45, out_$p14;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2907;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p46, out_$p14);
    assume {:verifier.code 0} true;
    out_$p45 := out_$p12;
    goto $bb16;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    out_$p45 := out_$p14;
    goto $bb16;

  $bb14:
    assume out_$i44 == 1;
    goto corral_source_split_2902;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i64(out_$i43, 0);
    goto corral_source_split_2900;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_2899;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p42, $0.ref);
    goto corral_source_split_2898;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2897;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, out_$p41, out_$i40);
    goto corral_source_split_2896;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_2895;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i32(out_$i39, 1);
    goto corral_source_split_2894;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.7, out_$p38);
    goto corral_source_split_2893;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_2892;

  $bb12:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p37, out_$p36);
    goto corral_source_split_2890;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_2889;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.7, out_$p35);
    goto corral_source_split_2888;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2887;

  $bb11:
    assume out_$i34 == 1;
    goto corral_source_split_2886;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i64(out_$i32, out_$i33);
    goto corral_source_split_2884;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_2883;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_2882;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.7, out_$p30);
    goto corral_source_split_2881;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_2880;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p29, out_$p28);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p26, out_$p25);
    goto corral_source_split_2873;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2872;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.7, out_$p24);
    goto corral_source_split_2871;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2870;

  $bb8:
    assume out_$i23 == 1;
    goto corral_source_split_2869;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i64(out_$i21, out_$i22);
    goto corral_source_split_2867;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_2866;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_2865;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.7, out_$p19);
    goto corral_source_split_2864;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2863;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_2862;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_2860;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} out_$i17 := prioq_match(out_$p14, in_$i1, in_$i2);
    call {:si_unique_call 584} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_2859;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.7, out_$p15);
    goto corral_source_split_2858;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2857;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p13, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2878;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.7, out_$p27);
    goto corral_source_split_2877;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2876;

  $bb9:
    assume !(out_$i23 == 1);
    goto corral_source_split_2875;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p11, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2905;

  $bb15:
    assume !(out_$i44 == 1);
    goto corral_source_split_2904;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p46, out_$p45, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p11, out_$p12, out_$p13, out_$p14, out_$p52 := snd_seq_prioq_leave_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p46, out_$p45, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p11, out_$p12, out_$p13, out_$p14, out_$p52);
    return;

  exit:
    return;
}



procedure snd_seq_prioq_leave_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p46: ref, in_$p45: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p52: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p46: ref, out_$p45: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p52: ref);
  modifies $M.7;



implementation snd_seq_check_queue_loop_$bb27(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p48: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p53: ref, in_vslice_dummy_var_148: i32) returns (out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p53: ref, out_vslice_dummy_var_148: i32)
{

  entry:
    out_$p54, out_$p55, out_$p56, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$p53, out_vslice_dummy_var_148 := in_$p54, in_$p55, in_$p56, in_$p58, in_$p59, in_$i60, in_$i61, in_$p62, in_$p63, in_$p64, in_$i65, in_$i66, in_$p68, in_$p69, in_$i70, in_$i71, in_$p53, in_vslice_dummy_var_148;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3276;

  $bb36:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$p53 := out_$p69;
    goto $bb36_dummy;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i70, 0);
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p69);
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} out_$p69 := snd_seq_prioq_cell_peek(out_$p68);
    goto corral_source_split_3299;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.7, in_$p48);
    goto corral_source_split_3298;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} out_vslice_dummy_var_148 := snd_seq_dispatch_event(out_$p64, in_$i1, in_$i2);
    goto corral_source_split_3296;

  $bb31:
    assume out_$i66 == 1;
    goto corral_source_split_3295;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i64(out_$i65, 0);
    goto corral_source_split_3291;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p64);
    goto corral_source_split_3290;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} out_$p64 := snd_seq_prioq_cell_out(out_$p63);
    goto corral_source_split_3289;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.7, out_$p62);
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3287;

  $bb29:
    assume out_$i61 == 1;
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} out_$i60 := snd_seq_compare_real_time(out_$p56, out_$p59);
    call {:si_unique_call 649} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_3283;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p58);
    goto corral_source_split_3282;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(out_$p53, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p55, $mul.ref(0, 200)), $mul.ref(12, 1));
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.7, out_$p54);
    goto corral_source_split_3279;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_3278;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb36_dummy:
    call {:si_unique_call 1} out_$p54, out_$p55, out_$p56, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$p53, out_vslice_dummy_var_148 := snd_seq_check_queue_loop_$bb27(in_$p0, in_$i1, in_$i2, in_$p48, out_$p54, out_$p55, out_$p56, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$p53, out_vslice_dummy_var_148);
    return;

  exit:
    return;
}



procedure snd_seq_check_queue_loop_$bb27(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p48: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p53: ref, in_vslice_dummy_var_148: i32) returns (out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p53: ref, out_vslice_dummy_var_148: i32);
  modifies $M.13, $M.15, $M.7, $CurrAddr, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_check_queue_loop_$bb12(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p23: ref, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p28: ref, in_vslice_dummy_var_147: i32) returns (out_$p29: ref, out_$p30: ref, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p28: ref, out_vslice_dummy_var_147: i32)
{

  entry:
    out_$p29, out_$p30, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p28, out_vslice_dummy_var_147 := in_$p29, in_$p30, in_$p32, in_$p34, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p44, in_$p45, in_$i46, in_$i47, in_$p28, in_vslice_dummy_var_147;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3239;

  $bb21:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$p28 := out_$p45;
    goto $bb21_dummy;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_3264;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_3263;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} out_$p45 := snd_seq_prioq_cell_peek(out_$p44);
    goto corral_source_split_3262;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.7, in_$p23);
    goto corral_source_split_3261;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} out_vslice_dummy_var_147 := snd_seq_dispatch_event(out_$p40, in_$i1, in_$i2);
    goto corral_source_split_3259;

  $bb16:
    assume out_$i42 == 1;
    goto corral_source_split_3258;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, 0);
    goto corral_source_split_3254;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_3253;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} out_$p40 := snd_seq_prioq_cell_out(out_$p39);
    goto corral_source_split_3252;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.7, out_$p38);
    goto corral_source_split_3251;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3250;

  $bb14:
    assume out_$i37 == 1;
    goto corral_source_split_3249;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_3247;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} out_$i36 := snd_seq_compare_tick_time(out_$p32, out_$p35);
    call {:si_unique_call 643} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3246;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_3245;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3244;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 200)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3243;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.7, out_$p29);
    goto corral_source_split_3242;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_3241;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p29, out_$p30, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p28, out_vslice_dummy_var_147 := snd_seq_check_queue_loop_$bb12(in_$p0, in_$i1, in_$i2, in_$p23, out_$p29, out_$p30, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p28, out_vslice_dummy_var_147);
    return;

  exit:
    return;
}



procedure snd_seq_check_queue_loop_$bb12(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p23: ref, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p28: ref, in_vslice_dummy_var_147: i32) returns (out_$p29: ref, out_$p30: ref, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p28: ref, out_vslice_dummy_var_147: i32);
  modifies $M.13, $M.15, $M.7, $CurrAddr, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_check_queue_loop_$bb8(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p28: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p53: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p81: ref, in_$i82: i8, in_$i83: i8, in_$p84: ref, in_$i80: i64, in_vslice_dummy_var_147: i32, in_vslice_dummy_var_148: i32) returns (out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p29: ref, out_$p30: ref, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p28: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p53: ref, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$p81: ref, out_$i82: i8, out_$i83: i8, out_$p84: ref, out_$i80: i64, out_vslice_dummy_var_147: i32, out_vslice_dummy_var_148: i32)
{

  entry:
    out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p28, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p54, out_$p55, out_$p56, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$p53, out_$p72, out_$p73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$p84, out_$i80, out_vslice_dummy_var_147, out_vslice_dummy_var_148 := in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p29, in_$p30, in_$p32, in_$p34, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p44, in_$p45, in_$i46, in_$i47, in_$p28, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p54, in_$p55, in_$p56, in_$p58, in_$p59, in_$i60, in_$i61, in_$p62, in_$p63, in_$p64, in_$i65, in_$i66, in_$p68, in_$p69, in_$i70, in_$i71, in_$p53, in_$p72, in_$p73, in_$i74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$p81, in_$i82, in_$i83, in_$p84, in_$i80, in_vslice_dummy_var_147, in_vslice_dummy_var_148;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3231;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    goto corral_source_split_3320_dummy;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} spin_unlock_irqrestore(out_$p84, out_$i74);
    goto corral_source_split_3320;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_3319;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, out_$p81, out_$i83);
    goto corral_source_split_3318;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$i83 := $and.i8(out_$i82, $sub.i8(0, 5));
    goto corral_source_split_3317;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i8($M.7, out_$p81);
    goto corral_source_split_3316;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_3315;

  $bb39:
    assume out_$i79 == 1;
    goto corral_source_split_3314;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i74;
    assume true;
    goto $bb39;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_3310;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i77);
    goto corral_source_split_3309;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.7, out_$p76);
    goto corral_source_split_3308;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref(out_$p75, $mul.ref(100, 1));
    goto corral_source_split_3307;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    out_$p75 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} out_$i74 := _raw_spin_lock_irqsave(out_$p73);
    call {:si_unique_call 655} {:cexpr "flags"} boogie_si_record_i64(out_$i74);
    goto corral_source_split_3305;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} out_$p73 := spinlock_check(out_$p72);
    goto corral_source_split_3304;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_3303;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume !(out_$i61 == 1);
    goto corral_source_split_3293;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} out_$i60 := snd_seq_compare_real_time(out_$p56, out_$p59);
    call {:si_unique_call 649} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_3283;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p58);
    goto corral_source_split_3282;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(out_$p53, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p55, $mul.ref(0, 200)), $mul.ref(12, 1));
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.7, out_$p54);
    goto corral_source_split_3279;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_3278;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb27:
    call out_$p54, out_$p55, out_$p56, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$p53, out_vslice_dummy_var_148 := snd_seq_check_queue_loop_$bb27(in_$p0, in_$i1, in_$i2, out_$p48, out_$p54, out_$p55, out_$p56, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$p53, out_vslice_dummy_var_148);
    goto $bb27_last;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3276;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$p53 := out_$p50;
    goto $bb27;

  $bb36:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$p53 := out_$p69;
    assume false;
    return;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i70, 0);
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p69);
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} out_$p69 := snd_seq_prioq_cell_peek(out_$p68);
    goto corral_source_split_3299;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.7, out_$p48);
    goto corral_source_split_3298;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} out_vslice_dummy_var_148 := snd_seq_dispatch_event(out_$p64, in_$i1, in_$i2);
    goto corral_source_split_3296;

  $bb31:
    assume out_$i66 == 1;
    goto corral_source_split_3295;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i64(out_$i65, 0);
    goto corral_source_split_3291;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p64);
    goto corral_source_split_3290;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} out_$p64 := snd_seq_prioq_cell_out(out_$p63);
    goto corral_source_split_3289;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.7, out_$p62);
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3287;

  $bb29:
    assume out_$i61 == 1;
    goto corral_source_split_3286;

  $bb24:
    assume out_$i52 == 1;
    goto corral_source_split_3274;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_3270;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} out_$p50 := snd_seq_prioq_cell_peek(out_$p49);
    goto corral_source_split_3268;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.7, out_$p48);
    goto corral_source_split_3267;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3266;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume !(out_$i37 == 1);
    goto corral_source_split_3256;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_3247;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} out_$i36 := snd_seq_compare_tick_time(out_$p32, out_$p35);
    call {:si_unique_call 643} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3246;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_3245;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3244;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 200)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3243;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.7, out_$p29);
    goto corral_source_split_3242;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_3241;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    call out_$p29, out_$p30, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p28, out_vslice_dummy_var_147 := snd_seq_check_queue_loop_$bb12(in_$p0, in_$i1, in_$i2, out_$p23, out_$p29, out_$p30, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p28, out_vslice_dummy_var_147);
    goto $bb12_last;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3239;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    out_$p28 := out_$p25;
    goto $bb12;

  $bb21:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$p28 := out_$p45;
    assume false;
    return;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_3264;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_3263;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} out_$p45 := snd_seq_prioq_cell_peek(out_$p44);
    goto corral_source_split_3262;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.7, out_$p23);
    goto corral_source_split_3261;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} out_vslice_dummy_var_147 := snd_seq_dispatch_event(out_$p40, in_$i1, in_$i2);
    goto corral_source_split_3259;

  $bb16:
    assume out_$i42 == 1;
    goto corral_source_split_3258;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, 0);
    goto corral_source_split_3254;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_3253;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} out_$p40 := snd_seq_prioq_cell_out(out_$p39);
    goto corral_source_split_3252;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.7, out_$p38);
    goto corral_source_split_3251;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3250;

  $bb14:
    assume out_$i37 == 1;
    goto corral_source_split_3249;

  $bb9:
    assume out_$i27 == 1;
    goto corral_source_split_3237;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, 0);
    goto corral_source_split_3235;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_3234;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} out_$p25 := snd_seq_prioq_cell_peek(out_$p24);
    goto corral_source_split_3233;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.7, out_$p23);
    goto corral_source_split_3232;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb11;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb22:
    assume !(out_$i47 == 1);
    goto corral_source_split_3272;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i52 == 1);
    goto $bb26;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb37:
    assume !(out_$i71 == 1);
    goto corral_source_split_3312;

  corral_source_split_3320_dummy:
    call {:si_unique_call 1} out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p28, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p54, out_$p55, out_$p56, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$p53, out_$p72, out_$p73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$p84, out_$i80, out_vslice_dummy_var_147, out_vslice_dummy_var_148 := snd_seq_check_queue_loop_$bb8(in_$p0, in_$i1, in_$i2, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p28, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p54, out_$p55, out_$p56, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$p53, out_$p72, out_$p73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$p84, out_$i80, out_vslice_dummy_var_147, out_vslice_dummy_var_148);
    return;

  exit:
    return;
}



procedure snd_seq_check_queue_loop_$bb8(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p28: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p53: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p81: ref, in_$i82: i8, in_$i83: i8, in_$p84: ref, in_$i80: i64, in_vslice_dummy_var_147: i32, in_vslice_dummy_var_148: i32) returns (out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p29: ref, out_$p30: ref, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p28: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p53: ref, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$p81: ref, out_$i82: i8, out_$i83: i8, out_$p84: ref, out_$i80: i64, out_vslice_dummy_var_147: i32, out_vslice_dummy_var_148: i32);
  modifies $M.7, $M.13, $M.15, $CurrAddr, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_prioq_cell_in_loop_$bb23(in_$p1: ref, in_$i23: i32, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i65: i1, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$i74: i64, in_$i75: i1, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$p76: ref, in_$p77: ref) returns (out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i65: i1, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$i74: i64, out_$i75: i1, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$p76: ref, out_$p77: ref)
{

  entry:
    out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i74, out_$i75, out_$i54, out_$p55, out_$p56, out_$p76, out_$p77 := in_$p57, in_$p58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i65, in_$i66, in_$p67, in_$p68, in_$p69, in_$p70, in_$i71, in_$i72, in_$i74, in_$i75, in_$i54, in_$p55, in_$p56, in_$p76, in_$p77;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3692;

  $bb38:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i54, out_$p55, out_$p56 := out_$i71, out_$p56, out_$p70;
    goto $bb38_dummy;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    out_$p76, out_$p77 := out_$p70, out_$p56;
    assume true;
    goto $bb38;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i64(out_$i74, 0);
    goto corral_source_split_3724;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i74 := $p2i.ref.i64(out_$p70);
    goto corral_source_split_3723;

  $bb36:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i71, 0);
    goto corral_source_split_3716;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    out_$i71 := $sub.i32(out_$i54, 1);
    call {:si_unique_call 714} {:cexpr "count"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_3715;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.7, out_$p69);
    goto corral_source_split_3714;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p56, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3713;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb30;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb30;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    out_$p67, out_$p68 := out_$p56, out_$p55;
    assume true;
    goto $bb32;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(in_$i23, 0);
    goto corral_source_split_3709;

  $bb28:
    assume out_$i65 == 1;
    goto corral_source_split_3708;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i59, 0);
    goto corral_source_split_3702;

  $bb26:
    assume !(out_$i60 == 1);
    goto corral_source_split_3701;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    out_$p61, out_$p62 := out_$p56, out_$p55;
    assume true;
    goto $bb26;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i59, 0);
    goto corral_source_split_3697;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} out_$i59 := compare_timestamp_rel(out_$p57, out_$p58);
    call {:si_unique_call 713} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_3696;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p56, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3695;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3694;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i74, out_$i75, out_$i54, out_$p55, out_$p56, out_$p76, out_$p77 := snd_seq_prioq_cell_in_loop_$bb23(in_$p1, in_$i23, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i74, out_$i75, out_$i54, out_$p55, out_$p56, out_$p76, out_$p77);
    return;

  exit:
    return;
}



procedure snd_seq_prioq_cell_in_loop_$bb23(in_$p1: ref, in_$i23: i32, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i65: i1, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$i74: i64, in_$i75: i1, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$p76: ref, in_$p77: ref) returns (out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i65: i1, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$i74: i64, out_$i75: i1, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$p76: ref, out_$p77: ref);



implementation snd_seq_sanity_real_time_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i5: i32, in_$i6: i32, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$p11: ref, in_$i12: i32, in_$i13: i1) returns (out_$p4: ref, out_$i5: i32, out_$i6: i32, out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$p11: ref, out_$i12: i32, out_$i13: i1)
{

  entry:
    out_$p4, out_$i5, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13 := in_$p4, in_$i5, in_$i6, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$i12, in_$i13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i13 == 1;
    goto $bb6_dummy;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    out_$i13 := $ugt.i32(out_$i12, 999999999);
    goto corral_source_split_3887;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.7, in_$p1);
    goto corral_source_split_3886;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, out_$p11, out_$i10);
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3884;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i9, 1);
    goto corral_source_split_3883;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.7, out_$p8);
    goto corral_source_split_3882;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3881;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, out_$p7, out_$i6);
    goto corral_source_split_3880;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3879;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    out_$i6 := $sub.i32(out_$i5, 1000000000);
    goto corral_source_split_3878;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    out_$i5 := $load.i32($M.7, out_$p4);
    goto corral_source_split_3877;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3876;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p4, out_$i5, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13 := snd_seq_sanity_real_time_loop_$bb4(in_$p0, in_$p1, out_$p4, out_$i5, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13);
    return;

  exit:
    return;
}



procedure snd_seq_sanity_real_time_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i5: i32, in_$i6: i32, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$p11: ref, in_$i12: i32, in_$i13: i1) returns (out_$p4: ref, out_$i5: i32, out_$i6: i32, out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$p11: ref, out_$i12: i32, out_$i13: i1);
  modifies $M.7;



implementation clear_subscriber_list_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p4: ref, in_$i11: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p22: ref, in_$p23: ref, in_$p29: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i1, in_$p38: ref, in_$p40: ref, in_$p39: ref, in_$p41: ref, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p14: ref, in_$p15: ref, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32) returns (out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$p28: ref, out_$p22: ref, out_$p23: ref, out_$p29: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i1, out_$p38: ref, out_$p40: ref, out_$p39: ref, out_$p41: ref, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p14: ref, out_$p15: ref, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32)
{

  entry:
    out_$i16, out_$p17, out_$p18, out_$p20, out_$p21, out_$p24, out_$p25, out_$p27, out_$p28, out_$p22, out_$p23, out_$p29, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$p38, out_$p40, out_$p39, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p14, out_$p15, out_vslice_dummy_var_151, out_vslice_dummy_var_152 := in_$i16, in_$p17, in_$p18, in_$p20, in_$p21, in_$p24, in_$p25, in_$p27, in_$p28, in_$p22, in_$p23, in_$p29, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p36, in_$i37, in_$p38, in_$p40, in_$p39, in_$p41, in_$i42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p14, in_$p15, in_vslice_dummy_var_151, in_vslice_dummy_var_152;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4125;

  $bb21:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$p15 := out_$p54, out_$p14;
    goto $bb21_dummy;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(in_$i11, out_$i55);
    goto corral_source_split_4192;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.7, out_$p53);
    goto corral_source_split_4190;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4189;

  $bb10:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} atomic_dec(out_$p52);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} kfree(out_$p36);
    goto corral_source_split_4154;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_4153;

  $bb11:
    assume out_$i35 == 1;
    goto corral_source_split_4152;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_4150;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} out_$i34 := atomic_dec_and_test(out_$p33);
    call {:si_unique_call 765} {:cexpr "tmp"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_4149;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p22, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_4148;

  $bb9:
    assume out_$i32 == 1;
    goto corral_source_split_4147;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i64(out_$i31, 0);
    goto corral_source_split_4145;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_4144;

  SeqInstr_117:
    goto corral_source_split_4143;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} out_vslice_dummy_var_151 := unsubscribe_port(in_$p0, in_$p1, in_$p2, out_$p29, 0);
    goto SeqInstr_116;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p22, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_4142;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} list_del(out_$p15);
    goto corral_source_split_4141;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4140;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} out_$p28 := get_client_port(out_$p27, in_$p4);
    assume {:verifier.code 0} true;
    out_$p22, out_$p23 := out_$p25, out_$p28;
    goto $bb8;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    out_$p22, out_$p23 := out_$p18, out_$p21;
    goto $bb8;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} out_$p21 := get_client_port(out_$p20, in_$p4);
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref($sub.ref(0, 80), 120)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4132;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p17, $mul.ref($sub.ref(0, 80), 120));
    goto corral_source_split_4131;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_4130;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(in_$i3, 0);
    goto corral_source_split_4127;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p24, $mul.ref($sub.ref(0, 96), 120)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p24, $mul.ref($sub.ref(0, 96), 120));
    goto corral_source_split_4137;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_4136;

  $bb7:
    assume !(out_$i16 == 1);
    goto corral_source_split_4135;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 424)), $mul.ref(112, 1));
    goto corral_source_split_4187;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.37, in_$p4);
    goto corral_source_split_4186;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} atomic_dec(out_$p50);
    goto corral_source_split_4185;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p23, $mul.ref(0, 672)), $mul.ref(96, 1));
    goto corral_source_split_4184;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} kfree(out_$p49);
    goto corral_source_split_4183;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_4182;

  SeqInstr_120:
    goto corral_source_split_4181;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} out_vslice_dummy_var_152 := unsubscribe_port(out_$p46, out_$p23, out_$p39, out_$p47, 1);
    goto SeqInstr_119;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p22, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_4180;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.37, in_$p4);
    goto corral_source_split_4179;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} up_write(out_$p45);
    goto corral_source_split_4178;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p39, $mul.ref(0, 256)), $mul.ref(24, 1));
    goto corral_source_split_4177;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} list_del(out_$p44);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} list_del(out_$p43);
    goto corral_source_split_4172;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p22, $mul.ref(0, 120)), $mul.ref(96, 1));
    goto corral_source_split_4171;

  $bb17:
    assume out_$i42 == 1;
    goto corral_source_split_4170;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(in_$i3, 0);
    goto corral_source_split_4168;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} down_write(out_$p41);
    goto corral_source_split_4167;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p39, $mul.ref(0, 256)), $mul.ref(24, 1));
    goto corral_source_split_4166;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4165;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    out_$p39 := out_$p40;
    goto $bb16;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$p39 := out_$p38;
    goto $bb16;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p23, $mul.ref(0, 672)), $mul.ref(360, 1));
    goto corral_source_split_4160;

  $bb14:
    assume out_$i37 == 1;
    goto corral_source_split_4159;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(in_$i3, 0);
    goto corral_source_split_4157;

  $bb12:
    assume !(out_$i35 == 1);
    goto corral_source_split_4156;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p23, $mul.ref(0, 672)), $mul.ref(104, 1));
    goto corral_source_split_4163;

  $bb15:
    assume !(out_$i37 == 1);
    goto corral_source_split_4162;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p22, $mul.ref(0, 120)), $mul.ref(80, 1));
    goto corral_source_split_4175;

  $bb18:
    assume !(out_$i42 == 1);
    goto corral_source_split_4174;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i16, out_$p17, out_$p18, out_$p20, out_$p21, out_$p24, out_$p25, out_$p27, out_$p28, out_$p22, out_$p23, out_$p29, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$p38, out_$p40, out_$p39, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p14, out_$p15, out_vslice_dummy_var_151, out_vslice_dummy_var_152 := clear_subscriber_list_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$i3, in_$p4, in_$i11, out_$i16, out_$p17, out_$p18, out_$p20, out_$p21, out_$p24, out_$p25, out_$p27, out_$p28, out_$p22, out_$p23, out_$p29, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$p38, out_$p40, out_$p39, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p14, out_$p15, out_vslice_dummy_var_151, out_vslice_dummy_var_152);
    return;

  exit:
    return;
}



procedure clear_subscriber_list_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p4: ref, in_$i11: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p22: ref, in_$p23: ref, in_$p29: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i1, in_$p38: ref, in_$p40: ref, in_$p39: ref, in_$p41: ref, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p14: ref, in_$p15: ref, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32) returns (out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$p28: ref, out_$p22: ref, out_$p23: ref, out_$p29: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i1, out_$p38: ref, out_$p40: ref, out_$p39: ref, out_$p41: ref, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p14: ref, out_$p15: ref, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32);
  modifies $CurrAddr, $M.7, $M.41, $M.13, $M.15, $M.8, $M.9, $M.10, $M.23, $M.26, $M.33, $M.6, $M.5, $M.3, assertsPassed, $M.37, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22;



implementation snd_seq_do_ioctl_loop_$bb19(in_$i1: i32, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p21: ref) returns (out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p21: ref)
{

  entry:
    out_$p22, out_$i23, out_$i24, out_$p25, out_$p29, out_$p30, out_$i31, out_$i32, out_$p21 := in_$p22, in_$i23, in_$i24, in_$p25, in_$p29, in_$p30, in_$i31, in_$i32, in_$p21;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4391;

  $bb24:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p21 := out_$p29;
    goto $bb24_dummy;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_4404;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.39, out_$p30);
    goto corral_source_split_4403;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p21, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_4402;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p21, $mul.ref(1, 16));
    goto corral_source_split_4401;

  $bb22:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$p25 := out_$p21;
    assume true;
    goto $bb22;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, in_$i1);
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.39, out_$p22);
    goto corral_source_split_4394;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p22, out_$i23, out_$i24, out_$p25, out_$p29, out_$p30, out_$i31, out_$i32, out_$p21 := snd_seq_do_ioctl_loop_$bb19(in_$i1, out_$p22, out_$i23, out_$i24, out_$p25, out_$p29, out_$p30, out_$i31, out_$i32, out_$p21);
    return;

  exit:
    return;
}



procedure snd_seq_do_ioctl_loop_$bb19(in_$i1: i32, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p21: ref) returns (out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p21: ref);



implementation snd_seq_ioctl_query_next_client_loop_$bb11(in_$p2: ref, in_$p15: ref, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref) returns (out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref)
{

  entry:
    out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32 := in_$p19, in_$i20, in_$p21, in_$i22, in_$i23, in_$p24, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p32;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    goto $bb17_dummy;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p21;
    assume true;
    goto $bb17;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    out_$i31 := $sle.i32(out_$i30, 191);
    goto corral_source_split_6808;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.7, in_$p15);
    goto corral_source_split_6807;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, out_$p29, out_$i28);
    goto corral_source_split_6806;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p2, $mul.ref(0, 188)), $mul.ref(0, 1));
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i27, 1);
    goto corral_source_split_6804;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.7, out_$p26);
    goto corral_source_split_6803;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p2, $mul.ref(0, 188)), $mul.ref(0, 1));
    goto corral_source_split_6802;

  $bb14:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    out_$p24 := out_$p21;
    assume true;
    goto $bb14;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, 0);
    goto corral_source_split_6794;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_6793;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} out_$p21 := snd_seq_client_use_ptr(out_$i20);
    goto corral_source_split_6792;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.7, out_$p19);
    goto corral_source_split_6791;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p2, $mul.ref(0, 188)), $mul.ref(0, 1));
    goto corral_source_split_6790;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32 := snd_seq_ioctl_query_next_client_loop_$bb11(in_$p2, in_$p15, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32);
    return;

  exit:
    return;
}



procedure snd_seq_ioctl_query_next_client_loop_$bb11(in_$p2: ref, in_$p15: ref, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref) returns (out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref);
  modifies $M.7, $M.13, $M.15, $CurrAddr;



implementation snd_seq_ioctl_query_subs_loop_$bb25(in_$p2: ref, in_$i39: i64, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$i42: i32, in_$p43: ref) returns (out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$i42: i32, out_$p43: ref)
{

  entry:
    out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p76, out_$p77, out_$i78, out_$i79, out_$i42, out_$p43 := in_$i44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p76, in_$p77, in_$i78, in_$i79, in_$i42, in_$p43;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6963;

  $bb34:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i42, out_$p43 := out_$i44, out_$p77;
    goto $bb34_dummy;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i64(in_$i39, out_$i78);
    goto corral_source_split_7009;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(out_$p77);
    goto corral_source_split_7008;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.7, out_$p76);
    goto corral_source_split_7007;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p43, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7006;

  $bb28:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p43;
    assume true;
    goto $bb28;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i42, out_$i46);
    goto corral_source_split_6968;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.7, out_$p45);
    goto corral_source_split_6967;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_6966;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i42, 1);
    call {:si_unique_call 1175} {:cexpr "i"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_6965;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p76, out_$p77, out_$i78, out_$i79, out_$i42, out_$p43 := snd_seq_ioctl_query_subs_loop_$bb25(in_$p2, in_$i39, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p76, out_$p77, out_$i78, out_$i79, out_$i42, out_$p43);
    return;

  exit:
    return;
}



procedure snd_seq_ioctl_query_subs_loop_$bb25(in_$p2: ref, in_$i39: i64, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$i42: i32, in_$p43: ref) returns (out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$i42: i32, out_$p43: ref);



implementation snd_seq_fifo_clear_loop_$bb4(in_$p0: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p9: ref) returns (out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p9: ref)
{

  entry:
    out_$p10, out_$i11, out_$i12, out_$p9 := in_$p10, in_$i11, in_$i12, in_$p9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7055;

  $bb6:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$p9 := out_$p10;
    goto $bb6_dummy;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i64(out_$i11, 0);
    goto corral_source_split_7060;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_7059;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} out_$p10 := fifo_cell_out(in_$p0);
    goto corral_source_split_7058;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} snd_seq_cell_free(out_$p9);
    goto corral_source_split_7057;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$i12, out_$p9 := snd_seq_fifo_clear_loop_$bb4(in_$p0, out_$p10, out_$i11, out_$i12, out_$p9);
    return;

  exit:
    return;
}



procedure snd_seq_fifo_clear_loop_$bb4(in_$p0: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p9: ref) returns (out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p9: ref);
  modifies $M.7;



implementation snd_seq_prioq_remove_events_loop_$bb27(in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p66: ref) returns (out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p66: ref)
{

  entry:
    out_$p67, out_$p68, out_$i69, out_$i70, out_$p66 := in_$p67, in_$p68, in_$i69, in_$i70, in_$p66;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_7436;

  $bb29:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$p66 := out_$p68;
    goto $bb29_dummy;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_7442;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_7441;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} snd_seq_cell_free(out_$p66);
    goto corral_source_split_7440;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.7, out_$p67);
    goto corral_source_split_7439;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p66, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7438;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p67, out_$p68, out_$i69, out_$i70, out_$p66 := snd_seq_prioq_remove_events_loop_$bb27(out_$p67, out_$p68, out_$i69, out_$i70, out_$p66);
    return;

  exit:
    return;
}



procedure snd_seq_prioq_remove_events_loop_$bb27(in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p66: ref) returns (out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p66: ref);
  modifies $M.7;



implementation snd_seq_prioq_remove_events_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p15: ref, in_$p16: ref, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p53: ref, in_$p52: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p62: ref) returns (out_$p15: ref, out_$p16: ref, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p53: ref, out_$p52: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p62: ref)
{

  entry:
    out_$p15, out_$p16, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p53, out_$p52, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p11, out_$p12, out_$p13, out_$p14, out_$p62 := in_$p15, in_$p16, in_$p19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p53, in_$p52, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$p11, in_$p12, in_$p13, in_$p14, in_$p62;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7360;

  $bb21:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$p11, out_$p12, out_$p13, out_$p14 := out_$p59, out_$p58, out_$p57, out_$p16;
    goto $bb21_dummy;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    out_$p62 := out_$p58;
    assume true;
    goto $bb21;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i64(out_$i60, 0);
    goto corral_source_split_7425;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    out_$i60 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_7424;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7423;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$p57, out_$p58, out_$p59 := out_$p14, out_$p12, out_$p11;
    goto $bb20;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    out_$p57, out_$p58, out_$p59 := out_$p54, out_$p55, out_$p56;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7421;

  $bb9:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$p54, out_$p55, out_$p56 := out_$p14, out_$p12, out_$p11;
    goto $bb19;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    out_$p54, out_$p55, out_$p56 := out_$p13, out_$p52, out_$p14;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7419;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p53, out_$p14);
    assume {:verifier.code 0} true;
    out_$p52 := out_$p12;
    goto $bb18;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    out_$p52 := out_$p14;
    goto $bb18;

  $bb16:
    assume out_$i51 == 1;
    goto corral_source_split_7414;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i64(out_$i50, 0);
    goto corral_source_split_7412;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_7411;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p49, $0.ref);
    goto corral_source_split_7410;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7409;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, out_$p48, out_$i47);
    goto corral_source_split_7408;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_7407;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    out_$i47 := $sub.i32(out_$i46, 1);
    goto corral_source_split_7406;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.7, out_$p45);
    goto corral_source_split_7405;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_7404;

  $bb14:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p44, out_$p43);
    goto corral_source_split_7402;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_7401;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.7, out_$p42);
    goto corral_source_split_7400;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7399;

  $bb13:
    assume out_$i41 == 1;
    goto corral_source_split_7398;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i64(out_$i39, out_$i40);
    goto corral_source_split_7396;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_7395;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_7394;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.7, out_$p37);
    goto corral_source_split_7393;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_7392;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p36, out_$p35);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p33, out_$p32);
    goto corral_source_split_7385;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_7384;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.7, out_$p31);
    goto corral_source_split_7383;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7382;

  $bb10:
    assume out_$i30 == 1;
    goto corral_source_split_7381;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i64(out_$i28, out_$i29);
    goto corral_source_split_7379;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_7378;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_7377;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.7, out_$p26);
    goto corral_source_split_7376;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_7375;

  $bb8:
    assume out_$i25 == 1;
    goto corral_source_split_7374;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_7372;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} out_$i24 := prioq_remove_match(in_$p2, out_$p23);
    call {:si_unique_call 1246} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_7371;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p14, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_7370;

  $bb6:
    assume out_$i22 == 1;
    goto corral_source_split_7369;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, in_$i1);
    goto corral_source_split_7367;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_7366;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.7, out_$p19);
    goto corral_source_split_7365;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_7364;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.7, out_$p15);
    goto corral_source_split_7363;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7362;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p13, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7390;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.7, out_$p34);
    goto corral_source_split_7389;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p14, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7388;

  $bb11:
    assume !(out_$i30 == 1);
    goto corral_source_split_7387;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p11, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7417;

  $bb17:
    assume !(out_$i51 == 1);
    goto corral_source_split_7416;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p53, out_$p52, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p11, out_$p12, out_$p13, out_$p14, out_$p62 := snd_seq_prioq_remove_events_loop_$bb4(in_$p0, in_$i1, in_$p2, out_$p15, out_$p16, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p53, out_$p52, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p11, out_$p12, out_$p13, out_$p14, out_$p62);
    return;

  exit:
    return;
}



procedure snd_seq_prioq_remove_events_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p15: ref, in_$p16: ref, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p53: ref, in_$p52: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p62: ref) returns (out_$p15: ref, out_$p16: ref, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p53: ref, out_$p52: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p62: ref);
  modifies $M.7;



implementation snd_seq_port_query_nearest_loop_$bb4(in_$i5: i32, in_$i15: i64, in_$p21: ref, in_$i22: i8, in_$i23: i32, in_$i24: i1, in_$p28: ref, in_$i29: i8, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i34: i64, in_$i35: i1, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p25: ref, in_$p26: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p18: ref, in_$p19: ref, in_$p55: ref) returns (out_$p21: ref, out_$i22: i8, out_$i23: i32, out_$i24: i1, out_$p28: ref, out_$i29: i8, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i34: i64, out_$i35: i1, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p25: ref, out_$p26: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p18: ref, out_$p19: ref, out_$p55: ref)
{

  entry:
    out_$p21, out_$i22, out_$i23, out_$i24, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p25, out_$p26, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p18, out_$p19, out_$p55 := in_$p21, in_$i22, in_$i23, in_$i24, in_$p28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i34, in_$i35, in_$p37, in_$i38, in_$i39, in_$p41, in_$i42, in_$i43, in_$i44, in_$p45, in_$p46, in_$p25, in_$p26, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p18, in_$p19, in_$p55;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7648;

  $bb20:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$p18, out_$p19 := out_$p26, out_$p51;
    goto $bb20_dummy;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    out_$p55 := out_$p26;
    assume true;
    goto $bb20;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, in_$i15);
    goto corral_source_split_7664;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_7663;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p50, $mul.ref($sub.ref(0, 80), 672)), $mul.ref(80, 1));
    goto corral_source_split_7662;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p50, $mul.ref($sub.ref(0, 80), 672));
    goto corral_source_split_7661;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_7660;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.7, out_$p48);
    goto corral_source_split_7659;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 672)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_7658;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7657;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    out_$p25, out_$p26 := out_$p45, out_$p46;
    goto $bb8;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    out_$p25, out_$p26 := out_$p19, out_$p18;
    goto $bb8;

  $bb6:
    assume out_$i24 == 1;
    goto corral_source_split_7655;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i23, in_$i5);
    goto corral_source_split_7653;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(out_$i22);
    goto corral_source_split_7652;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i8($M.7, out_$p21);
    goto corral_source_split_7651;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_7650;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7689;

  $bb18:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$p45, out_$p46 := out_$p19, out_$p18;
    goto $bb19;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p45, out_$p46 := out_$p19, out_$p19;
    goto $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i44 == 1;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i35 == 1;
    goto $bb15;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i64(out_$i34, 0);
    goto corral_source_split_7678;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_7677;

  $bb11:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p19;
    assume true;
    goto $bb11;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, in_$i5);
    goto corral_source_split_7669;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i8.i32(out_$i29);
    goto corral_source_split_7668;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i8($M.7, out_$p28);
    goto corral_source_split_7667;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_7666;

  $bb7:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i39, out_$i43);
    goto corral_source_split_7687;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_7686;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.7, out_$p41);
    goto corral_source_split_7685;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_7684;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i8.i32(out_$i38);
    goto corral_source_split_7683;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i8($M.7, out_$p37);
    goto corral_source_split_7682;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_7681;

  $bb16:
    assume !(out_$i35 == 1);
    goto corral_source_split_7680;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p21, out_$i22, out_$i23, out_$i24, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p25, out_$p26, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p18, out_$p19, out_$p55 := snd_seq_port_query_nearest_loop_$bb4(in_$i5, in_$i15, out_$p21, out_$i22, out_$i23, out_$i24, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p25, out_$p26, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p18, out_$p19, out_$p55);
    return;

  exit:
    return;
}



procedure snd_seq_port_query_nearest_loop_$bb4(in_$i5: i32, in_$i15: i64, in_$p21: ref, in_$i22: i8, in_$i23: i32, in_$i24: i1, in_$p28: ref, in_$i29: i8, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i34: i64, in_$i35: i1, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p25: ref, in_$p26: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p18: ref, in_$p19: ref, in_$p55: ref) returns (out_$p21: ref, out_$i22: i8, out_$i23: i32, out_$i24: i1, out_$p28: ref, out_$i29: i8, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i34: i64, out_$i35: i1, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p25: ref, out_$p26: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p18: ref, out_$p19: ref, out_$p55: ref);



implementation snd_seq_port_get_subscription_loop_$bb4(in_$p1: ref, in_$i11: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p13: ref) returns (out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p13: ref)
{

  entry:
    out_$p15, out_$i16, out_$i17, out_$p18, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p13 := in_$p15, in_$i16, in_$i17, in_$p18, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7869;

  $bb10:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$p13 := out_$p24;
    goto $bb10_dummy;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, in_$i11);
    goto corral_source_split_7887;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_7886;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p23, $mul.ref($sub.ref(0, 80), 120)), $mul.ref(80, 1));
    goto corral_source_split_7885;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p23, $mul.ref($sub.ref(0, 80), 120));
    goto corral_source_split_7884;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_7883;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.7, out_$p21);
    goto corral_source_split_7882;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 120)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_7881;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    out_$p18 := out_$p13;
    assume true;
    goto $bb7;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_7873;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} out_$i16 := addr_match(in_$p1, out_$p15);
    call {:si_unique_call 1277} {:cexpr "tmp"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_7872;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_7871;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$i17, out_$p18, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p13 := snd_seq_port_get_subscription_loop_$bb4(in_$p1, in_$i11, out_$p15, out_$i16, out_$i17, out_$p18, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p13);
    return;

  exit:
    return;
}



procedure snd_seq_port_get_subscription_loop_$bb4(in_$p1: ref, in_$i11: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p13: ref) returns (out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p13: ref);



implementation snd_seq_pool_init_loop_$bb17(in_$p0: ref, in_$p34: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i37: i32) returns (out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i37: i32)
{

  entry:
    out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i37 := in_$p38, in_$p39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i37;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_8090;

  $bb19:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := out_$i47;
    goto $bb19_dummy;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    out_$i49 := $sgt.i32(out_$i48, out_$i47);
    goto corral_source_split_8106;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.7, in_$p34);
    goto corral_source_split_8105;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i37, 1);
    call {:si_unique_call 1323} {:cexpr "cell"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_8104;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p46, out_$p41);
    goto corral_source_split_8103;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_8102;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p45, out_$p44);
    goto corral_source_split_8101;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p39, $mul.ref(out_$i40, 48)), $mul.ref(40, 1));
    goto corral_source_split_8100;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.7, out_$p43);
    goto corral_source_split_8099;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_8098;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p42, in_$p0);
    goto corral_source_split_8097;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p39, $mul.ref(out_$i40, 48)), $mul.ref(32, 1));
    goto corral_source_split_8096;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p39, $mul.ref(out_$i40, 48));
    goto corral_source_split_8095;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i37);
    goto corral_source_split_8094;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.7, out_$p38);
    goto corral_source_split_8093;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_8092;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i37 := snd_seq_pool_init_loop_$bb17(in_$p0, in_$p34, out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i37);
    return;

  exit:
    return;
}



procedure snd_seq_pool_init_loop_$bb17(in_$p0: ref, in_$p34: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i37: i32) returns (out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i37: i32);
  modifies $M.7;



implementation snd_seq_fifo_resize_loop_$bb20(in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p46: ref) returns (out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p46: ref)
{

  entry:
    out_$p47, out_$p48, out_$i49, out_$i50, out_$p46 := in_$p47, in_$p48, in_$i49, in_$i50, in_$p46;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_8195;

  $bb22:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$p46 := out_$p48;
    goto $bb22_dummy;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, 0);
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_8200;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} snd_seq_cell_free(out_$p46);
    goto corral_source_split_8199;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.7, out_$p47);
    goto corral_source_split_8198;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p46, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_8197;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p47, out_$p48, out_$i49, out_$i50, out_$p46 := snd_seq_fifo_resize_loop_$bb20(out_$p47, out_$p48, out_$i49, out_$i50, out_$p46);
    return;

  exit:
    return;
}



procedure snd_seq_fifo_resize_loop_$bb20(in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p46: ref) returns (out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p46: ref);
  modifies $M.7;



implementation snd_seq_port_disconnect_loop_$bb4(in_$p5: ref, in_$i18: i64, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p20: ref) returns (out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p20: ref)
{

  entry:
    out_$p21, out_$i22, out_$i23, out_$p24, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p20 := in_$p21, in_$i22, in_$i23, in_$p24, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p20;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8864;

  $bb10:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$p20 := out_$p60;
    goto $bb10_dummy;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i64(out_$i62, in_$i18);
    goto corral_source_split_8914;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_8913;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p59, $mul.ref($sub.ref(0, 80), 120)), $mul.ref(80, 1));
    goto corral_source_split_8912;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p59, $mul.ref($sub.ref(0, 80), 120));
    goto corral_source_split_8911;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p58);
    goto corral_source_split_8910;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.7, out_$p57);
    goto corral_source_split_8909;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(0, 120)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_8908;

  $bb7:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    out_$p24 := out_$p20;
    assume true;
    goto $bb7;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_8868;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} out_$i22 := match_subs_info(in_$p5, out_$p21);
    call {:si_unique_call 1523} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_8867;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_8866;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p21, out_$i22, out_$i23, out_$p24, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p20 := snd_seq_port_disconnect_loop_$bb4(in_$p5, in_$i18, out_$p21, out_$i22, out_$i23, out_$p24, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p20);
    return;

  exit:
    return;
}



procedure snd_seq_port_disconnect_loop_$bb4(in_$p5: ref, in_$i18: i64, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p20: ref) returns (out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p20: ref);



implementation snd_seq_port_connect_loop_$bb32(in_$p5: ref, in_$i71: i64, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p73: ref) returns (out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p73: ref)
{

  entry:
    out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p73 := in_$p74, in_$i75, in_$i76, in_$p78, in_$p79, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p73;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_9056;

  $bb37:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$p73 := out_$p81;
    goto $bb37_dummy;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, in_$i71);
    goto corral_source_split_9070;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64(out_$p82);
    goto corral_source_split_9069;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p80, $mul.ref($sub.ref(0, 96), 120)), $mul.ref(96, 1));
    goto corral_source_split_9068;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref(out_$p80, $mul.ref($sub.ref(0, 96), 120));
    goto corral_source_split_9067;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    out_$p80 := $bitcast.ref.ref(out_$p79);
    goto corral_source_split_9066;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.7, out_$p78);
    goto corral_source_split_9065;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(out_$p73, $mul.ref(0, 120)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_9064;

  $bb35:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i32(out_$i75, 0);
    goto corral_source_split_9060;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} out_$i75 := match_subs_info(in_$p5, out_$p74);
    call {:si_unique_call 1552} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_9059;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p73, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_9058;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb37_dummy:
    call {:si_unique_call 1} out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p73 := snd_seq_port_connect_loop_$bb32(in_$p5, in_$i71, out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p73);
    return;

  exit:
    return;
}



procedure snd_seq_port_connect_loop_$bb32(in_$p5: ref, in_$i71: i64, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p73: ref) returns (out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p73: ref);



implementation snd_seq_port_connect_loop_$bb21(in_$p5: ref, in_$i49: i64, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p51: ref) returns (out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p51: ref)
{

  entry:
    out_$p52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p51 := in_$p52, in_$i53, in_$i54, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p51;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_9027;

  $bb26:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$p51 := out_$p59;
    goto $bb26_dummy;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i64(out_$i61, in_$i49);
    goto corral_source_split_9041;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_9040;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p58, $mul.ref($sub.ref(0, 80), 120)), $mul.ref(80, 1));
    goto corral_source_split_9039;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref(out_$p58, $mul.ref($sub.ref(0, 80), 120));
    goto corral_source_split_9038;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_9037;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.7, out_$p56);
    goto corral_source_split_9036;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(out_$p51, $mul.ref(0, 120)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_9035;

  $bb24:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_9031;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} out_$i53 := match_subs_info(in_$p5, out_$p52);
    call {:si_unique_call 1550} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_9030;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_9029;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p51 := snd_seq_port_connect_loop_$bb21(in_$p5, in_$i49, out_$p52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p51);
    return;

  exit:
    return;
}



procedure snd_seq_port_connect_loop_$bb21(in_$p5: ref, in_$i49: i64, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p51: ref) returns (out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p51: ref);



implementation snd_seq_delete_port_loop_$bb4(in_$i1: i32, in_$i13: i64, in_$p17: ref, in_$i18: i8, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p15: ref) returns (out_$p17: ref, out_$i18: i8, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p15: ref)
{

  entry:
    out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p15 := in_$p17, in_$i18, in_$i19, in_$i20, in_$p21, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_9323;

  $bb10:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p32;
    goto $bb10_dummy;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, in_$i13);
    goto corral_source_split_9353;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_9352;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p31, $mul.ref($sub.ref(0, 80), 672)), $mul.ref(80, 1));
    goto corral_source_split_9351;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p31, $mul.ref($sub.ref(0, 80), 672));
    goto corral_source_split_9350;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_9349;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.7, out_$p29);
    goto corral_source_split_9348;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 672)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_9347;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p15;
    assume true;
    goto $bb7;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, in_$i1);
    goto corral_source_split_9328;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i8.i32(out_$i18);
    goto corral_source_split_9327;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i8($M.7, out_$p17);
    goto corral_source_split_9326;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_9325;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p15 := snd_seq_delete_port_loop_$bb4(in_$i1, in_$i13, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p15);
    return;

  exit:
    return;
}



procedure snd_seq_delete_port_loop_$bb4(in_$i1: i32, in_$i13: i64, in_$p17: ref, in_$i18: i8, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p15: ref) returns (out_$p17: ref, out_$i18: i8, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p15: ref);



implementation snd_seq_create_port_loop_$bb20(in_$i1: i32, in_$i52: i64, in_$p59: ref, in_$i60: i8, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$i64: i32, in_$i67: i1, in_$p69: ref, in_$i70: i8, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$i56: i32, in_$p57: ref, in_$p82: ref, in_$i83: i32) returns (out_$p59: ref, out_$i60: i8, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$i64: i32, out_$i67: i1, out_$p69: ref, out_$i70: i8, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$i56: i32, out_$p57: ref, out_$p82: ref, out_$i83: i32)
{

  entry:
    out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i67, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i56, out_$p57, out_$p82, out_$i83 := in_$p59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i67, in_$p69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p75, in_$p76, in_$p77, in_$p78, in_$p79, in_$i80, in_$i81, in_$i56, in_$p57, in_$p82, in_$i83;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9453;

  $bb29:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i56, out_$p57 := out_$i73, out_$p78;
    goto $bb29_dummy;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    out_$p82, out_$i83 := out_$p78, out_$i73;
    assume true;
    goto $bb29;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i64(out_$i80, in_$i52);
    goto corral_source_split_9497;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p79);
    goto corral_source_split_9496;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p77, $mul.ref($sub.ref(0, 80), 672)), $mul.ref(80, 1));
    goto corral_source_split_9495;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref(out_$p77, $mul.ref($sub.ref(0, 80), 672));
    goto corral_source_split_9494;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(out_$p76);
    goto corral_source_split_9493;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.7, out_$p75);
    goto corral_source_split_9492;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 672)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_9491;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_9490;

  $bb27:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    out_$i73 := out_$i56;
    goto $bb28;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i72;
    goto $bb28;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i71, 1);
    call {:si_unique_call 1620} {:cexpr "num"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_9488;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i8.i32(out_$i70);
    goto corral_source_split_9487;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i8($M.7, out_$p69);
    goto corral_source_split_9486;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_9485;

  $bb26:
    assume out_$i67 == 1;
    goto corral_source_split_9484;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(in_$i1, 0);
    goto corral_source_split_9482;

  $bb23:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    out_$p63, out_$i64 := out_$p57, out_$i56;
    assume true;
    goto $bb23;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    out_$i62 := $sgt.i32(out_$i61, out_$i56);
    goto corral_source_split_9458;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i8.i32(out_$i60);
    goto corral_source_split_9457;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i8($M.7, out_$p59);
    goto corral_source_split_9456;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 672)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_9455;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i67, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i56, out_$p57, out_$p82, out_$i83 := snd_seq_create_port_loop_$bb20(in_$i1, in_$i52, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i67, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i56, out_$p57, out_$p82, out_$i83);
    return;

  exit:
    return;
}



procedure snd_seq_create_port_loop_$bb20(in_$i1: i32, in_$i52: i64, in_$p59: ref, in_$i60: i8, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$i64: i32, in_$i67: i1, in_$p69: ref, in_$i70: i8, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$i56: i32, in_$p57: ref, in_$p82: ref, in_$i83: i32) returns (out_$p59: ref, out_$i60: i8, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$i64: i32, out_$i67: i1, out_$p69: ref, out_$i70: i8, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$i56: i32, out_$p57: ref, out_$p82: ref, out_$i83: i32);



implementation snd_seq_read_loop_$bb26(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p46: ref, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i64: i1, in_$i63: i1, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i68: i64, in_$i69: i32, in_$p72: ref, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i32, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$i94: i64, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$i102: i64, in_$i103: i32, in_$i104: i64, in_$i105: i64, in_$i106: i64, in_$i107: i64, in_$i108: i64, in_$i109: i64, in_$p110: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i1, in_$i120: i64, in_$i121: i64, in_$p122: ref, in_$i111: i32, in_$i112: i64, in_$p113: ref, in_$i114: i64, in_$p123: ref, in_$i124: i64, in_$i125: i1, in_$i56: i64, in_$p57: ref, in_$i58: i64, in_$i126: i32, in_$i127: i64, in_cmdloc_dummy_var_103: [ref]i8, in_cmdloc_dummy_var_104: [ref]i8, in_cmdloc_dummy_var_105: [ref]i8) returns (out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i64: i1, out_$i63: i1, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i68: i64, out_$i69: i32, out_$p72: ref, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i32, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$i94: i64, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$i102: i64, out_$i103: i32, out_$i104: i64, out_$i105: i64, out_$i106: i64, out_$i107: i64, out_$i108: i64, out_$i109: i64, out_$p110: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i1, out_$i120: i64, out_$i121: i64, out_$p122: ref, out_$i111: i32, out_$i112: i64, out_$p113: ref, out_$i114: i64, out_$p123: ref, out_$i124: i64, out_$i125: i1, out_$i56: i64, out_$p57: ref, out_$i58: i64, out_$i126: i32, out_$i127: i64, out_cmdloc_dummy_var_103: [ref]i8, out_cmdloc_dummy_var_104: [ref]i8, out_cmdloc_dummy_var_105: [ref]i8)
{

  entry:
    out_$p59, out_$i60, out_$i61, out_$i62, out_$i64, out_$i63, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p72, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p110, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$i111, out_$i112, out_$p113, out_$i114, out_$p123, out_$i124, out_$i125, out_$i56, out_$p57, out_$i58, out_$i126, out_$i127, out_cmdloc_dummy_var_103, out_cmdloc_dummy_var_104, out_cmdloc_dummy_var_105 := in_$p59, in_$i60, in_$i61, in_$i62, in_$i64, in_$i63, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p72, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$p79, in_$p80, in_$p81, in_$p82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$p88, in_$p89, in_$p90, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p96, in_$p97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$p110, in_$p115, in_$p116, in_$p117, in_$i118, in_$i119, in_$i120, in_$i121, in_$p122, in_$i111, in_$i112, in_$p113, in_$i114, in_$p123, in_$i124, in_$i125, in_$i56, in_$p57, in_$i58, in_$i126, in_$i127, in_cmdloc_dummy_var_103, in_cmdloc_dummy_var_104, in_cmdloc_dummy_var_105;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9609;

  $bb47:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i56, out_$p57, out_$i58 := out_$i124, out_$p113, out_$i112;
    goto $bb47_dummy;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    out_$i126, out_$i127 := out_$i111, out_$i124;
    assume true;
    goto $bb47;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    out_$i125 := $ugt.i64(out_$i112, 27);
    goto corral_source_split_9686;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    out_$i124 := $add.i64(out_$i114, 28);
    call {:si_unique_call 1664} {:cexpr "result"} boogie_si_record_i64(out_$i124);
    goto corral_source_split_9685;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $M.53 := $store.ref($M.53, in_$p4, $0.ref);
    goto corral_source_split_9684;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} snd_seq_cell_free(out_$p123);
    goto corral_source_split_9683;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.53, in_$p4);
    goto corral_source_split_9682;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9681;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref(out_$p57, $mul.ref(28, 1));
    assume {:verifier.code 0} true;
    out_$i111, out_$i112, out_$p113, out_$i114 := out_$i66, out_$i121, out_$p122, out_$i56;
    goto $bb43;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    out_$i111, out_$i112, out_$p113, out_$i114 := out_$i100, out_$i107, out_$p110, out_$i105;
    goto $bb43;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref(out_$p57, $mul.ref(out_$i109, 1));
    goto corral_source_split_9679;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    out_$i108 := $sext.i32.i64(out_$i100);
    out_$i109 := $add.i64(28, out_$i108);
    goto corral_source_split_9678;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    out_$i107 := $sub.i64(out_$i95, out_$i106);
    call {:si_unique_call 1662} {:cexpr "count"} boogie_si_record_i64(out_$i107);
    goto corral_source_split_9677;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    out_$i106 := $sext.i32.i64(out_$i100);
    goto corral_source_split_9676;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i64(out_$i104, out_$i56);
    call {:si_unique_call 1661} {:cexpr "result"} boogie_si_record_i64(out_$i105);
    goto corral_source_split_9675;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(out_$i100);
    goto corral_source_split_9674;

  $bb41:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    out_$i102, out_$i103 := out_$i56, out_$i100;
    assume true;
    goto $bb41;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i100, 0);
    goto corral_source_split_9670;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} out_$i100 := snd_seq_expand_var_event(out_$p98, out_$i99, out_$p96, 0, 28);
    call {:si_unique_call 1660} {:cexpr "err"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_9669;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    out_$i99 := $trunc.i64.i32(out_$i95);
    goto corral_source_split_9668;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p97, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9667;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.53, in_$p4);
    goto corral_source_split_9666;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(out_$p57, $mul.ref(28, 1));
    goto corral_source_split_9665;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i95 := $sub.i64(out_$i58, 28);
    call {:si_unique_call 1658} {:cexpr "count"} boogie_si_record_i64(out_$i95);
    goto corral_source_split_9664;

  $bb38:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    out_$i94 := out_$i56;
    assume true;
    goto $bb38;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i32(out_$i92, 0);
    goto corral_source_split_9653;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} out_$i92 := copy_to_user(out_$p57, out_$p91, 28);
    call {:si_unique_call 1655} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_9652;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    out_$p91 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_9651;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, out_$p90, out_$i87);
    goto corral_source_split_9650;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p89, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9649;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(out_$p88);
    goto corral_source_split_9648;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9647;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    out_$i87 := $and.i32(out_$i86, 1073741823);
    goto corral_source_split_9646;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.7, out_$p85);
    goto corral_source_split_9645;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p84, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9644;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    out_$p84 := $bitcast.ref.ref(out_$p83);
    goto corral_source_split_9643;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9642;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_103 := $M.7;
    out_cmdloc_dummy_var_104 := $M.7;
    call {:si_unique_call 1653} out_cmdloc_dummy_var_105 := $memcpy.i8(out_cmdloc_dummy_var_103, out_cmdloc_dummy_var_104, out_$p81, out_$p82, 32, $zext.i32.i64(8), 0 == 1);
    $M.7 := out_cmdloc_dummy_var_105;
    goto corral_source_split_9641;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    out_$p82 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_9640;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_9639;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p79, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9638;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.53, in_$p4);
    goto corral_source_split_9637;

  $bb35:
    assume out_$i78 == 1;
    goto corral_source_split_9636;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i77, 4);
    goto corral_source_split_9634;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    out_$i77 := $and.i32(out_$i76, 12);
    goto corral_source_split_9633;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i8.i32(out_$i75);
    goto corral_source_split_9632;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i8($M.7, out_$p74);
    goto corral_source_split_9631;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(out_$p72, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_9630;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.53, in_$p4);
    goto corral_source_split_9629;

  $bb32:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    out_$i68, out_$i69 := out_$i56, out_$i66;
    assume true;
    goto $bb32;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i66, 0);
    goto corral_source_split_9619;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} out_$i66 := snd_seq_fifo_cell_out(in_$p46, in_$p4, out_$i65);
    call {:si_unique_call 1652} {:cexpr "err"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_9618;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i1.i32(out_$i63);
    call {:si_unique_call 1650} {:cexpr "nonblock"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_9617;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_9616;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i64;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    assume out_$i62 == 1;
    goto $bb29;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    out_$i63 := 1;
    assume true;
    goto $bb28, $bb30;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i32(out_$i61, 0);
    goto corral_source_split_9614;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    out_$i61 := $and.i32(out_$i60, 2048);
    goto corral_source_split_9613;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.7, out_$p59);
    goto corral_source_split_9612;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_9611;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    out_$i64 := $sgt.i64(out_$i56, 0);
    goto corral_source_split_9622;

  $bb30:
    assume !(out_$i62 == 1);
    goto corral_source_split_9621;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i121 := $sub.i64(out_$i58, 28);
    call {:si_unique_call 1665} {:cexpr "count"} boogie_si_record_i64(out_$i121);
    goto corral_source_split_9690;

  $bb45:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    out_$i120 := out_$i56;
    assume true;
    goto $bb45;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    out_$i119 := $ne.i32(out_$i118, 0);
    goto corral_source_split_9660;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} out_$i118 := copy_to_user(out_$p57, out_$p117, 28);
    call {:si_unique_call 1657} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i118);
    goto corral_source_split_9659;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    out_$p117 := $bitcast.ref.ref(out_$p116);
    goto corral_source_split_9658;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p115, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9657;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.53, in_$p4);
    goto corral_source_split_9656;

  $bb36:
    assume !(out_$i78 == 1);
    goto corral_source_split_9655;

  $bb47_dummy:
    call {:si_unique_call 1} out_$p59, out_$i60, out_$i61, out_$i62, out_$i64, out_$i63, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p72, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p110, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$i111, out_$i112, out_$p113, out_$i114, out_$p123, out_$i124, out_$i125, out_$i56, out_$p57, out_$i58, out_$i126, out_$i127, out_cmdloc_dummy_var_103, out_cmdloc_dummy_var_104, out_cmdloc_dummy_var_105 := snd_seq_read_loop_$bb26(in_$p0, in_$p4, in_$p5, in_$p46, out_$p59, out_$i60, out_$i61, out_$i62, out_$i64, out_$i63, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p72, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p110, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$i111, out_$i112, out_$p113, out_$i114, out_$p123, out_$i124, out_$i125, out_$i56, out_$p57, out_$i58, out_$i126, out_$i127, out_cmdloc_dummy_var_103, out_cmdloc_dummy_var_104, out_cmdloc_dummy_var_105);
    return;

  exit:
    return;
}



procedure snd_seq_read_loop_$bb26(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p46: ref, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i64: i1, in_$i63: i1, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i68: i64, in_$i69: i32, in_$p72: ref, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i32, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$i94: i64, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$i102: i64, in_$i103: i32, in_$i104: i64, in_$i105: i64, in_$i106: i64, in_$i107: i64, in_$i108: i64, in_$i109: i64, in_$p110: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i1, in_$i120: i64, in_$i121: i64, in_$p122: ref, in_$i111: i32, in_$i112: i64, in_$p113: ref, in_$i114: i64, in_$p123: ref, in_$i124: i64, in_$i125: i1, in_$i56: i64, in_$p57: ref, in_$i58: i64, in_$i126: i32, in_$i127: i64, in_cmdloc_dummy_var_103: [ref]i8, in_cmdloc_dummy_var_104: [ref]i8, in_cmdloc_dummy_var_105: [ref]i8) returns (out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i64: i1, out_$i63: i1, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i68: i64, out_$i69: i32, out_$p72: ref, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i32, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$i94: i64, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$i102: i64, out_$i103: i32, out_$i104: i64, out_$i105: i64, out_$i106: i64, out_$i107: i64, out_$i108: i64, out_$i109: i64, out_$p110: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i1, out_$i120: i64, out_$i121: i64, out_$p122: ref, out_$i111: i32, out_$i112: i64, out_$p113: ref, out_$i114: i64, out_$p123: ref, out_$i124: i64, out_$i125: i1, out_$i56: i64, out_$p57: ref, out_$i58: i64, out_$i126: i32, out_$i127: i64, out_cmdloc_dummy_var_103: [ref]i8, out_cmdloc_dummy_var_104: [ref]i8, out_cmdloc_dummy_var_105: [ref]i8);
  modifies $M.53, $M.7, $M.58, $CurrAddr, $M.20, $M.21, $M.22, $M.57;



implementation snd_seq_write_loop_$bb29(in_$p0: ref, in_$p4: ref, in_$p7: ref, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$i56: i1, in_$i57: i32, in_$p60: ref, in_$i61: i32, in_$i62: i8, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$p68: ref, in_$i69: i8, in_$i70: i32, in_$i71: i1, in_$p75: ref, in_$i76: i8, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$p80: ref, in_$i81: i8, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i64, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i32, in_$p104: ref, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i108: i8, in_$i109: i32, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$p113: ref, in_$p115: ref, in_$i116: i32, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i103: i32, in_$p121: ref, in_$i122: i32, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i32, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i130: i64, in_$i131: i64, in_$i132: i64, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$i49: i32, in_$p50: ref, in_$i51: i64, in_$i52: i32, in_$i136: i32, in_$i137: i32) returns (out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$i56: i1, out_$i57: i32, out_$p60: ref, out_$i61: i32, out_$i62: i8, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$p68: ref, out_$i69: i8, out_$i70: i32, out_$i71: i1, out_$p75: ref, out_$i76: i8, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$p80: ref, out_$i81: i8, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i64, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i32, out_$p104: ref, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i108: i8, out_$i109: i32, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$p113: ref, out_$p115: ref, out_$i116: i32, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i103: i32, out_$p121: ref, out_$i122: i32, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i32, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i130: i64, out_$i131: i64, out_$i132: i64, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$i49: i32, out_$p50: ref, out_$i51: i64, out_$i52: i32, out_$i136: i32, out_$i137: i32)
{

  entry:
    out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p60, out_$i61, out_$i62, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i103, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i72, out_$i73, out_$i74, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i49, out_$p50, out_$i51, out_$i52, out_$i136, out_$i137 := in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p60, in_$i61, in_$i62, in_$p64, in_$i65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$p75, in_$i76, in_$i77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$p85, in_$p86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$p100, in_$p101, in_$i102, in_$p104, in_$i105, in_$i106, in_$p107, in_$i108, in_$i109, in_$i110, in_$i111, in_$p112, in_$p113, in_$p115, in_$i116, in_$p117, in_$p118, in_$p119, in_$p120, in_$i103, in_$p121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i72, in_$i73, in_$i74, in_$i130, in_$i131, in_$i132, in_$p133, in_$i134, in_$i135, in_$i49, in_$p50, in_$i51, in_$i52, in_$i136, in_$i137;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9791;

  $bb60:
    assume out_$i135 == 1;
    assume {:verifier.code 0} true;
    out_$i49, out_$p50, out_$i51, out_$i52 := out_$i74, out_$p133, out_$i131, out_$i134;
    goto $bb60_dummy;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    out_$i136, out_$i137 := out_$i134, out_$i74;
    assume true;
    goto $bb60;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    out_$i135 := $ugt.i64(out_$i131, 27);
    goto corral_source_split_9832;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    out_$i134 := $add.i32(out_$i72, out_$i73);
    call {:si_unique_call 1687} {:cexpr "written"} boogie_si_record_i32(out_$i134);
    goto corral_source_split_9831;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref(out_$p50, $mul.ref(out_$i132, 1));
    goto corral_source_split_9830;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    out_$i132 := $sext.i32.i64(out_$i73);
    goto corral_source_split_9829;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    out_$i131 := $sub.i64(out_$i51, out_$i130);
    call {:si_unique_call 1686} {:cexpr "count"} boogie_si_record_i64(out_$i131);
    goto corral_source_split_9828;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    out_$i130 := $sext.i32.i64(out_$i73);
    goto corral_source_split_9827;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9826;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i72, out_$i73, out_$i74 := out_$i52, out_$i103, out_$i126;
    goto $bb40;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    out_$i72, out_$i73, out_$i74 := out_$i52, 28, out_$i49;
    goto $bb40;

  $bb38:
    assume out_$i71 == 1;
    goto corral_source_split_9818;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 255);
    goto corral_source_split_9816;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i8.i32(out_$i69);
    goto corral_source_split_9815;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i8($M.7, out_$p68);
    goto corral_source_split_9814;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_9813;

  $bb36:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    out_$i67 := out_$i52;
    assume true;
    goto $bb36;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_9809;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} out_$i65 := check_event_type_and_length(in_$p4);
    call {:si_unique_call 1685} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_9808;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, out_$p64, out_$i62);
    goto corral_source_split_9807;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_9806;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    out_$i62 := $trunc.i32.i8(out_$i61);
    goto corral_source_split_9805;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.7, out_$p60);
    goto corral_source_split_9804;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p7, $mul.ref(0, 424)), $mul.ref(72, 1));
    goto corral_source_split_9803;

  $bb32:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i52;
    assume true;
    goto $bb32;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, 0);
    goto corral_source_split_9796;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} out_$i55 := copy_from_user(out_$p53, out_$p50, out_$i54);
    call {:si_unique_call 1683} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_9795;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(28);
    goto corral_source_split_9794;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_9793;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb58:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    out_$i128, out_$i129 := out_$i52, out_$i126;
    assume true;
    goto $bb58;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i126, 0);
    goto corral_source_split_9878;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} out_$i126 := snd_seq_client_enqueue_event(in_$p7, in_$p4, in_$p0, out_$i125, 0, 0);
    call {:si_unique_call 1691} {:cexpr "err"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_9877;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    out_$i125 := $zext.i1.i32(out_$i124);
    goto corral_source_split_9876;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i123, 0);
    goto corral_source_split_9875;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    out_$i123 := $and.i32(out_$i122, 2048);
    goto corral_source_split_9874;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i32($M.7, out_$p121);
    goto corral_source_split_9873;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p0, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_9872;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_9871;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i103 := 28;
    goto $bb50;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    out_$i103 := out_$i102;
    goto $bb50;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    out_$i102 := $add.i32(28, out_$i89);
    call {:si_unique_call 1689} {:cexpr "len"} boogie_si_record_i32(out_$i102);
    goto corral_source_split_9869;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p101, out_$p98);
    goto corral_source_split_9868;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p100, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9867;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    out_$p100 := $bitcast.ref.ref(out_$p99);
    goto corral_source_split_9866;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9865;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref(out_$p50, $mul.ref(28, 1));
    goto corral_source_split_9864;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, out_$p97, out_$i94);
    goto corral_source_split_9863;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p96, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9862;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    out_$p96 := $bitcast.ref.ref(out_$p95);
    goto corral_source_split_9861;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9860;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i94 := $or.i32(out_$i89, $sub.i32(0, 2147483648));
    goto corral_source_split_9859;

  $bb48:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    out_$i93 := out_$i52;
    assume true;
    goto $bb48;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    out_$i92 := $ugt.i64(out_$i91, out_$i51);
    goto corral_source_split_9850;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    out_$i91 := $sext.i32.i64(out_$i90);
    goto corral_source_split_9849;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i32(out_$i89, 28);
    goto corral_source_split_9848;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    out_$i89 := $and.i32(out_$i88, 1073741823);
    call {:si_unique_call 1688} {:cexpr "extlen"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_9847;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.7, out_$p87);
    goto corral_source_split_9846;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p86, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9845;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    out_$p86 := $bitcast.ref.ref(out_$p85);
    goto corral_source_split_9844;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9843;

  $bb45:
    assume out_$i84 == 1;
    goto corral_source_split_9842;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 4);
    goto corral_source_split_9840;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    out_$i83 := $and.i32(out_$i82, 12);
    goto corral_source_split_9839;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i8.i32(out_$i81);
    goto corral_source_split_9838;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i8($M.7, out_$p80);
    goto corral_source_split_9837;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p4, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_9836;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    out_$i79 := out_$i52;
    assume true;
    goto $bb42;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    out_$i78 := $ugt.i32(out_$i77, 149);
    goto corral_source_split_9824;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i8.i32(out_$i76);
    goto corral_source_split_9823;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i8($M.7, out_$p75);
    goto corral_source_split_9822;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_9821;

  $bb39:
    assume !(out_$i71 == 1);
    goto corral_source_split_9820;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p120, out_$p117);
    goto corral_source_split_9896;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(out_$p119, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9895;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    out_$p119 := $bitcast.ref.ref(out_$p118);
    goto corral_source_split_9894;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9893;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} out_$p117 := compat_ptr(out_$i116);
    goto corral_source_split_9892;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i32($M.7, out_$p115);
    goto corral_source_split_9891;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($add.ref(out_$p113, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(1, 4));
    goto corral_source_split_9890;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    out_$p113 := $bitcast.ref.ref(out_$p112);
    goto corral_source_split_9889;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9888;

  $bb54:
    assume out_$i111 == 1;
    goto corral_source_split_9887;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 8);
    goto corral_source_split_9885;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    out_$i110 := $and.i32(out_$i109, 12);
    goto corral_source_split_9884;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i8.i32(out_$i108);
    goto corral_source_split_9883;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i8($M.7, out_$p107);
    goto corral_source_split_9882;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p4, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_9881;

  $bb51:
    assume out_$i106 == 1;
    goto corral_source_split_9880;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i32(out_$i105, 0);
    goto corral_source_split_9855;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.7, out_$p104);
    goto corral_source_split_9854;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p7, $mul.ref(0, 424)), $mul.ref(384, 1));
    goto corral_source_split_9853;

  $bb46:
    assume !(out_$i84 == 1);
    goto corral_source_split_9852;

  $bb52:
    assume {:verifier.code 0} true;
    assume !(out_$i106 == 1);
    goto $bb53;

  $bb55:
    assume {:verifier.code 0} true;
    assume !(out_$i111 == 1);
    goto $bb53;

  $bb60_dummy:
    call {:si_unique_call 1} out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p60, out_$i61, out_$i62, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i103, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i72, out_$i73, out_$i74, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i49, out_$p50, out_$i51, out_$i52, out_$i136, out_$i137 := snd_seq_write_loop_$bb29(in_$p0, in_$p4, in_$p7, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p60, out_$i61, out_$i62, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$p104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i103, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i72, out_$i73, out_$i74, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i49, out_$p50, out_$i51, out_$i52, out_$i136, out_$i137);
    return;

  exit:
    return;
}



procedure snd_seq_write_loop_$bb29(in_$p0: ref, in_$p4: ref, in_$p7: ref, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$i56: i1, in_$i57: i32, in_$p60: ref, in_$i61: i32, in_$i62: i8, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$p68: ref, in_$i69: i8, in_$i70: i32, in_$i71: i1, in_$p75: ref, in_$i76: i8, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$p80: ref, in_$i81: i8, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i64, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i32, in_$p104: ref, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i108: i8, in_$i109: i32, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$p113: ref, in_$p115: ref, in_$i116: i32, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i103: i32, in_$p121: ref, in_$i122: i32, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i32, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i130: i64, in_$i131: i64, in_$i132: i64, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$i49: i32, in_$p50: ref, in_$i51: i64, in_$i52: i32, in_$i136: i32, in_$i137: i32) returns (out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$i56: i1, out_$i57: i32, out_$p60: ref, out_$i61: i32, out_$i62: i8, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$p68: ref, out_$i69: i8, out_$i70: i32, out_$i71: i1, out_$p75: ref, out_$i76: i8, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$p80: ref, out_$i81: i8, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i64, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i32, out_$p104: ref, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i108: i8, out_$i109: i32, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$p113: ref, out_$p115: ref, out_$i116: i32, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i103: i32, out_$p121: ref, out_$i122: i32, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i32, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i130: i64, out_$i131: i64, out_$i132: i64, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$i49: i32, out_$p50: ref, out_$i51: i64, out_$i52: i32, out_$i136: i32, out_$i137: i32);
  modifies $M.7, $M.16, $M.17, $M.19, $M.13, $M.15, $CurrAddr, $M.20, $M.21, $M.22;



implementation snd_seq_fifo_cell_out_loop_$bb11(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$p4: ref, in_$i27: i1, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref) returns (out_$i27: i1, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref)
{

  entry:
    out_$i27, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$p44 := in_$i27, in_$p29, in_$i30, in_$p31, in_$i32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p41, in_$i42, in_$i43, in_$p44;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb20:
    assume {:verifier.code 0} true;
    assume out_$i43 == 1;
    goto $bb20_dummy;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    out_$p44 := out_$p41;
    assume true;
    goto $bb20;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i64(out_$i42, 0);
    goto corral_source_split_10462;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_10461;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} out_$p41 := fifo_cell_out(in_$p0);
    goto corral_source_split_10460;

  $bb18:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_10454;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} out_$i38 := signal_pending(out_$p37);
    call {:si_unique_call 1838} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_10453;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} out_$p37 := get_current();
    goto corral_source_split_10452;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} remove_wait_queue(out_$p36, in_$p3);
    goto corral_source_split_10451;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p0, $mul.ref(0, 208)), $mul.ref(112, 1));
    goto corral_source_split_10450;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} spin_lock_irq(out_$p35);
    goto corral_source_split_10449;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_10448;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} schedule();
    goto corral_source_split_10447;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} spin_unlock_irq(out_$p34);
    goto corral_source_split_10446;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_10445;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} add_wait_queue(out_$p33, in_$p3);
    goto corral_source_split_10444;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 208)), $mul.ref(112, 1));
    goto corral_source_split_10443;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $M.57 := $store.i64($M.57, in_$p4, out_$i32);
    goto corral_source_split_10441;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p29, $mul.ref(0, 9576)), $mul.ref(0, 1));
    call {:si_unique_call 1830} out_$i32 := devirtbounce.3(0, out_$p31, out_$i30, out_$p31);
    goto corral_source_split_10440;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.57, in_$p4);
    goto corral_source_split_10439;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} out_$p29 := get_current();
    goto corral_source_split_10438;

  $bb15:
    assume {:verifier.code 0} true;
    $M.57 := $store.i64($M.57, in_$p4, 1);
    goto corral_source_split_10437;

  $bb14:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(in_$i2, 0);
    goto corral_source_split_10431;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i27, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$p44 := snd_seq_fifo_cell_out_loop_$bb11(in_$p0, in_$i2, in_$p3, in_$p4, out_$i27, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$p44);
    return;

  exit:
    return;
}



procedure snd_seq_fifo_cell_out_loop_$bb11(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$p4: ref, in_$i27: i1, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref) returns (out_$i27: i1, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref);
  modifies $M.7, $M.57;



implementation snd_seq_dump_var_event_loop_$bb31(in_$p1: ref, in_$p2: ref, in_$i52: i1, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i32, in_$p60: ref, in_$p61: ref, in_$i62: i1, in_$i50: i32, in_$p51: ref, in_$i63: i64, in_$i64: i1) returns (out_$i52: i1, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i32, out_$p60: ref, out_$p61: ref, out_$i62: i1, out_$i50: i32, out_$p51: ref, out_$i63: i64, out_$i64: i1)
{

  entry:
    out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i50, out_$p51, out_$i63, out_$i64 := in_$i52, in_$i53, in_$p54, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$p61, in_$i62, in_$i50, in_$p51, in_$i63, in_$i64;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10658;

  $bb39:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i50, out_$p51 := out_$i59, out_$p61;
    goto $bb39_dummy;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    out_$i62 := $sgt.i32(out_$i59, 0);
    goto corral_source_split_10676;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.7, out_$p60);
    goto corral_source_split_10675;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p51, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_10674;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i59 := $sub.i32(out_$i50, out_$i53);
    call {:si_unique_call 1876} {:cexpr "len"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_10673;

  $bb37:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i56;
    assume true;
    goto $bb37;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    out_$i57 := $slt.i32(out_$i56, 0);
    goto corral_source_split_10669;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p54);
    call {:si_unique_call 1874} out_$i56 := devirtbounce.17(in_$p1, in_$p2, out_$p55, out_$i53);
    call {:si_unique_call 1875} {:cexpr "err"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_10668;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p51, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_10667;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_10666;

  $bb34:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := 28;
    goto $bb35;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i50;
    goto $bb35;

  $bb33:
    assume out_$i52 == 1;
    goto corral_source_split_10664;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i50, 28);
    goto corral_source_split_10662;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb41:
    assume out_$i64 == 1;
    goto corral_source_split_10680;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_10660;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p51);
    goto corral_source_split_10659;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i50, out_$p51, out_$i63, out_$i64 := snd_seq_dump_var_event_loop_$bb31(in_$p1, in_$p2, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i50, out_$p51, out_$i63, out_$i64);
    return;

  exit:
    return;
}



procedure snd_seq_dump_var_event_loop_$bb31(in_$p1: ref, in_$p2: ref, in_$i52: i1, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i32, in_$p60: ref, in_$p61: ref, in_$i62: i1, in_$i50: i32, in_$p51: ref, in_$i63: i64, in_$i64: i1) returns (out_$i52: i1, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i32, out_$p60: ref, out_$p61: ref, out_$i62: i1, out_$i50: i32, out_$p51: ref, out_$i63: i64, out_$i64: i1);
  modifies $M.7, $M.58;



implementation snd_seq_dump_var_event_loop_$bb10(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i19: i1, in_$i20: i32, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i64, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p17: ref, in_$i18: i32) returns (out_$i19: i1, out_$i20: i32, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i64, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p17: ref, out_$i18: i32)
{

  entry:
    out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p17, out_$i18 := in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$p17, in_$i18;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10610;

  $bb21:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p17, out_$i18 := out_$p30, out_$i31;
    goto $bb21_dummy;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    out_$i32 := $sgt.i32(out_$i31, 0);
    goto corral_source_split_10632;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    out_$i31 := $sub.i32(out_$i18, out_$i20);
    call {:si_unique_call 1871} {:cexpr "len"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_10631;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p17, $mul.ref(out_$i29, 1));
    goto corral_source_split_10630;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i20);
    goto corral_source_split_10629;

  $bb19:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i26;
    assume true;
    goto $bb19;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i26, 0);
    goto corral_source_split_10625;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(in_$p3);
    call {:si_unique_call 1869} out_$i26 := devirtbounce.17(in_$p1, in_$p2, out_$p25, out_$i20);
    call {:si_unique_call 1870} {:cexpr "err"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_10624;

  $bb16:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, 0);
    goto corral_source_split_10620;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} out_$i23 := copy_from_user(out_$p21, out_$p17, out_$i22);
    call {:si_unique_call 1868} {:cexpr "tmp"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_10619;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i20);
    goto corral_source_split_10618;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_10617;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_10616;

  $bb13:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i20 := 32;
    goto $bb14;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i18;
    goto $bb14;

  $bb12:
    assume out_$i19 == 1;
    goto corral_source_split_10614;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i18, 32);
    goto corral_source_split_10612;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p17, out_$i18 := snd_seq_dump_var_event_loop_$bb10(in_$p1, in_$p2, in_$p3, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p17, out_$i18);
    return;

  exit:
    return;
}



procedure snd_seq_dump_var_event_loop_$bb10(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i19: i1, in_$i20: i32, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i64, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p17: ref, in_$i18: i32) returns (out_$i19: i1, out_$i20: i32, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i64, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p17: ref, out_$i18: i32);
  modifies $M.7, $M.58;



implementation main_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i15: i1, in_$i16: i64, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i64, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i29: i32, in_$i14: i32, in_$i0: i32, in_$i32: i32, in_$i33: i1, in_$i34: i1, in_vslice_dummy_var_194: i32, in_vslice_dummy_var_195: i64, in_vslice_dummy_var_196: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i15: i1, out_$i16: i64, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i64, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i29: i32, out_$i14: i32, out_$i0: i32, out_$i32: i32, out_$i33: i1, out_$i34: i1, out_vslice_dummy_var_194: i32, out_vslice_dummy_var_195: i64, out_vslice_dummy_var_196: i32)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i14, out_$i0, out_$i32, out_$i33, out_$i34, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i29, in_$i14, in_$i0, in_$i32, in_$i33, in_$i34, in_vslice_dummy_var_194, in_vslice_dummy_var_195, in_vslice_dummy_var_196;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_10689;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    out_$i0 := out_$i14;
    goto corral_source_split_10727_dummy;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_10727;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i0;
    goto $bb26;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i0;
    goto $bb26;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i0;
    goto $bb26;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i29;
    goto $bb26;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i26;
    goto $bb26;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i20;
    goto $bb26;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i13;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_10725;

  $bb20:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := out_$i0;
    goto $bb25;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i12;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i0, 1);
    call {:si_unique_call 1896} {:cexpr "ldv_s_snd_seq_f_ops_file_operations"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_10723;

  $bb22:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_10717;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} ldv_check_return_value(out_$i10);
    goto corral_source_split_10716;

  SeqInstr_273:
    call {:si_unique_call 1893} {:cexpr "res_snd_seq_open_12"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_10715;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} out_$i10 := snd_seq_open($u0, $u1);
    goto SeqInstr_272;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} ldv_handler_precall();
    goto corral_source_split_10714;

  $bb19:
    assume out_$i9 == 1;
    goto corral_source_split_10713;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i0, 0);
    goto corral_source_split_10711;

  $bb17:
    assume out_$i8 == 1;
    goto corral_source_split_10710;

  $bb13:
    assume out_$i6 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb4:
    assume out_$i2 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb3:
    assume {:verifier.code 0} true;
    out_$i2 := $slt.i32(out_$i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb2:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1884} out_$i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1885} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i1);
    call {:si_unique_call 1886} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb46:
    assume {:verifier.code 0} true;
    assume out_$i34 == 1;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    goto $bb44;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb45;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_10691;

  corral_source_split_10689:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1881} out_$i32 := __VERIFIER_nondet_int();
    call {:si_unique_call 1882} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i32);
    call {:si_unique_call 1883} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_10690;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i0, 0);
    goto corral_source_split_10762;

  $bb45:
    assume !(out_$i33 == 1);
    goto corral_source_split_10761;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_10740;

  $bb28:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i20 := out_$i0;
    goto $bb32;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i19;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i0, 1);
    call {:si_unique_call 1901} {:cexpr "ldv_s_snd_seq_f_ops_file_operations"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_10738;

  $bb30:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i64(out_$i16, 0);
    goto corral_source_split_10734;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} ldv_check_return_value(out_$i17);
    goto corral_source_split_10733;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i64.i32(out_$i16);
    goto corral_source_split_10732;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} out_$i16 := snd_seq_read($u1, $u2, $u3, $u4);
    call {:si_unique_call 1899} {:cexpr "res_snd_seq_read_14"} boogie_si_record_i64(out_$i16);
    goto corral_source_split_10731;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} ldv_handler_precall();
    goto corral_source_split_10730;

  $bb27:
    assume out_$i15 == 1;
    goto corral_source_split_10729;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i0, 1);
    goto corral_source_split_10705;

  $bb15:
    assume out_$i7 == 1;
    goto corral_source_split_10704;

  $bb14:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_10753;

  $bb34:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := out_$i0;
    goto $bb38;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i25;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i0, 1);
    call {:si_unique_call 1906} {:cexpr "ldv_s_snd_seq_f_ops_file_operations"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_10751;

  $bb36:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i64(out_$i22, 0);
    goto corral_source_split_10747;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} ldv_check_return_value(out_$i23);
    goto corral_source_split_10746;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    out_$i23 := $trunc.i64.i32(out_$i22);
    goto corral_source_split_10745;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} out_$i22 := snd_seq_write($u1, $u2, $u3, $u4);
    call {:si_unique_call 1904} {:cexpr "res_snd_seq_write_28"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_10744;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} ldv_handler_precall();
    goto corral_source_split_10743;

  $bb33:
    assume out_$i21 == 1;
    goto corral_source_split_10742;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i0, 2);
    goto corral_source_split_10708;

  $bb16:
    assume !(out_$i7 == 1);
    goto corral_source_split_10707;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_10759;

  $bb40:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := out_$i0;
    goto $bb41;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    out_$i29 := 0;
    goto $bb41;

  SeqInstr_279:
    goto corral_source_split_10757;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} out_vslice_dummy_var_196 := snd_seq_release($u0, $u1);
    goto SeqInstr_278;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} ldv_handler_precall();
    goto corral_source_split_10756;

  $bb39:
    assume out_$i27 == 1;
    goto corral_source_split_10755;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i0, 3);
    goto corral_source_split_10694;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_10693;

  $bb5:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i1, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} out_vslice_dummy_var_194 := snd_seq_poll($u1, $u5);
    goto corral_source_split_10698;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} ldv_handler_precall();
    goto corral_source_split_10697;

  $bb8:
    assume out_$i4 == 1;
    goto corral_source_split_10696;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    out_$i4 := $slt.i32(out_$i1, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  SeqInstr_270:
    goto corral_source_split_10702;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} out_vslice_dummy_var_195 := snd_seq_ioctl($u1, $u6, $u3);
    goto SeqInstr_269;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} ldv_handler_precall();
    goto corral_source_split_10701;

  $bb10:
    assume out_$i5 == 1;
    goto corral_source_split_10700;

  $bb9:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i1, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i5 == 1);
    goto $bb12;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i8 == 1);
    goto $bb12;

  corral_source_split_10727_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i14, out_$i0, out_$i32, out_$i33, out_$i34, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196 := main_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i14, out_$i0, out_$i32, out_$i33, out_$i34, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i15: i1, in_$i16: i64, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i64, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i29: i32, in_$i14: i32, in_$i0: i32, in_$i32: i32, in_$i33: i1, in_$i34: i1, in_vslice_dummy_var_194: i32, in_vslice_dummy_var_195: i64, in_vslice_dummy_var_196: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i15: i1, out_$i16: i64, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i64, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i29: i32, out_$i14: i32, out_$i0: i32, out_$i32: i32, out_$i33: i1, out_$i34: i1, out_vslice_dummy_var_194: i32, out_vslice_dummy_var_195: i64, out_vslice_dummy_var_196: i32);
  modifies $M.7, $M.8, $M.9, $M.10, $M.5, assertsPassed, $CurrAddr, $M.23, $M.26, $M.13, $M.15, $M.3, $M.33, $M.37, $M.6, $M.41, $M.16, $M.17, $M.19, $M.20, $M.21, $M.22, $M.53, $M.57, $M.58;


