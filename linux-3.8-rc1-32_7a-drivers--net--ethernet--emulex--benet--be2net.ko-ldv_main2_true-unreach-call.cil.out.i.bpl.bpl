var $M.0: [ref]i8;

var $M.1: [ref]i16;

var $M.2: [ref]i8;

var $M.3: [ref]i32;

var $M.4: [ref]i8;

var $M.5: [ref]ref;

var $M.6: [ref]i32;

var $M.7: [ref]i8;

var $M.8: [ref]i64;

var $M.9: [ref]i32;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]i64;

var $M.13: [ref]i8;

var $M.14: [ref]i32;

var $M.15: [ref]ref;

var $M.16: [ref]i64;

var $M.17: [ref]i64;

var $M.18: [ref]i32;

var $M.19: [ref]i32;

var $M.20: [ref]i32;

var $M.21: [ref]i16;

var $M.25: i32;

var $M.26: [ref]i32;

var $M.27: [ref]ref;

var $M.28: [ref]ref;

var $M.38: i32;

var $M.41: [ref]i8;

var $M.43: [ref]i8;

var $M.44: [ref]i8;

var $M.45: [ref]i32;

var $M.56: [ref]i64;

var $M.57: [ref]i32;

var $M.58: [ref]ref;

var $M.59: [ref]i64;

var $M.60: [ref]i32;

var $M.61: [ref]i32;

var $M.62: [ref]i8;

var $M.63: i32;

var $M.64: i32;

var $M.66: [ref]i8;

var $M.68: [ref]i8;

var $M.69: [ref]i8;

var $M.70: [ref]i8;

var $M.78: [ref]i8;

var $M.79: [ref]i8;

var $M.80: [ref]i8;

var $M.81: [ref]i8;

var $M.82: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 936262);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const {:count 2} flash_cookie: ref;

axiom flash_cookie == $sub.ref(0, 1056);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 2084);

const be_ethtool_ops: ref;

axiom be_ethtool_ops == $sub.ref(0, 3476);

const be_adapter_list: ref;

axiom be_adapter_list == $sub.ref(0, 4516);

const be_adapter_list_lock: ref;

axiom be_adapter_list_lock == $sub.ref(0, 5708);

const {:count 5} et_self_tests: ref;

axiom et_self_tests == $sub.ref(0, 6892);

const {:count 6} et_tx_stats: ref;

axiom et_tx_stats == $sub.ref(0, 8180);

const {:count 7} et_rx_stats: ref;

axiom et_rx_stats == $sub.ref(0, 9512);

const {:count 32} et_stats: ref;

axiom et_stats == $sub.ref(0, 11944);

const {:count 5} cmd_priv_map: ref;

axiom cmd_priv_map == $sub.ref(0, 13008);

const be_netdev_ops: ref;

axiom be_netdev_ops == $sub.ref(0, 14440);

const num_vfs: ref;

axiom num_vfs == $sub.ref(0, 15468);

const be_eeh_handlers: ref;

axiom be_eeh_handlers == $sub.ref(0, 16532);

const {:count 9} be_dev_ids: ref;

axiom be_dev_ids == $sub.ref(0, 17844);

const be_driver: ref;

axiom be_driver == $sub.ref(0, 19180);

const {:count 32} ue_status_hi_desc: ref;

axiom ue_status_hi_desc == $sub.ref(0, 20460);

const {:count 32} ue_status_low_desc: ref;

axiom ue_status_low_desc == $sub.ref(0, 21740);

const rx_frag_size: ref;

axiom rx_frag_size == $sub.ref(0, 22766);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 23794);

const ldv_mutex_mbox_lock_of_be_adapter: ref;

axiom ldv_mutex_mbox_lock_of_be_adapter == $sub.ref(0, 24822);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 25850);

const ldv_mutex_be_adapter_list_lock: ref;

axiom ldv_mutex_be_adapter_list_lock == $sub.ref(0, 26878);

const ocrdma_drv: ref;

axiom ocrdma_drv == $sub.ref(0, 27910);

const __mod_pci_device_table: ref;

axiom __mod_pci_device_table == $sub.ref(0, 28966);

const {:count 47} .str.6: ref;

axiom .str.6 == $sub.ref(0, 30037);

const {:count 27} .str.7: ref;

axiom .str.7 == $sub.ref(0, 31088);

const {:count 28} .str.88: ref;

axiom .str.88 == $sub.ref(0, 32140);

const {:count 21} .str.89: ref;

axiom .str.89 == $sub.ref(0, 33185);

const {:count 31} .str.87: ref;

axiom .str.87 == $sub.ref(0, 34240);

const {:count 110} .str.168: ref;

axiom .str.168 == $sub.ref(0, 35374);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 107} .str.169: ref;

axiom .str.169 == $sub.ref(0, 36505);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 33} .str.91: ref;

axiom .str.91 == $sub.ref(0, 37562);

const {:count 12} .str.95: ref;

axiom .str.95 == $sub.ref(0, 38598);

const {:count 34} .str.92: ref;

axiom .str.92 == $sub.ref(0, 39656);

const {:count 35} .str.94: ref;

axiom .str.94 == $sub.ref(0, 40715);

const {:count 114} .str.23: ref;

axiom .str.23 == $sub.ref(0, 41853);

const {:count 52} .str.93: ref;

axiom .str.93 == $sub.ref(0, 42929);

const {:count 19} .str.167: ref;

axiom .str.167 == $sub.ref(0, 43972);

const {:count 44} .str.164: ref;

axiom .str.164 == $sub.ref(0, 45040);

const {:count 34} .str.165: ref;

axiom .str.165 == $sub.ref(0, 46098);

const {:count 21} .str.163: ref;

axiom .str.163 == $sub.ref(0, 47143);

const {:count 21} .str.162: ref;

axiom .str.162 == $sub.ref(0, 48188);

const {:count 51} .str.90: ref;

axiom .str.90 == $sub.ref(0, 49263);

const x86_dma_fallback_dev: ref;

axiom x86_dma_fallback_dev == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 63} .str.82: ref;

axiom .str.82 == $sub.ref(0, 50350);

const {:count 5} .str.83: ref;

axiom .str.83 == $sub.ref(0, 51379);

const {:count 64} .str.84: ref;

axiom .str.84 == $sub.ref(0, 52467);

const {:count 55} .str.85: ref;

axiom .str.85 == $sub.ref(0, 53546);

const {:count 48} .str.86: ref;

axiom .str.86 == $sub.ref(0, 54618);

const {:count 4} .str.25: ref;

axiom .str.25 == $sub.ref(0, 55646);

const {:count 4} .str.26: ref;

axiom .str.26 == $sub.ref(0, 56674);

const {:count 5} .str.27: ref;

axiom .str.27 == $sub.ref(0, 57703);

const {:count 4} .str.28: ref;

axiom .str.28 == $sub.ref(0, 58731);

const {:count 5} .str.29: ref;

axiom .str.29 == $sub.ref(0, 59760);

const {:count 4} .str.30: ref;

axiom .str.30 == $sub.ref(0, 60788);

const {:count 5} .str.31: ref;

axiom .str.31 == $sub.ref(0, 61817);

const {:count 5} .str.32: ref;

axiom .str.32 == $sub.ref(0, 62846);

const {:count 6} .str.33: ref;

axiom .str.33 == $sub.ref(0, 63876);

const {:count 5} .str.34: ref;

axiom .str.34 == $sub.ref(0, 64905);

const {:count 7} .str.35: ref;

axiom .str.35 == $sub.ref(0, 65936);

const {:count 8} .str.36: ref;

axiom .str.36 == $sub.ref(0, 66968);

const {:count 8} .str.37: ref;

axiom .str.37 == $sub.ref(0, 68000);

const {:count 8} .str.38: ref;

axiom .str.38 == $sub.ref(0, 69032);

const {:count 5} .str.39: ref;

axiom .str.39 == $sub.ref(0, 70061);

const {:count 7} .str.40: ref;

axiom .str.40 == $sub.ref(0, 71092);

const {:count 6} .str.41: ref;

axiom .str.41 == $sub.ref(0, 72122);

const {:count 7} .str.42: ref;

axiom .str.42 == $sub.ref(0, 73153);

const {:count 8} .str.43: ref;

axiom .str.43 == $sub.ref(0, 74185);

const {:count 8} .str.44: ref;

axiom .str.44 == $sub.ref(0, 75217);

const {:count 4} .str.45: ref;

axiom .str.45 == $sub.ref(0, 76245);

const {:count 6} .str.46: ref;

axiom .str.46 == $sub.ref(0, 77275);

const {:count 8} .str.47: ref;

axiom .str.47 == $sub.ref(0, 78307);

const {:count 7} .str.48: ref;

axiom .str.48 == $sub.ref(0, 79338);

const {:count 12} .str.49: ref;

axiom .str.49 == $sub.ref(0, 80374);

const {:count 12} .str.50: ref;

axiom .str.50 == $sub.ref(0, 81410);

const {:count 11} .str.51: ref;

axiom .str.51 == $sub.ref(0, 82445);

const {:count 6} .str.52: ref;

axiom .str.52 == $sub.ref(0, 83475);

const {:count 8} .str.53: ref;

axiom .str.53 == $sub.ref(0, 84507);

const {:count 8} .str.54: ref;

axiom .str.54 == $sub.ref(0, 85539);

const {:count 5} .str.55: ref;

axiom .str.55 == $sub.ref(0, 86568);

const {:count 12} .str.56: ref;

axiom .str.56 == $sub.ref(0, 87604);

const {:count 11} .str.57: ref;

axiom .str.57 == $sub.ref(0, 88639);

const {:count 9} .str.58: ref;

axiom .str.58 == $sub.ref(0, 89672);

const {:count 11} .str.59: ref;

axiom .str.59 == $sub.ref(0, 90707);

const {:count 9} .str.60: ref;

axiom .str.60 == $sub.ref(0, 91740);

const {:count 11} .str.61: ref;

axiom .str.61 == $sub.ref(0, 92775);

const {:count 6} .str.62: ref;

axiom .str.62 == $sub.ref(0, 93805);

const {:count 6} .str.63: ref;

axiom .str.63 == $sub.ref(0, 94835);

const {:count 5} .str.64: ref;

axiom .str.64 == $sub.ref(0, 95864);

const {:count 3} .str.65: ref;

axiom .str.65 == $sub.ref(0, 96891);

const {:count 5} .str.66: ref;

axiom .str.66 == $sub.ref(0, 97920);

const {:count 5} .str.67: ref;

axiom .str.67 == $sub.ref(0, 98949);

const {:count 5} .str.68: ref;

axiom .str.68 == $sub.ref(0, 99978);

const {:count 4} .str.69: ref;

axiom .str.69 == $sub.ref(0, 101006);

const {:count 4} .str.70: ref;

axiom .str.70 == $sub.ref(0, 102034);

const {:count 4} .str.71: ref;

axiom .str.71 == $sub.ref(0, 103062);

const {:count 6} .str.72: ref;

axiom .str.72 == $sub.ref(0, 104092);

const {:count 6} .str.73: ref;

axiom .str.73 == $sub.ref(0, 105122);

const {:count 6} .str.74: ref;

axiom .str.74 == $sub.ref(0, 106152);

const {:count 6} .str.75: ref;

axiom .str.75 == $sub.ref(0, 107182);

const {:count 6} .str.76: ref;

axiom .str.76 == $sub.ref(0, 108212);

const {:count 6} .str.77: ref;

axiom .str.77 == $sub.ref(0, 109242);

const {:count 6} .str.78: ref;

axiom .str.78 == $sub.ref(0, 110272);

const {:count 6} .str.79: ref;

axiom .str.79 == $sub.ref(0, 111302);

const {:count 5} .str.80: ref;

axiom .str.80 == $sub.ref(0, 112331);

const {:count 8} .str.81: ref;

axiom .str.81 == $sub.ref(0, 113363);

const {:count 7} .str.97: ref;

axiom .str.97 == $sub.ref(0, 114394);

const {:count 34} .str.17: ref;

axiom .str.17 == $sub.ref(0, 115452);

const {:count 28} .str.166: ref;

axiom .str.166 == $sub.ref(0, 116504);

const {:count 28} .str.1: ref;

axiom .str.1 == $sub.ref(0, 117556);

const {:count 26} .str.2: ref;

axiom .str.2 == $sub.ref(0, 118606);

const {:count 26} .str.3: ref;

axiom .str.3 == $sub.ref(0, 119656);

const {:count 26} .str.4: ref;

axiom .str.4 == $sub.ref(0, 120706);

const {:count 16} .str.5: ref;

axiom .str.5 == $sub.ref(0, 121746);

const {:count 30} .str.161: ref;

axiom .str.161 == $sub.ref(0, 122800);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 29} .str.104: ref;

axiom .str.104 == $sub.ref(0, 123853);

const .str: ref;

axiom .str == $sub.ref(0, 125097);

const {:count 41} .str.22: ref;

axiom .str.22 == $sub.ref(0, 126162);

const cpu_number: ref;

axiom cpu_number == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 26} .str.101: ref;

axiom .str.101 == $sub.ref(0, 127212);

const {:count 63} .str.103: ref;

axiom .str.103 == $sub.ref(0, 128299);

const {:count 22} .str.102: ref;

axiom .str.102 == $sub.ref(0, 129345);

const {:count 34} .str.98: ref;

axiom .str.98 == $sub.ref(0, 130403);

const {:count 7} .str.99: ref;

axiom .str.99 == $sub.ref(0, 131434);

const {:count 34} .str.100: ref;

axiom .str.100 == $sub.ref(0, 132492);

const {:count 19} .str.24: ref;

axiom .str.24 == $sub.ref(0, 133535);

const {:count 30} .str.123: ref;

axiom .str.123 == $sub.ref(0, 134589);

const {:count 220} .str.14: ref;

axiom .str.14 == $sub.ref(0, 135833);

const {:count 44} .str.118: ref;

axiom .str.118 == $sub.ref(0, 136901);

const {:count 22} .str.18: ref;

axiom .str.18 == $sub.ref(0, 137947);

const {:count 28} .str.128: ref;

axiom .str.128 == $sub.ref(0, 138999);

const {:count 29} .str.129: ref;

axiom .str.129 == $sub.ref(0, 140052);

const {:count 35} .str.130: ref;

axiom .str.130 == $sub.ref(0, 141111);

const {:count 21} .str.131: ref;

axiom .str.131 == $sub.ref(0, 142156);

const {:count 17} .str.132: ref;

axiom .str.132 == $sub.ref(0, 143197);

const {:count 41} .str.133: ref;

axiom .str.133 == $sub.ref(0, 144262);

const {:count 47} .str.21: ref;

axiom .str.21 == $sub.ref(0, 145333);

const {:count 33} .str.106: ref;

axiom .str.106 == $sub.ref(0, 146390);

const {:count 35} .str.107: ref;

axiom .str.107 == $sub.ref(0, 147449);

const {:count 28} .str.108: ref;

axiom .str.108 == $sub.ref(0, 148501);

const {:count 30} .str.109: ref;

axiom .str.109 == $sub.ref(0, 149555);

const {:count 24} .str.127: ref;

axiom .str.127 == $sub.ref(0, 150603);

const {:count 101} .str.13: ref;

axiom .str.13 == $sub.ref(0, 151728);

const {:count 48} .str.126: ref;

axiom .str.126 == $sub.ref(0, 152800);

const cpu_online_mask: ref;

axiom cpu_online_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 20} .str.124: ref;

axiom .str.124 == $sub.ref(0, 153844);

const {:count 28} .str.125: ref;

axiom .str.125 == $sub.ref(0, 154896);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 30} .str.20: ref;

axiom .str.20 == $sub.ref(0, 155950);

const {:count 30} .str.134: ref;

axiom .str.134 == $sub.ref(0, 157004);

const {:count 28} .str.135: ref;

axiom .str.135 == $sub.ref(0, 158056);

const {:count 36} .str.136: ref;

axiom .str.136 == $sub.ref(0, 159116);

const {:count 26} .str.137: ref;

axiom .str.137 == $sub.ref(0, 160166);

const {:count 27} .str.138: ref;

axiom .str.138 == $sub.ref(0, 161217);

const {:count 40} .str.139: ref;

axiom .str.139 == $sub.ref(0, 162281);

const {:count 41} .str.140: ref;

axiom .str.140 == $sub.ref(0, 163346);

const {:count 19} .str.141: ref;

axiom .str.141 == $sub.ref(0, 164389);

const {:count 26} .str.142: ref;

axiom .str.142 == $sub.ref(0, 165439);

const {:count 18} .str.155: ref;

axiom .str.155 == $sub.ref(0, 166481);

const {:count 23} .str.156: ref;

axiom .str.156 == $sub.ref(0, 167528);

const {:count 26} .str.157: ref;

axiom .str.157 == $sub.ref(0, 168578);

const {:count 20} .str.158: ref;

axiom .str.158 == $sub.ref(0, 169622);

const {:count 27} .str.159: ref;

axiom .str.159 == $sub.ref(0, 170673);

const {:count 20} .str.160: ref;

axiom .str.160 == $sub.ref(0, 171717);

const {:count 3} .str.153: ref;

axiom .str.153 == $sub.ref(0, 172744);

const {:count 3} .str.154: ref;

axiom .str.154 == $sub.ref(0, 173771);

const {:count 7} .str.149: ref;

axiom .str.149 == $sub.ref(0, 174802);

const {:count 5} .str.150: ref;

axiom .str.150 == $sub.ref(0, 175831);

const {:count 4} .str.151: ref;

axiom .str.151 == $sub.ref(0, 176859);

const .str.152: ref;

axiom .str.152 == $sub.ref(0, 177884);

const {:count 36} .str.147: ref;

axiom .str.147 == $sub.ref(0, 178944);

const {:count 33} .str.148: ref;

axiom .str.148 == $sub.ref(0, 180001);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 31} .str.8: ref;

axiom .str.8 == $sub.ref(0, 181056);

const {:count 20} .str.9: ref;

axiom .str.9 == $sub.ref(0, 182100);

const {:count 27} .str.19: ref;

axiom .str.19 == $sub.ref(0, 183151);

const {:count 31} .str.10: ref;

axiom .str.10 == $sub.ref(0, 184206);

const {:count 26} .str.11: ref;

axiom .str.11 == $sub.ref(0, 185256);

const {:count 26} .str.12: ref;

axiom .str.12 == $sub.ref(0, 186306);

const {:count 20} .str.143: ref;

axiom .str.143 == $sub.ref(0, 187350);

const {:count 29} .str.144: ref;

axiom .str.144 == $sub.ref(0, 188403);

const {:count 32} .str.145: ref;

axiom .str.145 == $sub.ref(0, 189459);

const {:count 9} .str.146: ref;

axiom .str.146 == $sub.ref(0, 190492);

const {:count 12} .str.121: ref;

axiom .str.121 == $sub.ref(0, 191528);

const {:count 19} .str.122: ref;

axiom .str.122 == $sub.ref(0, 192571);

const {:count 11} .str.119: ref;

axiom .str.119 == $sub.ref(0, 193606);

const {:count 44} .str.120: ref;

axiom .str.120 == $sub.ref(0, 194674);

const {:count 20} .str.117: ref;

axiom .str.117 == $sub.ref(0, 195718);

const {:count 44} .str.115: ref;

axiom .str.115 == $sub.ref(0, 196786);

const {:count 28} .str.116: ref;

axiom .str.116 == $sub.ref(0, 197838);

const {:count 32} .str.114: ref;

axiom .str.114 == $sub.ref(0, 198894);

const {:count 29} .str.113: ref;

axiom .str.113 == $sub.ref(0, 199947);

const {:count 37} .str.111: ref;

axiom .str.111 == $sub.ref(0, 201008);

const {:count 33} .str.112: ref;

axiom .str.112 == $sub.ref(0, 202065);

const {:count 20} .str.110: ref;

axiom .str.110 == $sub.ref(0, 203109);

const {:count 23} .str.105: ref;

axiom .str.105 == $sub.ref(0, 204156);

const {:count 31} .str.187: ref;

axiom .str.187 == $sub.ref(0, 205211);

const {:count 21} .str.188: ref;

axiom .str.188 == $sub.ref(0, 206256);

const {:count 49} .str.186: ref;

axiom .str.186 == $sub.ref(0, 207329);

const {:count 49} .str.185: ref;

axiom .str.185 == $sub.ref(0, 208402);

const {:count 10} .str.183: ref;

axiom .str.183 == $sub.ref(0, 209436);

const {:count 10} .str.184: ref;

axiom .str.184 == $sub.ref(0, 210470);

const {:count 25} .str.182: ref;

axiom .str.182 == $sub.ref(0, 211519);

const {:count 25} .str.181: ref;

axiom .str.181 == $sub.ref(0, 212568);

const {:count 16} .str.179: ref;

axiom .str.179 == $sub.ref(0, 213608);

const {:count 16} .str.180: ref;

axiom .str.180 == $sub.ref(0, 214648);

const {:count 46} .str.173: ref;

axiom .str.173 == $sub.ref(0, 215718);

const {:count 25} .str.175: ref;

axiom .str.175 == $sub.ref(0, 216767);

const {:count 20} .str.176: ref;

axiom .str.176 == $sub.ref(0, 217811);

const {:count 26} .str.177: ref;

axiom .str.177 == $sub.ref(0, 218861);

const {:count 26} .str.178: ref;

axiom .str.178 == $sub.ref(0, 219911);

const {:count 19} .str.174: ref;

axiom .str.174 == $sub.ref(0, 220954);

const {:count 14} .str.172: ref;

axiom .str.172 == $sub.ref(0, 221992);

const {:count 53} .str.15: ref;

axiom .str.15 == $sub.ref(0, 223069);

const {:count 26} .str.16: ref;

axiom .str.16 == $sub.ref(0, 224119);

const {:count 10} .str.170: ref;

axiom .str.170 == $sub.ref(0, 225153);

const {:count 8} .str.171: ref;

axiom .str.171 == $sub.ref(0, 226185);

const {:count 72} .str.96: ref;

axiom .str.96 == $sub.ref(0, 227281);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 228313);

const {:count 3} .str.1.392: ref;

axiom .str.1.392 == $sub.ref(0, 229340);

const {:count 14} .str.393: ref;

axiom .str.393 == $sub.ref(0, 230378);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 231406);

const be_get_settings: ref;

axiom be_get_settings == $sub.ref(0, 232438);

procedure be_get_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.21, $M.41, $CurrAddr;



implementation be_get_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i16;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $p43: ref;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $i62: i1;
  var $i63: i8;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $p70: ref;
  var $i71: i16;
  var $i72: i32;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $p87: ref;
  var $p88: ref;
  var $i89: i8;
  var $p91: ref;
  var $p92: ref;
  var $i93: i8;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $p103: ref;
  var $p105: ref;
  var $i106: i32;
  var $p108: ref;
  var $i109: i8;
  var $p110: ref;
  var $p112: ref;
  var $i113: i8;
  var $p114: ref;
  var $p116: ref;
  var $i117: i8;
  var $p118: ref;
  var $p120: ref;
  var $i121: i32;
  var $p122: ref;
  var $p124: ref;
  var $i125: i32;
  var $p126: ref;
  var $i127: i1;
  var $i128: i8;
  var $i129: i1;
  var $i130: i32;
  var $i131: i8;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i8;
  var $p136: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p4 := netdev_priv($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p3, 0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(16, 1));
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(16, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} ethtool_cmd_speed_set($p1, $i106);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(3, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(15, 1));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, $i109);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(0, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.0, $p112);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(17, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p114, $i113);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(1, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.0, $p116);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p118, $i117);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(24, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p122, $i121);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(28, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p126, $i125);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i127 := netif_carrier_ok($p0);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i128 := $zext.i1.i8($i127);
    call {:si_unique_call 23} {:cexpr "tmp___3"} boogie_si_record_i8($i128);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i8.i1($i128);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i130 := (if $i129 == 1 then 1 else 255);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i8($i130);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p132, $i131);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364016, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i8($i134);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p136, $i135);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i10 := be_cmd_link_status_query($p5, $p3, $p2, 0);
    call {:si_unique_call 4} {:cexpr "status"} boogie_si_record_i32($i10);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.1, $p3);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} ethtool_cmd_speed_set($p1, $i16);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i17 := be_cmd_get_phy_info($p5);
    call {:si_unique_call 9} {:cexpr "status"} boogie_si_record_i32($i17);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(15, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, $sub.i8(0, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, 0);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(17, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p80, 2);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $i81 := ethtool_cmd_speed($p1);
    call {:si_unique_call 21} {:cexpr "tmp___2"} boogie_si_record_i32($i81);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(16, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i81);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(15, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(3, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, $i85);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(17, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(0, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, $i89);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p92);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(1, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p95, $i93);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(24, 1));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i97);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(28, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, $i101);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(6, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    call {:si_unique_call 10} {:cexpr "interface_type"} boogie_si_record_i16($i21);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(12, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    call {:si_unique_call 11} {:cexpr "auto_speeds"} boogie_si_record_i32($i25);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(14, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    call {:si_unique_call 12} {:cexpr "fixed_speeds"} boogie_si_record_i32($i29);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(20, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    call {:si_unique_call 13} {:cexpr "dac_cable_len"} boogie_si_record_i32($i32);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i21);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i25, $i29);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i35 := convert_to_et_setting($i33, $i34);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i21);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i38 := convert_to_et_setting($i37, $i25);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i21);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i41 := be_get_port_type($i40, $i32);
    call {:si_unique_call 17} {:cexpr "tmp___0"} boogie_si_record_i32($i41);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(15, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, $i42);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(12, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i59, 8192);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $i62 := be_pause_supported($p5);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i8($i62);
    call {:si_unique_call 19} {:cexpr "tmp___1"} boogie_si_record_i8($i63);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i8.i1($i63);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(6, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $p70);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i72, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i72, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(17, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, 1);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(17, 1));
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, 0);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i72, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb20;

  $bb21:
    assume $i75 == 1;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i64 == 1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i66, 8192);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i48 == 1;
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i50, 64);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i51);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, 1);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i55, 64);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.2, $p2);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} be_link_status_update($p5, $i14);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const be_get_drvinfo: ref;

axiom be_get_drvinfo == $sub.ref(0, 233470);

procedure be_get_drvinfo($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_get_drvinfo($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i64;
  var vslice_dummy_var_278: i64;
  var vslice_dummy_var_279: i64;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p3 := netdev_priv($p0);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 26} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p5, 0, 32, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(363960, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} vslice_dummy_var_276 := be_cmd_get_fw_ver($p4, $p7, $p8);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(4, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} vslice_dummy_var_277 := strlcpy($p11, .str.97, 32);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(36, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} vslice_dummy_var_278 := strlcpy($p14, .str.170, 32);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(363960, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i19 := memcmp($p17, $p18, 32);
    call {:si_unique_call 31} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(68, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(363960, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p2);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} vslice_dummy_var_280 := snprintf.ref.i64.ref.ref.ref($p27, 32, .str.171, $p29, $p30);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $p34 := pci_name($p33);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(100, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} vslice_dummy_var_281 := strlcpy($p36, $p34, 32);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(184, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(192, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 0);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(188, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 0);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(68, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(363960, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} vslice_dummy_var_279 := strlcpy($p22, $p24, 32);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_get_reg_len: ref;

axiom be_get_reg_len == $sub.ref(0, 234502);

procedure be_get_reg_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.60, $M.41, $M.0, $M.21, $M.61, $M.62, $CurrAddr;



implementation be_get_reg_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i28: i32;
  var $i9: i32;
  var vslice_dummy_var_282: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p2 := netdev_priv($p0);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p1, 0);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i4 := check_privilege($p3, 1792);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 39} {:cexpr "tmp___0"} boogie_si_record_i8($i5);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.3, $p1);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i9 := $i28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 57888);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i19 == 1);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 57896);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} vslice_dummy_var_282 := be_cmd_get_reg_len($p3, $p1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i26 := lancer_cmd_get_file_len($p3, .str.172);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p1, $i26);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb11;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const be_get_regs: ref;

axiom be_get_regs == $sub.ref(0, 235534);

procedure be_get_regs($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.60, $M.61, $M.41, $M.21, $M.62, $CurrAddr;



implementation be_get_regs($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var vslice_dummy_var_283: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p3 := netdev_priv($p0);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 43} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p2, 0, $i11, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_3;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 57888);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 57896);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} be_cmd_get_regs($p4, $i28, $p2);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} vslice_dummy_var_283 := lancer_cmd_read_file($p4, .str.172, $i25, $p2);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb4;
}



const be_get_wol: ref;

axiom be_get_wol == $sub.ref(0, 236566);

procedure be_get_wol($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_get_wol($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p2 := netdev_priv($p0);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i4 := be_is_wol_supported($p3);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 48} {:cexpr "tmp___0"} boogie_si_record_i8($i5);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 49} cmdloc_dummy_var_5 := $memset.i8(cmdloc_dummy_var_4, $p20, 0, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 32);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364269, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 32);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const be_set_wol: ref;

axiom be_set_wol == $sub.ref(0, 237598);

procedure be_set_wol($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation be_set_wol($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i8: i32;
  var vslice_dummy_var_284: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $p2 := netdev_priv($p0);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, $sub.i32(0, 33));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i9 := be_is_wol_supported($p3);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 52} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 32);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364269, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 0);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364269, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 1);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} vslice_dummy_var_284 := dev_warn.ref.ref($p16, .str.174);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 95);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 95);
    goto $bb3;
}



const be_get_msg_level: ref;

axiom be_get_msg_level == $sub.ref(0, 238630);

procedure be_get_msg_level($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation be_get_msg_level($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p20: ref;
  var $i21: i32;
  var $i19: i32;
  var vslice_dummy_var_285: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $p1 := netdev_priv($p0);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 57888);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 57896);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364280, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i19 := $i21;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} vslice_dummy_var_285 := dev_err.ref.ref($p17, .str.175);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 95);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const be_set_msg_level: ref;

axiom be_set_msg_level == $sub.ref(0, 239662);

procedure be_set_msg_level($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.25, $M.21, $CurrAddr, assertsPassed, $M.26;



implementation be_set_msg_level($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p31: ref;
  var vslice_dummy_var_286: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} {:cexpr "be_set_msg_level:arg:level"} boogie_si_record_i32($i1);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p2 := netdev_priv($p0);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 57888);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 57896);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364280, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, $i1);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364280, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i25 := $xor.i32($i24, $i1);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 8192);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364280, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i1);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i1, 8192);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i30 := (if $i29 == 1 then 48 else 64);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} be_set_fw_log_level($p3, $i30);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vslice_dummy_var_286 := dev_err.ref.ref($p18, .str.175);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const ethtool_op_get_link: ref;

axiom ethtool_op_get_link == $sub.ref(0, 240694);

procedure ethtool_op_get_link($p0: ref) returns ($r: i32);



const be_get_eeprom_len: ref;

axiom be_get_eeprom_len == $sub.ref(0, 241726);

procedure be_get_eeprom_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.60, $M.41, $M.0, $M.21, $M.61, $M.62, $CurrAddr;



implementation be_get_eeprom_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $p1 := netdev_priv($p0);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i3 := check_privilege($p2, 1792);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 62} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 57888);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i14 == 1);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 57896);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i8 := 1024;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i26 := lancer_cmd_get_file_len($p2, .str.180);
    call {:si_unique_call 66} {:cexpr "tmp___3"} boogie_si_record_i32($i26);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i8 := $i26;
    goto $bb6;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i25 := lancer_cmd_get_file_len($p2, .str.179);
    call {:si_unique_call 64} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i8 := $i25;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb9;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const be_read_eeprom: ref;

axiom be_read_eeprom == $sub.ref(0, 242758);

procedure be_read_eeprom($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.60, $M.61, $M.41, $M.21, $CurrAddr, $M.62;



implementation be_read_eeprom($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i9: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $p4 := netdev_priv($p0);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 57888);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 57896);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i37 := $shl.i32($i36, 16);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, 6562);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p3);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.4;
    call {:si_unique_call 73} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p40, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.4 := cmdloc_dummy_var_7;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p41, 1040);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.4, $p45);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i46);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $p49 := dma_alloc_attrs($p44, $i47, $p48, 208, $0.ref);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p50, $p49);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.4, $p51);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i55 := be_cmd_get_seeprom_data($p5, $p3);
    call {:si_unique_call 76} {:cexpr "status"} boogie_si_record_i32($i55);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.4, $p72);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i73);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.4, $p75);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.4, $p77);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} dma_free_attrs($p71, $i74, $p76, $i78, $0.ref);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i9 := $i55;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb16:
    assume $i56 == 1;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.4, $p57);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i61);
    call {:si_unique_call 77} {:cexpr "__len"} boogie_si_record_i64($i62);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p59, $mul.ref(0, 1040)), $mul.ref(16, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i66);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p64, $mul.ref($i67, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 78} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p2, $p68, $i62, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i54 == 1;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i31 := lancer_cmd_read_file($p5, .str.180, $i30, $p2);
    call {:si_unique_call 72} {:cexpr "tmp___1"} boogie_si_record_i32($i31);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i9 := $i31;
    goto $bb3;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i28 := lancer_cmd_read_file($p5, .str.179, $i27, $p2);
    call {:si_unique_call 70} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i9 := $i28;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const be_get_coalesce: ref;

axiom be_get_coalesce == $sub.ref(0, 243790);

procedure be_get_coalesce($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation be_get_coalesce($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i1;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i1;
  var $i32: i32;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $p2 := netdev_priv($p0);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(488, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(88, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(80, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(72, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(76, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(52, 1));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(88, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(20, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(80, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(80, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(76, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(60, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(72, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(40, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(72, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(44, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const be_set_coalesce: ref;

axiom be_set_coalesce == $sub.ref(0, 244822);

procedure be_set_coalesce($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation be_set_coalesce($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i11: i32;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $p2 := netdev_priv($p0);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(488, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64(0);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p5, $mul.ref($i6, 272));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(484, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i10 := $ult.i32(0, $i9);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i11, $p12 := 0, $p7;
    goto $bb4;

  $bb4:
    call $p13, $i14, $i15, $p16, $i17, $p18, $i19, $i20, $i21, $p22, $p23, $i24, $p25, $i26, $i27, $i28, $p29, $p30, $i31, $p32, $i33, $p34, $i35, $i36, $i11, $p12 := be_set_coalesce_loop_$bb4($p1, $p8, $p13, $i14, $i15, $p16, $i17, $p18, $i19, $i20, $i21, $p22, $p23, $i24, $p25, $i26, $i27, $i28, $p29, $p30, $i31, $p32, $i33, $p34, $i35, $i36, $i11, $p12);
    goto $bb4_last;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(40, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p12, $mul.ref(0, 272)), $mul.ref(72, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i15);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i17);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(72, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 82} {:cexpr "_min1"} boogie_si_record_i32($i19);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i20 := $ult.i32($i19, 96);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i21 := 96;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p12, $mul.ref(0, 272)), $mul.ref(80, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(52, 1));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    call {:si_unique_call 83} {:cexpr "_min1___0"} boogie_si_record_i32($i24);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p12, $mul.ref(0, 272)), $mul.ref(80, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    call {:si_unique_call 84} {:cexpr "_min2___0"} boogie_si_record_i32($i26);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i27 := $ult.i32($i24, $i26);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p12, $mul.ref(0, 272)), $mul.ref(76, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p12, $mul.ref(0, 272)), $mul.ref(84, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i11, 1);
    call {:si_unique_call 85} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p12, $mul.ref(1, 272));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p8);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i36 := $ult.i32($i33, $i35);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i36 == 1);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i11, $p12 := $i33, $p34;
    goto $bb12_dummy;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i28 := $i24;
    goto $bb11;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb8;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_635;
}



const be_get_ringparam: ref;

axiom be_get_ringparam == $sub.ref(0, 245854);

procedure be_get_ringparam($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_get_ringparam($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $p2 := netdev_priv($p0);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(136368, 1)), $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    call {:si_unique_call 87} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i9);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(4136, 1)), $mul.ref(0, 16528)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    call {:si_unique_call 88} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i17);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    return;
}



const be_get_pauseparam: ref;

axiom be_get_pauseparam == $sub.ref(0, 246886);

procedure be_get_pauseparam($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_get_pauseparam($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var vslice_dummy_var_287: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $p2 := netdev_priv($p0);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} vslice_dummy_var_287 := be_cmd_get_flow_control($p3, $p4, $p5);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(2, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    return;
}



const be_set_pauseparam: ref;

axiom be_set_pauseparam == $sub.ref(0, 247918);

procedure be_set_pauseparam($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_set_pauseparam($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i11: i32;
  var vslice_dummy_var_288: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $p2 := netdev_priv($p0);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(2, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i5, $i9);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364036, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364032, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364036, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364032, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $i22 := be_cmd_set_flow_control($p3, $i19, $i21);
    call {:si_unique_call 93} {:cexpr "status"} boogie_si_record_i32($i22);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} vslice_dummy_var_288 := dev_warn.ref.ref($p26, .str.181);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const be_self_test: ref;

axiom be_self_test == $sub.ref(0, 248950);

procedure be_self_test($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.56, $M.57, $M.58, $M.21, $M.1, $CurrAddr;



implementation be_self_test($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var vslice_dummy_var_289: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $p4 := netdev_priv($p0);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p3, 0);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(364028, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 64);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 98} cmdloc_dummy_var_12 := $memset.i8(cmdloc_dummy_var_11, $p18, 0, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 1);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 57888);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i62 := be_cmd_link_status_query($p5, $0.ref, $p3, 0);
    call {:si_unique_call 108} {:cexpr "status"} boogie_si_record_i32($i62);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i63 == 1);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.2, $p3);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i71 == 1;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i73, 2);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p2, $mul.ref(4, 8));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p76, 1);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i63 == 1;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i65, 2);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i66);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p2, $mul.ref(4, 8));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p68, $sub.i64(0, 1));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume $i48 == 1;
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 57896);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb19;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $i55 := be_test_ddr_dma($p5);
    call {:si_unique_call 106} {:cexpr "tmp___3"} boogie_si_record_i32($i55);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i56 == 1;
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p2, $mul.ref(3, 8));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, 1);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i59, 2);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i23 := be_loopback_test($p5, 0, $p2);
    call {:si_unique_call 100} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i30 := be_loopback_test($p5, 1, $p29);
    call {:si_unique_call 102} {:cexpr "tmp___1"} boogie_si_record_i64($i30);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p2, $mul.ref(2, 8));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i37 := be_loopback_test($p5, 2, $p36);
    call {:si_unique_call 104} {:cexpr "tmp___2"} boogie_si_record_i64($i37);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i40, 2);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 2);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 2);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} vslice_dummy_var_289 := dev_err.ref.ref($p12, .str.182);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 2);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_get_stat_strings: ref;

axiom be_get_stat_strings == $sub.ref(0, 249982);

procedure be_get_stat_strings($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_get_stat_strings($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p14: ref;
  var $i15: i32;
  var $p21: ref;
  var $p12: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p26: ref;
  var $i27: i32;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i41: i64;
  var $p42: ref;
  var $i44: i64;
  var $p45: ref;
  var $i47: i64;
  var $p48: ref;
  var $i50: i64;
  var $p51: ref;
  var $i53: i64;
  var $p54: ref;
  var $i56: i64;
  var $p57: ref;
  var $i59: i64;
  var $p60: ref;
  var $i62: i64;
  var $p63: ref;
  var $i65: i64;
  var $p66: ref;
  var $i68: i64;
  var $p69: ref;
  var $i71: i64;
  var $p22: ref;
  var $i72: i64;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $i86: i64;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $p91: ref;
  var $i92: i64;
  var $p93: ref;
  var $i94: i64;
  var $p95: ref;
  var $i96: i64;
  var $p97: ref;
  var $i98: i64;
  var $p99: ref;
  var $i100: i64;
  var $p101: ref;
  var $i102: i64;
  var $p103: ref;
  var $i104: i64;
  var $p105: ref;
  var $i106: i64;
  var $p107: ref;
  var $i108: i64;
  var $p109: ref;
  var $i110: i64;
  var $p111: ref;
  var $i112: i64;
  var $p113: ref;
  var $i114: i64;
  var $p115: ref;
  var $i116: i64;
  var $p117: ref;
  var $i118: i64;
  var $p119: ref;
  var $i120: i64;
  var $p121: ref;
  var $i122: i64;
  var $p123: ref;
  var $i124: i64;
  var $p125: ref;
  var $i126: i64;
  var $p127: ref;
  var $i128: i64;
  var $p129: ref;
  var $i130: i64;
  var $p131: ref;
  var $i132: i64;
  var $p13: ref;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;
  var cmdloc_dummy_var_91: [ref]i8;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;
  var cmdloc_dummy_var_94: [ref]i8;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;
  var cmdloc_dummy_var_108: [ref]i8;
  var cmdloc_dummy_var_109: [ref]i8;
  var cmdloc_dummy_var_110: [ref]i8;
  var cmdloc_dummy_var_111: [ref]i8;
  var cmdloc_dummy_var_112: [ref]i8;
  var cmdloc_dummy_var_113: [ref]i8;
  var cmdloc_dummy_var_114: [ref]i8;
  var cmdloc_dummy_var_115: [ref]i8;
  var cmdloc_dummy_var_116: [ref]i8;
  var cmdloc_dummy_var_117: [ref]i8;
  var cmdloc_dummy_var_118: [ref]i8;
  var cmdloc_dummy_var_119: [ref]i8;
  var cmdloc_dummy_var_120: [ref]i8;
  var cmdloc_dummy_var_121: [ref]i8;
  var cmdloc_dummy_var_122: [ref]i8;
  var cmdloc_dummy_var_123: [ref]i8;
  var cmdloc_dummy_var_124: [ref]i8;
  var cmdloc_dummy_var_125: [ref]i8;
  var cmdloc_dummy_var_126: [ref]i8;
  var cmdloc_dummy_var_127: [ref]i8;
  var cmdloc_dummy_var_128: [ref]i8;
  var cmdloc_dummy_var_129: [ref]i8;
  var cmdloc_dummy_var_130: [ref]i8;
  var cmdloc_dummy_var_131: [ref]i8;
  var cmdloc_dummy_var_132: [ref]i8;
  var cmdloc_dummy_var_133: [ref]i8;
  var cmdloc_dummy_var_134: [ref]i8;
  var cmdloc_dummy_var_135: [ref]i8;
  var cmdloc_dummy_var_136: [ref]i8;
  var cmdloc_dummy_var_137: [ref]i8;
  var cmdloc_dummy_var_138: [ref]i8;
  var cmdloc_dummy_var_139: [ref]i8;
  var cmdloc_dummy_var_140: [ref]i8;
  var cmdloc_dummy_var_141: [ref]i8;
  var cmdloc_dummy_var_142: [ref]i8;
  var cmdloc_dummy_var_143: [ref]i8;
  var cmdloc_dummy_var_144: [ref]i8;
  var cmdloc_dummy_var_145: [ref]i8;
  var cmdloc_dummy_var_146: [ref]i8;
  var cmdloc_dummy_var_147: [ref]i8;
  var cmdloc_dummy_var_148: [ref]i8;
  var cmdloc_dummy_var_149: [ref]i8;
  var cmdloc_dummy_var_150: [ref]i8;
  var cmdloc_dummy_var_151: [ref]i8;
  var cmdloc_dummy_var_152: [ref]i8;
  var cmdloc_dummy_var_153: [ref]i8;
  var cmdloc_dummy_var_154: [ref]i8;
  var cmdloc_dummy_var_155: [ref]i8;
  var cmdloc_dummy_var_156: [ref]i8;
  var cmdloc_dummy_var_157: [ref]i8;
  var cmdloc_dummy_var_158: [ref]i8;
  var cmdloc_dummy_var_159: [ref]i8;
  var cmdloc_dummy_var_160: [ref]i8;
  var cmdloc_dummy_var_161: [ref]i8;
  var cmdloc_dummy_var_162: [ref]i8;
  var cmdloc_dummy_var_163: [ref]i8;
  var cmdloc_dummy_var_164: [ref]i8;
  var cmdloc_dummy_var_165: [ref]i8;
  var cmdloc_dummy_var_166: [ref]i8;
  var cmdloc_dummy_var_167: [ref]i8;
  var cmdloc_dummy_var_168: [ref]i8;
  var cmdloc_dummy_var_169: [ref]i8;
  var cmdloc_dummy_var_170: [ref]i8;
  var cmdloc_dummy_var_171: [ref]i8;
  var cmdloc_dummy_var_172: [ref]i8;
  var cmdloc_dummy_var_173: [ref]i8;
  var cmdloc_dummy_var_174: [ref]i8;
  var cmdloc_dummy_var_175: [ref]i8;
  var cmdloc_dummy_var_176: [ref]i8;
  var cmdloc_dummy_var_177: [ref]i8;
  var cmdloc_dummy_var_178: [ref]i8;
  var cmdloc_dummy_var_179: [ref]i8;
  var cmdloc_dummy_var_180: [ref]i8;
  var cmdloc_dummy_var_181: [ref]i8;
  var cmdloc_dummy_var_182: [ref]i8;
  var cmdloc_dummy_var_183: [ref]i8;
  var cmdloc_dummy_var_184: [ref]i8;
  var cmdloc_dummy_var_185: [ref]i8;
  var cmdloc_dummy_var_186: [ref]i8;
  var cmdloc_dummy_var_187: [ref]i8;
  var cmdloc_dummy_var_188: [ref]i8;
  var cmdloc_dummy_var_189: [ref]i8;
  var cmdloc_dummy_var_190: [ref]i8;
  var cmdloc_dummy_var_191: [ref]i8;
  var cmdloc_dummy_var_192: [ref]i8;
  var cmdloc_dummy_var_193: [ref]i8;
  var cmdloc_dummy_var_194: [ref]i8;
  var cmdloc_dummy_var_195: [ref]i8;
  var cmdloc_dummy_var_196: [ref]i8;
  var cmdloc_dummy_var_197: [ref]i8;
  var cmdloc_dummy_var_198: [ref]i8;
  var cmdloc_dummy_var_199: [ref]i8;
  var cmdloc_dummy_var_200: [ref]i8;
  var cmdloc_dummy_var_201: [ref]i8;
  var cmdloc_dummy_var_202: [ref]i8;
  var cmdloc_dummy_var_203: [ref]i8;
  var cmdloc_dummy_var_204: [ref]i8;
  var cmdloc_dummy_var_205: [ref]i8;
  var cmdloc_dummy_var_206: [ref]i8;
  var cmdloc_dummy_var_207: [ref]i8;
  var cmdloc_dummy_var_208: [ref]i8;
  var cmdloc_dummy_var_209: [ref]i8;
  var cmdloc_dummy_var_210: [ref]i8;
  var cmdloc_dummy_var_211: [ref]i8;
  var cmdloc_dummy_var_212: [ref]i8;
  var cmdloc_dummy_var_213: [ref]i8;
  var cmdloc_dummy_var_214: [ref]i8;
  var cmdloc_dummy_var_215: [ref]i8;
  var cmdloc_dummy_var_216: [ref]i8;
  var cmdloc_dummy_var_217: [ref]i8;
  var cmdloc_dummy_var_218: [ref]i8;
  var cmdloc_dummy_var_219: [ref]i8;
  var cmdloc_dummy_var_220: [ref]i8;
  var cmdloc_dummy_var_221: [ref]i8;
  var cmdloc_dummy_var_222: [ref]i8;
  var cmdloc_dummy_var_223: [ref]i8;
  var cmdloc_dummy_var_224: [ref]i8;
  var cmdloc_dummy_var_225: [ref]i8;
  var cmdloc_dummy_var_226: [ref]i8;
  var cmdloc_dummy_var_227: [ref]i8;
  var cmdloc_dummy_var_228: [ref]i8;
  var cmdloc_dummy_var_229: [ref]i8;
  var cmdloc_dummy_var_230: [ref]i8;
  var cmdloc_dummy_var_231: [ref]i8;
  var cmdloc_dummy_var_232: [ref]i8;
  var cmdloc_dummy_var_233: [ref]i8;
  var cmdloc_dummy_var_234: [ref]i8;
  var vslice_dummy_var_290: i32;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;
  var vslice_dummy_var_294: i32;
  var vslice_dummy_var_295: i32;
  var vslice_dummy_var_296: i32;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i32;
  var vslice_dummy_var_300: i32;
  var vslice_dummy_var_301: i32;
  var vslice_dummy_var_302: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} {:cexpr "be_get_stat_strings:arg:stringset"} boogie_si_record_i32($i1);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $p3 := netdev_priv($p0);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb11, $bb12;

  $bb12:
    assume !(0 == 1);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 112} cmdloc_dummy_var_18 := $memcpy.i8(cmdloc_dummy_var_16, cmdloc_dummy_var_17, $p2, et_stats, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref(32, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb73, $bb74;

  $bb74:
    assume !(0 == 1);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_52 := $M.0;
    cmdloc_dummy_var_53 := $M.0;
    call {:si_unique_call 139} cmdloc_dummy_var_54 := $memcpy.i8(cmdloc_dummy_var_52, cmdloc_dummy_var_53, $p8, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_54;
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    $i72 := $add.i64(32, 32);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p2, $mul.ref($i72, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb77, $bb78;

  $bb78:
    assume !(0 == 1);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_58 := $M.0;
    cmdloc_dummy_var_59 := $M.0;
    call {:si_unique_call 141} cmdloc_dummy_var_60 := $memcpy.i8(cmdloc_dummy_var_58, cmdloc_dummy_var_59, $p73, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_60;
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    $i74 := $add.i64($i72, 32);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p2, $mul.ref($i74, 1));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb81, $bb82;

  $bb82:
    assume !(0 == 1);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_64 := $M.0;
    cmdloc_dummy_var_65 := $M.0;
    call {:si_unique_call 143} cmdloc_dummy_var_66 := $memcpy.i8(cmdloc_dummy_var_64, cmdloc_dummy_var_65, $p75, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_66;
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    $i76 := $add.i64($i74, 32);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p2, $mul.ref($i76, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb85, $bb86;

  $bb86:
    assume !(0 == 1);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_70 := $M.0;
    cmdloc_dummy_var_71 := $M.0;
    call {:si_unique_call 145} cmdloc_dummy_var_72 := $memcpy.i8(cmdloc_dummy_var_70, cmdloc_dummy_var_71, $p77, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_72;
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    $i78 := $add.i64($i76, 32);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p2, $mul.ref($i78, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb89, $bb90;

  $bb90:
    assume !(0 == 1);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_76 := $M.0;
    cmdloc_dummy_var_77 := $M.0;
    call {:si_unique_call 147} cmdloc_dummy_var_78 := $memcpy.i8(cmdloc_dummy_var_76, cmdloc_dummy_var_77, $p79, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_78;
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    $i80 := $add.i64($i78, 32);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p2, $mul.ref($i80, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb93, $bb94;

  $bb94:
    assume !(0 == 1);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_82 := $M.0;
    cmdloc_dummy_var_83 := $M.0;
    call {:si_unique_call 149} cmdloc_dummy_var_84 := $memcpy.i8(cmdloc_dummy_var_82, cmdloc_dummy_var_83, $p81, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_84;
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    $i82 := $add.i64($i80, 32);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p2, $mul.ref($i82, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb97, $bb98;

  $bb98:
    assume !(0 == 1);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_88 := $M.0;
    cmdloc_dummy_var_89 := $M.0;
    call {:si_unique_call 151} cmdloc_dummy_var_90 := $memcpy.i8(cmdloc_dummy_var_88, cmdloc_dummy_var_89, $p83, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_90;
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    $i84 := $add.i64($i82, 32);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p2, $mul.ref($i84, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb101, $bb102;

  $bb102:
    assume !(0 == 1);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_94 := $M.0;
    cmdloc_dummy_var_95 := $M.0;
    call {:si_unique_call 153} cmdloc_dummy_var_96 := $memcpy.i8(cmdloc_dummy_var_94, cmdloc_dummy_var_95, $p85, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_96;
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    $i86 := $add.i64($i84, 32);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p2, $mul.ref($i86, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb105, $bb106;

  $bb106:
    assume !(0 == 1);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_100 := $M.0;
    cmdloc_dummy_var_101 := $M.0;
    call {:si_unique_call 155} cmdloc_dummy_var_102 := $memcpy.i8(cmdloc_dummy_var_100, cmdloc_dummy_var_101, $p87, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_102;
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    $i88 := $add.i64($i86, 32);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p2, $mul.ref($i88, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb109, $bb110;

  $bb110:
    assume !(0 == 1);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_106 := $M.0;
    cmdloc_dummy_var_107 := $M.0;
    call {:si_unique_call 157} cmdloc_dummy_var_108 := $memcpy.i8(cmdloc_dummy_var_106, cmdloc_dummy_var_107, $p89, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_108;
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    $i90 := $add.i64($i88, 32);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p2, $mul.ref($i90, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb113, $bb114;

  $bb114:
    assume !(0 == 1);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_112 := $M.0;
    cmdloc_dummy_var_113 := $M.0;
    call {:si_unique_call 159} cmdloc_dummy_var_114 := $memcpy.i8(cmdloc_dummy_var_112, cmdloc_dummy_var_113, $p91, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_114;
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    $i92 := $add.i64($i90, 32);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p2, $mul.ref($i92, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb117, $bb118;

  $bb118:
    assume !(0 == 1);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_118 := $M.0;
    cmdloc_dummy_var_119 := $M.0;
    call {:si_unique_call 161} cmdloc_dummy_var_120 := $memcpy.i8(cmdloc_dummy_var_118, cmdloc_dummy_var_119, $p93, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_120;
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    $i94 := $add.i64($i92, 32);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p2, $mul.ref($i94, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb121, $bb122;

  $bb122:
    assume !(0 == 1);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_124 := $M.0;
    cmdloc_dummy_var_125 := $M.0;
    call {:si_unique_call 163} cmdloc_dummy_var_126 := $memcpy.i8(cmdloc_dummy_var_124, cmdloc_dummy_var_125, $p95, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_126;
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    $i96 := $add.i64($i94, 32);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p2, $mul.ref($i96, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb125, $bb126;

  $bb126:
    assume !(0 == 1);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_130 := $M.0;
    cmdloc_dummy_var_131 := $M.0;
    call {:si_unique_call 165} cmdloc_dummy_var_132 := $memcpy.i8(cmdloc_dummy_var_130, cmdloc_dummy_var_131, $p97, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_132;
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    $i98 := $add.i64($i96, 32);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p2, $mul.ref($i98, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb129, $bb130;

  $bb130:
    assume !(0 == 1);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_136 := $M.0;
    cmdloc_dummy_var_137 := $M.0;
    call {:si_unique_call 167} cmdloc_dummy_var_138 := $memcpy.i8(cmdloc_dummy_var_136, cmdloc_dummy_var_137, $p99, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_138;
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    $i100 := $add.i64($i98, 32);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p2, $mul.ref($i100, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb133, $bb134;

  $bb134:
    assume !(0 == 1);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_142 := $M.0;
    cmdloc_dummy_var_143 := $M.0;
    call {:si_unique_call 169} cmdloc_dummy_var_144 := $memcpy.i8(cmdloc_dummy_var_142, cmdloc_dummy_var_143, $p101, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_144;
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    $i102 := $add.i64($i100, 32);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p2, $mul.ref($i102, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb137, $bb138;

  $bb138:
    assume !(0 == 1);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_148 := $M.0;
    cmdloc_dummy_var_149 := $M.0;
    call {:si_unique_call 171} cmdloc_dummy_var_150 := $memcpy.i8(cmdloc_dummy_var_148, cmdloc_dummy_var_149, $p103, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_150;
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    $i104 := $add.i64($i102, 32);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p2, $mul.ref($i104, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb141, $bb142;

  $bb142:
    assume !(0 == 1);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_154 := $M.0;
    cmdloc_dummy_var_155 := $M.0;
    call {:si_unique_call 173} cmdloc_dummy_var_156 := $memcpy.i8(cmdloc_dummy_var_154, cmdloc_dummy_var_155, $p105, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_156;
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    $i106 := $add.i64($i104, 32);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p2, $mul.ref($i106, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb145, $bb146;

  $bb146:
    assume !(0 == 1);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_160 := $M.0;
    cmdloc_dummy_var_161 := $M.0;
    call {:si_unique_call 175} cmdloc_dummy_var_162 := $memcpy.i8(cmdloc_dummy_var_160, cmdloc_dummy_var_161, $p107, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_162;
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    $i108 := $add.i64($i106, 32);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p2, $mul.ref($i108, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb149, $bb150;

  $bb150:
    assume !(0 == 1);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_166 := $M.0;
    cmdloc_dummy_var_167 := $M.0;
    call {:si_unique_call 177} cmdloc_dummy_var_168 := $memcpy.i8(cmdloc_dummy_var_166, cmdloc_dummy_var_167, $p109, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_168;
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    $i110 := $add.i64($i108, 32);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p2, $mul.ref($i110, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb153, $bb154;

  $bb154:
    assume !(0 == 1);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_172 := $M.0;
    cmdloc_dummy_var_173 := $M.0;
    call {:si_unique_call 179} cmdloc_dummy_var_174 := $memcpy.i8(cmdloc_dummy_var_172, cmdloc_dummy_var_173, $p111, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_174;
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    $i112 := $add.i64($i110, 32);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p2, $mul.ref($i112, 1));
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb157, $bb158;

  $bb158:
    assume !(0 == 1);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_178 := $M.0;
    cmdloc_dummy_var_179 := $M.0;
    call {:si_unique_call 181} cmdloc_dummy_var_180 := $memcpy.i8(cmdloc_dummy_var_178, cmdloc_dummy_var_179, $p113, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_180;
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    $i114 := $add.i64($i112, 32);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p2, $mul.ref($i114, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb161, $bb162;

  $bb162:
    assume !(0 == 1);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_184 := $M.0;
    cmdloc_dummy_var_185 := $M.0;
    call {:si_unique_call 183} cmdloc_dummy_var_186 := $memcpy.i8(cmdloc_dummy_var_184, cmdloc_dummy_var_185, $p115, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_186;
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    $i116 := $add.i64($i114, 32);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p2, $mul.ref($i116, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb165, $bb166;

  $bb166:
    assume !(0 == 1);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_190 := $M.0;
    cmdloc_dummy_var_191 := $M.0;
    call {:si_unique_call 185} cmdloc_dummy_var_192 := $memcpy.i8(cmdloc_dummy_var_190, cmdloc_dummy_var_191, $p117, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_192;
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    $i118 := $add.i64($i116, 32);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p2, $mul.ref($i118, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb169, $bb170;

  $bb170:
    assume !(0 == 1);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_196 := $M.0;
    cmdloc_dummy_var_197 := $M.0;
    call {:si_unique_call 187} cmdloc_dummy_var_198 := $memcpy.i8(cmdloc_dummy_var_196, cmdloc_dummy_var_197, $p119, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_198;
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    $i120 := $add.i64($i118, 32);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p2, $mul.ref($i120, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb173, $bb174;

  $bb174:
    assume !(0 == 1);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_202 := $M.0;
    cmdloc_dummy_var_203 := $M.0;
    call {:si_unique_call 189} cmdloc_dummy_var_204 := $memcpy.i8(cmdloc_dummy_var_202, cmdloc_dummy_var_203, $p121, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_204;
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    $i122 := $add.i64($i120, 32);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p2, $mul.ref($i122, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb177, $bb178;

  $bb178:
    assume !(0 == 1);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_208 := $M.0;
    cmdloc_dummy_var_209 := $M.0;
    call {:si_unique_call 191} cmdloc_dummy_var_210 := $memcpy.i8(cmdloc_dummy_var_208, cmdloc_dummy_var_209, $p123, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_210;
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    $i124 := $add.i64($i122, 32);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p2, $mul.ref($i124, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb181, $bb182;

  $bb182:
    assume !(0 == 1);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_214 := $M.0;
    cmdloc_dummy_var_215 := $M.0;
    call {:si_unique_call 193} cmdloc_dummy_var_216 := $memcpy.i8(cmdloc_dummy_var_214, cmdloc_dummy_var_215, $p125, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_216;
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    $i126 := $add.i64($i124, 32);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p2, $mul.ref($i126, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb185, $bb186;

  $bb186:
    assume !(0 == 1);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_220 := $M.0;
    cmdloc_dummy_var_221 := $M.0;
    call {:si_unique_call 195} cmdloc_dummy_var_222 := $memcpy.i8(cmdloc_dummy_var_220, cmdloc_dummy_var_221, $p127, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_222;
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    $i128 := $add.i64($i126, 32);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p2, $mul.ref($i128, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb189, $bb190;

  $bb190:
    assume !(0 == 1);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_226 := $M.0;
    cmdloc_dummy_var_227 := $M.0;
    call {:si_unique_call 197} cmdloc_dummy_var_228 := $memcpy.i8(cmdloc_dummy_var_226, cmdloc_dummy_var_227, $p129, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_228;
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    $i130 := $add.i64($i128, 32);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p2, $mul.ref($i130, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb193, $bb194;

  $bb194:
    assume !(0 == 1);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_232 := $M.0;
    cmdloc_dummy_var_233 := $M.0;
    call {:si_unique_call 199} cmdloc_dummy_var_234 := $memcpy.i8(cmdloc_dummy_var_232, cmdloc_dummy_var_233, $p131, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_234;
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    $i132 := $add.i64($i130, 32);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p2, $mul.ref($i132, 1));
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32(0, $i10);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p12 := $p13;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i25 := $ult.i32(0, $i24);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb28:
    assume $i25 == 1;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p26, $i27 := $p12, 0;
    goto $bb31;

  $bb31:
    call $p29, $i30, $i31, $i32, $p26, $i27, $i41, $p42, $i44, $p45, $i47, $p48, $i50, $p51, $i53, $p54, vslice_dummy_var_292, vslice_dummy_var_293, vslice_dummy_var_294, vslice_dummy_var_295, vslice_dummy_var_296, vslice_dummy_var_297 := be_get_stat_strings_loop_$bb31($p23, $p29, $i30, $i31, $i32, $p26, $i27, $i41, $p42, $i44, $p45, $i47, $p48, $i50, $p51, $i53, $p54, vslice_dummy_var_292, vslice_dummy_var_293, vslice_dummy_var_294, vslice_dummy_var_295, vslice_dummy_var_296, vslice_dummy_var_297);
    goto $bb31_last;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} vslice_dummy_var_292 := sprintf.ref.ref.i32.ref($p26, .str.184, $i27, et_tx_stats);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p26, $mul.ref(32, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} vslice_dummy_var_293 := sprintf.ref.ref.i32.ref($p29, .str.184, $i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i41 := $add.i64(32, 32);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p26, $mul.ref($i41, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} vslice_dummy_var_294 := sprintf.ref.ref.i32.ref($p42, .str.184, $i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i44 := $add.i64($i41, 32);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p26, $mul.ref($i44, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} vslice_dummy_var_295 := sprintf.ref.ref.i32.ref($p45, .str.184, $i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i47 := $add.i64($i44, 32);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p26, $mul.ref($i47, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} vslice_dummy_var_296 := sprintf.ref.ref.i32.ref($p48, .str.184, $i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i50 := $add.i64($i47, 32);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p26, $mul.ref($i50, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} vslice_dummy_var_297 := sprintf.ref.ref.i32.ref($p51, .str.184, $i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i53 := $add.i64($i50, 32);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p26, $mul.ref($i53, 1));
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i27, 1);
    call {:si_unique_call 118} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p23);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32($i30, $i31);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i32 == 1);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb37:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p26, $i27 := $p54, $i30;
    goto $bb37_dummy;

  $bb16:
    assume $i11 == 1;
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p14, $i15 := $p13, 0;
    goto $bb19;

  $bb19:
    call $p17, $i18, $i19, $i20, $p14, $i15, $p21, $i56, $p57, $i59, $p60, $i62, $p63, $i65, $p66, $i68, $p69, $i71, $p22, vslice_dummy_var_290, vslice_dummy_var_291, vslice_dummy_var_298, vslice_dummy_var_299, vslice_dummy_var_300, vslice_dummy_var_301, vslice_dummy_var_302 := be_get_stat_strings_loop_$bb19($p9, $p17, $i18, $i19, $i20, $p14, $i15, $p21, $i56, $p57, $i59, $p60, $i62, $p63, $i65, $p66, $i68, $p69, $i71, $p22, vslice_dummy_var_290, vslice_dummy_var_291, vslice_dummy_var_298, vslice_dummy_var_299, vslice_dummy_var_300, vslice_dummy_var_301, vslice_dummy_var_302);
    goto $bb19_last;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} vslice_dummy_var_290 := sprintf.ref.ref.i32.ref($p14, .str.183, $i15, et_rx_stats);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p14, $mul.ref(32, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} vslice_dummy_var_291 := sprintf.ref.ref.i32.ref($p17, .str.183, $i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i56 := $add.i64(32, 32);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p14, $mul.ref($i56, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} vslice_dummy_var_298 := sprintf.ref.ref.i32.ref($p57, .str.183, $i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i59 := $add.i64($i56, 32);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p14, $mul.ref($i59, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} vslice_dummy_var_299 := sprintf.ref.ref.i32.ref($p60, .str.183, $i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i62 := $add.i64($i59, 32);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p14, $mul.ref($i62, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} vslice_dummy_var_300 := sprintf.ref.ref.i32.ref($p63, .str.183, $i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i65 := $add.i64($i62, 32);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p14, $mul.ref($i65, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} vslice_dummy_var_301 := sprintf.ref.ref.i32.ref($p66, .str.183, $i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i68 := $add.i64($i65, 32);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p14, $mul.ref($i68, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} vslice_dummy_var_302 := sprintf.ref.ref.i32.ref($p69, .str.183, $i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    $i71 := $add.i64($i68, 32);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p14, $mul.ref($i71, 1));
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i15, 1);
    call {:si_unique_call 115} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p9);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i20 := $ult.i32($i18, $i19);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p21 := $p22;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p12 := $p21;
    goto $bb18;

  $bb25:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p14, $i15 := $p22, $i18;
    goto $bb25_dummy;

  $bb193:
    assume 0 == 1;
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_229 := $M.0;
    cmdloc_dummy_var_230 := $M.0;
    call {:si_unique_call 198} cmdloc_dummy_var_231 := $memcpy.i8(cmdloc_dummy_var_229, cmdloc_dummy_var_230, $p131, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_231;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb189:
    assume 0 == 1;
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_223 := $M.0;
    cmdloc_dummy_var_224 := $M.0;
    call {:si_unique_call 196} cmdloc_dummy_var_225 := $memcpy.i8(cmdloc_dummy_var_223, cmdloc_dummy_var_224, $p129, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_225;
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb185:
    assume 0 == 1;
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_217 := $M.0;
    cmdloc_dummy_var_218 := $M.0;
    call {:si_unique_call 194} cmdloc_dummy_var_219 := $memcpy.i8(cmdloc_dummy_var_217, cmdloc_dummy_var_218, $p127, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_219;
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb181:
    assume 0 == 1;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_211 := $M.0;
    cmdloc_dummy_var_212 := $M.0;
    call {:si_unique_call 192} cmdloc_dummy_var_213 := $memcpy.i8(cmdloc_dummy_var_211, cmdloc_dummy_var_212, $p125, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_213;
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb177:
    assume 0 == 1;
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_205 := $M.0;
    cmdloc_dummy_var_206 := $M.0;
    call {:si_unique_call 190} cmdloc_dummy_var_207 := $memcpy.i8(cmdloc_dummy_var_205, cmdloc_dummy_var_206, $p123, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_207;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb173:
    assume 0 == 1;
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_199 := $M.0;
    cmdloc_dummy_var_200 := $M.0;
    call {:si_unique_call 188} cmdloc_dummy_var_201 := $memcpy.i8(cmdloc_dummy_var_199, cmdloc_dummy_var_200, $p121, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_201;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb169:
    assume 0 == 1;
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_193 := $M.0;
    cmdloc_dummy_var_194 := $M.0;
    call {:si_unique_call 186} cmdloc_dummy_var_195 := $memcpy.i8(cmdloc_dummy_var_193, cmdloc_dummy_var_194, $p119, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_195;
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb165:
    assume 0 == 1;
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_187 := $M.0;
    cmdloc_dummy_var_188 := $M.0;
    call {:si_unique_call 184} cmdloc_dummy_var_189 := $memcpy.i8(cmdloc_dummy_var_187, cmdloc_dummy_var_188, $p117, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_189;
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb161:
    assume 0 == 1;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_181 := $M.0;
    cmdloc_dummy_var_182 := $M.0;
    call {:si_unique_call 182} cmdloc_dummy_var_183 := $memcpy.i8(cmdloc_dummy_var_181, cmdloc_dummy_var_182, $p115, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_183;
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb157:
    assume 0 == 1;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_175 := $M.0;
    cmdloc_dummy_var_176 := $M.0;
    call {:si_unique_call 180} cmdloc_dummy_var_177 := $memcpy.i8(cmdloc_dummy_var_175, cmdloc_dummy_var_176, $p113, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_177;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb153:
    assume 0 == 1;
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_169 := $M.0;
    cmdloc_dummy_var_170 := $M.0;
    call {:si_unique_call 178} cmdloc_dummy_var_171 := $memcpy.i8(cmdloc_dummy_var_169, cmdloc_dummy_var_170, $p111, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_171;
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb149:
    assume 0 == 1;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_163 := $M.0;
    cmdloc_dummy_var_164 := $M.0;
    call {:si_unique_call 176} cmdloc_dummy_var_165 := $memcpy.i8(cmdloc_dummy_var_163, cmdloc_dummy_var_164, $p109, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_165;
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb145:
    assume 0 == 1;
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_157 := $M.0;
    cmdloc_dummy_var_158 := $M.0;
    call {:si_unique_call 174} cmdloc_dummy_var_159 := $memcpy.i8(cmdloc_dummy_var_157, cmdloc_dummy_var_158, $p107, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_159;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb141:
    assume 0 == 1;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_151 := $M.0;
    cmdloc_dummy_var_152 := $M.0;
    call {:si_unique_call 172} cmdloc_dummy_var_153 := $memcpy.i8(cmdloc_dummy_var_151, cmdloc_dummy_var_152, $p105, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_153;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb137:
    assume 0 == 1;
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_145 := $M.0;
    cmdloc_dummy_var_146 := $M.0;
    call {:si_unique_call 170} cmdloc_dummy_var_147 := $memcpy.i8(cmdloc_dummy_var_145, cmdloc_dummy_var_146, $p103, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_147;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb133:
    assume 0 == 1;
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_139 := $M.0;
    cmdloc_dummy_var_140 := $M.0;
    call {:si_unique_call 168} cmdloc_dummy_var_141 := $memcpy.i8(cmdloc_dummy_var_139, cmdloc_dummy_var_140, $p101, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_141;
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb129:
    assume 0 == 1;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_133 := $M.0;
    cmdloc_dummy_var_134 := $M.0;
    call {:si_unique_call 166} cmdloc_dummy_var_135 := $memcpy.i8(cmdloc_dummy_var_133, cmdloc_dummy_var_134, $p99, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_135;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb125:
    assume 0 == 1;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_127 := $M.0;
    cmdloc_dummy_var_128 := $M.0;
    call {:si_unique_call 164} cmdloc_dummy_var_129 := $memcpy.i8(cmdloc_dummy_var_127, cmdloc_dummy_var_128, $p97, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_129;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb121:
    assume 0 == 1;
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_121 := $M.0;
    cmdloc_dummy_var_122 := $M.0;
    call {:si_unique_call 162} cmdloc_dummy_var_123 := $memcpy.i8(cmdloc_dummy_var_121, cmdloc_dummy_var_122, $p95, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_123;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb117:
    assume 0 == 1;
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_115 := $M.0;
    cmdloc_dummy_var_116 := $M.0;
    call {:si_unique_call 160} cmdloc_dummy_var_117 := $memcpy.i8(cmdloc_dummy_var_115, cmdloc_dummy_var_116, $p93, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_117;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb113:
    assume 0 == 1;
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_109 := $M.0;
    cmdloc_dummy_var_110 := $M.0;
    call {:si_unique_call 158} cmdloc_dummy_var_111 := $memcpy.i8(cmdloc_dummy_var_109, cmdloc_dummy_var_110, $p91, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_111;
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb109:
    assume 0 == 1;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_103 := $M.0;
    cmdloc_dummy_var_104 := $M.0;
    call {:si_unique_call 156} cmdloc_dummy_var_105 := $memcpy.i8(cmdloc_dummy_var_103, cmdloc_dummy_var_104, $p89, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_105;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb105:
    assume 0 == 1;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_97 := $M.0;
    cmdloc_dummy_var_98 := $M.0;
    call {:si_unique_call 154} cmdloc_dummy_var_99 := $memcpy.i8(cmdloc_dummy_var_97, cmdloc_dummy_var_98, $p87, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_99;
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb101:
    assume 0 == 1;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_91 := $M.0;
    cmdloc_dummy_var_92 := $M.0;
    call {:si_unique_call 152} cmdloc_dummy_var_93 := $memcpy.i8(cmdloc_dummy_var_91, cmdloc_dummy_var_92, $p85, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_93;
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb97:
    assume 0 == 1;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_85 := $M.0;
    cmdloc_dummy_var_86 := $M.0;
    call {:si_unique_call 150} cmdloc_dummy_var_87 := $memcpy.i8(cmdloc_dummy_var_85, cmdloc_dummy_var_86, $p83, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_87;
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb93:
    assume 0 == 1;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_79 := $M.0;
    cmdloc_dummy_var_80 := $M.0;
    call {:si_unique_call 148} cmdloc_dummy_var_81 := $memcpy.i8(cmdloc_dummy_var_79, cmdloc_dummy_var_80, $p81, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_81;
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb89:
    assume 0 == 1;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_73 := $M.0;
    cmdloc_dummy_var_74 := $M.0;
    call {:si_unique_call 146} cmdloc_dummy_var_75 := $memcpy.i8(cmdloc_dummy_var_73, cmdloc_dummy_var_74, $p79, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_75;
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb85:
    assume 0 == 1;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_67 := $M.0;
    cmdloc_dummy_var_68 := $M.0;
    call {:si_unique_call 144} cmdloc_dummy_var_69 := $memcpy.i8(cmdloc_dummy_var_67, cmdloc_dummy_var_68, $p77, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_69;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb81:
    assume 0 == 1;
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_61 := $M.0;
    cmdloc_dummy_var_62 := $M.0;
    call {:si_unique_call 142} cmdloc_dummy_var_63 := $memcpy.i8(cmdloc_dummy_var_61, cmdloc_dummy_var_62, $p75, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_63;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb77:
    assume 0 == 1;
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_55 := $M.0;
    cmdloc_dummy_var_56 := $M.0;
    call {:si_unique_call 140} cmdloc_dummy_var_57 := $memcpy.i8(cmdloc_dummy_var_55, cmdloc_dummy_var_56, $p73, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_57;
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb73:
    assume 0 == 1;
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_49 := $M.0;
    cmdloc_dummy_var_50 := $M.0;
    call {:si_unique_call 138} cmdloc_dummy_var_51 := $memcpy.i8(cmdloc_dummy_var_49, cmdloc_dummy_var_50, $p8, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_51;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb11:
    assume 0 == 1;
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 111} cmdloc_dummy_var_15 := $memcpy.i8(cmdloc_dummy_var_13, cmdloc_dummy_var_14, $p2, et_stats, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb43, $bb44;

  $bb44:
    assume !(0 == 1);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 120} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p2, et_self_tests, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p2, $mul.ref(32, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb49, $bb50;

  $bb50:
    assume !(0 == 1);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.0;
    cmdloc_dummy_var_29 := $M.0;
    call {:si_unique_call 122} cmdloc_dummy_var_30 := $memcpy.i8(cmdloc_dummy_var_28, cmdloc_dummy_var_29, $p33, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(1, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_30;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    $i34 := $add.i64(32, 32);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p2, $mul.ref($i34, 1));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb53, $bb54;

  $bb54:
    assume !(0 == 1);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.0;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 124} cmdloc_dummy_var_36 := $memcpy.i8(cmdloc_dummy_var_34, cmdloc_dummy_var_35, $p35, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(2, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    $i36 := $add.i64($i34, 32);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p2, $mul.ref($i36, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb57, $bb58;

  $bb58:
    assume !(0 == 1);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.0;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 126} cmdloc_dummy_var_42 := $memcpy.i8(cmdloc_dummy_var_40, cmdloc_dummy_var_41, $p37, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(3, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    $i38 := $add.i64($i36, 32);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p2, $mul.ref($i38, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb61, $bb62;

  $bb62:
    assume !(0 == 1);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_46 := $M.0;
    cmdloc_dummy_var_47 := $M.0;
    call {:si_unique_call 128} cmdloc_dummy_var_48 := $memcpy.i8(cmdloc_dummy_var_46, cmdloc_dummy_var_47, $p39, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(4, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_48;
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb61:
    assume 0 == 1;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    cmdloc_dummy_var_44 := $M.0;
    call {:si_unique_call 127} cmdloc_dummy_var_45 := $memcpy.i8(cmdloc_dummy_var_43, cmdloc_dummy_var_44, $p39, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(4, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_45;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb57:
    assume 0 == 1;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.0;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 125} cmdloc_dummy_var_39 := $memcpy.i8(cmdloc_dummy_var_37, cmdloc_dummy_var_38, $p37, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(3, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb53:
    assume 0 == 1;
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.0;
    cmdloc_dummy_var_32 := $M.0;
    call {:si_unique_call 123} cmdloc_dummy_var_33 := $memcpy.i8(cmdloc_dummy_var_31, cmdloc_dummy_var_32, $p35, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(2, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_33;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb49:
    assume 0 == 1;
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 121} cmdloc_dummy_var_27 := $memcpy.i8(cmdloc_dummy_var_25, cmdloc_dummy_var_26, $p33, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(1, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_27;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb43:
    assume 0 == 1;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 119} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p2, et_self_tests, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb37_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_897;

  $bb25_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_877;
}



const be_set_phys_id: ref;

axiom be_set_phys_id == $sub.ref(0, 251014);

procedure be_set_phys_id($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_set_phys_id($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i8;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i8;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i8;
  var $i15: i32;
  var vslice_dummy_var_303: i32;
  var vslice_dummy_var_304: i32;
  var vslice_dummy_var_305: i32;
  var vslice_dummy_var_306: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} {:cexpr "be_set_phys_id:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p2 := netdev_priv($p0);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364232, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} vslice_dummy_var_304 := be_cmd_set_beacon_state($p3, $i24, 0, 0, 0);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364232, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} vslice_dummy_var_303 := be_cmd_set_beacon_state($p3, $i19, 0, 0, 1);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364232, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364008, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} vslice_dummy_var_305 := be_cmd_get_beacon_state($p3, $i12, $p13);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb13;

  $bb9:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb11:
    assume $i8 == 1;
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364232, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(364008, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} vslice_dummy_var_306 := be_cmd_set_beacon_state($p3, $i29, 0, 0, $i34);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const be_get_ethtool_stats: ref;

axiom be_get_ethtool_stats == $sub.ref(0, 252046);

procedure be_get_ethtool_stats($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_get_ethtool_stats($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i32;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i32;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i52: i32;
  var $i19: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var $i71: i1;
  var $i72: i8;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $p80: ref;
  var $i81: i32;
  var $i82: i64;
  var $i79: i64;
  var $i83: i32;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $i87: i1;
  var $i88: i8;
  var $i89: i1;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i64;
  var $p101: ref;
  var $i102: i64;
  var $i100: i64;
  var $i103: i32;
  var $i104: i64;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i64;
  var $p112: ref;
  var $i113: i64;
  var $i111: i64;
  var $i114: i32;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i64;
  var $p123: ref;
  var $i124: i64;
  var $i122: i64;
  var $i125: i32;
  var $i126: i64;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $i132: i64;
  var $p134: ref;
  var $i135: i64;
  var $i133: i64;
  var $i136: i32;
  var $i137: i64;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i64;
  var $i144: i32;
  var $i145: i64;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i64;
  var $i152: i32;
  var $i153: i64;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $i159: i64;
  var $i160: i32;
  var $i161: i64;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i64;
  var $i168: i32;
  var $i169: i64;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $i176: i64;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i32;
  var $i183: i64;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $i190: i64;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i32;
  var $i197: i64;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $i203: i32;
  var $i204: i64;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i32;
  var $i211: i64;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $i217: i32;
  var $i218: i64;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $i224: i32;
  var $i225: i64;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $i231: i32;
  var $i232: i64;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $i238: i32;
  var $i239: i64;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $i245: i32;
  var $i246: i64;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i32;
  var $i253: i64;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $i259: i32;
  var $i260: i64;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $i266: i32;
  var $i267: i64;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $i273: i32;
  var $i274: i64;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $i280: i32;
  var $i281: i64;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $i287: i32;
  var $i288: i64;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $i294: i32;
  var $i295: i64;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $i301: i32;
  var $i302: i64;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $i308: i32;
  var $i309: i64;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $i315: i32;
  var $i316: i64;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $i322: i32;
  var $i323: i64;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $p328: ref;
  var $i329: i32;
  var $i330: i64;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $i336: i32;
  var $i337: i64;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $i343: i32;
  var $i344: i64;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $i350: i32;
  var $i351: i64;
  var $p352: ref;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $i357: i32;
  var $i358: i64;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $i364: i32;
  var $i365: i64;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $i371: i32;
  var $i372: i64;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $i378: i32;
  var $i379: i64;
  var $p380: ref;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $i384: i32;
  var $i385: i64;
  var $p386: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p3 := netdev_priv($p0);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(36, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i10);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p171);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p172, $mul.ref(40, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.0, $p174);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i176 := $zext.i32.i64($i175);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p177, $i176);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p178);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($p179, $mul.ref(44, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p180);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.0, $p181);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i183 := $zext.i32.i64($i182);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($p2, $mul.ref(2, 8));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p184, $i183);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p185);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($p186, $mul.ref(52, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p188 := $bitcast.ref.ref($p187);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.0, $p188);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i190 := $zext.i32.i64($i189);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p2, $mul.ref(3, 8));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p191, $i190);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($p193, $mul.ref(56, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.0, $p195);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i197 := $zext.i32.i64($i196);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($p2, $mul.ref(4, 8));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p198, $i197);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p199);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($p200, $mul.ref(60, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p201);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.0, $p202);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i204 := $zext.i32.i64($i203);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($p2, $mul.ref(5, 8));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p205, $i204);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p206);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($p207, $mul.ref(64, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p209 := $bitcast.ref.ref($p208);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.0, $p209);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i211 := $zext.i32.i64($i210);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($p2, $mul.ref(6, 8));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p212, $i211);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p214 := $bitcast.ref.ref($p213);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($p214, $mul.ref(68, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p216 := $bitcast.ref.ref($p215);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.0, $p216);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i218 := $zext.i32.i64($i217);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($p2, $mul.ref(7, 8));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p219, $i218);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p221 := $bitcast.ref.ref($p220);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($p221, $mul.ref(72, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p222);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.0, $p223);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i225 := $zext.i32.i64($i224);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($p2, $mul.ref(8, 8));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p226, $i225);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p228 := $bitcast.ref.ref($p227);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($p228, $mul.ref(76, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p230 := $bitcast.ref.ref($p229);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.0, $p230);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i232 := $zext.i32.i64($i231);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($p2, $mul.ref(9, 8));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p233, $i232);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p235 := $bitcast.ref.ref($p234);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($p235, $mul.ref(80, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p237 := $bitcast.ref.ref($p236);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i238 := $load.i32($M.0, $p237);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i239 := $zext.i32.i64($i238);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($p2, $mul.ref(10, 8));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p240, $i239);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p242 := $bitcast.ref.ref($p241);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($p242, $mul.ref(84, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p244 := $bitcast.ref.ref($p243);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.0, $p244);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i246 := $zext.i32.i64($i245);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($p2, $mul.ref(11, 8));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p247, $i246);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p249 := $bitcast.ref.ref($p248);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($p249, $mul.ref(88, 1));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p250);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.0, $p251);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i253 := $zext.i32.i64($i252);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($p2, $mul.ref(12, 8));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p254, $i253);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p256 := $bitcast.ref.ref($p255);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($p256, $mul.ref(116, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p258 := $bitcast.ref.ref($p257);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i259 := $load.i32($M.0, $p258);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i260 := $zext.i32.i64($i259);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($p2, $mul.ref(13, 8));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p261, $i260);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p263 := $bitcast.ref.ref($p262);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($p263, $mul.ref(120, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p265 := $bitcast.ref.ref($p264);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i266 := $load.i32($M.0, $p265);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i267 := $zext.i32.i64($i266);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($p2, $mul.ref(14, 8));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p268, $i267);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p270 := $bitcast.ref.ref($p269);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($p270, $mul.ref(92, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p272 := $bitcast.ref.ref($p271);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i273 := $load.i32($M.0, $p272);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i274 := $zext.i32.i64($i273);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($p2, $mul.ref(15, 8));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p275, $i274);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p277 := $bitcast.ref.ref($p276);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($p277, $mul.ref(96, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p279 := $bitcast.ref.ref($p278);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.0, $p279);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i281 := $zext.i32.i64($i280);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($p2, $mul.ref(16, 8));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p282, $i281);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p283);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($p284, $mul.ref(100, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p286 := $bitcast.ref.ref($p285);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i287 := $load.i32($M.0, $p286);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i288 := $zext.i32.i64($i287);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($p2, $mul.ref(17, 8));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p289, $i288);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p291 := $bitcast.ref.ref($p290);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($p291, $mul.ref(104, 1));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p293 := $bitcast.ref.ref($p292);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.0, $p293);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i295 := $zext.i32.i64($i294);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($p2, $mul.ref(18, 8));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p296, $i295);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p298 := $bitcast.ref.ref($p297);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($p298, $mul.ref(112, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p300 := $bitcast.ref.ref($p299);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i301 := $load.i32($M.0, $p300);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i302 := $zext.i32.i64($i301);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($p2, $mul.ref(19, 8));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p303, $i302);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p305 := $bitcast.ref.ref($p304);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($p305, $mul.ref(48, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p307 := $bitcast.ref.ref($p306);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i308 := $load.i32($M.0, $p307);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i309 := $zext.i32.i64($i308);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($p2, $mul.ref(20, 8));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p310, $i309);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p312 := $bitcast.ref.ref($p311);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($p312, $mul.ref(108, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p314 := $bitcast.ref.ref($p313);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i315 := $load.i32($M.0, $p314);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i316 := $zext.i32.i64($i315);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($p2, $mul.ref(21, 8));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p317, $i316);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p319 := $bitcast.ref.ref($p318);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($p319, $mul.ref(124, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p321 := $bitcast.ref.ref($p320);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i322 := $load.i32($M.0, $p321);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i323 := $zext.i32.i64($i322);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($p2, $mul.ref(22, 8));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p324, $i323);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p326 := $bitcast.ref.ref($p325);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($p326, $mul.ref(128, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p328 := $bitcast.ref.ref($p327);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i329 := $load.i32($M.0, $p328);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i330 := $zext.i32.i64($i329);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($p2, $mul.ref(23, 8));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p331, $i330);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p333 := $bitcast.ref.ref($p332);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($p333, $mul.ref(8, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p335 := $bitcast.ref.ref($p334);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i336 := $load.i32($M.0, $p335);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i337 := $zext.i32.i64($i336);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($p2, $mul.ref(24, 8));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p338, $i337);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p340 := $bitcast.ref.ref($p339);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($p340, $mul.ref(16, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p342 := $bitcast.ref.ref($p341);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i343 := $load.i32($M.0, $p342);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i344 := $zext.i32.i64($i343);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($p2, $mul.ref(25, 8));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p345, $i344);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p347 := $bitcast.ref.ref($p346);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($p347, $mul.ref(20, 1));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p349 := $bitcast.ref.ref($p348);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.0, $p349);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i351 := $zext.i32.i64($i350);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($p2, $mul.ref(26, 8));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p352, $i351);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p354 := $bitcast.ref.ref($p353);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($p354, $mul.ref(24, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p356 := $bitcast.ref.ref($p355);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i357 := $load.i32($M.0, $p356);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i358 := $zext.i32.i64($i357);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p2, $mul.ref(27, 8));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p359, $i358);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p361 := $bitcast.ref.ref($p360);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($p361, $mul.ref(28, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p362);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i364 := $load.i32($M.0, $p363);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i365 := $zext.i32.i64($i364);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($p2, $mul.ref(28, 8));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p366, $i365);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p368, $mul.ref(32, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i371 := $load.i32($M.0, $p370);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i372 := $zext.i32.i64($i371);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($p2, $mul.ref(29, 8));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p373, $i372);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p375 := $bitcast.ref.ref($p374);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($p375, $mul.ref(4, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p376);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i378 := $load.i32($M.0, $p377);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i379 := $zext.i32.i64($i378);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($p2, $mul.ref(30, 8));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p380, $i379);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(359212, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p382 := $bitcast.ref.ref($p381);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p383 := $bitcast.ref.ref($p382);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i384 := $load.i32($M.0, $p383);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i385 := $zext.i32.i64($i384);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($p2, $mul.ref(31, 8));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p386, $i385);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $add.i32(0, 32);
    call {:si_unique_call 207} {:cexpr "base"} boogie_si_record_i32($i11);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64(0);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 24760));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i17, 0);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i19 := $i11;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(4136, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64(0);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p54, $mul.ref($i55, 16528));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i32($i58, 0);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i59 == 1;
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i60, $i61, $p62 := $i19, 0, $p56;
    goto $bb24;

  $bb24:
    call $p63, $p64, $i65, $p66, $i67, $i68, $p69, $p70, $i71, $i72, $i73, $p74, $i75, $p76, $p77, $i78, $p80, $i81, $i82, $i79, $i83, $i84, $p85, $p86, $i87, $i88, $i89, $i90, $i91, $p92, $i93, $i94, $i60, $i61, $p62, $p95, $p96, $p97, $i98, $i99, $p101, $i102, $i100, $i103, $i104, $p105, $p106, $p107, $p108, $i109, $i110, $p112, $i113, $i111, $i114, $i115, $p116, $p117, $p118, $p119, $i120, $i121, $p123, $i124, $i122, $i125, $i126, $p127, $p128, $p129, $p130, $i131, $i132, $p134, $i135, $i133, $i136, $i137, $p138 := be_get_ethtool_stats_loop_$bb24($p2, $p57, $p63, $p64, $i65, $p66, $i67, $i68, $p69, $p70, $i71, $i72, $i73, $p74, $i75, $p76, $p77, $i78, $p80, $i81, $i82, $i79, $i83, $i84, $p85, $p86, $i87, $i88, $i89, $i90, $i91, $p92, $i93, $i94, $i60, $i61, $p62, $p95, $p96, $p97, $i98, $i99, $p101, $i102, $i100, $i103, $i104, $p105, $p106, $p107, $p108, $i109, $i110, $p112, $i113, $i111, $i114, $i115, $p116, $p117, $p118, $p119, $i120, $i121, $p123, $i124, $i122, $i125, $i126, $p127, $p128, $p129, $p130, $i131, $i132, $p134, $i135, $i133, $i136, $i137, $p138);
    goto $bb24_last;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 16528)), $mul.ref(16472, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    call $p64, $i65, $p66, $i67, $i68, $p69, $p70, $i71, $i72, $i73 := be_get_ethtool_stats_loop_$bb26($p2, $p64, $i65, $p66, $i67, $i68, $p69, $p70, $i71, $i72, $i73, $i60, $p62);
    goto $bb26_last;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i65 := u64_stats_fetch_begin_bh($p64);
    call {:si_unique_call 215} {:cexpr "start"} boogie_si_record_i32($i65);
    $p66 := $add.ref($add.ref($add.ref($p62, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(32, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i68 := $zext.i32.i64($i60);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p2, $mul.ref($i68, 8));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p69, $i67);
    $p70 := $add.ref($add.ref($add.ref($p62, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $i71 := u64_stats_fetch_retry_bh($p70, $i65);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i72 := $zext.i1.i8($i71);
    call {:si_unique_call 217} {:cexpr "tmp___1"} boogie_si_record_i8($i72);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1($i72);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    call $p74, $i75, $p76, $p77, $i78, $p80, $i81, $i82, $i79, $i83, $i84, $p85, $p86, $i87, $i88, $i89, $p95, $p96, $p97, $i98, $i99, $p101, $i102, $i100, $i103, $i104, $p105, $p106, $p107, $p108, $i109, $i110, $p112, $i113, $i111, $i114, $i115, $p116, $p117, $p118, $p119, $i120, $i121, $p123, $i124, $i122, $i125, $i126, $p127, $p128, $p129, $p130, $i131, $i132, $p134, $i135, $i133, $i136, $i137, $p138 := be_get_ethtool_stats_loop_$bb30($p2, $p63, $p74, $i75, $p76, $p77, $i78, $p80, $i81, $i82, $i79, $i83, $i84, $p85, $p86, $i87, $i88, $i89, $i60, $p62, $p95, $p96, $p97, $i98, $i99, $p101, $i102, $i100, $i103, $i104, $p105, $p106, $p107, $p108, $i109, $i110, $p112, $i113, $i111, $i114, $i115, $p116, $p117, $p118, $p119, $i120, $i121, $p123, $i124, $i122, $i125, $i126, $p127, $p128, $p129, $p130, $i131, $i132, $p134, $i135, $i133, $i136, $i137, $p138);
    goto $bb30_last;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i75 := u64_stats_fetch_begin_bh($p74);
    call {:si_unique_call 219} {:cexpr "start"} boogie_si_record_i32($i75);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p63);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb33, $bb34;

  $bb34:
    assume !(1 == 1);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p76);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i82 := $zext.i32.i64($i81);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i79 := $i82;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i60, 1);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i84 := $zext.i32.i64($i83);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p2, $mul.ref($i84, 8));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p85, $i79);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p63);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p95, $mul.ref(8, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb44, $bb45;

  $bb45:
    assume !(1 == 1);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i99 := $zext.i32.i64($i98);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i100 := $i99;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i103 := $add.i32($i60, 2);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i104 := $zext.i32.i64($i103);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p2, $mul.ref($i104, 8));
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p105, $i100);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p63);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p106, $mul.ref(16, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb48, $bb49;

  $bb49:
    assume !(1 == 1);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i110 := $zext.i32.i64($i109);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i111 := $i110;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i60, 3);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i115 := $zext.i32.i64($i114);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p2, $mul.ref($i115, 8));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p116, $i111);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p63);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p117, $mul.ref(24, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb52, $bb53;

  $bb53:
    assume !(1 == 1);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i121 := $zext.i32.i64($i120);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i122 := $i121;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i60, 4);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i126 := $zext.i32.i64($i125);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p2, $mul.ref($i126, 8));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p127, $i122);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p63);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p128, $mul.ref(48, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb56, $bb57;

  $bb57:
    assume !(0 == 1);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i132 := $zext.i32.i64($i131);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i133 := $i132;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i136 := $add.i32($i60, 5);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i137 := $zext.i32.i64($i136);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($p2, $mul.ref($i137, 8));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p138, $i133);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    $p86 := $add.ref($add.ref($add.ref($p62, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i87 := u64_stats_fetch_retry_bh($p86, $i75);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i8($i87);
    call {:si_unique_call 221} {:cexpr "tmp___2"} boogie_si_record_i8($i88);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i8.i1($i88);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i60, 6);
    call {:si_unique_call 222} {:cexpr "base"} boogie_si_record_i32($i90);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i61, 1);
    call {:si_unique_call 223} {:cexpr "j"} boogie_si_record_i32($i91);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p62, $mul.ref(1, 16528));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p57);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i94 := $ugt.i32($i93, $i91);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i94 == 1);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb41:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    $i60, $i61, $p62 := $i90, $i91, $p92;
    goto $bb41_dummy;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb38_dummy;

  $bb56:
    assume 0 == 1;
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p129);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.0, $p134);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i133 := $i135;
    goto $bb58;

  $bb52:
    assume 1 == 1;
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p118);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i124 := $load.i64($M.0, $p123);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i122 := $i124;
    goto $bb54;

  $bb48:
    assume 1 == 1;
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p107);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i113 := $load.i64($M.0, $p112);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i111 := $i113;
    goto $bb50;

  $bb44:
    assume 1 == 1;
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p96);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.0, $p101);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i100 := $i102;
    goto $bb46;

  $bb33:
    assume 1 == 1;
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.0, $p77);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i79 := $i78;
    goto $bb35;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb27_dummy;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i20, $i21, $p22 := $i11, 0, $p15;
    goto $bb8;

  $bb8:
    call $p23, $p24, $i25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $p34, $p35, $i36, $i37, $i38, $p39, $p40, $p41, $i42, $i43, $i44, $i45, $p46, $i47, $i48, $p49, $i50, $i51, $i20, $i21, $p22, $i52, $p139, $p140, $p141, $i142, $i143, $i144, $i145, $p146, $p147, $p148, $p149, $i150, $i151, $i152, $i153, $p154, $p155, $p156, $p157, $i158, $i159, $i160, $i161, $p162, $p163, $p164, $p165, $i166, $i167, $i168, $i169, $p170 := be_get_ethtool_stats_loop_$bb8($p2, $p16, $p23, $p24, $i25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $p34, $p35, $i36, $i37, $i38, $p39, $p40, $p41, $i42, $i43, $i44, $i45, $p46, $i47, $i48, $p49, $i50, $i51, $i20, $i21, $p22, $i52, $p139, $p140, $p141, $i142, $i143, $i144, $i145, $p146, $p147, $p148, $p149, $i150, $i151, $i152, $i153, $p154, $p155, $p156, $p157, $i158, $i159, $i160, $i161, $p162, $p163, $p164, $p165, $i166, $i167, $i168, $i169, $p170);
    goto $bb8_last;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 24760)), $mul.ref(24688, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $p24, $i25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $p34, $p35, $i36, $i37, $i38 := be_get_ethtool_stats_loop_$bb10($p2, $p24, $i25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $p34, $p35, $i36, $i37, $i38, $i20, $p22);
    goto $bb10_last;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $i25 := u64_stats_fetch_begin_bh($p24);
    call {:si_unique_call 209} {:cexpr "start"} boogie_si_record_i32($i25);
    $p26 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(0, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i20);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p2, $mul.ref($i28, 8));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i27);
    $p30 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(8, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i20, 1);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p2, $mul.ref($i33, 8));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p34, $i31);
    $p35 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(60, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i36 := u64_stats_fetch_retry_bh($p35, $i25);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 211} {:cexpr "tmp___0"} boogie_si_record_i8($i37);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p23);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(44, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i20, 2);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p2, $mul.ref($i45, 8));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p46, $i43);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p23);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p139, $mul.ref(48, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i143 := $zext.i32.i64($i142);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i20, 3);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i145 := $zext.i32.i64($i144);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p2, $mul.ref($i145, 8));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p146, $i143);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p23);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($p147, $mul.ref(40, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i151 := $zext.i32.i64($i150);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i152 := $add.i32($i20, 4);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i153 := $zext.i32.i64($i152);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p2, $mul.ref($i153, 8));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p154, $i151);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p23);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p155, $mul.ref(32, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i159 := $zext.i32.i64($i158);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i160 := $add.i32($i20, 5);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i161 := $zext.i32.i64($i160);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($p2, $mul.ref($i161, 8));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p162, $i159);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p23);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p163, $mul.ref(36, 1));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i167 := $zext.i32.i64($i166);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i168 := $add.i32($i20, 6);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i169 := $zext.i32.i64($i168);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($p2, $mul.ref($i169, 8));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p170, $i167);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i20, 7);
    call {:si_unique_call 212} {:cexpr "base"} boogie_si_record_i32($i47);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i21, 1);
    call {:si_unique_call 213} {:cexpr "j"} boogie_si_record_i32($i48);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p22, $mul.ref(1, 24760));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p16);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i51 := $ugt.i32($i50, $i48);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i52 := $i47;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i19 := $i52;
    goto $bb7;

  $bb18:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i20, $i21, $p22 := $i47, $i48, $p49;
    goto $bb18_dummy;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb11_dummy;

  $bb38_dummy:
    assume false;
    return;

  $bb30_last:
    $p74 := $add.ref($add.ref($add.ref($p62, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_1361;

  $bb27_dummy:
    assume false;
    return;

  $bb26_last:
    $p64 := $add.ref($add.ref($add.ref($p62, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_1351;

  $bb41_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1347;

  $bb11_dummy:
    assume false;
    return;

  $bb10_last:
    $p24 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(60, 1));
    goto corral_source_split_1294;

  $bb18_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1290;
}



const be_get_sset_count: ref;

axiom be_get_sset_count == $sub.ref(0, 253078);

procedure be_get_sset_count($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation be_get_sset_count($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} {:cexpr "be_get_sset_count:arg:stringset"} boogie_si_record_i32($i1);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $p2 := netdev_priv($p0);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i9, 7);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(4132, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i13 := $mul.i32($i12, 6);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i10, $i13);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 32);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i7 := $i15;
    goto $bb9;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb7:
    assume $i6 == 1;
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i7 := 5;
    goto $bb9;
}



const be_get_rxnfc: ref;

axiom be_get_rxnfc == $sub.ref(0, 254110);

procedure be_get_rxnfc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation be_get_rxnfc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $i14: i32;
  var vslice_dummy_var_307: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $p3 := netdev_priv($p0);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i5 := be_multi_rxq($p4);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 228} {:cexpr "tmp___0"} boogie_si_record_i8($i6);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 45);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i16, 45);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i26, 1);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i28);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb9:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i16, 41);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb13;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i23 := be_get_rss_hash_opts($p4, $i22);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i23);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} vslice_dummy_var_307 := _dev_info.ref.ref($p12, .str.185);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const be_set_rxnfc: ref;

axiom be_set_rxnfc == $sub.ref(0, 255142);

procedure be_set_rxnfc($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $CurrAddr, assertsPassed, $M.26;



implementation be_set_rxnfc($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i13: i32;
  var vslice_dummy_var_308: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $p2 := netdev_priv($p0);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $i4 := be_multi_rxq($p3);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 233} {:cexpr "tmp___0"} boogie_si_record_i8($i5);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 42);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $i17 := be_set_rss_hash_opts($p3, $p1);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 236} {:cexpr "status"} boogie_si_record_i32($i17);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i13 := $i17;
    goto $bb6;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} vslice_dummy_var_308 := dev_err.ref.ref($p11, .str.186);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const be_do_flash: ref;

axiom be_do_flash == $sub.ref(0, 256174);

procedure be_do_flash($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.9, $M.10, $M.0, $M.14, $M.15, $CurrAddr, $M.13, $M.17, $M.18, $M.19, $M.20, $M.21;



implementation be_do_flash($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $p2 := netdev_priv($p0);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i6 := be_load_fw($p3, $p5);
    call {:si_unique_call 239} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 257206);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 258238);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(2816, 1));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const be_load_fw: ref;

axiom be_load_fw == $sub.ref(0, 259270);

procedure be_load_fw($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.9, $M.10, $M.0, $M.14, $M.15, $CurrAddr, $M.13, $M.17, $M.18, $M.19, $M.20, $M.21;



implementation be_load_fw($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $p40: ref;
  var $i41: i32;
  var $i39: i32;
  var $i20: i32;
  var $p42: ref;
  var $i14: i32;
  var vslice_dummy_var_309: i32;
  var vslice_dummy_var_310: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i5 := netif_running($p4);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 242} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i18 := request_firmware($p2, $p1, $p17);
    call {:si_unique_call 245} {:cexpr "status"} boogie_si_record_i32($i18);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} vslice_dummy_var_310 := _dev_info.ref.ref.ref($p23, .str.7, $p1);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 57888);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i30 == 1);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 57896);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.5, $p2);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i41 := be_fw_download($p0, $p40);
    call {:si_unique_call 251} {:cexpr "status"} boogie_si_record_i32($i41);
    assume {:verifier.code 0} true;
    $i39 := $i41;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i20 := $i39;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.5, $p2);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} release_firmware($p42);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i14 := $i20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.5, $p2);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i38 := lancer_fw_download($p0, $p37);
    call {:si_unique_call 249} {:cexpr "status"} boogie_si_record_i32($i38);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb17;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb13;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb10;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} vslice_dummy_var_309 := dev_err.ref.ref($p12, .str.6);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const netif_running: ref;

axiom netif_running == $sub.ref(0, 260302);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(72, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 253} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 261334);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 1} true;
    call {:si_unique_call 254} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 255} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 1} true;
    call {:si_unique_call 256} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 257} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 1} true;
    call {:si_unique_call 258} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 259} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 1} true;
    call {:si_unique_call 260} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 261} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 1} true;
    call {:si_unique_call 262} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 263} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 262366);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 1} true;
    call {:si_unique_call 264} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 265} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 263398);

procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 1} true;
    call {:si_unique_call 266} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 267} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure _dev_info.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32);



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 1} true;
    call {:si_unique_call 268} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 269} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const lancer_fw_download: ref;

axiom lancer_fw_download == $sub.ref(0, 264430);

procedure lancer_fw_download($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.9, $M.10, $M.0, $M.13, $CurrAddr, $M.21;



implementation lancer_fw_download($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i64;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $i39: i32;
  var $p40: ref;
  var $i41: i64;
  var $i61: i32;
  var $i62: i32;
  var $i37: i32;
  var $i38: i32;
  var $i50: i32;
  var $i51: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i83: i8;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i92: i32;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i14: i32;
  var cmdloc_dummy_var_235: [ref]i8;
  var cmdloc_dummy_var_236: [ref]i8;
  var cmdloc_dummy_var_237: [ref]i8;
  var vslice_dummy_var_311: i32;
  var vslice_dummy_var_312: i32;
  var vslice_dummy_var_313: i32;
  var vslice_dummy_var_314: i32;
  var vslice_dummy_var_315: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $p5 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p3, 0);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, 0);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.8, $p6);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i8 := $and.i64($i7, 3);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p15, 32912);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.9, $p19);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $p23 := dma_alloc_attrs($p18, $i21, $p22, 208, $0.ref);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p24, $p23);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.10, $p25);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.10, $p29);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(144, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.8, $p32);
    call {:si_unique_call 276} {:cexpr "image_size"} boogie_si_record_i64($i33);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.11, $p34);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i33, 0);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i37, $i38 := 0, 0;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i50, $i51 := $i37, $i38;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i51, 0);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i65 := $i51;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.9, $p69);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i71 := $zext.i32.i64($i70);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.10, $p72);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.12, $p74);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} dma_free_attrs($p68, $i71, $p73, $i75, $0.ref);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i65, 0);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.13, $p5);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 2);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i85 == 1);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.13, $p5);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i92 := $i65;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} vslice_dummy_var_314 := _dev_info.ref.ref($p102, .str.87);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i14 := $i92;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb35:
    assume $i95 == 1;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} vslice_dummy_var_315 := dev_err.ref.ref($p98, .str.86);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i85 == 1;
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i86 := lancer_fw_reset($p0);
    call {:si_unique_call 289} {:cexpr "status"} boogie_si_record_i32($i86);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i92 := $i86;
    goto $bb34;

  $bb31:
    assume $i87 == 1;
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} vslice_dummy_var_313 := dev_err.ref.ref($p90, .str.85);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i14 := $i86;
    goto $bb3;

  $bb26:
    assume $i76 == 1;
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.7, $p4);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} vslice_dummy_var_312 := dev_err.ref.ref.i32.i32($p79, .str.84, $i65, $i81);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i14 := $i65;
    goto $bb3;

  $bb23:
    assume $i63 == 1;
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i64 := lancer_cmd_write_object($p0, $p2, 0, $i50, .str.83, $p3, $p5, $p4);
    call {:si_unique_call 285} {:cexpr "status"} boogie_si_record_i32($i64);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i65 := $i64;
    goto $bb25;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41 := 0, $p35, $i33;
    goto $bb11;

  $bb11:
    call $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i39, $p40, $i41, $i61, $i62, cmdloc_dummy_var_235, cmdloc_dummy_var_236, cmdloc_dummy_var_237 := lancer_fw_download_loop_$bb11($p0, $p2, $p3, $p4, $p5, $p31, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i39, $p40, $i41, $i61, $i62, cmdloc_dummy_var_235, cmdloc_dummy_var_236, cmdloc_dummy_var_237);
    goto $bb11_last;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i64.i32($i41);
    call {:si_unique_call 277} {:cexpr "__min1"} boogie_si_record_i32($i42);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i43 := $ult.i32($i42, 32768);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i43 == 1);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i44 := 32768;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    call {:si_unique_call 278} {:cexpr "__len"} boogie_si_record_i64($i45);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_235 := $M.0;
    cmdloc_dummy_var_236 := $M.0;
    call {:si_unique_call 279} cmdloc_dummy_var_237 := $memcpy.i8(cmdloc_dummy_var_235, cmdloc_dummy_var_236, $p31, $p40, $i45, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_237;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i46 := lancer_cmd_write_object($p0, $p2, $i44, $i39, .str.83, $p3, $p5, $p4);
    call {:si_unique_call 281} {:cexpr "status"} boogie_si_record_i32($i46);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i48, $i49 := $i39, $i46;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.6, $p3);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i39, $i52);
    call {:si_unique_call 282} {:cexpr "offset"} boogie_si_record_i32($i53);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.6, $p3);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64($i54);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p40, $mul.ref($i55, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.6, $p3);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i57);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i59 := $sub.i64($i41, $i58);
    call {:si_unique_call 283} {:cexpr "image_size"} boogie_si_record_i64($i59);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i61, $i62 := $i53, $i46;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i37, $i38 := $i61, $i62;
    goto $bb10;

  $bb20:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i39, $p40, $i41 := $i53, $p56, $i59;
    goto $bb20_dummy;

  $bb16:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i50, $i51 := $i48, $i49;
    goto $bb18;

  $bb13:
    assume $i43 == 1;
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i44 := $i42;
    goto $bb15;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} vslice_dummy_var_311 := dev_err.ref.ref($p12, .str.82);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1987;
}



const be_fw_download: ref;

axiom be_fw_download == $sub.ref(0, 265462);

procedure be_fw_download($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.15, $M.17, $M.18, $M.19, $M.20, $CurrAddr, $M.0, $M.21;



implementation be_fw_download($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i45: i32;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i51: i32;
  var $i56: i32;
  var $i44: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i26: i32;
  var $i27: i32;
  var $i60: i32;
  var $i25: i32;
  var $i61: i1;
  var $i62: i32;
  var $i64: i1;
  var $i65: i32;
  var $i63: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i17: i32;
  var vslice_dummy_var_316: i32;
  var vslice_dummy_var_317: i32;
  var vslice_dummy_var_318: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p3, 32804);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.14, $p7);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $p11 := dma_alloc_attrs($p6, $i9, $p10, 208, $0.ref);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p12, $p11);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.15, $p13);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.11, $p18);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i21 := be_get_ufi_type($p0, $p20);
    call {:si_unique_call 296} {:cexpr "ufi_type"} boogie_si_record_i32($i21);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p20, $mul.ref(0, 128)), $mul.ref(68, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    call {:si_unique_call 297} {:cexpr "num_imgs"} boogie_si_record_i32($i23);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32(0, $i23);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i25 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i21, 2);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i61 == 1);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i21, $sub.i32(0, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $i25;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i63 := $i65;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.14, $p69);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i71 := $zext.i32.i64($i70);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.15, $p72);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.16, $p74);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} dma_free_attrs($p68, $i71, $p73, $i75, $0.ref);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i63, 0);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} vslice_dummy_var_318 := _dev_info.ref.ref($p83, .str.87);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i17 := $i63;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb39:
    assume $i76 == 1;
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} vslice_dummy_var_317 := dev_err.ref.ref($p79, .str.89);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i17 := $i63;
    goto $bb3;

  $bb36:
    assume $i64 == 1;
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 1);
    goto $bb38;

  $bb33:
    assume $i61 == 1;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i62 := be_flash_BEx($p0, $p1, $p2, 0);
    call {:si_unique_call 307} {:cexpr "status"} boogie_si_record_i32($i62);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i63 := $i62;
    goto $bb35;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i26, $i27 := 0, 0;
    goto $bb8;

  $bb8:
    call $p28, $p29, $i30, $i31, $i32, $p33, $p34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i45, $p46, $i47, $i48, $i49, $i50, $p52, $p53, $p54, $i51, $i56, $i44, $i57, $i58, $i59, $i26, $i27, $i60, vslice_dummy_var_316 := be_fw_download_loop_$bb8($p0, $p1, $p2, $i21, $i23, $p28, $p29, $i30, $i31, $i32, $p33, $p34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i45, $p46, $i47, $i48, $i49, $i50, $p52, $p53, $p54, $i51, $i56, $i44, $i57, $i58, $i59, $i26, $i27, $i60, vslice_dummy_var_316);
    goto $bb8_last;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.11, $p28);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i26);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i31 := $mul.i64($i30, 48);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 128);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p29, $mul.ref($i32, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i57 := $i27;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i26, 1);
    call {:si_unique_call 305} {:cexpr "i"} boogie_si_record_i32($i58);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, $i23);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i60 := $i57;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i25 := $i60;
    goto $bb7;

  $bb30:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i26, $i27 := $i58, $i57;
    goto $bb30_dummy;

  $bb10:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i21, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i21, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i21, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i56 := $i27;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i44 := $i56;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i57 := $i44;
    goto $bb29;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i45 := be_flash_BEx($p0, $p1, $p2, $i23);
    call {:si_unique_call 299} {:cexpr "status"} boogie_si_record_i32($i45);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i44 := $i45;
    goto $bb24;

  $bb15:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i21, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb19;

  $bb20:
    assume $i41 == 1;
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i43 := be_flash_skyhawk($p0, $p1, $p2, $i23);
    call {:si_unique_call 301} {:cexpr "status"} boogie_si_record_i32($i43);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb24;

  $bb13:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i21, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb19;

  $bb22:
    assume $i42 == 1;
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364276, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p46);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i49 := $ule.i32($i48, 15);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i49 == 1);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} vslice_dummy_var_316 := dev_err.ref.ref($p54, .str.88);
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i56 := $i51;
    goto $bb28;

  $bb25:
    assume $i49 == 1;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i50 := be_flash_BEx($p0, $p1, $p2, $i23);
    call {:si_unique_call 303} {:cexpr "status"} boogie_si_record_i32($i50);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb27;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb3;

  $bb30_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2107;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 266494);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 267526);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} {:cexpr "dma_alloc_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 312} {:cexpr "dma_alloc_attrs:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $p5 := get_dma_ops($p0);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, $sub.i32(0, 8));
    call {:si_unique_call 314} {:cexpr "gfp"} boogie_si_record_i32($i6);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i10 := is_device_dma_capable($p9);
    call {:si_unique_call 316} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i17 := dma_alloc_coherent_gfp_flags($p9, $i6);
    call {:si_unique_call 318} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 319} $p20 := devirtbounce($p19, $p9, $i1, $p2, $i17, $p4);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} debug_dma_alloc_coherent($p9, $i1, $i21, $p20);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p12 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p9 := x86_dma_fallback_dev;
    goto $bb3;
}



const be_get_ufi_type: ref;

axiom be_get_ufi_type == $sub.ref(0, 268558);

procedure be_get_ufi_type($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation be_get_ufi_type($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i21: i32;
  var vslice_dummy_var_319: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1824);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1832);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 545);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i27 == 1);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1808);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 529);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume !($i48 == 1);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1792);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} vslice_dummy_var_319 := dev_err.ref.ref($p62, .str.90);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 50);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb29;

  $bb30:
    assume $i59 == 1;
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i21 := 2;
    goto $bb13;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb25;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 51);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb19;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 16);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i42 == 1);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i21 := 3;
    goto $bb13;

  $bb22:
    assume $i42 == 1;
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i21 := 10;
    goto $bb13;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb15;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 52);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i21 := 4;
    goto $bb13;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_flash_skyhawk: ref;

axiom be_flash_skyhawk == $sub.ref(0, 269590);

procedure be_flash_skyhawk($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.21;



implementation be_flash_skyhawk($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i19: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i8;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $p83: ref;
  var $i84: i32;
  var $i46: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i18: i32;
  var $i13: i32;
  var vslice_dummy_var_320: i32;
  var vslice_dummy_var_321: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} {:cexpr "be_flash_skyhawk:arg:num_of_images"} boogie_si_record_i32($i3);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i3, 48);
    call {:si_unique_call 323} {:cexpr "img_hdrs_size"} boogie_si_record_i32($i4);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i5 := $add.i32(128, $i4);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p6 := get_fsec_info($p0, $i5, $p1);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2240)), $mul.ref(32, 1)), $mul.ref(12, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32(0, $i16);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb8;

  $bb8:
    call $i19, $p22, $i23, $i24, $p27, $i28, $i29, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i47, $p48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $p57, $i58, $i59, $i60, $p61, $i62, $i63, $p64, $i65, $p66, $p67, $p68, $i69, $p70, $i71, $i72, $i73, $i74, $i75, $i76, $i46, $i86, $i87, $i88, $i18 := be_flash_skyhawk_loop_$bb8($p0, $p1, $p2, $i4, $p6, $p15, $i19, $p22, $i23, $i24, $p27, $i28, $i29, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i47, $p48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $p57, $i58, $i59, $i60, $p61, $i62, $i63, $p64, $i65, $p66, $p67, $p68, $i69, $p70, $i71, $i72, $i73, $i74, $i75, $i76, $i46, $i86, $i87, $i88, $i18);
    goto $bb8_last;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref($i19, 64)), $mul.ref(4, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    call {:si_unique_call 326} {:cexpr "img_offset"} boogie_si_record_i32($i23);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i18);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref($i24, 64)), $mul.ref(8, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    call {:si_unique_call 327} {:cexpr "img_size"} boogie_si_record_i32($i28);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i18);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref($i29, 64)), $mul.ref(0, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i33, 176);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i33, 224);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i33, 224);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i46 := $i18;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i46, 1);
    call {:si_unique_call 328} {:cexpr "i"} boogie_si_record_i32($i86);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p15);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i88 := $ult.i32($i86, $i87);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i88 == 1);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb49:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i18 := $i86;
    goto $bb49_dummy;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i45 := 1;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i45, 1);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.11, $p56);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i58 := $add.i32(128, $i23);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, $i4);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p57, $mul.ref($i60, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i28);
    $i63 := $add.i64($i60, $i62);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p57, $mul.ref($i63, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.11, $p66);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.8, $p68);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p67, $mul.ref($i69, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i72 := $ugt.i64($i65, $i71);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i73 := be_flash($p0, $p61, $p2, $i45, $i28);
    call {:si_unique_call 333} {:cexpr "status"} boogie_si_record_i32($i73);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i75, $i76 := $i18, $i73;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i46 := $i18;
    goto $bb36;

  $bb46:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i75);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref($i80, 64)), $mul.ref(0, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} vslice_dummy_var_321 := dev_err.ref.ref.i32($p79, .str.92, $i84);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i13 := $i76;
    goto $bb3;

  $bb43:
    assume $i72 == 1;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 1);
    goto $bb3;

  $bb37:
    assume $i47 == 1;
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.11, $p48);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i50 := $add.i32(128, $i4);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $i51 := be_flash_redboot($p0, $p49, $i23, $i28, $i50);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i8($i51);
    call {:si_unique_call 330} {:cexpr "tmp"} boogie_si_record_i8($i52);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i8.i1($i52);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i32($i53);
    call {:si_unique_call 331} {:cexpr "redboot"} boogie_si_record_i32($i54);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i55 == 1;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i46 := $i18;
    goto $bb36;

  $bb15:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i33, 176);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb19;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i45 := 9;
    goto $bb34;

  $bb13:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i33, 160);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i33, 160);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb19;

  $bb24:
    assume $i40 == 1;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb34;

  $bb22:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i33, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb19;

  $bb26:
    assume $i41 == 1;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i45 := 2;
    goto $bb34;

  $bb11:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i33, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i33, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i43 == 1);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i45 := 8;
    goto $bb34;

  $bb30:
    assume $i43 == 1;
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i45 := 3;
    goto $bb34;

  $bb28:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i33, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb19;

  $bb32:
    assume $i44 == 1;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i45 := 13;
    goto $bb34;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} vslice_dummy_var_320 := dev_err.ref.ref($p11, .str.91);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 1);
    goto $bb3;

  $bb49_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2326;
}



const be_flash_BEx: ref;

axiom be_flash_BEx == $sub.ref(0, 270622);

procedure be_flash_BEx($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.18, $M.19, $M.20, $M.0, $CurrAddr, $M.21;



implementation be_flash_BEx($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $p94: ref;
  var $p96: ref;
  var $p98: ref;
  var $p100: ref;
  var $p102: ref;
  var $p104: ref;
  var $p106: ref;
  var $p108: ref;
  var $p110: ref;
  var $p112: ref;
  var $p114: ref;
  var $p116: ref;
  var $p118: ref;
  var $p120: ref;
  var $p122: ref;
  var $p124: ref;
  var $p126: ref;
  var $p128: ref;
  var $p130: ref;
  var $p132: ref;
  var $p134: ref;
  var $p136: ref;
  var $p138: ref;
  var $p140: ref;
  var $p142: ref;
  var $p144: ref;
  var $p146: ref;
  var $p148: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i16;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i16;
  var $i161: i32;
  var $i162: i1;
  var $p164: ref;
  var $i165: i32;
  var $i166: i32;
  var $i168: i32;
  var $p169: ref;
  var $i170: i64;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i178: i64;
  var $p180: ref;
  var $i181: i32;
  var $i182: i1;
  var $i183: i8;
  var $i184: i1;
  var $i185: i32;
  var $i186: i1;
  var $i188: i64;
  var $p190: ref;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $p194: ref;
  var $i195: i32;
  var $i196: i1;
  var $i197: i64;
  var $p199: ref;
  var $i200: i32;
  var $i201: i1;
  var $i202: i1;
  var $i203: i8;
  var $i204: i1;
  var $i205: i32;
  var $i206: i1;
  var $i207: i64;
  var $p209: ref;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $p213: ref;
  var $i214: i64;
  var $p216: ref;
  var $i217: i64;
  var $i218: i32;
  var $i219: i64;
  var $p221: ref;
  var $i222: i32;
  var $i223: i32;
  var $i224: i1;
  var $i225: i8;
  var $i226: i1;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $p230: ref;
  var $i231: i64;
  var $i232: i64;
  var $p234: ref;
  var $i235: i64;
  var $i236: i64;
  var $i237: i64;
  var $i238: i64;
  var $p239: ref;
  var $i240: i64;
  var $p242: ref;
  var $i243: i32;
  var $i244: i64;
  var $i245: i64;
  var $p246: ref;
  var $i247: i64;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $i251: i64;
  var $p252: ref;
  var $i253: i64;
  var $i254: i1;
  var $i255: i64;
  var $p257: ref;
  var $i258: i32;
  var $i259: i64;
  var $p261: ref;
  var $i262: i32;
  var $i263: i32;
  var $i264: i1;
  var $i265: i32;
  var $i266: i32;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $i270: i64;
  var $p272: ref;
  var $i273: i32;
  var $i187: i32;
  var $i275: i32;
  var $i276: i1;
  var $i177: i32;
  var $i176: i32;
  var vslice_dummy_var_322: i32;
  var vslice_dummy_var_323: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p4 := $alloc($mul.ref(240, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p5 := $alloc($mul.ref(192, $zext.i32.i64(1)));
    call {:si_unique_call 337} {:cexpr "be_flash_BEx:arg:num_of_images"} boogie_si_record_i32($i3);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i3, 48);
    call {:si_unique_call 338} {:cexpr "img_hdrs_size"} boogie_si_record_i32($i6);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p8, 2097152);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p10, 0);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p12, 2097152);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p14, 160);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p16, 262144);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(1, 24)), $mul.ref(8, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p18, 1);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(1, 24)), $mul.ref(12, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p20, 1048576);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(1, 24)), $mul.ref(16, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p22, 224);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p24, 12582912);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(2, 24)), $mul.ref(8, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p26, 2);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(2, 24)), $mul.ref(12, 1));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p28, 524288);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(2, 24)), $mul.ref(16, 1));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p30, 34);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(3, 24)), $mul.ref(0, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p32, 13107200);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(3, 24)), $mul.ref(8, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p34, 3);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(3, 24)), $mul.ref(12, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p36, 524288);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(3, 24)), $mul.ref(16, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p38, 32);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(4, 24)), $mul.ref(0, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p40, 13631488);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(4, 24)), $mul.ref(8, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p42, 8);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(4, 24)), $mul.ref(12, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p44, 524288);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(4, 24)), $mul.ref(16, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p46, 33);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(5, 24)), $mul.ref(0, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p48, 4194304);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(5, 24)), $mul.ref(8, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p50, 9);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(5, 24)), $mul.ref(12, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p52, 2097152);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(5, 24)), $mul.ref(16, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p54, 176);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(6, 24)), $mul.ref(0, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p56, 6291456);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(6, 24)), $mul.ref(8, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p58, 10);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(6, 24)), $mul.ref(12, 1));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p60, 2097152);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(6, 24)), $mul.ref(16, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p62, 162);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(7, 24)), $mul.ref(0, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p64, 8388608);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(7, 24)), $mul.ref(8, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p66, 11);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(7, 24)), $mul.ref(12, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p68, 2097152);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(7, 24)), $mul.ref(16, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p70, 178);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(8, 24)), $mul.ref(0, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p72, 15990784);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(8, 24)), $mul.ref(8, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p74, 13);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(8, 24)), $mul.ref(12, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p76, 262144);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(8, 24)), $mul.ref(16, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p78, 16);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(9, 24)), $mul.ref(0, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p80, 1310720);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(9, 24)), $mul.ref(8, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p82, 99);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(9, 24)), $mul.ref(12, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p84, 262144);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 240)), $mul.ref(9, 24)), $mul.ref(16, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p86, 192);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p88, 1048576);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p90, 0);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p92, 1310720);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p94, 160);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p96, 0);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(1, 24)), $mul.ref(8, 1));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p98, 1);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(1, 24)), $mul.ref(12, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p100, 262144);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(1, 24)), $mul.ref(16, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p102, 224);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p104, 7340032);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(2, 24)), $mul.ref(8, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p106, 2);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(2, 24)), $mul.ref(12, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p108, 262144);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(2, 24)), $mul.ref(16, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p110, 34);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(3, 24)), $mul.ref(0, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p112, 7864320);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(3, 24)), $mul.ref(8, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p114, 3);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(3, 24)), $mul.ref(12, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p116, 262144);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(3, 24)), $mul.ref(16, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p118, 32);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(4, 24)), $mul.ref(0, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p120, 524288);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(4, 24)), $mul.ref(8, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p122, 8);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(4, 24)), $mul.ref(12, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p124, 262144);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(4, 24)), $mul.ref(16, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p126, 33);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(5, 24)), $mul.ref(0, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p128, 2359296);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(5, 24)), $mul.ref(8, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p130, 9);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(5, 24)), $mul.ref(12, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p132, 1310720);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(5, 24)), $mul.ref(16, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p134, 176);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(6, 24)), $mul.ref(0, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p136, 3670016);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(6, 24)), $mul.ref(8, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p138, 10);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(6, 24)), $mul.ref(12, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p140, 1310720);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(6, 24)), $mul.ref(16, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p142, 162);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(7, 24)), $mul.ref(0, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p144, 4980736);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(7, 24)), $mul.ref(8, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p146, 11);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(7, 24)), $mul.ref(12, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p148, 1310720);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(7, 24)), $mul.ref(16, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p150, 178);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p152, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i154 := $load.i16($M.0, $p153);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i155 := $zext.i16.i32($i154);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 545);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i156 == 1);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p158, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i160 := $load.i16($M.0, $p159);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i160);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 1808);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i162 == 1);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p164, $i165, $i166 := $p5, 96, 8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i168 := $add.i32($i165, $i6);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $p169 := get_fsec_info($p0, $i168, $p1);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i170 := $p2i.ref.i64($p169);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i171 := $eq.i64($i170, 0);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i177 := 0;
    goto $bb11;

  $bb11:
    call $i178, $p180, $i181, $i182, $i183, $i184, $i185, $i186, $i188, $p190, $i191, $i192, $p193, $p194, $i195, $i196, $i197, $p199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $p209, $i210, $i211, $p212, $p213, $i214, $p216, $i217, $i218, $i219, $p221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $p229, $p230, $i231, $i232, $p234, $i235, $i236, $i237, $i238, $p239, $i240, $p242, $i243, $i244, $i245, $p246, $i247, $p248, $p249, $p250, $i251, $p252, $i253, $i254, $i255, $p257, $i258, $i259, $p261, $i262, $i263, $i264, $i265, $i266, $i187, $i275, $i276, $i177 := be_flash_BEx_loop_$bb11($p0, $p1, $p2, $i6, $p164, $i165, $i166, $p169, $i178, $p180, $i181, $i182, $i183, $i184, $i185, $i186, $i188, $p190, $i191, $i192, $p193, $p194, $i195, $i196, $i197, $p199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $p209, $i210, $i211, $p212, $p213, $i214, $p216, $i217, $i218, $i219, $p221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $p229, $p230, $i231, $i232, $p234, $i235, $i236, $i237, $i238, $p239, $i240, $p242, $i243, $i244, $i245, $p246, $i247, $p248, $p249, $p250, $i251, $p252, $i253, $i254, $i255, $p257, $i258, $i259, $p261, $i262, $i263, $i264, $i265, $i266, $i187, $i275, $i276, $i177);
    goto $bb11_last;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i178 := $sext.i32.i64($i177);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p164, $mul.ref($i178, 24)), $mul.ref(16, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.20, $p180);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i182 := is_comp_in_ufi($p0, $p169, $i181);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i183 := $zext.i1.i8($i182);
    call {:si_unique_call 342} {:cexpr "tmp"} boogie_si_record_i8($i183);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i184 := $trunc.i8.i1($i183);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    $i185 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i186 := $ne.i32($i185, 0);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i188 := $sext.i32.i64($i177);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p164, $mul.ref($i188, 24)), $mul.ref(8, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.18, $p190);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 13);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i197 := $sext.i32.i64($i177);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p164, $mul.ref($i197, 24)), $mul.ref(8, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.18, $p199);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 99);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i207 := $sext.i32.i64($i177);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p164, $mul.ref($i207, 24)), $mul.ref(8, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.18, $p209);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 1);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.11, $p229);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i231 := $sext.i32.i64($i165);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i232 := $sext.i32.i64($i177);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p164, $mul.ref($i232, 24)), $mul.ref(0, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i235 := $load.i64($M.17, $p234);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i236 := $add.i64($i231, $i235);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i237 := $sext.i32.i64($i6);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i238 := $add.i64($i236, $i237);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($p230, $mul.ref($i238, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i240 := $sext.i32.i64($i177);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p164, $mul.ref($i240, 24)), $mul.ref(12, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.19, $p242);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i244 := $sext.i32.i64($i243);
    $i245 := $add.i64($i238, $i244);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($p230, $mul.ref($i245, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i247 := $p2i.ref.i64($p246);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p249 := $load.ref($M.11, $p248);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i251 := $load.i64($M.8, $p250);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($p249, $mul.ref($i251, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i253 := $p2i.ref.i64($p252);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i254 := $ugt.i64($i247, $i253);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i255 := $sext.i32.i64($i177);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p164, $mul.ref($i255, 24)), $mul.ref(8, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i258 := $load.i32($M.18, $p257);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i259 := $sext.i32.i64($i177);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p164, $mul.ref($i259, 24)), $mul.ref(12, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.19, $p261);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i263 := be_flash($p0, $p239, $p2, $i258, $i262);
    call {:si_unique_call 352} {:cexpr "status"} boogie_si_record_i32($i263);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i264 := $ne.i32($i263, 0);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i265, $i266 := $i177, $i263;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i187 := $i177;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i275 := $add.i32($i187, 1);
    call {:si_unique_call 343} {:cexpr "i"} boogie_si_record_i32($i275);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i276 := $slt.i32($i275, $i166);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i176 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $r := $i176;
    return;

  $bb47:
    assume $i276 == 1;
    assume {:verifier.code 0} true;
    $i177 := $i275;
    goto $bb47_dummy;

  $bb44:
    assume $i264 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p268 := $load.ref($M.0, $p267);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p268, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i270 := $sext.i32.i64($i265);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p164, $mul.ref($i270, 24)), $mul.ref(16, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i273 := $load.i32($M.20, $p272);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} vslice_dummy_var_323 := dev_err.ref.ref.i32($p269, .str.92, $i273);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i176 := $i266;
    goto $bb9;

  $bb41:
    assume $i254 == 1;
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i176 := $sub.i32(0, 1);
    goto $bb9;

  $bb35:
    assume $i211 == 1;
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.11, $p212);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i214 := $sext.i32.i64($i177);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p164, $mul.ref($i214, 24)), $mul.ref(0, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i217 := $load.i64($M.17, $p216);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i218 := $trunc.i64.i32($i217);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i219 := $sext.i32.i64($i177);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p164, $mul.ref($i219, 24)), $mul.ref(12, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i222 := $load.i32($M.19, $p221);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i223 := $add.i32($i165, $i6);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i224 := be_flash_redboot($p0, $p213, $i218, $i222, $i223);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i225 := $zext.i1.i8($i224);
    call {:si_unique_call 349} {:cexpr "tmp___4"} boogie_si_record_i8($i225);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i226 := $trunc.i8.i1($i225);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i227 := $zext.i1.i32($i226);
    call {:si_unique_call 350} {:cexpr "redboot"} boogie_si_record_i32($i227);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 0);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i228 == 1;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i187 := $i177;
    goto $bb18;

  $bb26:
    assume $i201 == 1;
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i202 := phy_flashing_required($p0);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i203 := $zext.i1.i8($i202);
    call {:si_unique_call 347} {:cexpr "tmp___2"} boogie_si_record_i8($i203);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i204 := $trunc.i8.i1($i203);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    $i205 := 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i206 := $ne.i32($i205, 0);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i206 == 1;
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i187 := $i177;
    goto $bb18;

  $bb28:
    assume $i204 == 1;
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i205 := 0;
    goto $bb30;

  $bb20:
    assume $i192 == 1;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363960, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i195 := memcmp($p194, .str.95, 11);
    call {:si_unique_call 345} {:cexpr "tmp___1"} boogie_si_record_i32($i195);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i196 := $slt.i32($i195, 0);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i196 == 1;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i187 := $i177;
    goto $bb18;

  $bb16:
    assume $i186 == 1;
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i187 := $i177;
    goto $bb18;

  $bb13:
    assume $i184 == 1;
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i185 := 0;
    goto $bb15;

  $bb7:
    assume $i171 == 1;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p173, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} vslice_dummy_var_322 := dev_err.ref.ref($p174, .str.91);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i176 := $sub.i32(0, 1);
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i162 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p164, $i165, $i166 := $p4, 128, 10;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb2;

  $bb47_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2583;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 271654);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_324: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} {:cexpr "dma_free_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 355} {:cexpr "dma_free_attrs:arg:bus"} boogie_si_record_i64($i3);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $p5 := get_dma_ops($p0);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i6 := arch_local_save_flags();
    call {:si_unique_call 358} {:cexpr "_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i7 := arch_irqs_disabled_flags($i6);
    call {:si_unique_call 360} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 361} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 363} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} vslice_dummy_var_324 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} debug_dma_free_coherent($p0, $i1, $p2, $i3);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 367} devirtbounce.1($p24, $p0, $i1, $p2, $i3, $p4);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} warn_slowpath_null(.str.168, 166);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 272686);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 369} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 273718);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 371} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 373} $i7 := devirtbounce.3(0, 44, pv_irq_ops, 1);
    call {:si_unique_call 374} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 372} devirtbounce.2(0, .str.169, 824, 12);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 274750);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 275782);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 377} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 276814);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_free_coherent: ref;

axiom debug_dma_free_coherent == $sub.ref(0, 277846);

procedure debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} {:cexpr "debug_dma_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 380} {:cexpr "debug_dma_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    return;
}



const get_fsec_info: ref;

axiom get_fsec_info == $sub.ref(0, 278878);

procedure get_fsec_info($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_fsec_info($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p15: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} {:cexpr "get_fsec_info:arg:header_size"} boogie_si_record_i32($i1);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.11, $p3);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i1);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.11, $p7);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.8, $p9);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p8, $mul.ref($i10, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p6);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i64($i12, $i13);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $r := $p22;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p15 := $p6;
    goto $bb4;

  $bb4:
    call $p16, $p17, $p18, $i19, $i20, $p21, $p23, $p24, $i25, $p26, $i27, $i28, $i29, $p15 := get_fsec_info_loop_$bb4($p7, $p9, $p16, $p17, $p18, $i19, $i20, $p21, $p23, $p24, $i25, $p26, $i27, $i28, $i29, $p15);
    goto $bb4_last;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2240)), $mul.ref(0, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i19 := memcmp(flash_cookie, $p18, 32);
    call {:si_unique_call 383} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p21 := $p15;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p15, $mul.ref(32, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.11, $p7);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.8, $p9);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p24, $mul.ref($i25, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p23);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i29 := $ugt.i64($i27, $i28);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p23;
    goto $bb10_dummy;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2803;
}



const is_comp_in_ufi: ref;

axiom is_comp_in_ufi == $sub.ref(0, 279910);

procedure is_comp_in_ufi($p0: ref, $p1: ref, $i2: i32) returns ($r: i1);
  free requires assertsPassed;



implementation is_comp_in_ufi($p0: ref, $p1: ref, $i2: i32) returns ($r: i1)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p21: ref;
  var $i22: i32;
  var $p26: ref;
  var $i27: i32;
  var $i23: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i64;
  var $i31: i1;
  var $p34: ref;
  var $i35: i32;
  var $p39: ref;
  var $i40: i32;
  var $i36: i32;
  var $i41: i1;
  var $i42: i64;
  var $i43: i1;
  var $p46: ref;
  var $i47: i32;
  var $p51: ref;
  var $i52: i32;
  var $i48: i32;
  var $i53: i1;
  var $i54: i64;
  var $i55: i1;
  var $p58: ref;
  var $i59: i32;
  var $p63: ref;
  var $i64: i32;
  var $i60: i32;
  var $i65: i1;
  var $i66: i64;
  var $i67: i1;
  var $p70: ref;
  var $i71: i32;
  var $p75: ref;
  var $i76: i32;
  var $i72: i32;
  var $i77: i1;
  var $i78: i64;
  var $i79: i1;
  var $p82: ref;
  var $i83: i32;
  var $p87: ref;
  var $i88: i32;
  var $i84: i32;
  var $i89: i1;
  var $i90: i64;
  var $i91: i1;
  var $p94: ref;
  var $i95: i32;
  var $p99: ref;
  var $i100: i32;
  var $i96: i32;
  var $i101: i1;
  var $i102: i64;
  var $i103: i1;
  var $p106: ref;
  var $i107: i32;
  var $p111: ref;
  var $i112: i32;
  var $i108: i32;
  var $i113: i1;
  var $i114: i64;
  var $i115: i1;
  var $p118: ref;
  var $i119: i32;
  var $p123: ref;
  var $i124: i32;
  var $i120: i32;
  var $i125: i1;
  var $i126: i64;
  var $i127: i1;
  var $p130: ref;
  var $i131: i32;
  var $p135: ref;
  var $i136: i32;
  var $i132: i32;
  var $i137: i1;
  var $i138: i64;
  var $i139: i1;
  var $p142: ref;
  var $i143: i32;
  var $p147: ref;
  var $i148: i32;
  var $i144: i32;
  var $i149: i1;
  var $i150: i64;
  var $i151: i1;
  var $p154: ref;
  var $i155: i32;
  var $p159: ref;
  var $i160: i32;
  var $i156: i32;
  var $i161: i1;
  var $i162: i64;
  var $i163: i1;
  var $p166: ref;
  var $i167: i32;
  var $p171: ref;
  var $i172: i32;
  var $i168: i32;
  var $i173: i1;
  var $i174: i64;
  var $i175: i1;
  var $p178: ref;
  var $i179: i32;
  var $p183: ref;
  var $i184: i32;
  var $i180: i32;
  var $i185: i1;
  var $i186: i64;
  var $i187: i1;
  var $p190: ref;
  var $i191: i32;
  var $p195: ref;
  var $i196: i32;
  var $i192: i32;
  var $i197: i1;
  var $i198: i64;
  var $i199: i1;
  var $p202: ref;
  var $i203: i32;
  var $p207: ref;
  var $i208: i32;
  var $i204: i32;
  var $i209: i1;
  var $i210: i64;
  var $i211: i1;
  var $p214: ref;
  var $i215: i32;
  var $p219: ref;
  var $i220: i32;
  var $i216: i32;
  var $i221: i1;
  var $i222: i64;
  var $i223: i1;
  var $p226: ref;
  var $i227: i32;
  var $p231: ref;
  var $i232: i32;
  var $i228: i32;
  var $i233: i1;
  var $i234: i64;
  var $i235: i1;
  var $p238: ref;
  var $i239: i32;
  var $p243: ref;
  var $i244: i32;
  var $i240: i32;
  var $i245: i1;
  var $i246: i64;
  var $i247: i1;
  var $p250: ref;
  var $i251: i32;
  var $p255: ref;
  var $i256: i32;
  var $i252: i32;
  var $i257: i1;
  var $i258: i64;
  var $i259: i1;
  var $p262: ref;
  var $i263: i32;
  var $p267: ref;
  var $i268: i32;
  var $i264: i32;
  var $i269: i1;
  var $i270: i64;
  var $i271: i1;
  var $p274: ref;
  var $i275: i32;
  var $p279: ref;
  var $i280: i32;
  var $i276: i32;
  var $i281: i1;
  var $i282: i64;
  var $i283: i1;
  var $p286: ref;
  var $i287: i32;
  var $p291: ref;
  var $i292: i32;
  var $i288: i32;
  var $i293: i1;
  var $i294: i64;
  var $i295: i1;
  var $p298: ref;
  var $i299: i32;
  var $p303: ref;
  var $i304: i32;
  var $i300: i32;
  var $i305: i1;
  var $i306: i64;
  var $i307: i1;
  var $p310: ref;
  var $i311: i32;
  var $p315: ref;
  var $i316: i32;
  var $i312: i32;
  var $i317: i1;
  var $i318: i64;
  var $i319: i1;
  var $p322: ref;
  var $i323: i32;
  var $p327: ref;
  var $i328: i32;
  var $i324: i32;
  var $i329: i1;
  var $i330: i64;
  var $i331: i1;
  var $p334: ref;
  var $i335: i32;
  var $p339: ref;
  var $i340: i32;
  var $i336: i32;
  var $i341: i1;
  var $i342: i64;
  var $i343: i1;
  var $p346: ref;
  var $i347: i32;
  var $p351: ref;
  var $i352: i32;
  var $i348: i32;
  var $i353: i1;
  var $i354: i64;
  var $i355: i1;
  var $p358: ref;
  var $i359: i32;
  var $p363: ref;
  var $i364: i32;
  var $i360: i32;
  var $i365: i1;
  var $i366: i64;
  var $i367: i1;
  var $p370: ref;
  var $i371: i32;
  var $p375: ref;
  var $i376: i32;
  var $i372: i32;
  var $i377: i1;
  var $i378: i64;
  var $i379: i1;
  var $p382: ref;
  var $i383: i32;
  var $p387: ref;
  var $i388: i32;
  var $i384: i32;
  var $i389: i1;
  var $i390: i64;
  var $i391: i1;
  var $p394: ref;
  var $i395: i32;
  var $p399: ref;
  var $i400: i32;
  var $i396: i32;
  var $i401: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} {:cexpr "is_comp_in_ufi:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 529);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 1792);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $p16 := $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    call {:si_unique_call 386} {:cexpr "img_type"} boogie_si_record_i32($i27);
    assume {:verifier.code 0} true;
    $i23 := $i27;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i23, $i2);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p16);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(1, 64)), $mul.ref(0, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i36, $i2);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p16);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i43 == 1);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(2, 64)), $mul.ref(0, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i48, $i2);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p16);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i55 == 1);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(3, 64)), $mul.ref(0, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    assume {:verifier.code 0} true;
    $i60 := $i59;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i60, $i2);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p16);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i67 == 1);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(4, 64)), $mul.ref(0, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    assume {:verifier.code 0} true;
    $i72 := $i71;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i72, $i2);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p16);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i79 == 1);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(5, 64)), $mul.ref(0, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    assume {:verifier.code 0} true;
    $i84 := $i83;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i84, $i2);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p16);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i91 == 1);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(6, 64)), $mul.ref(0, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    assume {:verifier.code 0} true;
    $i96 := $i95;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i96, $i2);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p16);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i103 == 1);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(7, 64)), $mul.ref(0, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    assume {:verifier.code 0} true;
    $i108 := $i107;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i108, $i2);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p16);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i115 == 1);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(8, 64)), $mul.ref(0, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    assume {:verifier.code 0} true;
    $i120 := $i119;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i120, $i2);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p16);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i127 == 1);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(9, 64)), $mul.ref(0, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    assume {:verifier.code 0} true;
    $i132 := $i131;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i132, $i2);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i138 := $p2i.ref.i64($p16);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i139 := $ne.i64($i138, 0);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i139 == 1);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(10, 64)), $mul.ref(0, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.0, $p142);
    assume {:verifier.code 0} true;
    $i144 := $i143;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i144, $i2);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i150 := $p2i.ref.i64($p16);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i151 := $ne.i64($i150, 0);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i151 == 1);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(11, 64)), $mul.ref(0, 1));
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    assume {:verifier.code 0} true;
    $i156 := $i155;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i156, $i2);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i162 := $p2i.ref.i64($p16);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i163 := $ne.i64($i162, 0);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i163 == 1);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(12, 64)), $mul.ref(0, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p166);
    assume {:verifier.code 0} true;
    $i168 := $i167;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i168, $i2);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p16);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i175 := $ne.i64($i174, 0);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i175 == 1);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(13, 64)), $mul.ref(0, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    assume {:verifier.code 0} true;
    $i180 := $i179;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i180, $i2);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i186 := $p2i.ref.i64($p16);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i187 := $ne.i64($i186, 0);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i187 == 1);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(14, 64)), $mul.ref(0, 1));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.0, $p190);
    assume {:verifier.code 0} true;
    $i192 := $i191;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i192, $i2);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i198 := $p2i.ref.i64($p16);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i199 := $ne.i64($i198, 0);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i199 == 1);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(15, 64)), $mul.ref(0, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.0, $p202);
    assume {:verifier.code 0} true;
    $i204 := $i203;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i204, $i2);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i210 := $p2i.ref.i64($p16);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i211 := $ne.i64($i210, 0);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i211 == 1);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(16, 64)), $mul.ref(0, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p214);
    assume {:verifier.code 0} true;
    $i216 := $i215;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i216, $i2);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i222 := $p2i.ref.i64($p16);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i223 := $ne.i64($i222, 0);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i223 == 1);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(17, 64)), $mul.ref(0, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.0, $p226);
    assume {:verifier.code 0} true;
    $i228 := $i227;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i228, $i2);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $i234 := $p2i.ref.i64($p16);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i235 := $ne.i64($i234, 0);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i235} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i235 == 1);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(18, 64)), $mul.ref(0, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i239 := $load.i32($M.0, $p238);
    assume {:verifier.code 0} true;
    $i240 := $i239;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i240, $i2);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i246 := $p2i.ref.i64($p16);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i247 := $ne.i64($i246, 0);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i247} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i247 == 1);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(19, 64)), $mul.ref(0, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i251 := $load.i32($M.0, $p250);
    assume {:verifier.code 0} true;
    $i252 := $i251;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i252, $i2);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i258 := $p2i.ref.i64($p16);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i259 := $ne.i64($i258, 0);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i259 == 1);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(20, 64)), $mul.ref(0, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.0, $p262);
    assume {:verifier.code 0} true;
    $i264 := $i263;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i264, $i2);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i269} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i270 := $p2i.ref.i64($p16);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i271 := $ne.i64($i270, 0);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i271 == 1);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(21, 64)), $mul.ref(0, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i275 := $load.i32($M.0, $p274);
    assume {:verifier.code 0} true;
    $i276 := $i275;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i276, $i2);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $i282 := $p2i.ref.i64($p16);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i283 := $ne.i64($i282, 0);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i283} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i283 == 1);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(22, 64)), $mul.ref(0, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i287 := $load.i32($M.0, $p286);
    assume {:verifier.code 0} true;
    $i288 := $i287;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i288, $i2);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i293} true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i294 := $p2i.ref.i64($p16);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i295 := $ne.i64($i294, 0);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i295 == 1);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(23, 64)), $mul.ref(0, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i299 := $load.i32($M.0, $p298);
    assume {:verifier.code 0} true;
    $i300 := $i299;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i300, $i2);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i305} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $i306 := $p2i.ref.i64($p16);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i307 := $ne.i64($i306, 0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i307 == 1);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(24, 64)), $mul.ref(0, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i311 := $load.i32($M.0, $p310);
    assume {:verifier.code 0} true;
    $i312 := $i311;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i312, $i2);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $i318 := $p2i.ref.i64($p16);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i319 := $ne.i64($i318, 0);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i319} true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i319 == 1);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(25, 64)), $mul.ref(0, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i323 := $load.i32($M.0, $p322);
    assume {:verifier.code 0} true;
    $i324 := $i323;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i324, $i2);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i330 := $p2i.ref.i64($p16);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i331 := $ne.i64($i330, 0);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i331 == 1);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(26, 64)), $mul.ref(0, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i335 := $load.i32($M.0, $p334);
    assume {:verifier.code 0} true;
    $i336 := $i335;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i341 := $eq.i32($i336, $i2);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i341} true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $i342 := $p2i.ref.i64($p16);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i343 := $ne.i64($i342, 0);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i343 == 1);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(27, 64)), $mul.ref(0, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i347 := $load.i32($M.0, $p346);
    assume {:verifier.code 0} true;
    $i348 := $i347;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i348, $i2);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $i354 := $p2i.ref.i64($p16);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i355 := $ne.i64($i354, 0);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i355 == 1);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(28, 64)), $mul.ref(0, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i359 := $load.i32($M.0, $p358);
    assume {:verifier.code 0} true;
    $i360 := $i359;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i365 := $eq.i32($i360, $i2);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $i366 := $p2i.ref.i64($p16);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i367 := $ne.i64($i366, 0);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i367} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i367 == 1);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(29, 64)), $mul.ref(0, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i371 := $load.i32($M.0, $p370);
    assume {:verifier.code 0} true;
    $i372 := $i371;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i377 := $eq.i32($i372, $i2);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i377} true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $i378 := $p2i.ref.i64($p16);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i379 := $ne.i64($i378, 0);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i379 == 1);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(30, 64)), $mul.ref(0, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i383 := $load.i32($M.0, $p382);
    assume {:verifier.code 0} true;
    $i384 := $i383;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i389 := $eq.i32($i384, $i2);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i389} true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $i390 := $p2i.ref.i64($p16);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i391 := $ne.i64($i390, 0);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i391} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i391 == 1);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(31, 64)), $mul.ref(0, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i395 := $load.i32($M.0, $p394);
    assume {:verifier.code 0} true;
    $i396 := $i395;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i396, $i2);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i401} true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb232:
    assume {:verifier.code 0} true;
    assume $i401 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb15;

  $bb229:
    assume $i391 == 1;
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(31, 64)), $mul.ref(0, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i400 := $load.i32($M.0, $p399);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i396 := $i400;
    goto $bb231;

  $bb225:
    assume {:verifier.code 0} true;
    assume $i389 == 1;
    goto $bb13;

  $bb222:
    assume $i379 == 1;
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(30, 64)), $mul.ref(0, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i388 := $load.i32($M.0, $p387);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i384 := $i388;
    goto $bb224;

  $bb218:
    assume {:verifier.code 0} true;
    assume $i377 == 1;
    goto $bb13;

  $bb215:
    assume $i367 == 1;
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(29, 64)), $mul.ref(0, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i376 := $load.i32($M.0, $p375);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i372 := $i376;
    goto $bb217;

  $bb211:
    assume {:verifier.code 0} true;
    assume $i365 == 1;
    goto $bb13;

  $bb208:
    assume $i355 == 1;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(28, 64)), $mul.ref(0, 1));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i364 := $load.i32($M.0, $p363);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i360 := $i364;
    goto $bb210;

  $bb204:
    assume {:verifier.code 0} true;
    assume $i353 == 1;
    goto $bb13;

  $bb201:
    assume $i343 == 1;
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(27, 64)), $mul.ref(0, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i352 := $load.i32($M.0, $p351);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i348 := $i352;
    goto $bb203;

  $bb197:
    assume {:verifier.code 0} true;
    assume $i341 == 1;
    goto $bb13;

  $bb194:
    assume $i331 == 1;
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(26, 64)), $mul.ref(0, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i340 := $load.i32($M.0, $p339);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i336 := $i340;
    goto $bb196;

  $bb190:
    assume {:verifier.code 0} true;
    assume $i329 == 1;
    goto $bb13;

  $bb187:
    assume $i319 == 1;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(25, 64)), $mul.ref(0, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i328 := $load.i32($M.0, $p327);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i324 := $i328;
    goto $bb189;

  $bb183:
    assume {:verifier.code 0} true;
    assume $i317 == 1;
    goto $bb13;

  $bb180:
    assume $i307 == 1;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(24, 64)), $mul.ref(0, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i316 := $load.i32($M.0, $p315);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i312 := $i316;
    goto $bb182;

  $bb176:
    assume {:verifier.code 0} true;
    assume $i305 == 1;
    goto $bb13;

  $bb173:
    assume $i295 == 1;
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(23, 64)), $mul.ref(0, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i304 := $load.i32($M.0, $p303);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i300 := $i304;
    goto $bb175;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i293 == 1;
    goto $bb13;

  $bb166:
    assume $i283 == 1;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(22, 64)), $mul.ref(0, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.0, $p291);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i288 := $i292;
    goto $bb168;

  $bb162:
    assume {:verifier.code 0} true;
    assume $i281 == 1;
    goto $bb13;

  $bb159:
    assume $i271 == 1;
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(21, 64)), $mul.ref(0, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.0, $p279);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i276 := $i280;
    goto $bb161;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i269 == 1;
    goto $bb13;

  $bb152:
    assume $i259 == 1;
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(20, 64)), $mul.ref(0, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i268 := $load.i32($M.0, $p267);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i264 := $i268;
    goto $bb154;

  $bb148:
    assume {:verifier.code 0} true;
    assume $i257 == 1;
    goto $bb13;

  $bb145:
    assume $i247 == 1;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(19, 64)), $mul.ref(0, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i256 := $load.i32($M.0, $p255);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i252 := $i256;
    goto $bb147;

  $bb141:
    assume {:verifier.code 0} true;
    assume $i245 == 1;
    goto $bb13;

  $bb138:
    assume $i235 == 1;
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(18, 64)), $mul.ref(0, 1));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.0, $p243);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i240 := $i244;
    goto $bb140;

  $bb134:
    assume {:verifier.code 0} true;
    assume $i233 == 1;
    goto $bb13;

  $bb131:
    assume $i223 == 1;
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(17, 64)), $mul.ref(0, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.0, $p231);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i228 := $i232;
    goto $bb133;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i221 == 1;
    goto $bb13;

  $bb124:
    assume $i211 == 1;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(16, 64)), $mul.ref(0, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.0, $p219);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i216 := $i220;
    goto $bb126;

  $bb120:
    assume {:verifier.code 0} true;
    assume $i209 == 1;
    goto $bb13;

  $bb117:
    assume $i199 == 1;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(15, 64)), $mul.ref(0, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.0, $p207);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i204 := $i208;
    goto $bb119;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i197 == 1;
    goto $bb13;

  $bb110:
    assume $i187 == 1;
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(14, 64)), $mul.ref(0, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.0, $p195);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i192 := $i196;
    goto $bb112;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i185 == 1;
    goto $bb13;

  $bb103:
    assume $i175 == 1;
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(13, 64)), $mul.ref(0, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.0, $p183);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i180 := $i184;
    goto $bb105;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i173 == 1;
    goto $bb13;

  $bb96:
    assume $i163 == 1;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(12, 64)), $mul.ref(0, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i168 := $i172;
    goto $bb98;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i161 == 1;
    goto $bb13;

  $bb89:
    assume $i151 == 1;
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(11, 64)), $mul.ref(0, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i156 := $i160;
    goto $bb91;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb13;

  $bb82:
    assume $i139 == 1;
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(10, 64)), $mul.ref(0, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i144 := $i148;
    goto $bb84;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i137 == 1;
    goto $bb13;

  $bb75:
    assume $i127 == 1;
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(9, 64)), $mul.ref(0, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i132 := $i136;
    goto $bb77;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i125 == 1;
    goto $bb13;

  $bb68:
    assume $i115 == 1;
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(8, 64)), $mul.ref(0, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i120 := $i124;
    goto $bb70;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb13;

  $bb61:
    assume $i103 == 1;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(7, 64)), $mul.ref(0, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i108 := $i112;
    goto $bb63;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i101 == 1;
    goto $bb13;

  $bb54:
    assume $i91 == 1;
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(6, 64)), $mul.ref(0, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i96 := $i100;
    goto $bb56;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb13;

  $bb47:
    assume $i79 == 1;
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(5, 64)), $mul.ref(0, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i84 := $i88;
    goto $bb49;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb13;

  $bb40:
    assume $i67 == 1;
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(4, 64)), $mul.ref(0, 1));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i72 := $i76;
    goto $bb42;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb13;

  $bb33:
    assume $i55 == 1;
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(3, 64)), $mul.ref(0, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i60 := $i64;
    goto $bb35;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb13;

  $bb26:
    assume $i43 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(2, 64)), $mul.ref(0, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i48 := $i52;
    goto $bb28;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb13;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(1, 64)), $mul.ref(0, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i36 := $i40;
    goto $bb21;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb13;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 2256)), $mul.ref(208, 1)), $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    call {:si_unique_call 385} {:cexpr "img_type"} boogie_si_record_i32($i22);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p16 := $p1;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 280942);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const phy_flashing_required: ref;

axiom phy_flashing_required == $sub.ref(0, 281974);

procedure phy_flashing_required($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation phy_flashing_required($p0: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(4, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 13);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(6, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 6);
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;
}



const be_flash_redboot: ref;

axiom be_flash_redboot == $sub.ref(0, 283006);

procedure be_flash_redboot($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.21;



implementation be_flash_redboot($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i1)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i19: i1;
  var vslice_dummy_var_325: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 388} {:cexpr "be_flash_redboot:arg:img_start"} boogie_si_record_i32($i2);
    call {:si_unique_call 389} {:cexpr "be_flash_redboot:arg:image_size"} boogie_si_record_i32($i3);
    call {:si_unique_call 390} {:cexpr "be_flash_redboot:arg:hdr_size"} boogie_si_record_i32($i4);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i4, $i2);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $i3);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i7, 4);
    call {:si_unique_call 391} {:cexpr "crc_offset"} boogie_si_record_i32($i8);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p1, $mul.ref($i9, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p5);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i3, $sub.i32(0, 4));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i13 := be_cmd_get_flash_crc($p0, $p11, $i12);
    call {:si_unique_call 393} {:cexpr "status"} boogie_si_record_i32($i13);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p5);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i21 := memcmp($p20, $p10, 4);
    call {:si_unique_call 396} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} vslice_dummy_var_325 := dev_err.ref.ref($p17, .str.93);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;
}



const be_flash: ref;

axiom be_flash == $sub.ref(0, 284038);

procedure be_flash($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_flash($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i18: i1;
  var $i19: i32;
  var $i17: i32;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i35: i1;
  var $p9: ref;
  var $i10: i32;
  var $i34: i32;
  var cmdloc_dummy_var_238: [ref]i8;
  var cmdloc_dummy_var_239: [ref]i8;
  var cmdloc_dummy_var_240: [ref]i8;
  var vslice_dummy_var_326: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} {:cexpr "be_flash:arg:optype"} boogie_si_record_i32($i3);
    call {:si_unique_call 398} {:cexpr "be_flash:arg:img_size"} boogie_si_record_i32($i4);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.15, $p5);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    call {:si_unique_call 399} {:cexpr "be_flash:arg:total_bytes"} boogie_si_record_i32($i4);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i4, 0);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p9, $i10 := $p1, $i4;
    goto $bb4;

  $bb4:
    call $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i17, $i20, $p21, $p22, $i23, $p24, $i25, $i26, $i27, $i35, $p9, $i10, cmdloc_dummy_var_238, cmdloc_dummy_var_239, cmdloc_dummy_var_240 := be_flash_loop_$bb4($p0, $p2, $i3, $p7, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i17, $i20, $p21, $p22, $i23, $p24, $i25, $i26, $i27, $i35, $p9, $i10, cmdloc_dummy_var_238, cmdloc_dummy_var_239, cmdloc_dummy_var_240);
    goto $bb4_last;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32(32768, $i10);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i10, $i12);
    call {:si_unique_call 400} {:cexpr "total_bytes"} boogie_si_record_i32($i13);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i3, 99);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := 2;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i17 := $i19;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i12);
    call {:si_unique_call 401} {:cexpr "__len"} boogie_si_record_i64($i20);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 32804)), $mul.ref(32, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_238 := $M.0;
    cmdloc_dummy_var_239 := $M.0;
    call {:si_unique_call 402} cmdloc_dummy_var_240 := $memcpy.i8(cmdloc_dummy_var_238, cmdloc_dummy_var_239, $p22, $p9, $i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_240;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i12);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p9, $mul.ref($i23, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i25 := be_cmd_write_flashrom($p0, $p2, $i3, $i17, $i12);
    call {:si_unique_call 404} {:cexpr "status"} boogie_si_record_i32($i25);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i13, 0);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i35 == 1);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb29:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p9, $i10 := $p24, $i13;
    goto $bb29_dummy;

  $bb18:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} vslice_dummy_var_326 := dev_err.ref.ref($p32, .str.94);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i34 := $i27;
    goto $bb27;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i3, 99);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb22;

  $bb23:
    assume $i29 == 1;
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb15:
    assume $i18 == 1;
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i19 := 10;
    goto $bb17;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i3, 99);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb14;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i16 := 9;
    goto $bb13;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i12 := 32768;
    goto $bb8;

  $bb29_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3311;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 285070);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const be_cmd_write_flashrom: ref;

axiom be_cmd_write_flashrom == $sub.ref(0, 286102);

procedure be_cmd_write_flashrom($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_write_flashrom($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i27: i32;
  var $p31: ref;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} {:cexpr "be_cmd_write_flashrom:arg:flash_type"} boogie_si_record_i32($i2);
    call {:si_unique_call 407} {:cexpr "be_cmd_write_flashrom:arg:flash_opcode"} boogie_si_record_i32($i3);
    call {:si_unique_call 408} {:cexpr "be_cmd_write_flashrom:arg:buf_size"} boogie_si_record_i32($i4);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} spin_lock_bh($p5);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364096, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $p7 := wrb_from_mccq($p0);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.15, $p10);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 32804)), $mul.ref(0, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.14, $p14);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} be_wrb_cmd_hdr_prepare($p13, 1, 7, $i15, $p7, $p1);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 32804)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i2);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 32804)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i3);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 32804)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i4);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} be_mcc_notify($p0);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} spin_unlock_bh($p22);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i23 := msecs_to_jiffies(40000);
    call {:si_unique_call 416} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364104, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i25 := wait_for_completion_timeout($p24, $i23);
    call {:si_unique_call 418} {:cexpr "tmp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364096, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    call {:si_unique_call 419} {:cexpr "status"} boogie_si_record_i32($i29);
    assume {:verifier.code 0} true;
    $i27 := $i29;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i30 := $i27;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 1);
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} spin_unlock_bh($p31);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 16);
    goto $bb8;
}



const spin_lock_bh: ref;

axiom spin_lock_bh == $sub.ref(0, 287134);

procedure spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation spin_lock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} _raw_spin_lock_bh($p2);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    return;
}



const wrb_from_mccq: ref;

axiom wrb_from_mccq == $sub.ref(0, 288166);

procedure wrb_from_mccq($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation wrb_from_mccq($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p6: ref;
  var cmdloc_dummy_var_241: [ref]i8;
  var cmdloc_dummy_var_242: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1));
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(34, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i8 := atomic_read($p7);
    call {:si_unique_call 422} {:cexpr "tmp"} boogie_si_record_i32($i8);
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i12 := $sge.i32($i8, $i11);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $p13 := queue_head_node($p2);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} queue_head_inc___0($p2);
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} atomic_inc($p15);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p14);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_241 := $M.0;
    call {:si_unique_call 426} cmdloc_dummy_var_242 := $memset.i8(cmdloc_dummy_var_241, $p16, 0, 256, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_242;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p6 := $p13;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const be_wrb_cmd_hdr_prepare: ref;

axiom be_wrb_cmd_hdr_prepare == $sub.ref(0, 289198);

procedure be_wrb_cmd_hdr_prepare($p0: ref, $i1: i8, $i2: i8, $i3: i32, $p4: ref, $p5: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_wrb_cmd_hdr_prepare($p0: ref, $i1: i8, $i2: i8, $i3: i32, $p4: ref, $p5: ref)
{
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} {:cexpr "be_wrb_cmd_hdr_prepare:arg:subsystem"} boogie_si_record_i8($i1);
    call {:si_unique_call 428} {:cexpr "be_wrb_cmd_hdr_prepare:arg:opcode"} boogie_si_record_i8($i2);
    call {:si_unique_call 429} {:cexpr "be_wrb_cmd_hdr_prepare:arg:cmd_len"} boogie_si_record_i32($i3);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    call {:si_unique_call 430} {:cexpr "addr"} boogie_si_record_i64($i6);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i2);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $i1);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i3, 16);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i6);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(8, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i64($i6, 32);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(12, 1));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(4, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i3);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p5);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, 1);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p4);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} swap_dws($p41, 8);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, 8);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $p24 := nonembedded_sgl($p4);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i64($i26, 32);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p24, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p24, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p24, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_mcc_notify: ref;

axiom be_mcc_notify == $sub.ref(0, 290230);

procedure be_mcc_notify($p0: ref);
  free requires assertsPassed;



implementation be_mcc_notify($p0: ref)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i3 := be_error($p0);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 434} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 2047);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 0);
    call {:si_unique_call 435} {:cexpr "val"} boogie_si_record_i32($i10);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 65536);
    call {:si_unique_call 436} {:cexpr "val"} boogie_si_record_i32($i11);
    call {:si_unique_call 437} devirtbounce.4(0);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(320, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} iowrite32($i11, $p14);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_unlock_bh: ref;

axiom spin_unlock_bh == $sub.ref(0, 291262);

procedure spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} _raw_spin_unlock_bh($p2);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 292294);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 440} {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 1} true;
    call {:si_unique_call 441} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 442} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wait_for_completion_timeout: ref;

axiom wait_for_completion_timeout == $sub.ref(0, 293326);

procedure wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 443} {:cexpr "wait_for_completion_timeout:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 1} true;
    call {:si_unique_call 444} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 445} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const _raw_spin_unlock_bh: ref;

axiom _raw_spin_unlock_bh == $sub.ref(0, 294358);

procedure _raw_spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    return;
}



const be_error: ref;

axiom be_error == $sub.ref(0, 295390);

procedure be_error($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation be_error($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364012, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364014, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364013, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i4 := $i10;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const iowrite32: ref;

axiom iowrite32 == $sub.ref(0, 296422);

procedure iowrite32($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation iowrite32($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} {:cexpr "iowrite32:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    return;
}



const nonembedded_sgl: ref;

axiom nonembedded_sgl == $sub.ref(0, 297454);

procedure nonembedded_sgl($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation nonembedded_sgl($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(20, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const swap_dws: ref;

axiom swap_dws == $sub.ref(0, 298486);

procedure swap_dws($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation swap_dws($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} {:cexpr "swap_dws:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 299518);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const queue_head_node: ref;

axiom queue_head_node == $sub.ref(0, 300550);

procedure queue_head_node($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation queue_head_node($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i6, $i9);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p3, $mul.ref($i11, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;
}



const queue_head_inc___0: ref;

axiom queue_head_inc___0 == $sub.ref(0, 301582);

procedure queue_head_inc___0($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation queue_head_inc___0($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} index_inc___0($p1, $i5);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 302614);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 449} devirtbounce.5(0, $p1, $p1);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 303646);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const index_inc___0: ref;

axiom index_inc___0 == $sub.ref(0, 304678);

procedure index_inc___0($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation index_inc___0($p0: ref, $i1: i16)
{
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} {:cexpr "index_inc___0:arg:limit"} boogie_si_record_i16($i1);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p0);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i1);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i8 := MODULO___0($i5, $i7);
    call {:si_unique_call 452} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p0, $i9);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    return;
}



const MODULO___0: ref;

axiom MODULO___0 == $sub.ref(0, 305710);

procedure MODULO___0($i0: i16, $i1: i16) returns ($r: i32);
  free requires assertsPassed;



implementation MODULO___0($i0: i16, $i1: i16) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} {:cexpr "MODULO___0:arg:val"} boogie_si_record_i16($i0);
    call {:si_unique_call 454} {:cexpr "MODULO___0:arg:limit"} boogie_si_record_i16($i1);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i1);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i2, $i4);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 456} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i0);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i1);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $sub.i32(0, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i11, $i13);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 457} devirtbounce.2(0, .str.23, 136, 12);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call MODULO___0_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const _raw_spin_lock_bh: ref;

axiom _raw_spin_lock_bh == $sub.ref(0, 306742);

procedure _raw_spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    return;
}



const be_cmd_get_flash_crc: ref;

axiom be_cmd_get_flash_crc == $sub.ref(0, 307774);

procedure be_cmd_get_flash_crc($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_get_flash_crc($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i7: i32;
  var $p26: ref;
  var cmdloc_dummy_var_243: [ref]i8;
  var cmdloc_dummy_var_244: [ref]i8;
  var cmdloc_dummy_var_245: [ref]i8;
  var cmdloc_dummy_var_246: [ref]i8;
  var cmdloc_dummy_var_247: [ref]i8;
  var cmdloc_dummy_var_248: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} {:cexpr "be_cmd_get_flash_crc:arg:offset"} boogie_si_record_i32($i2);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} spin_lock_bh($p3);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $p4 := wrb_from_mccq($p0);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p8 := embedded_payload($p4);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} be_wrb_cmd_hdr_prepare($p10, 1, 6, 40, $p4, $0.ref);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 1);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 4);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i2);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 4);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $i19 := be_mcc_notify_wait($p0);
    call {:si_unique_call 465} {:cexpr "status"} boogie_si_record_i32($i19);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} spin_unlock_bh($p26);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i64(4, 63);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_246 := $M.0;
    cmdloc_dummy_var_247 := $M.0;
    call {:si_unique_call 467} cmdloc_dummy_var_248 := $memcpy.i8(cmdloc_dummy_var_246, cmdloc_dummy_var_247, $p1, $p25, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_248;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_243 := $M.0;
    cmdloc_dummy_var_244 := $M.0;
    call {:si_unique_call 466} cmdloc_dummy_var_245 := $memcpy.i8(cmdloc_dummy_var_243, cmdloc_dummy_var_244, $p1, $p23, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_245;
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const embedded_payload: ref;

axiom embedded_payload == $sub.ref(0, 308806);

procedure embedded_payload($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation embedded_payload($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(20, 1));
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const be_mcc_notify_wait: ref;

axiom be_mcc_notify_wait == $sub.ref(0, 309838);

procedure be_mcc_notify_wait($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.0, $CurrAddr;



implementation be_mcc_notify_wait($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p4: ref;
  var $i5: i16;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i16;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $M.21 := $store.i16($M.21, $p1, $i5);
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} index_dec($p1, $i10);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.21, $p1);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $p15 := queue_index_node($p11, $i14);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 256)), $mul.ref(8, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 256)), $mul.ref(12, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p21 := be_decode_resp_hdr($i18, $i20);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} be_mcc_notify($p0);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i22 := be_mcc_wait_compl($p0);
    call {:si_unique_call 474} {:cexpr "status"} boogie_si_record_i32($i22);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, $sub.i32(0, 5));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    call {:si_unique_call 475} {:cexpr "status"} boogie_si_record_i32($i27);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i24 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb3;
}



const index_dec: ref;

axiom index_dec == $sub.ref(0, 310870);

procedure index_dec($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.21;



implementation index_dec($p0: ref, $i1: i16)
{
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} {:cexpr "index_dec:arg:limit"} boogie_si_record_i16($i1);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.21, $p0);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 65535);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i1);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i8 := MODULO___0($i5, $i7);
    call {:si_unique_call 478} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $M.21 := $store.i16($M.21, $p0, $i9);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    return;
}



const queue_index_node: ref;

axiom queue_index_node == $sub.ref(0, 311902);

procedure queue_index_node($p0: ref, $i1: i16) returns ($r: ref);
  free requires assertsPassed;



implementation queue_index_node($p0: ref, $i1: i16) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} {:cexpr "queue_index_node:arg:index"} boogie_si_record_i16($i1);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i5, $i8);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p4, $mul.ref($i10, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;
}



const be_decode_resp_hdr: ref;

axiom be_decode_resp_hdr == $sub.ref(0, 312934);

procedure be_decode_resp_hdr($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation be_decode_resp_hdr($i0: i32, $i1: i32) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} {:cexpr "be_decode_resp_hdr:arg:tag0"} boogie_si_record_i32($i0);
    call {:si_unique_call 481} {:cexpr "be_decode_resp_hdr:arg:tag1"} boogie_si_record_i32($i1);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    call {:si_unique_call 482} {:cexpr "addr"} boogie_si_record_i64($i2);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i3 := $shl.i64($i2, 32);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i0);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i5 := $or.i64($i3, $i4);
    call {:si_unique_call 483} {:cexpr "addr"} boogie_si_record_i64($i5);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const be_mcc_wait_compl: ref;

axiom be_mcc_wait_compl == $sub.ref(0, 313966);

procedure be_mcc_wait_compl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_mcc_wait_compl($p0: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i16: i32;
  var $i17: i1;
  var $i2: i32;
  var $i18: i32;
  var $i19: i32;
  var $i14: i32;
  var $i15: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i6: i32;
  var vslice_dummy_var_327: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb1;

  $bb1:
    call $i3, $i4, $i5, $i7, $p9, $i10, $i11, $i12, $i13, $i16, $i17, $i2, $i18, $i19 := be_mcc_wait_compl_loop_$bb1($p0, $i3, $i4, $i5, $i7, $p9, $i10, $i11, $i12, $i13, $i16, $i17, $i2, $i18, $i19);
    goto $bb1_last;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i3 := be_error($p0);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 485} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} local_bh_disable();
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $i7 := be_process_mcc($p0);
    call {:si_unique_call 488} {:cexpr "status"} boogie_si_record_i32($i7);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} local_bh_enable();
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $i10 := atomic_read($p9);
    call {:si_unique_call 491} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i12, $i13 := $i2, $i7;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} __const_udelay(429500);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i2, 1);
    call {:si_unique_call 493} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i16, 119999);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i16, $i7;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14, $i15 := $i18, $i19;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i14, 120000);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} vslice_dummy_var_327 := dev_err.ref.ref($p23, .str.167);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364013, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 1);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 5);
    goto $bb5;

  $bb11:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i2 := $i16;
    goto $bb11_dummy;

  $bb7:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i14, $i15 := $i12, $i13;
    goto $bb9;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 5);
    goto $bb5;

  $bb11_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3716;
}



const local_bh_disable: ref;

axiom local_bh_disable == $sub.ref(0, 314998);

procedure local_bh_disable();
  free requires assertsPassed;



implementation local_bh_disable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    return;
}



const be_process_mcc: ref;

axiom be_process_mcc == $sub.ref(0, 316030);

procedure be_process_mcc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_process_mcc($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $p42: ref;
  var $i43: i32;
  var $i35: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i48: i32;
  var $i49: i32;
  var $i6: i32;
  var $i7: i32;
  var $i50: i1;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i16;
  var $p56: ref;
  var $i57: i8;
  var $i58: i1;
  var $i59: i16;
  var $i60: i32;
  var $i61: i16;
  var $p62: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(408, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} spin_lock($p2);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $p3 := be_mcc_compl_get($p0);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i6, $i7 := 0, 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i6, 0);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(408, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} spin_unlock($p62);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb24:
    assume $i50 == 1;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(40, 1)), $mul.ref(28, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(80, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i6);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i60);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} be_cq_notify($p0, $i55, $i58, $i61);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p8, $i9, $i10 := $p3, 0, 0;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $p20, $p21, $i22, $i23, $i24, $i25, $p26, $i27, $p28, $i29, $i30, $i31, $i32, $p33, $i34, $p36, $i37, $i38, $i39, $i40, $p42, $i43, $i35, $i44, $p45, $i46, $i47, $p8, $i9, $i10, $i48, $i49 := be_process_mcc_loop_$bb4($p0, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $p20, $p21, $i22, $i23, $i24, $i25, $p26, $i27, $p28, $i29, $i30, $i31, $i32, $p33, $i34, $p36, $i37, $i38, $i39, $i40, $p42, $i43, $i35, $i44, $p45, $i46, $i47, $p8, $i9, $i10, $i48, $i49);
    goto $bb4_last;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1073741824);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 268435456);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i9;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i35 := $i43;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} be_mcc_compl_use($p8);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i10, 1);
    call {:si_unique_call 507} {:cexpr "num"} boogie_si_record_i32($i44);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $p45 := be_mcc_compl_get($p0);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i48, $i49 := $i44, $i35;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i6, $i7 := $i48, $i49;
    goto $bb3;

  $bb21:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $p8, $i9, $i10 := $p45, $i35, $i44;
    goto $bb21_dummy;

  $bb18:
    assume $i39 == 1;
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i40 := be_mcc_compl_process($p0, $p8);
    call {:si_unique_call 510} {:cexpr "status"} boogie_si_record_i32($i40);
    $p42 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} atomic_dec($p42);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i43 := $i40;
    goto $bb20;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i17 := is_link_state_evt($i16);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 498} {:cexpr "tmp___1"} boogie_si_record_i8($i18);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i23 := is_grp5_evt($i22);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 501} {:cexpr "tmp___0"} boogie_si_record_i8($i24);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i30 := is_dbg_evt($i29);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 504} {:cexpr "tmp"} boogie_si_record_i8($i31);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i35 := $i9;
    goto $bb17;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} be_async_dbg_evt_process($p0, $i34, $p8);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} be_async_grp5_evt_process($p0, $i27, $p8);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p8);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} be_async_link_state_process($p0, $p20);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb21_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3761;
}



const local_bh_enable: ref;

axiom local_bh_enable == $sub.ref(0, 317062);

procedure local_bh_enable();
  free requires assertsPassed;



implementation local_bh_enable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 318094);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 319126);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} _raw_spin_lock($p2);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    return;
}



const is_link_state_evt: ref;

axiom is_link_state_evt == $sub.ref(0, 320158);

procedure is_link_state_evt($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation is_link_state_evt($i0: i32) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} {:cexpr "is_link_state_evt:arg:trailer"} boogie_si_record_i32($i0);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i1 := $lshr.i32($i0, 8);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 255);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const be_async_link_state_process: ref;

axiom be_async_link_state_process == $sub.ref(0, 321190);

procedure be_async_link_state_process($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_async_link_state_process($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(16, 1));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $sub.i32(0, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 57888);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 57896);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 1);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} be_link_status_update($p0, $i28);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 2);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb6;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const is_grp5_evt: ref;

axiom is_grp5_evt == $sub.ref(0, 322222);

procedure is_grp5_evt($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation is_grp5_evt($i0: i32) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} {:cexpr "is_grp5_evt:arg:trailer"} boogie_si_record_i32($i0);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i1 := $lshr.i32($i0, 8);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 255);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 5);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const be_async_grp5_evt_process: ref;

axiom be_async_grp5_evt_process == $sub.ref(0, 323254);

procedure be_async_grp5_evt_process($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_async_grp5_evt_process($p0: ref, $i1: i32, $p2: ref)
{
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var vslice_dummy_var_328: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} {:cexpr "be_async_grp5_evt_process:arg:trailer"} boogie_si_record_i32($i1);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i32($i1, 16);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    call {:si_unique_call 520} {:cexpr "event_type"} boogie_si_record_i8($i4);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} vslice_dummy_var_328 := dev_warn.ref.ref($p15, .str.162);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} be_async_grp5_pvid_state_process($p0, $p12);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} be_async_grp5_cos_priority_process($p0, $p10);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} be_async_grp5_qos_speed_process($p0, $p11);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const is_dbg_evt: ref;

axiom is_dbg_evt == $sub.ref(0, 324286);

procedure is_dbg_evt($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation is_dbg_evt($i0: i32) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} {:cexpr "is_dbg_evt:arg:trailer"} boogie_si_record_i32($i0);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i1 := $lshr.i32($i0, 8);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 255);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 6);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const be_async_dbg_evt_process: ref;

axiom be_async_dbg_evt_process == $sub.ref(0, 325318);

procedure be_async_dbg_evt_process($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_async_dbg_evt_process($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i16;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var vslice_dummy_var_329: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} {:cexpr "be_async_dbg_evt_process:arg:trailer"} boogie_si_record_i32($i1);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i1, 16);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    call {:si_unique_call 527} {:cexpr "event_type"} boogie_si_record_i8($i5);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} vslice_dummy_var_329 := dev_warn.ref.ref($p21, .str.163);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i7 == 1;
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, 2048);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364278, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $i13);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const be_mcc_compl_process: ref;

axiom be_mcc_compl_process == $sub.ref(0, 326350);

procedure be_mcc_compl_process($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation be_mcc_compl_process($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $p15: ref;
  var $i16: i8;
  var $i17: i8;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i16;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i74: i32;
  var vslice_dummy_var_330: i32;
  var vslice_dummy_var_331: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} swap_dws($p2, 4);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    call {:si_unique_call 530} {:cexpr "compl_status"} boogie_si_record_i16($i5);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $p10 := be_decode_resp_hdr($i7, $i9);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i17, $i18 := 0, 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i17);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 7);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i20 == 1);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i17);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 172);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i5);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i17);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 121);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i5);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 66);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i51 == 1);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i5);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 2);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i5);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 5);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i55 == 1);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i64 := $lshr.i32($i63, 16);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    call {:si_unique_call 537} {:cexpr "extd_status"} boogie_si_record_i16($i65);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i17);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i18);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i5);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i65);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} vslice_dummy_var_331 := dev_err.ref.ref.i32.i32.i32.i32($p68, .str.165, $i69, $i70, $i71, $i72);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i5);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $r := $i74;
    return;

  $bb41:
    assume $i55 == 1;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i17);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i18);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} vslice_dummy_var_330 := dev_warn.ref.ref.i32.i32($p58, .str.164, $i59, $i60);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb35;

  $bb31:
    assume $i48 == 1;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364284, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i17);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 4);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i31 == 1);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i17);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 18);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i17);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 121);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i38 == 1;
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i18);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb26;

  $bb27:
    assume $i40 == 1;
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p10);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(0, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i44);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i18);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 3);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb20;

  $bb21:
    assume $i35 == 1;
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} be_parse_stats($p0);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364040, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb16;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i18);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb9;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i5);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364096, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364104, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} complete_($p27);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb5;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    call {:si_unique_call 532} {:cexpr "opcode"} boogie_si_record_i8($i14);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    call {:si_unique_call 533} {:cexpr "subsystem"} boogie_si_record_i8($i16);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i17, $i18 := $i14, $i16;
    goto $bb3;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 327382);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 539} devirtbounce.5(0, $p1, $p1);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    return;
}



const be_mcc_compl_use: ref;

axiom be_mcc_compl_use == $sub.ref(0, 328414);

procedure be_mcc_compl_use($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_mcc_compl_use($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    return;
}



const be_mcc_compl_get: ref;

axiom be_mcc_compl_get == $sub.ref(0, 329446);

procedure be_mcc_compl_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_mcc_compl_get($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(40, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $p3 := queue_tail_node($p2);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i5 := be_mcc_compl_is_new($p4);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 542} {:cexpr "tmp___0"} boogie_si_record_i8($i6);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} queue_tail_inc___0($p2);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const be_cq_notify: ref;

axiom be_cq_notify == $sub.ref(0, 330478);

procedure be_cq_notify($p0: ref, $i1: i16, $i2: i1, $i3: i16);
  free requires assertsPassed;



implementation be_cq_notify($p0: ref, $i1: i16, $i2: i1, $i3: i16)
{
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} {:cexpr "be_cq_notify:arg:qid"} boogie_si_record_i16($i1);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 545} {:cexpr "be_cq_notify:arg:arm"} boogie_si_record_i1($i2);
    call {:si_unique_call 546} {:cexpr "be_cq_notify:arg:num_popped"} boogie_si_record_i16($i3);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1023);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 0);
    call {:si_unique_call 547} {:cexpr "val"} boogie_si_record_i32($i7);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i1);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 31744);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i10 := $shl.i32($i9, 1);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, $i7);
    call {:si_unique_call 548} {:cexpr "val"} boogie_si_record_i32($i11);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364012, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i4);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i11;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i3);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i19 := $shl.i32($i18, 16);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, $i17);
    call {:si_unique_call 550} {:cexpr "val"} boogie_si_record_i32($i20);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(288, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} iowrite32($i20, $p23);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i11, 536870912);
    call {:si_unique_call 549} {:cexpr "val"} boogie_si_record_i32($i16);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 331510);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} _raw_spin_unlock($p2);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 332542);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    return;
}



const queue_tail_node: ref;

axiom queue_tail_node == $sub.ref(0, 333574);

procedure queue_tail_node($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation queue_tail_node($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(30, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i6, $i9);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p3, $mul.ref($i11, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;
}



const be_mcc_compl_is_new: ref;

axiom be_mcc_compl_is_new == $sub.ref(0, 334606);

procedure be_mcc_compl_is_new($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation be_mcc_compl_is_new($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 553} {:cexpr "flags"} boogie_si_record_i32($i5);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i5);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb5;
}



const queue_tail_inc___0: ref;

axiom queue_tail_inc___0 == $sub.ref(0, 335638);

procedure queue_tail_inc___0($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation queue_tail_inc___0($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(30, 1));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} index_inc___0($p1, $i5);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    return;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 336670);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    return;
}



const be_parse_stats: ref;

axiom be_parse_stats == $sub.ref(0, 337702);

procedure be_parse_stats($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_parse_stats($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i34: i32;
  var $p35: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $p1 := be_erx_stats_from_cmd($p0);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 57888);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 57896);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 529);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1792);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} populate_be_v1_stats($p0);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64(0);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p28, $mul.ref($i29, 24760));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i33 := $ult.i32(0, $i32);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i34, $p35 := 0, $p30;
    goto $bb16;

  $bb16:
    call $p37, $i38, $i39, $i40, $p42, $i43, $i44, $p45, $i46, $i47, $i34, $p35 := be_parse_stats_loop_$bb16($p0, $p2, $p31, $p37, $i38, $i39, $i40, $p42, $i43, $i44, $p45, $i46, $i47, $i34, $p35);
    goto $bb16_last;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(28, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref($i40, 4));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    call {:si_unique_call 559} {:cexpr "erx_stat"} boogie_si_record_i32($i43);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} populate_erx_stats($p0, $p35, $i43);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i34, 1);
    call {:si_unique_call 561} {:cexpr "i"} boogie_si_record_i32($i44);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p35, $mul.ref(1, 24760));
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p31);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i47 := $ult.i32($i44, $i46);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i47 == 1);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i34, $p35 := $i44, $p45;
    goto $bb18_dummy;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} populate_be_v0_stats($p0);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} populate_lancer_stats($p0);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4206;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 338734);

procedure dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 1} true;
    call {:si_unique_call 562} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 563} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 1} true;
    call {:si_unique_call 564} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 565} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const be_erx_stats_from_cmd: ref;

axiom be_erx_stats_from_cmd == $sub.ref(0, 339766);

procedure be_erx_stats_from_cmd($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation be_erx_stats_from_cmd($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 529);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1792);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $p18 := hw_stats_from_cmd($p0);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1848)), $mul.ref(1464, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p17 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p13 := hw_stats_from_cmd($p0);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1060)), $mul.ref(844, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p17 := $p15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const populate_lancer_stats: ref;

axiom populate_lancer_stats == $sub.ref(0, 340798);

procedure populate_lancer_stats($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation populate_lancer_stats($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $p2 := pport_stats_from_cmd($p0);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} swap_dws($p3, 656);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(320, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(44, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(296, 1));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(36, 1));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(376, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(52, 1));
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(392, 1));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(56, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(344, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(64, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(424, 1));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(88, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(428, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(92, 1));
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(432, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(96, 1));
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(436, 1));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(100, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(420, 1));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(84, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(408, 1));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(72, 1));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(412, 1));
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(76, 1));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(396, 1));
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(60, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(416, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(80, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(544, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(120, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(400, 1));
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(404, 1));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i50, $i52);
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(68, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(312, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(40, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(544, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(116, 1));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(80, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(104, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(112, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(112, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(372, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(128, 1));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(536, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(28, 1));
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(568, 1));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(32, 1));
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 656)), $mul.ref(552, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(24, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    return;
}



const populate_be_v0_stats: ref;

axiom populate_be_v0_stats == $sub.ref(0, 341830);

procedure populate_be_v0_stats($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation populate_be_v0_stats($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $p106: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $p1 := hw_stats_from_cmd($p0);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364016, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} swap_dws($p12, 1060);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(32, 1));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(44, 1));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(24, 1));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(36, 1));
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(36, 1));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(52, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(40, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(56, 1));
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(48, 1));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(64, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(76, 1));
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(88, 1));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(120, 1));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(92, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(124, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(96, 1));
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(128, 1));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(100, 1));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(256, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(116, 1));
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(72, 1));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(84, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(60, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(72, 1));
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(64, 1));
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(76, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(44, 1));
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(60, 1));
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(260, 1));
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(120, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(68, 1));
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(80, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(52, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(56, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i62, $i64);
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(68, 1));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(28, 1));
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(40, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(208, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(104, 1));
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref($i9, 264)), $mul.ref(212, 1));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(112, 1));
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364016, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i78 == 1);
    $p82 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(620, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(128, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i83);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p85 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(528, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(8, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i86);
    $p88 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(536, 1));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(16, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i89);
    $p91 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(584, 1));
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    $p93 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(28, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, $i92);
    $p94 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(588, 1));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(32, 1));
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i95);
    $p97 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(540, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(20, 1));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i98);
    $p100 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(576, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    $p102 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(24, 1));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i101);
    $p103 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(1036, 1)), $mul.ref(0, 1));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(4, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, $i104);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i78 == 1;
    $p79 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1060)), $mul.ref(0, 1)), $mul.ref(624, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(128, 1));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const populate_be_v1_stats: ref;

axiom populate_be_v1_stats == $sub.ref(0, 342862);

procedure populate_be_v1_stats($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation populate_be_v1_stats($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $p106: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $p1 := hw_stats_from_cmd($p0);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364016, 1));
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} swap_dws($p12, 1848);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(268, 1));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(124, 1));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(60, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(48, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(56, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(44, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(48, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(36, 1));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(64, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(52, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(68, 1));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(56, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(76, 1));
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(64, 1));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(100, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(88, 1));
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(144, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(92, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(148, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(96, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(152, 1));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(100, 1));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(96, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(84, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(84, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(72, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(88, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(76, 1));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(72, 1));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(60, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(92, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(80, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(264, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(120, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(80, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(68, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(52, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(40, 1));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(260, 1));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(116, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(208, 1));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(104, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(216, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(112, 1));
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(212, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(108, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref($i9, 288)), $mul.ref(272, 1));
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(128, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i83);
    $p85 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(1160, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(8, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i86);
    $p88 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(1168, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(16, 1));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i89);
    $p91 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(1208, 1));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    $p93 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(28, 1));
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, $i92);
    $p94 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(1212, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(32, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i95);
    $p97 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(1172, 1));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(20, 1));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i98);
    $p100 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(1200, 1));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    $p102 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(24, 1));
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i101);
    $p103 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(1752, 1)), $mul.ref(0, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(359212, 1)), $mul.ref(4, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, $i104);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    return;
}



const populate_erx_stats: ref;

axiom populate_erx_stats == $sub.ref(0, 343894);

procedure populate_erx_stats($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation populate_erx_stats($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} {:cexpr "populate_erx_stats:arg:erx_stat"} boogie_si_record_i32($i2);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 545);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(36, 1));
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i2);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} accumulate_16bit_val($p30, $i33);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 1808);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 529);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 1792);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb3;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(36, 1));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i2);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const accumulate_16bit_val: ref;

axiom accumulate_16bit_val == $sub.ref(0, 344926);

procedure accumulate_16bit_val($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation accumulate_16bit_val($p0: ref, $i1: i16)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} {:cexpr "accumulate_16bit_val:arg:val"} boogie_si_record_i16($i1);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p0);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 65535);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32($i2, $i4);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 577} {:cexpr "wrapped"} boogie_si_record_i8($i6);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p0);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $sub.i32(0, 65536));
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i1);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i8, $i9);
    call {:si_unique_call 578} {:cexpr "newacc"} boogie_si_record_i32($i10);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i6);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p0, $i13);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i10, 65536);
    call {:si_unique_call 579} {:cexpr "newacc"} boogie_si_record_i32($i12);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const hw_stats_from_cmd: ref;

axiom hw_stats_from_cmd == $sub.ref(0, 345958);

procedure hw_stats_from_cmd($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation hw_stats_from_cmd($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 529);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1792);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(0, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1864)), $mul.ref(16, 1));
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p19 := $p24;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $r := $p19;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(0, 1));
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1076)), $mul.ref(16, 1));
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p19 := $p17;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const pport_stats_from_cmd: ref;

axiom pport_stats_from_cmd == $sub.ref(0, 346990);

procedure pport_stats_from_cmd($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pport_stats_from_cmd($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363472, 1)), $mul.ref(0, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 672)), $mul.ref(16, 1));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const be_async_grp5_cos_priority_process: ref;

axiom be_async_grp5_cos_priority_process == $sub.ref(0, 348022);

procedure be_async_grp5_cos_priority_process($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_async_grp5_cos_priority_process($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(3, 1));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(1, 1));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363442, 1));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $i7);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363444, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 8191);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363444, 1));
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $i13);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(2, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i16($i16);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i19 := $shl.i32($i18, 13);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363444, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $i20);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_async_grp5_qos_speed_process: ref;

axiom be_async_grp5_qos_speed_process == $sub.ref(0, 349054);

procedure be_async_grp5_qos_speed_process($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_async_grp5_qos_speed_process($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(16, 1));
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i5 := $sge.i32($i4, 0);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364016, 1));
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i8, $i10);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, 10);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(16, 1));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i15);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const be_async_grp5_pvid_state_process: ref;

axiom be_async_grp5_pvid_state_process == $sub.ref(0, 350086);

procedure be_async_grp5_pvid_state_process($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation be_async_grp5_pvid_state_process($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364234, 1));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 4095);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364234, 1));
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $i10);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const be_link_status_update: ref;

axiom be_link_status_update == $sub.ref(0, 351118);

procedure be_link_status_update($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation be_link_status_update($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} {:cexpr "be_link_status_update:arg:link_status"} boogie_si_record_i8($i1);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(8, 1));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i1);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} netif_carrier_off($p3);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} netif_carrier_on($p3);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} netif_carrier_off($p3);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 1);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363952, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_carrier_off: ref;

axiom netif_carrier_off == $sub.ref(0, 352150);

procedure netif_carrier_off($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_off($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    return;
}



const netif_carrier_on: ref;

axiom netif_carrier_on == $sub.ref(0, 353182);

procedure netif_carrier_on($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_on($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 354214);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    return;
}



const is_device_dma_capable: ref;

axiom is_device_dma_capable == $sub.ref(0, 355246);

procedure is_device_dma_capable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_dma_capable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(904, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i5);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(904, 1));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;
}



const dma_alloc_coherent_gfp_flags: ref;

axiom dma_alloc_coherent_gfp_flags == $sub.ref(0, 356278);

procedure dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} {:cexpr "dma_alloc_coherent_gfp_flags:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i2 := dma_alloc_coherent_mask($p0, $i1);
    call {:si_unique_call 586} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i2, 16777215);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i2, 4294967295);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i5, 1);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, 4);
    call {:si_unique_call 588} {:cexpr "gfp"} boogie_si_record_i32($i9);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, 1);
    call {:si_unique_call 587} {:cexpr "gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const debug_dma_alloc_coherent: ref;

axiom debug_dma_alloc_coherent == $sub.ref(0, 357310);

procedure debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);
  free requires assertsPassed;



implementation debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} {:cexpr "debug_dma_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 590} {:cexpr "debug_dma_alloc_coherent:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_coherent_mask: ref;

axiom dma_alloc_coherent_mask == $sub.ref(0, 358342);

procedure dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} {:cexpr "dma_alloc_coherent_mask:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(912, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 592} {:cexpr "dma_mask"} boogie_si_record_i64($i3);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 1);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 16777215 else 4294967295);
    call {:si_unique_call 593} {:cexpr "dma_mask"} boogie_si_record_i64($i7);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const lancer_cmd_write_object: ref;

axiom lancer_cmd_write_object == $sub.ref(0, 359374);

procedure lancer_cmd_write_object($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $p5: ref, $p6: ref, $p7: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.13, $M.7, $M.21, $CurrAddr;



implementation lancer_cmd_write_object($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $p5: ref, $p6: ref, $p7: ref) returns ($r: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p45: ref;
  var $i46: i32;
  var $i44: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i8;
  var $p54: ref;
  var $i55: i8;
  var $p57: ref;
  var $i56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} {:cexpr "lancer_cmd_write_object:arg:data_size"} boogie_si_record_i32($i2);
    call {:si_unique_call 595} {:cexpr "lancer_cmd_write_object:arg:data_offset"} boogie_si_record_i32($i3);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} spin_lock_bh($p8);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364096, 1));
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p10 := wrb_from_mccq($p0);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $p13 := embedded_payload($p10);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} be_wrb_cmd_hdr_prepare($p15, 1, $sub.i8(0, 84), 144, $p10, $0.ref);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i18 := amap_mask(24);
    call {:si_unique_call 602} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} amap_set($p17, 0, $i18, 0, $i2);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i2, 0);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $i21 := amap_mask(1);
    call {:si_unique_call 608} {:cexpr "tmp___2"} boogie_si_record_i32($i21);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} amap_set($p17, 0, $i21, 31, 0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} swap_dws($p17, 4);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(20, 1));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i3);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(24, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $p25 := strcpy($p24, $p4);
    assume $isExternal($p25);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 1);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(132, 1));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i2);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.12, $p28);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 144);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.12, $p33);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 144);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i36 := $lshr.i64($i35, 32);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(140, 1));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} be_mcc_notify($p0);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} spin_unlock_bh($p39);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $i40 := msecs_to_jiffies(60000);
    call {:si_unique_call 615} {:cexpr "tmp___3"} boogie_si_record_i64($i40);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364104, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i42 := wait_for_completion_timeout($p41, $i40);
    call {:si_unique_call 617} {:cexpr "tmp___4"} boogie_si_record_i64($i42);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i43 == 1);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364096, 1));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    call {:si_unique_call 618} {:cexpr "status"} boogie_si_record_i32($i46);
    assume {:verifier.code 0} true;
    $i44 := $i46;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p47 := embedded_payload($p10);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i44, 0);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i49 == 1);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p48, $mul.ref(0, 24)), $mul.ref(5, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i55);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i56 := $i44;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $r := $i56;
    return;

  $bb11:
    assume $i49 == 1;
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p48, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $i51);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p48, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p6, $i53);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i43 == 1;
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 1);
    goto $bb10;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i20 := amap_mask(1);
    call {:si_unique_call 605} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} amap_set($p17, 0, $i20, 31, 1);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} spin_unlock_bh($p57);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 16);
    goto $bb14;
}



const lancer_fw_reset: ref;

axiom lancer_fw_reset == $sub.ref(0, 360406);

procedure lancer_fw_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation lancer_fw_reset($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i1 := lancer_wait_idle($p0);
    call {:si_unique_call 621} {:cexpr "status"} boogie_si_record_i32($i1);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(1044, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} iowrite32(2, $p5);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const lancer_wait_idle: ref;

axiom lancer_wait_idle == $sub.ref(0, 361438);

procedure lancer_wait_idle($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation lancer_wait_idle($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i32;
  var $i183: i32;
  var $i184: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(1044, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i4 := ioread32($p3);
    call {:si_unique_call 624} {:cexpr "reg_val"} boogie_si_record_i32($i4);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1073741824);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} ssleep(1);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(1044, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i14 := ioread32($p13);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 1073741824);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} ssleep(1);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(1044, 1));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i20 := ioread32($p19);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 1073741824);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i7 := 2;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} ssleep(1);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(1044, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i26 := ioread32($p25);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 1073741824);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i7 := 3;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} ssleep(1);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(1044, 1));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i32 := ioread32($p31);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 1073741824);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i7 := 4;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} ssleep(1);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref(1044, 1));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i38 := ioread32($p37);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 1073741824);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i7 := 5;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} ssleep(1);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(1044, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $i44 := ioread32($p43);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 1073741824);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i7 := 6;
    assume {:branchcond $i46} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} ssleep(1);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(1044, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i50 := ioread32($p49);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 1073741824);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i7 := 7;
    assume {:branchcond $i52} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} ssleep(1);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref(1044, 1));
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i56 := ioread32($p55);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 1073741824);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i7 := 8;
    assume {:branchcond $i58} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} ssleep(1);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(1044, 1));
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $i62 := ioread32($p61);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 1073741824);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 0);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i7 := 9;
    assume {:branchcond $i64} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} ssleep(1);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(1044, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i68 := ioread32($p67);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 1073741824);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i7 := 10;
    assume {:branchcond $i70} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} ssleep(1);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(1044, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i74 := ioread32($p73);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 1073741824);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 0);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i7 := 11;
    assume {:branchcond $i76} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} ssleep(1);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref(1044, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i80 := ioread32($p79);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 1073741824);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i7 := 12;
    assume {:branchcond $i82} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} ssleep(1);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p84, $mul.ref(1044, 1));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i86 := ioread32($p85);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 1073741824);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 0);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i7 := 13;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} ssleep(1);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref(1044, 1));
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i92 := ioread32($p91);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 1073741824);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 0);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i7 := 14;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} ssleep(1);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p96, $mul.ref(1044, 1));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i98 := ioread32($p97);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 1073741824);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 0);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i7 := 15;
    assume {:branchcond $i100} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} ssleep(1);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p102, $mul.ref(1044, 1));
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $i104 := ioread32($p103);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, 1073741824);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i7 := 16;
    assume {:branchcond $i106} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} ssleep(1);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p108, $mul.ref(1044, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i110 := ioread32($p109);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 1073741824);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 0);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i7 := 17;
    assume {:branchcond $i112} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} ssleep(1);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p114, $mul.ref(1044, 1));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i116 := ioread32($p115);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i117 := $and.i32($i116, 1073741824);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 0);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i7 := 18;
    assume {:branchcond $i118} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} ssleep(1);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p120, $mul.ref(1044, 1));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i122 := ioread32($p121);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i122, 1073741824);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 0);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i7 := 19;
    assume {:branchcond $i124} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} ssleep(1);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p126, $mul.ref(1044, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i128 := ioread32($p127);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 1073741824);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 0);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i7 := 20;
    assume {:branchcond $i130} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} ssleep(1);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p132, $mul.ref(1044, 1));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i134 := ioread32($p133);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i135 := $and.i32($i134, 1073741824);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 0);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i7 := 21;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} ssleep(1);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref(1044, 1));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i140 := ioread32($p139);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i141 := $and.i32($i140, 1073741824);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 0);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i7 := 22;
    assume {:branchcond $i142} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} ssleep(1);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p144, $mul.ref(1044, 1));
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i146 := ioread32($p145);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, 1073741824);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 0);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i7 := 23;
    assume {:branchcond $i148} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} ssleep(1);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p150, $mul.ref(1044, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i152 := ioread32($p151);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i153 := $and.i32($i152, 1073741824);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 0);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i7 := 24;
    assume {:branchcond $i154} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} ssleep(1);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p156, $mul.ref(1044, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i158 := ioread32($p157);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i159 := $and.i32($i158, 1073741824);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 0);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i7 := 25;
    assume {:branchcond $i160} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} ssleep(1);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p162, $mul.ref(1044, 1));
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $i164 := ioread32($p163);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i165 := $and.i32($i164, 1073741824);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 0);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i7 := 26;
    assume {:branchcond $i166} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} ssleep(1);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p168, $mul.ref(1044, 1));
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $i170 := ioread32($p169);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i171 := $and.i32($i170, 1073741824);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 0);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i7 := 27;
    assume {:branchcond $i172} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} ssleep(1);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($p174, $mul.ref(1044, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $i176 := ioread32($p175);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i177 := $and.i32($i176, 1073741824);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 0);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i7 := 28;
    assume {:branchcond $i178} true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} ssleep(1);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.0, $p179);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p180, $mul.ref(1044, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $i182 := ioread32($p181);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i183 := $and.i32($i182, 1073741824);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 0);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i7 := 29;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} ssleep(1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := 30;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 30);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 1);
    goto $bb12;

  $bb125:
    assume {:verifier.code 0} true;
    assume $i184 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb6;

  $bb121:
    assume {:verifier.code 0} true;
    assume $i178 == 1;
    goto $bb4;

  $bb117:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb4;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i166 == 1;
    goto $bb4;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i160 == 1;
    goto $bb4;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i154 == 1;
    goto $bb4;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb4;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i142 == 1;
    goto $bb4;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i136 == 1;
    goto $bb4;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb4;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i124 == 1;
    goto $bb4;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb4;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb4;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb4;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb4;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb4;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb4;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb4;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb4;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb4;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb4;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb4;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb4;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb4;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb4;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb4;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb4;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb4;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb4;
}



const ioread32: ref;

axiom ioread32 == $sub.ref(0, 362470);

procedure ioread32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread32($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 684} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 685} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ssleep: ref;

axiom ssleep == $sub.ref(0, 363502);

procedure ssleep($i0: i32);
  free requires assertsPassed;



implementation ssleep($i0: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} {:cexpr "ssleep:arg:seconds"} boogie_si_record_i32($i0);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i1 := $mul.i32($i0, 1000);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} msleep($i1);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 364534);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    return;
}



const amap_mask: ref;

axiom amap_mask == $sub.ref(0, 365566);

procedure amap_mask($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation amap_mask($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} {:cexpr "amap_mask:arg:bitsize"} boogie_si_record_i32($i0);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 32);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32(1, $i0);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i4 := $i3;
    goto $bb3;
}



const amap_set: ref;

axiom amap_set == $sub.ref(0, 366598);

procedure amap_set($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation amap_set($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32)
{
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} {:cexpr "amap_set:arg:dw_offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 691} {:cexpr "amap_set:arg:mask"} boogie_si_record_i32($i2);
    call {:si_unique_call 692} {:cexpr "amap_set:arg:offset"} boogie_si_record_i32($i3);
    call {:si_unique_call 693} {:cexpr "amap_set:arg:value"} boogie_si_record_i32($i4);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i1);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p5, $mul.ref($i6, 4));
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i2, $i3);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i10 := $xor.i32($i9, $sub.i32(0, 1));
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i8, $i10);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i11);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p7);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i2, $i4);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i14 := $shl.i32($i13, $i3);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i12, $i14);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i15);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 367630);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 368662);

procedure constant_test_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i32($i0);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i2 := $udiv.i32($i0, 64);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p1, $mul.ref($i3, 8));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i0, 63);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i5, $i7);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const be_probe: ref;

axiom be_probe == $sub.ref(0, 369694);

procedure be_probe($p0: ref, $p1: ref) returns ($r: i32);



const be_remove: ref;

axiom be_remove == $sub.ref(0, 370726);

procedure be_remove($p0: ref);



const be_suspend: ref;

axiom be_suspend == $sub.ref(0, 371758);

procedure be_suspend($p0: ref, $i1: i32) returns ($r: i32);



const be_resume: ref;

axiom be_resume == $sub.ref(0, 372790);

procedure be_resume($p0: ref) returns ($r: i32);



const be_shutdown: ref;

axiom be_shutdown == $sub.ref(0, 373822);

procedure be_shutdown($p0: ref);



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 374854);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);



const cancel_delayed_work_sync: ref;

axiom cancel_delayed_work_sync == $sub.ref(0, 375886);

procedure cancel_delayed_work_sync($p0: ref) returns ($r: i1);



const netif_device_detach: ref;

axiom netif_device_detach == $sub.ref(0, 376918);

procedure netif_device_detach($p0: ref);



const be_cmd_reset_function: ref;

axiom be_cmd_reset_function == $sub.ref(0, 377950);

procedure be_cmd_reset_function($p0: ref) returns ($r: i32);



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 378982);

procedure pci_disable_device($p0: ref);



const lancer_wait_ready: ref;

axiom lancer_wait_ready == $sub.ref(0, 380014);

procedure lancer_wait_ready($p0: ref) returns ($r: i32);



const lancer_test_and_set_rdy_state: ref;

axiom lancer_test_and_set_rdy_state == $sub.ref(0, 381046);

procedure lancer_test_and_set_rdy_state($p0: ref) returns ($r: i32);



const ldv_mutex_lock_interruptible_32: ref;

axiom ldv_mutex_lock_interruptible_32 == $sub.ref(0, 382078);

procedure ldv_mutex_lock_interruptible_32($p0: ref) returns ($r: i32);



const wrb_from_mbox: ref;

axiom wrb_from_mbox == $sub.ref(0, 383110);

procedure wrb_from_mbox($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation wrb_from_mbox($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var cmdloc_dummy_var_249: [ref]i8;
  var cmdloc_dummy_var_250: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_249 := $M.0;
    call {:si_unique_call 695} cmdloc_dummy_var_250 := $memset.i8(cmdloc_dummy_var_249, $p6, 0, 256, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_250;
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const be_mbox_notify_wait: ref;

axiom be_mbox_notify_wait == $sub.ref(0, 384142);

procedure be_mbox_notify_wait($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $CurrAddr;



implementation be_mbox_notify_wait($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i8;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i11: i32;
  var vslice_dummy_var_332: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(352, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(256, 1));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i9 := be_mbox_db_ready_wait($p0, $p3);
    call {:si_unique_call 697} {:cexpr "status"} boogie_si_record_i32($i9);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $or.i32(0, 2);
    call {:si_unique_call 698} {:cexpr "val"} boogie_si_record_i32($i12);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(200, 1)), $mul.ref(8, 1));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i64($i14, 32);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, $sub.i32(0, 4));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, $i12);
    call {:si_unique_call 699} {:cexpr "val"} boogie_si_record_i32($i18);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} iowrite32($i18, $p3);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i19 := be_mbox_db_ready_wait($p0, $p3);
    call {:si_unique_call 702} {:cexpr "status"} boogie_si_record_i32($i19);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(200, 1)), $mul.ref(8, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i23 := $lshr.i64($i22, 4);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32($i24, 2);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, 0);
    call {:si_unique_call 703} {:cexpr "val"} boogie_si_record_i32($i26);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} iowrite32($i26, $p3);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i27 := be_mbox_db_ready_wait($p0, $p3);
    call {:si_unique_call 706} {:cexpr "status"} boogie_si_record_i32($i27);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i29 := be_mcc_compl_is_new($p8);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i8($i29);
    call {:si_unique_call 708} {:cexpr "tmp"} boogie_si_record_i8($i30);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} vslice_dummy_var_332 := dev_err.ref.ref($p37, .str.166);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(256, 1));
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i33 := be_mcc_compl_process($p0, $p32);
    call {:si_unique_call 710} {:cexpr "status"} boogie_si_record_i32($i33);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} be_mcc_compl_use($p8);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i11 := $i33;
    goto $bb3;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i11 := $i27;
    goto $bb3;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i11 := $i19;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;
}



const ldv_mutex_unlock_33: ref;

axiom ldv_mutex_unlock_33 == $sub.ref(0, 385174);

procedure ldv_mutex_unlock_33($p0: ref);



const ldv_mutex_unlock_mbox_lock_of_be_adapter: ref;

axiom ldv_mutex_unlock_mbox_lock_of_be_adapter == $sub.ref(0, 386206);

procedure ldv_mutex_unlock_mbox_lock_of_be_adapter($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_mbox_lock_of_be_adapter($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i1 := $M.25;
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 714} {:cexpr "ldv_mutex_mbox_lock_of_be_adapter"} boogie_si_record_i32(1);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 387238);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 388270);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 715} __VERIFIER_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const be_mbox_db_ready_wait: ref;

axiom be_mbox_db_ready_wait == $sub.ref(0, 389302);

procedure be_mbox_db_ready_wait($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $CurrAddr;



implementation be_mbox_db_ready_wait($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i8;
  var $i20: i1;
  var $i6: i32;
  var vslice_dummy_var_333: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $i2 := be_error($p0);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 717} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i5, $i7, $i8, $i9, $i10, $i11, $i17, $i18, $i19, $i20 := be_mbox_db_ready_wait_loop_$bb4($p0, $p1, $i5, $i7, $i8, $i9, $i10, $i11, $i17, $i18, $i19, $i20);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i7 := ioread32($p1);
    call {:si_unique_call 719} {:cexpr "ready"} boogie_si_record_i32($i7);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $sub.i32(0, 1));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i7, 1);
    call {:si_unique_call 720} {:cexpr "ready"} boogie_si_record_i32($i9);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i5, 4000);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} msleep(1);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i5, 1);
    call {:si_unique_call 724} {:cexpr "msecs"} boogie_si_record_i32($i17);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i18 := be_error($p0);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 726} {:cexpr "tmp"} boogie_si_record_i8($i19);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb18;

  $bb18:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i17;
    goto $bb18_dummy;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 5);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb15:
    assume $i11 == 1;
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} vslice_dummy_var_333 := dev_err.ref.ref($p14, .str.167);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364013, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 1);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} be_detect_error($p0);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb6;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const be_detect_error: ref;

axiom be_detect_error == $sub.ref(0, 390334);

procedure be_detect_error($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.0, $CurrAddr;



implementation be_detect_error($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i81: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i101: i32;
  var vslice_dummy_var_334: i32;
  var vslice_dummy_var_335: i32;
  var vslice_dummy_var_336: i32;
  var vslice_dummy_var_337: i32;
  var vslice_dummy_var_338: i32;
  var vslice_dummy_var_339: i32;
  var vslice_dummy_var_340: i32;
  var vslice_dummy_var_341: i32;
  var vslice_dummy_var_342: i32;
  var vslice_dummy_var_343: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p1, 0);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p2, 0);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p3, 0);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p4, 0);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $i5 := be_hw_error($p0);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 732} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 57888);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 57896);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} vslice_dummy_var_334 := pci_read_config_dword($p39, 160, $p1);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} vslice_dummy_var_335 := pci_read_config_dword($p42, 164, $p2);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} vslice_dummy_var_336 := pci_read_config_dword($p45, 168, $p3);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} vslice_dummy_var_337 := pci_read_config_dword($p48, 172, $p4);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.26, $p3);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i51 := $xor.i32($i50, $sub.i32(0, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.26, $p1);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i51, $i52);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p1, $i53);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.26, $p4);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i55 := $xor.i32($i54, $sub.i32(0, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.26, $p2);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i55, $i56);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p2, $i57);
    assume {:verifier.code 0} true;
    $i35, $i36, $i37 := 0, 0, 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i37, 0);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i37, 0);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.26, $p1);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.26, $p2);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i98 == 1;
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.26, $p2);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb36:
    assume $i100 == 1;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i101 := 0;
    goto $bb39;

  $bb39:
    call $i102, $i103, $i104, $p105, $p106, $p107, $i108, $p109, $p110, $i112, $i113, $i114, $i115, $i116, $i101, vslice_dummy_var_343 := be_detect_error_loop_$bb39($p0, $p2, $i102, $i103, $i104, $p105, $p106, $p107, $i108, $p109, $p110, $i112, $i113, $i114, $i115, $i116, $i101, vslice_dummy_var_343);
    goto $bb39_last;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.26, $p2);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 1);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.26, $p2);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i113 := $lshr.i32($i112, 1);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p2, $i113);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i101, 1);
    call {:si_unique_call 750} {:cexpr "i"} boogie_si_record_i32($i114);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.26, $p2);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i116 == 1);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb44:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $i101 := $i114;
    goto $bb44_dummy;

  $bb41:
    assume $i104 == 1;
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i108 := $zext.i32.i64($i101);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref($i108, 8));
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.28, $p109);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} vslice_dummy_var_343 := dev_err.ref.ref.ref($p107, .str.5, $p110);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb20:
    assume $i78 == 1;
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.26, $p1);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb22:
    assume $i80 == 1;
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i81 := 0;
    goto $bb25;

  $bb25:
    call $i82, $i83, $i84, $p85, $p86, $p87, $i88, $p89, $p90, $i92, $i93, $i94, $i95, $i96, $i81, vslice_dummy_var_342 := be_detect_error_loop_$bb25($p0, $p1, $i82, $i83, $i84, $p85, $p86, $p87, $i88, $p89, $p90, $i92, $i93, $i94, $i95, $i96, $i81, vslice_dummy_var_342);
    goto $bb25_last;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.26, $p1);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 1);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.26, $p1);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i93 := $lshr.i32($i92, 1);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p1, $i93);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i81, 1);
    call {:si_unique_call 748} {:cexpr "i"} boogie_si_record_i32($i94);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.26, $p1);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i96 == 1);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb30:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i81 := $i94;
    goto $bb30_dummy;

  $bb27:
    assume $i84 == 1;
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i81);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref($i88, 8));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.27, $p89);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} vslice_dummy_var_342 := dev_err.ref.ref.ref($p87, .str.5, $p90);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb17:
    assume $i64 == 1;
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} vslice_dummy_var_339 := dev_err.ref.ref.i32($p67, .str.2, $i37);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_340 := dev_err.ref.ref.i32($p71, .str.3, $i36);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} vslice_dummy_var_341 := dev_err.ref.ref.i32($p75, .str.4, $i35);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i58 == 1;
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364014, 1));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, 1);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} vslice_dummy_var_338 := dev_err.ref.ref($p62, .str.1);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(1028, 1));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i23 := ioread32($p22);
    call {:si_unique_call 734} {:cexpr "sliport_status"} boogie_si_record_i32($i23);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i33, $i34 := 0, 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i35, $i36, $i37 := $i33, $i34, $i23;
    goto $bb13;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(1036, 1));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i28 := ioread32($p27);
    call {:si_unique_call 740} {:cexpr "sliport_err1"} boogie_si_record_i32($i28);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(24, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(1040, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i32 := ioread32($p31);
    call {:si_unique_call 742} {:cexpr "sliport_err2"} boogie_si_record_i32($i32);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i32, $i28;
    goto $bb12;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb44_dummy:
    assume false;
    return;

  $bb39_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5460;

  $bb30_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5427;
}



const be_hw_error: ref;

axiom be_hw_error == $sub.ref(0, 391366);

procedure be_hw_error($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation be_hw_error($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364012, 1));
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364014, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i4 := $i7;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const pci_read_config_dword: ref;

axiom pci_read_config_dword == $sub.ref(0, 392398);

procedure pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} {:cexpr "pci_read_config_dword:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i7 := pci_bus_read_config_dword($p4, $i6, $i1, $p2);
    call {:si_unique_call 753} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_bus_read_config_dword: ref;

axiom pci_bus_read_config_dword == $sub.ref(0, 393430);

procedure pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 754} {:cexpr "pci_bus_read_config_dword:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 755} {:cexpr "pci_bus_read_config_dword:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 1} true;
    call {:si_unique_call 756} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 757} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const mutex_lock_interruptible: ref;

axiom mutex_lock_interruptible == $sub.ref(0, 394462);

procedure mutex_lock_interruptible($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 1} true;
    call {:si_unique_call 758} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 759} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter: ref;

axiom ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter == $sub.ref(0, 395494);

procedure ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i1 := $M.25;
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} ldv_error();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 761} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 762} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 763} {:cexpr "nondetermined"} boogie_si_record_i32($i3);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 4);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 764} {:cexpr "ldv_mutex_mbox_lock_of_be_adapter"} boogie_si_record_i32(2);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const lancer_provisioning_error: ref;

axiom lancer_provisioning_error == $sub.ref(0, 396526);

procedure lancer_provisioning_error($p0: ref) returns ($r: i1);



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 397558);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 398590);

procedure external_alloc() returns ($r: ref);



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 399622);

procedure pci_enable_device($p0: ref) returns ($r: i32);



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 400654);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 401686);

procedure pci_restore_state($p0: ref);



const be_cmd_fw_init: ref;

axiom be_cmd_fw_init == $sub.ref(0, 402718);

procedure be_cmd_fw_init($p0: ref) returns ($r: i32);



const be_setup: ref;

axiom be_setup == $sub.ref(0, 403750);

procedure be_setup($p0: ref) returns ($r: i32);



const rtnl_lock: ref;

axiom rtnl_lock == $sub.ref(0, 404782);

procedure rtnl_lock();



const be_open: ref;

axiom be_open == $sub.ref(0, 405814);

procedure be_open($p0: ref) returns ($r: i32);



const rtnl_unlock: ref;

axiom rtnl_unlock == $sub.ref(0, 406846);

procedure rtnl_unlock();



const schedule_delayed_work: ref;

axiom schedule_delayed_work == $sub.ref(0, 407878);

procedure schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1);



const netif_device_attach: ref;

axiom netif_device_attach == $sub.ref(0, 408910);

procedure netif_device_attach($p0: ref);



const be_setup_wol: ref;

axiom be_setup_wol == $sub.ref(0, 409942);

procedure be_setup_wol($p0: ref, $i1: i1) returns ($r: i32);



const pci_write_config_dword: ref;

axiom pci_write_config_dword == $sub.ref(0, 410974);

procedure pci_write_config_dword($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const be_cmd_enable_magic_wol: ref;

axiom be_cmd_enable_magic_wol == $sub.ref(0, 412006);

procedure be_cmd_enable_magic_wol($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const pci_enable_wake: ref;

axiom pci_enable_wake == $sub.ref(0, 413038);

procedure pci_enable_wake($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);



const __pci_enable_wake: ref;

axiom __pci_enable_wake == $sub.ref(0, 414070);

procedure __pci_enable_wake($p0: ref, $i1: i32, $i2: i1, $i3: i1) returns ($r: i32);



const pci_bus_write_config_dword: ref;

axiom pci_bus_write_config_dword == $sub.ref(0, 415102);

procedure pci_bus_write_config_dword($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 416134);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 417166);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);



const be_rx_qs_create: ref;

axiom be_rx_qs_create == $sub.ref(0, 418198);

procedure be_rx_qs_create($p0: ref) returns ($r: i32);



const be_irq_register: ref;

axiom be_irq_register == $sub.ref(0, 419230);

procedure be_irq_register($p0: ref) returns ($r: i32);



const be_async_mcc_enable: ref;

axiom be_async_mcc_enable == $sub.ref(0, 420262);

procedure be_async_mcc_enable($p0: ref);



const napi_enable: ref;

axiom napi_enable == $sub.ref(0, 421294);

procedure napi_enable($p0: ref);



const be_eq_notify: ref;

axiom be_eq_notify == $sub.ref(0, 422326);

procedure be_eq_notify($p0: ref, $i1: i16, $i2: i1, $i3: i1, $i4: i16);



const be_cmd_link_status_query: ref;

axiom be_cmd_link_status_query == $sub.ref(0, 423358);

procedure be_cmd_link_status_query($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.21, $M.1, $CurrAddr;



implementation be_cmd_link_status_query($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i8;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $i45: i16;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i16;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i8;
  var $i10: i32;
  var $p59: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} {:cexpr "be_cmd_link_status_query:arg:dom"} boogie_si_record_i32($i3);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} spin_lock_bh($p4);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $p7 := wrb_from_mccq($p0);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $p11 := embedded_payload($p7);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} be_wrb_cmd_hdr_prepare($p13, 1, 5, 20, $p7, $0.ref);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 529);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i3);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i28);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i31 := be_mcc_notify_wait($p0);
    call {:si_unique_call 772} {:cexpr "status"} boogie_si_record_i32($i31);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i10 := $i31;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} spin_unlock_bh($p59);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p33 := embedded_payload($p7);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p1);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p2);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i56 == 1;
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p34, $mul.ref(0, 28)), $mul.ref(24, 1));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p2, $i58);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb16:
    assume $i36 == 1;
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p34, $mul.ref(0, 28)), $mul.ref(22, 1));
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i40 == 1);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p34, $mul.ref(0, 28)), $mul.ref(18, 1));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i49 := be_mac_to_link_speed($i48);
    call {:si_unique_call 775} {:cexpr "tmp___1"} boogie_si_record_i32($i49);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1, $i50);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p34, $mul.ref(0, 28)), $mul.ref(24, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i54 == 1;
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1, 0);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p34, $mul.ref(0, 28)), $mul.ref(22, 1));
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i44 := $mul.i32($i43, 10);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1, $i45);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 1792);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb10;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 1);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p2, 0);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_tx_start_all_queues: ref;

axiom netif_tx_start_all_queues == $sub.ref(0, 424390);

procedure netif_tx_start_all_queues($p0: ref);



const be_roce_dev_open: ref;

axiom be_roce_dev_open == $sub.ref(0, 425422);

procedure be_roce_dev_open($p0: ref);



const be_close: ref;

axiom be_close == $sub.ref(0, 426454);

procedure be_close($p0: ref) returns ($r: i32);



const be_roce_dev_close: ref;

axiom be_roce_dev_close == $sub.ref(0, 427486);

procedure be_roce_dev_close($p0: ref);



const napi_disable: ref;

axiom napi_disable == $sub.ref(0, 428518);

procedure napi_disable($p0: ref);



const be_async_mcc_disable: ref;

axiom be_async_mcc_disable == $sub.ref(0, 429550);

procedure be_async_mcc_disable($p0: ref);



const be_tx_compl_clean: ref;

axiom be_tx_compl_clean == $sub.ref(0, 430582);

procedure be_tx_compl_clean($p0: ref);



const netif_tx_disable: ref;

axiom netif_tx_disable == $sub.ref(0, 431614);

procedure netif_tx_disable($p0: ref);



const be_rx_qs_destroy: ref;

axiom be_rx_qs_destroy == $sub.ref(0, 432646);

procedure be_rx_qs_destroy($p0: ref);



const be_msix_vec_get: ref;

axiom be_msix_vec_get == $sub.ref(0, 433678);

procedure be_msix_vec_get($p0: ref, $p1: ref) returns ($r: i32);



const synchronize_irq: ref;

axiom synchronize_irq == $sub.ref(0, 434710);

procedure synchronize_irq($i0: i32);



const be_eq_clean: ref;

axiom be_eq_clean == $sub.ref(0, 435742);

procedure be_eq_clean($p0: ref);



const be_irq_unregister: ref;

axiom be_irq_unregister == $sub.ref(0, 436774);

procedure be_irq_unregister($p0: ref);



const free_irq: ref;

axiom free_irq == $sub.ref(0, 437806);

procedure free_irq($i0: i32, $p1: ref);



const events_get: ref;

axiom events_get == $sub.ref(0, 438838);

procedure events_get($p0: ref) returns ($r: i32);



const queue_tail_inc: ref;

axiom queue_tail_inc == $sub.ref(0, 439870);

procedure queue_tail_inc($p0: ref);



const index_inc: ref;

axiom index_inc == $sub.ref(0, 440902);

procedure index_inc($p0: ref, $i1: i16);



const MODULO: ref;

axiom MODULO == $sub.ref(0, 441934);

procedure MODULO($i0: i16, $i1: i16) returns ($r: i32);



const be_cmd_rxq_destroy: ref;

axiom be_cmd_rxq_destroy == $sub.ref(0, 442966);

procedure be_cmd_rxq_destroy($p0: ref, $p1: ref) returns ($r: i32);



const be_rx_cq_clean: ref;

axiom be_rx_cq_clean == $sub.ref(0, 443998);

procedure be_rx_cq_clean($p0: ref);



const be_queue_free: ref;

axiom be_queue_free == $sub.ref(0, 445030);

procedure be_queue_free($p0: ref, $p1: ref);



const be_rx_compl_get: ref;

axiom be_rx_compl_get == $sub.ref(0, 446062);

procedure be_rx_compl_get($p0: ref) returns ($r: ref);



const be_rx_compl_discard: ref;

axiom be_rx_compl_discard == $sub.ref(0, 447094);

procedure be_rx_compl_discard($p0: ref, $p1: ref);



const get_rx_page_info: ref;

axiom get_rx_page_info == $sub.ref(0, 448126);

procedure get_rx_page_info($p0: ref, $i1: i16) returns ($r: ref);



const put_page: ref;

axiom put_page == $sub.ref(0, 449158);

procedure put_page($p0: ref);



const dma_unmap_page: ref;

axiom dma_unmap_page == $sub.ref(0, 450190);

procedure dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32);



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 451222);

procedure valid_dma_direction($i0: i32) returns ($r: i32);



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 452254);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);



const be_parse_rx_compl_v1: ref;

axiom be_parse_rx_compl_v1 == $sub.ref(0, 453286);

procedure be_parse_rx_compl_v1($p0: ref, $p1: ref);



const be_parse_rx_compl_v0: ref;

axiom be_parse_rx_compl_v0 == $sub.ref(0, 454318);

procedure be_parse_rx_compl_v0($p0: ref, $p1: ref);



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 455350);

procedure __fswab16($i0: i16) returns ($r: i16);



const amap_get: ref;

axiom amap_get == $sub.ref(0, 456382);

procedure amap_get($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 457414);

procedure __bad_size_call_parameter();



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 458446);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);



const __netif_tx_lock: ref;

axiom __netif_tx_lock == $sub.ref(0, 459478);

procedure __netif_tx_lock($p0: ref, $i1: i32);



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 460510);

procedure netif_tx_stop_queue($p0: ref);



const __netif_tx_unlock: ref;

axiom __netif_tx_unlock == $sub.ref(0, 461542);

procedure __netif_tx_unlock($p0: ref);



const printk: ref;

axiom printk == $sub.ref(0, 462574);

procedure printk.ref($p0: ref) returns ($r: i32);



const set_bit: ref;

axiom set_bit == $sub.ref(0, 463606);

procedure set_bit($i0: i32, $p1: ref);



const be_tx_compl_process: ref;

axiom be_tx_compl_process == $sub.ref(0, 464638);

procedure be_tx_compl_process($p0: ref, $p1: ref, $i2: i16) returns ($r: i16);



const be_tx_compl_get: ref;

axiom be_tx_compl_get == $sub.ref(0, 465670);

procedure be_tx_compl_get($p0: ref) returns ($r: ref);



const atomic_sub: ref;

axiom atomic_sub == $sub.ref(0, 466702);

procedure atomic_sub($i0: i32, $p1: ref);



const wrb_cnt_for_skb: ref;

axiom wrb_cnt_for_skb == $sub.ref(0, 467734);

procedure wrb_cnt_for_skb($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const index_adv: ref;

axiom index_adv == $sub.ref(0, 468766);

procedure index_adv($p0: ref, $i1: i16, $i2: i16);



const skb_end_pointer: ref;

axiom skb_end_pointer == $sub.ref(0, 469798);

procedure skb_end_pointer($p0: ref) returns ($r: ref);



const skb_headlen: ref;

axiom skb_headlen == $sub.ref(0, 470830);

procedure skb_headlen($p0: ref) returns ($r: i32);



const unmap_tx_frag: ref;

axiom unmap_tx_frag == $sub.ref(0, 471862);

procedure unmap_tx_frag($p0: ref, $p1: ref, $i2: i1);



const kfree_skb: ref;

axiom kfree_skb == $sub.ref(0, 472894);

procedure kfree_skb($p0: ref);



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 473926);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 474958);

procedure test_and_set_bit($i0: i32, $p1: ref) returns ($r: i32);



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 475990);

procedure clear_bit($i0: i32, $p1: ref);



const ldv_mutex_lock_110: ref;

axiom ldv_mutex_lock_110 == $sub.ref(0, 477022);

procedure ldv_mutex_lock_110($p0: ref);



const _be_roce_dev_close: ref;

axiom _be_roce_dev_close == $sub.ref(0, 478054);

procedure _be_roce_dev_close($p0: ref);



const ldv_mutex_unlock_111: ref;

axiom ldv_mutex_unlock_111 == $sub.ref(0, 479086);

procedure ldv_mutex_unlock_111($p0: ref);



const ldv_mutex_unlock_be_adapter_list_lock: ref;

axiom ldv_mutex_unlock_be_adapter_list_lock == $sub.ref(0, 480118);

procedure ldv_mutex_unlock_be_adapter_list_lock($p0: ref);



const ldv_mutex_lock_be_adapter_list_lock: ref;

axiom ldv_mutex_lock_be_adapter_list_lock == $sub.ref(0, 481150);

procedure ldv_mutex_lock_be_adapter_list_lock($p0: ref);



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 482182);

procedure mutex_lock($p0: ref);



const ldv_mutex_lock_108: ref;

axiom ldv_mutex_lock_108 == $sub.ref(0, 483214);

procedure ldv_mutex_lock_108($p0: ref);



const _be_roce_dev_open: ref;

axiom _be_roce_dev_open == $sub.ref(0, 484246);

procedure _be_roce_dev_open($p0: ref);



const ldv_mutex_unlock_109: ref;

axiom ldv_mutex_unlock_109 == $sub.ref(0, 485278);

procedure ldv_mutex_unlock_109($p0: ref);



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 486310);

procedure netif_tx_start_queue($p0: ref);



const be_mac_to_link_speed: ref;

axiom be_mac_to_link_speed == $sub.ref(0, 487342);

procedure be_mac_to_link_speed($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation be_mac_to_link_speed($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    call {:si_unique_call 776} {:cexpr "be_mac_to_link_speed:arg:mac_speed"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i4 == 1;
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i7 := 10000;
    goto $bb15;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i7 := 1000;
    goto $bb15;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i7 := 100;
    goto $bb15;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i7 := 10;
    goto $bb15;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb15;
}



const be_msix_register: ref;

axiom be_msix_register == $sub.ref(0, 488374);

procedure be_msix_register($p0: ref) returns ($r: i32);



const be_intx: ref;

axiom be_intx == $sub.ref(0, 489406);

procedure be_intx($i0: i32, $p1: ref) returns ($r: i32);



const request_irq: ref;

axiom request_irq == $sub.ref(0, 490438);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 491470);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);



const napi_schedule_prep: ref;

axiom napi_schedule_prep == $sub.ref(0, 492502);

procedure napi_schedule_prep($p0: ref) returns ($r: i1);



const __napi_schedule: ref;

axiom __napi_schedule == $sub.ref(0, 493534);

procedure __napi_schedule($p0: ref);



const napi_disable_pending: ref;

axiom napi_disable_pending == $sub.ref(0, 494566);

procedure napi_disable_pending($p0: ref) returns ($r: i1);



const sprintf: ref;

axiom sprintf == $sub.ref(0, 495598);

procedure sprintf.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref) returns ($r: i32);



procedure sprintf.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);



const be_msix: ref;

axiom be_msix == $sub.ref(0, 496630);

procedure be_msix($i0: i32, $p1: ref) returns ($r: i32);



const be_msix_disable: ref;

axiom be_msix_disable == $sub.ref(0, 497662);

procedure be_msix_disable($p0: ref);



const pci_disable_msix: ref;

axiom pci_disable_msix == $sub.ref(0, 498694);

procedure pci_disable_msix($p0: ref);



const napi_schedule: ref;

axiom napi_schedule == $sub.ref(0, 499726);

procedure napi_schedule($p0: ref);



const be_queue_alloc: ref;

axiom be_queue_alloc == $sub.ref(0, 500758);

procedure be_queue_alloc($p0: ref, $p1: ref, $i2: i16, $i3: i16) returns ($r: i32);



const be_cmd_rxq_create: ref;

axiom be_cmd_rxq_create == $sub.ref(0, 501790);

procedure be_cmd_rxq_create($p0: ref, $p1: ref, $i2: i16, $i3: i16, $i4: i32, $i5: i32, $p6: ref) returns ($r: i32);



const be_multi_rxq: ref;

axiom be_multi_rxq == $sub.ref(0, 502822);

procedure be_multi_rxq($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation be_multi_rxq($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 1);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const be_cmd_rss_config: ref;

axiom be_cmd_rss_config == $sub.ref(0, 503854);

procedure be_cmd_rss_config($p0: ref, $p1: ref, $i2: i32, $i3: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $CurrAddr, assertsPassed, $M.26;



implementation be_cmd_rss_config($p0: ref, $p1: ref, $i2: i32, $i3: i16) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i16;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i16;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i18: i32;
  var cmdloc_dummy_var_251: [ref]i8;
  var cmdloc_dummy_var_252: [ref]i8;
  var cmdloc_dummy_var_253: [ref]i8;
  var cmdloc_dummy_var_254: [ref]i8;
  var cmdloc_dummy_var_255: [ref]i8;
  var cmdloc_dummy_var_256: [ref]i8;
  var cmdloc_dummy_var_257: [ref]i8;
  var cmdloc_dummy_var_258: [ref]i8;
  var cmdloc_dummy_var_259: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 778} {:cexpr "be_cmd_rss_config:arg:rss_hash_opts"} boogie_si_record_i32($i2);
    call {:si_unique_call 779} {:cexpr "be_cmd_rss_config:arg:table_size"} boogie_si_record_i16($i3);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 4));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 366231461);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(1, 4));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 624191578);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(2, 4));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1602709818);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(3, 4));
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 1449675086);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(4, 4));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 869231187);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(5, 4));
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 942879942);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(6, 4));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 1991000663);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(7, 4));
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 1504854706);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 4));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 1051212802);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(9, 4));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 1242628868);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i16 := ldv_mutex_lock_interruptible_34($p15);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 781} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $p19 := wrb_from_mbox($p0);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p20 := embedded_payload($p19);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(0, 1));
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} be_wrb_cmd_hdr_prepare($p22, 3, 1, 196, $p19, $0.ref);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363992, 1));
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(16, 1));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i2);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(20, 1));
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $i26);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i3);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i29 := fls($i28);
    call {:si_unique_call 786} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i31, 1);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(22, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p34, $i33);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 57888);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i40 == 1);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 57896);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i46 == 1);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.0, $p49);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1824);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i52 == 1);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p55);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 1832);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i64($i3);
    call {:si_unique_call 787} {:cexpr "__len"} boogie_si_record_i64($i61);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(64, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_251 := $M.0;
    cmdloc_dummy_var_252 := $M.0;
    call {:si_unique_call 788} cmdloc_dummy_var_253 := $memcpy.i8(cmdloc_dummy_var_251, cmdloc_dummy_var_252, $p63, $p1, $i61, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_253;
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i64 := $ugt.i64(40, 63);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i64 == 1);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(24, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p4);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_257 := $M.0;
    cmdloc_dummy_var_258 := $M.0;
    call {:si_unique_call 790} cmdloc_dummy_var_259 := $memcpy.i8(cmdloc_dummy_var_257, cmdloc_dummy_var_258, $p69, $p70, 40, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_259;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(24, 1));
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} swap_dws($p72, 40);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i73 := be_mbox_notify_wait($p0);
    call {:si_unique_call 793} {:cexpr "status"} boogie_si_record_i32($i73);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} ldv_mutex_unlock_35($p74);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i18 := $i73;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i64 == 1;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(24, 1));
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p4);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_254 := $M.0;
    cmdloc_dummy_var_255 := $M.0;
    call {:si_unique_call 789} cmdloc_dummy_var_256 := $memcpy.i8(cmdloc_dummy_var_254, cmdloc_dummy_var_255, $p66, $p67, 40, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_256;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 196)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 1);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const be_post_rx_frags: ref;

axiom be_post_rx_frags == $sub.ref(0, 504886);

procedure be_post_rx_frags($p0: ref, $i1: i32);



const be_alloc_pages: ref;

axiom be_alloc_pages == $sub.ref(0, 505918);

procedure be_alloc_pages($i0: i32, $i1: i32) returns ($r: ref);



const dma_map_page: ref;

axiom dma_map_page == $sub.ref(0, 506950);

procedure dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);



const get_page: ref;

axiom get_page == $sub.ref(0, 507982);

procedure get_page($p0: ref);



const queue_head_inc: ref;

axiom queue_head_inc == $sub.ref(0, 509014);

procedure queue_head_inc($p0: ref);



const atomic_add: ref;

axiom atomic_add == $sub.ref(0, 510046);

procedure atomic_add($i0: i32, $p1: ref);



const be_rxq_notify: ref;

axiom be_rxq_notify == $sub.ref(0, 511078);

procedure be_rxq_notify($p0: ref, $i1: i16, $i2: i16);



const PageTail: ref;

axiom PageTail == $sub.ref(0, 512110);

procedure PageTail($p0: ref) returns ($r: i32);



const __get_page_tail: ref;

axiom __get_page_tail == $sub.ref(0, 513142);

procedure __get_page_tail($p0: ref) returns ($r: i1);



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 514174);

procedure lowmem_page_address($p0: ref) returns ($r: ref);



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 515206);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 516238);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);



const __get_order: ref;

axiom __get_order == $sub.ref(0, 517270);

procedure __get_order($i0: i64) returns ($r: i32);



const alloc_pages: ref;

axiom alloc_pages == $sub.ref(0, 518302);

procedure alloc_pages($i0: i32, $i1: i32) returns ($r: ref);



const alloc_pages_current: ref;

axiom alloc_pages_current == $sub.ref(0, 519334);

procedure alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref);



const fls64: ref;

axiom fls64 == $sub.ref(0, 520366);

procedure fls64($i0: i64) returns ($r: i32);



const ldv_mutex_lock_interruptible_34: ref;

axiom ldv_mutex_lock_interruptible_34 == $sub.ref(0, 521398);

procedure ldv_mutex_lock_interruptible_34($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_34($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 796} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 798} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const fls: ref;

axiom fls == $sub.ref(0, 522430);

procedure fls($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fls($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} {:cexpr "fls:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 800} $i1 := devirtbounce.14(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 801} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_unlock_35: ref;

axiom ldv_mutex_unlock_35 == $sub.ref(0, 523462);

procedure ldv_mutex_unlock_35($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_35($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} mutex_unlock($p0);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const be_cmd_page_addrs_prepare: ref;

axiom be_cmd_page_addrs_prepare == $sub.ref(0, 524494);

procedure be_cmd_page_addrs_prepare($p0: ref, $i1: i32, $p2: ref);



const be_setup_init: ref;

axiom be_setup_init == $sub.ref(0, 525526);

procedure be_setup_init($p0: ref);



const be_cmd_req_native_mode: ref;

axiom be_cmd_req_native_mode == $sub.ref(0, 526558);

procedure be_cmd_req_native_mode($p0: ref) returns ($r: i32);



const be_get_config: ref;

axiom be_get_config == $sub.ref(0, 527590);

procedure be_get_config($p0: ref) returns ($r: i32);



const be_msix_enable: ref;

axiom be_msix_enable == $sub.ref(0, 528622);

procedure be_msix_enable($p0: ref) returns ($r: i32);



const be_evt_queues_create: ref;

axiom be_evt_queues_create == $sub.ref(0, 529654);

procedure be_evt_queues_create($p0: ref) returns ($r: i32);



const be_tx_cqs_create: ref;

axiom be_tx_cqs_create == $sub.ref(0, 530686);

procedure be_tx_cqs_create($p0: ref) returns ($r: i32);



const be_rx_cqs_create: ref;

axiom be_rx_cqs_create == $sub.ref(0, 531718);

procedure be_rx_cqs_create($p0: ref) returns ($r: i32);



const be_mcc_queues_create: ref;

axiom be_mcc_queues_create == $sub.ref(0, 532750);

procedure be_mcc_queues_create($p0: ref) returns ($r: i32);



const be_cmd_get_fn_privileges: ref;

axiom be_cmd_get_fn_privileges == $sub.ref(0, 533782);

procedure be_cmd_get_fn_privileges($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const be_is_mc: ref;

axiom be_is_mc == $sub.ref(0, 534814);

procedure be_is_mc($p0: ref) returns ($r: i1);



const be_cmd_if_create: ref;

axiom be_cmd_if_create == $sub.ref(0, 535846);

procedure be_cmd_if_create($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);



const be_get_mac_addr: ref;

axiom be_get_mac_addr == $sub.ref(0, 536878);

procedure be_get_mac_addr($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);



const be_cmd_pmac_add: ref;

axiom be_cmd_pmac_add == $sub.ref(0, 537910);

procedure be_cmd_pmac_add($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 538942);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);



const be_tx_qs_create: ref;

axiom be_tx_qs_create == $sub.ref(0, 539974);

procedure be_tx_qs_create($p0: ref) returns ($r: i32);



const be_cmd_get_fw_ver: ref;

axiom be_cmd_get_fw_ver == $sub.ref(0, 541006);

procedure be_cmd_get_fw_ver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_get_fw_ver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i7: i32;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} spin_lock_bh($p3);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $p4 := wrb_from_mccq($p0);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $p8 := embedded_payload($p4);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} be_wrb_cmd_hdr_prepare($p10, 1, 35, 80, $p4, $0.ref);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i11 := be_mcc_notify_wait($p0);
    call {:si_unique_call 810} {:cexpr "status"} boogie_si_record_i32($i11);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} spin_unlock_bh($p23);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $p13 := embedded_payload($p4);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $p17 := strcpy($p1, $p16);
    assume $isExternal($p17);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p2);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p14, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $p22 := strcpy($p2, $p21);
    assume $isExternal($p22);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const be_vid_config: ref;

axiom be_vid_config == $sub.ref(0, 542038);

procedure be_vid_config($p0: ref) returns ($r: i32);



const be_set_rx_mode: ref;

axiom be_set_rx_mode == $sub.ref(0, 543070);

procedure be_set_rx_mode($p0: ref);



const be_cmd_get_flow_control: ref;

axiom be_cmd_get_flow_control == $sub.ref(0, 544102);

procedure be_cmd_get_flow_control($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_get_flow_control($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i13: i32;
  var $p27: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i3 := be_cmd_allowed($p0, 37, 1);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 815} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} spin_lock_bh($p9);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $p10 := wrb_from_mccq($p0);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $p14 := embedded_payload($p10);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} be_wrb_cmd_hdr_prepare($p16, 1, 37, 20, $p10, $0.ref);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i17 := be_mcc_notify_wait($p0);
    call {:si_unique_call 822} {:cexpr "status"} boogie_si_record_i32($i17);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i13 := $i17;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} spin_unlock_bh($p27);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $p19 := embedded_payload($p10);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i23);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p20, $mul.ref(0, 20)), $mul.ref(18, 1));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i26);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 16);
    goto $bb10;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const be_cmd_set_flow_control: ref;

axiom be_cmd_set_flow_control == $sub.ref(0, 545134);

procedure be_cmd_set_flow_control($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_set_flow_control($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $p18: ref;
  var $i19: i16;
  var $p20: ref;
  var $i21: i32;
  var $i13: i32;
  var $p22: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} {:cexpr "be_cmd_set_flow_control:arg:tx_fc"} boogie_si_record_i32($i1);
    call {:si_unique_call 825} {:cexpr "be_cmd_set_flow_control:arg:rx_fc"} boogie_si_record_i32($i2);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $i3 := be_cmd_allowed($p0, 36, 1);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 827} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} spin_lock_bh($p9);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p10 := wrb_from_mccq($p0);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p14 := embedded_payload($p10);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} be_wrb_cmd_hdr_prepare($p16, 1, 36, 20, $p10, $0.ref);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i1);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, $i17);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i2);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(0, 20)), $mul.ref(18, 1));
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $i19);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i21 := be_mcc_notify_wait($p0);
    call {:si_unique_call 834} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $i13 := $i21;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} spin_unlock_bh($p22);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 16);
    goto $bb10;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const be_vf_setup: ref;

axiom be_vf_setup == $sub.ref(0, 546166);

procedure be_vf_setup($p0: ref) returns ($r: i32);



const be_cmd_get_phy_info: ref;

axiom be_cmd_get_phy_info == $sub.ref(0, 547198);

procedure be_cmd_get_phy_info($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.21, $CurrAddr;



implementation be_cmd_get_phy_info($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i41: i16;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $p47: ref;
  var $p48: ref;
  var $i49: i16;
  var $p51: ref;
  var $p52: ref;
  var $i53: i16;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i12: i32;
  var $p69: ref;
  var $i7: i32;
  var vslice_dummy_var_344: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p1 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $i2 := be_cmd_allowed($p0, 102, 1);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 837} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} spin_lock_bh($p8);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $p9 := wrb_from_mccq($p0);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p13, 40);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.41, $p16);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $p20 := pci_alloc_consistent($p15, $i18, $p19);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p21, $p20);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.41, $p22);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.41, $p30);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} be_wrb_cmd_hdr_prepare($p33, 1, 102, 40, $p9, $p1);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $i34 := be_mcc_notify_wait($p0);
    call {:si_unique_call 845} {:cexpr "status"} boogie_si_record_i32($i34);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.41, $p62);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i64 := $zext.i32.i64($i63);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.41, $p65);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.41, $p67);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} pci_free_consistent($p61, $i64, $p66, $i68);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i12 := $i34;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} spin_unlock_bh($p69);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb15:
    assume $i35 == 1;
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.41, $p36);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p38, $mul.ref(16, 24)), $mul.ref(0, 1));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(4, 1));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, $i41);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p38, $mul.ref(16, 24)), $mul.ref(2, 1));
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(6, 1));
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, $i45);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p38, $mul.ref(16, 24)), $mul.ref(12, 1));
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.0, $p48);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(12, 1));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p51, $i49);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p38, $mul.ref(16, 24)), $mul.ref(14, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(14, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p55, $i53);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p38, $mul.ref(16, 24)), $mul.ref(4, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(8, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i57);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} vslice_dummy_var_344 := dev_err.ref.ref($p28, .str.18);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb10;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb10;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const be_pause_supported: ref;

axiom be_pause_supported == $sub.ref(0, 548230);

procedure be_pause_supported($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation be_pause_supported($p0: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(6, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 3);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364236, 1)), $mul.ref(6, 1));
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 1);
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;
}



const be_clear: ref;

axiom be_clear == $sub.ref(0, 549262);

procedure be_clear($p0: ref) returns ($r: i32);



const be_vf_clear: ref;

axiom be_vf_clear == $sub.ref(0, 550294);

procedure be_vf_clear($p0: ref);



const be_cmd_pmac_del: ref;

axiom be_cmd_pmac_del == $sub.ref(0, 551326);

procedure be_cmd_pmac_del($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);



const be_cmd_if_destroy: ref;

axiom be_cmd_if_destroy == $sub.ref(0, 552358);

procedure be_cmd_if_destroy($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const be_mcc_queues_destroy: ref;

axiom be_mcc_queues_destroy == $sub.ref(0, 553390);

procedure be_mcc_queues_destroy($p0: ref);



const be_rx_cqs_destroy: ref;

axiom be_rx_cqs_destroy == $sub.ref(0, 554422);

procedure be_rx_cqs_destroy($p0: ref);



const be_tx_queues_destroy: ref;

axiom be_tx_queues_destroy == $sub.ref(0, 555454);

procedure be_tx_queues_destroy($p0: ref);



const be_evt_queues_destroy: ref;

axiom be_evt_queues_destroy == $sub.ref(0, 556486);

procedure be_evt_queues_destroy($p0: ref);



const kfree: ref;

axiom kfree == $sub.ref(0, 557518);

procedure kfree($p0: ref);



const free_: ref;

axiom free_ == $sub.ref(0, 558550);

procedure free_($p0: ref);



const be_cmd_q_destroy: ref;

axiom be_cmd_q_destroy == $sub.ref(0, 559582);

procedure be_cmd_q_destroy($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const ldv_mutex_lock_interruptible_28: ref;

axiom ldv_mutex_lock_interruptible_28 == $sub.ref(0, 560614);

procedure ldv_mutex_lock_interruptible_28($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_29: ref;

axiom ldv_mutex_unlock_29 == $sub.ref(0, 561646);

procedure ldv_mutex_unlock_29($p0: ref);



const be_find_vfs: ref;

axiom be_find_vfs == $sub.ref(0, 562678);

procedure be_find_vfs($p0: ref, $i1: i32) returns ($r: i32);



const pci_disable_sriov: ref;

axiom pci_disable_sriov == $sub.ref(0, 563710);

procedure pci_disable_sriov($p0: ref);



const be_cmd_set_mac_list: ref;

axiom be_cmd_set_mac_list == $sub.ref(0, 564742);

procedure be_cmd_set_mac_list($p0: ref, $p1: ref, $i2: i8, $i3: i32) returns ($r: i32);



const pci_find_ext_capability: ref;

axiom pci_find_ext_capability == $sub.ref(0, 565774);

procedure pci_find_ext_capability($p0: ref, $i1: i32) returns ($r: i32);



const pci_read_config_word: ref;

axiom pci_read_config_word == $sub.ref(0, 566806);

procedure pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const pci_get_device: ref;

axiom pci_get_device == $sub.ref(0, 567838);

procedure pci_get_device($i0: i32, $i1: i32, $p2: ref) returns ($r: ref);



const pci_physfn: ref;

axiom pci_physfn == $sub.ref(0, 568870);

procedure pci_physfn($p0: ref) returns ($r: ref);



const pci_bus_read_config_word: ref;

axiom pci_bus_read_config_word == $sub.ref(0, 569902);

procedure pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const be_cmd_allowed: ref;

axiom be_cmd_allowed == $sub.ref(0, 570934);

procedure be_cmd_allowed($p0: ref, $i1: i8, $i2: i8) returns ($r: i1);
  free requires assertsPassed;



implementation be_cmd_allowed($p0: ref, $i1: i8, $i2: i8) returns ($r: i1)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i8;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} {:cexpr "be_cmd_allowed:arg:opcode"} boogie_si_record_i8($i1);
    call {:si_unique_call 848} {:cexpr "be_cmd_allowed:arg:subsystem"} boogie_si_record_i8($i2);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363956, 1));
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 849} {:cexpr "cmd_privileges"} boogie_si_record_i32($i4);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.43, cmd_priv_map);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i6, $i7);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.43, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(0, 1)));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i1);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i18, $i19);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.43, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i1);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i29, $i30);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.43, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i1);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i40, $i41);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.43, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(0, 1)));
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i1);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i51, $i52);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb46:
    assume $i53 == 1;
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(1, 1)));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i2);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i55, $i56);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb48;

  $bb49:
    assume $i57 == 1;
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(4, 1)));
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, $i4);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb11;

  $bb36:
    assume $i42 == 1;
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(1, 1)));
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i2);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i44, $i45);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb38;

  $bb39:
    assume $i46 == 1;
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(4, 1)));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, $i4);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb9;

  $bb26:
    assume $i31 == 1;
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(1, 1)));
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i2);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i33, $i34);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb28;

  $bb29:
    assume $i35 == 1;
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(4, 1)));
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, $i4);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb9;

  $bb16:
    assume $i20 == 1;
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(1, 1)));
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i2);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i22, $i23);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb18;

  $bb19:
    assume $i24 == 1;
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(4, 1)));
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, $i4);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb9;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(1, 1)));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i2);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i10, $i11);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb5;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(4, 1)));
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, $i4);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb9;
}



const pci_alloc_consistent: ref;

axiom pci_alloc_consistent == $sub.ref(0, 571966);

procedure pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} {:cexpr "pci_alloc_consistent:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $p7 := dma_alloc_attrs($p6, $i1, $p2, 32, $0.ref);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const pci_free_consistent: ref;

axiom pci_free_consistent == $sub.ref(0, 572998);

procedure pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} {:cexpr "pci_free_consistent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 853} {:cexpr "pci_free_consistent:arg:dma_handle"} boogie_si_record_i64($i3);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} dma_free_attrs($p7, $i1, $p2, $i3, $0.ref);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const be_vf_setup_init: ref;

axiom be_vf_setup_init == $sub.ref(0, 574030);

procedure be_vf_setup_init($p0: ref) returns ($r: i32);



const be_cmd_get_if_id: ref;

axiom be_cmd_get_if_id == $sub.ref(0, 575062);

procedure be_cmd_get_if_id($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const be_vfs_if_create: ref;

axiom be_vfs_if_create == $sub.ref(0, 576094);

procedure be_vfs_if_create($p0: ref) returns ($r: i32);



const be_vfs_mac_query: ref;

axiom be_vfs_mac_query == $sub.ref(0, 577126);

procedure be_vfs_mac_query($p0: ref) returns ($r: i32);



const be_vf_eth_addr_config: ref;

axiom be_vf_eth_addr_config == $sub.ref(0, 578158);

procedure be_vf_eth_addr_config($p0: ref) returns ($r: i32);



const be_cmd_set_qos: ref;

axiom be_cmd_set_qos == $sub.ref(0, 579190);

procedure be_cmd_set_qos($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const be_cmd_get_hsw_config: ref;

axiom be_cmd_get_hsw_config == $sub.ref(0, 580222);

procedure be_cmd_get_hsw_config($p0: ref, $p1: ref, $i2: i32, $i3: i16) returns ($r: i32);



const be_cmd_enable_vf: ref;

axiom be_cmd_enable_vf == $sub.ref(0, 581254);

procedure be_cmd_enable_vf($p0: ref, $i1: i8) returns ($r: i32);



const pci_enable_sriov: ref;

axiom pci_enable_sriov == $sub.ref(0, 582286);

procedure pci_enable_sriov($p0: ref, $i1: i32) returns ($r: i32);



const be_vf_eth_addr_generate: ref;

axiom be_vf_eth_addr_generate == $sub.ref(0, 583318);

procedure be_vf_eth_addr_generate($p0: ref, $p1: ref);



const jhash: ref;

axiom jhash == $sub.ref(0, 584350);

procedure jhash($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const __get_unaligned_cpu32: ref;

axiom __get_unaligned_cpu32 == $sub.ref(0, 585382);

procedure __get_unaligned_cpu32($p0: ref) returns ($r: i32);



const rol32: ref;

axiom rol32 == $sub.ref(0, 586414);

procedure rol32($i0: i32, $i1: i32) returns ($r: i32);



const be_cmd_get_mac_from_list: ref;

axiom be_cmd_get_mac_from_list == $sub.ref(0, 587446);

procedure be_cmd_get_mac_from_list($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i8) returns ($r: i32);



const be_cmd_mac_addr_query: ref;

axiom be_cmd_mac_addr_query == $sub.ref(0, 588478);

procedure be_cmd_mac_addr_query($p0: ref, $p1: ref, $i2: i1, $i3: i32, $i4: i32) returns ($r: i32);



const be_cmd_get_profile_config: ref;

axiom be_cmd_get_profile_config == $sub.ref(0, 589510);

procedure be_cmd_get_profile_config($p0: ref, $p1: ref, $p2: ref, $i3: i8) returns ($r: i32);



const be_cmd_get_profile_config_mbox: ref;

axiom be_cmd_get_profile_config_mbox == $sub.ref(0, 590542);

procedure be_cmd_get_profile_config_mbox($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);



const be_cmd_get_profile_config_mccq: ref;

axiom be_cmd_get_profile_config_mccq == $sub.ref(0, 591574);

procedure be_cmd_get_profile_config_mccq($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);



const be_get_nic_desc: ref;

axiom be_get_nic_desc == $sub.ref(0, 592606);

procedure be_get_nic_desc($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);



const ldv_mutex_lock_interruptible_46: ref;

axiom ldv_mutex_lock_interruptible_46 == $sub.ref(0, 593638);

procedure ldv_mutex_lock_interruptible_46($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_47: ref;

axiom ldv_mutex_unlock_47 == $sub.ref(0, 594670);

procedure ldv_mutex_unlock_47($p0: ref);



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 595702);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);



const kmalloc_array: ref;

axiom kmalloc_array == $sub.ref(0, 596734);

procedure kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 597766);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 598798);

procedure ldv_malloc($i0: i64) returns ($r: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 599830);

procedure malloc($i0: i64) returns ($r: ref);



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 600862);

procedure ldv_is_err($p0: ref) returns ($r: i64);



const be_cmd_rx_filter: ref;

axiom be_cmd_rx_filter == $sub.ref(0, 601894);

procedure be_cmd_rx_filter($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const be_cmd_vlan_config: ref;

axiom be_cmd_vlan_config == $sub.ref(0, 602926);

procedure be_cmd_vlan_config($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i1, $i5: i1) returns ($r: i32);



const be_cmd_txq_create: ref;

axiom be_cmd_txq_create == $sub.ref(0, 603958);

procedure be_cmd_txq_create($p0: ref, $p1: ref) returns ($r: i32);



const be_encoded_q_len: ref;

axiom be_encoded_q_len == $sub.ref(0, 604990);

procedure be_encoded_q_len($i0: i32) returns ($r: i32);



const be_cmd_cq_create: ref;

axiom be_cmd_cq_create == $sub.ref(0, 606022);

procedure be_cmd_cq_create($p0: ref, $p1: ref, $p2: ref, $i3: i1, $i4: i32) returns ($r: i32);



const be_cmd_mccq_create: ref;

axiom be_cmd_mccq_create == $sub.ref(0, 607054);

procedure be_cmd_mccq_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const be_cmd_mccq_ext_create: ref;

axiom be_cmd_mccq_ext_create == $sub.ref(0, 608086);

procedure be_cmd_mccq_ext_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const be_cmd_mccq_org_create: ref;

axiom be_cmd_mccq_org_create == $sub.ref(0, 609118);

procedure be_cmd_mccq_org_create($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const ldv_mutex_lock_interruptible_26: ref;

axiom ldv_mutex_lock_interruptible_26 == $sub.ref(0, 610150);

procedure ldv_mutex_lock_interruptible_26($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_27: ref;

axiom ldv_mutex_unlock_27 == $sub.ref(0, 611182);

procedure ldv_mutex_unlock_27($p0: ref);



const ldv_mutex_lock_interruptible_24: ref;

axiom ldv_mutex_lock_interruptible_24 == $sub.ref(0, 612214);

procedure ldv_mutex_lock_interruptible_24($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_25: ref;

axiom ldv_mutex_unlock_25 == $sub.ref(0, 613246);

procedure ldv_mutex_unlock_25($p0: ref);



const ldv_mutex_lock_interruptible_22: ref;

axiom ldv_mutex_lock_interruptible_22 == $sub.ref(0, 614278);

procedure ldv_mutex_lock_interruptible_22($p0: ref) returns ($r: i32);



const __ilog2_u32: ref;

axiom __ilog2_u32 == $sub.ref(0, 615310);

procedure __ilog2_u32($i0: i32) returns ($r: i32);



const ldv_mutex_unlock_23: ref;

axiom ldv_mutex_unlock_23 == $sub.ref(0, 616342);

procedure ldv_mutex_unlock_23($p0: ref);



const netif_set_real_num_rx_queues: ref;

axiom netif_set_real_num_rx_queues == $sub.ref(0, 617374);

procedure netif_set_real_num_rx_queues($p0: ref, $i1: i32) returns ($r: i32);



const be_num_txqs_want: ref;

axiom be_num_txqs_want == $sub.ref(0, 618406);

procedure be_num_txqs_want($p0: ref) returns ($r: i32);



const netif_set_real_num_tx_queues: ref;

axiom netif_set_real_num_tx_queues == $sub.ref(0, 619438);

procedure netif_set_real_num_tx_queues($p0: ref, $i1: i32) returns ($r: i32);



const be_cmd_eq_create: ref;

axiom be_cmd_eq_create == $sub.ref(0, 620470);

procedure be_cmd_eq_create($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const ldv_mutex_lock_interruptible_20: ref;

axiom ldv_mutex_lock_interruptible_20 == $sub.ref(0, 621502);

procedure ldv_mutex_lock_interruptible_20($p0: ref) returns ($r: i32);



const eq_delay_to_mult: ref;

axiom eq_delay_to_mult == $sub.ref(0, 622534);

procedure eq_delay_to_mult($i0: i32) returns ($r: i32);



const ldv_mutex_unlock_21: ref;

axiom ldv_mutex_unlock_21 == $sub.ref(0, 623566);

procedure ldv_mutex_unlock_21($p0: ref);



const be_num_rss_want: ref;

axiom be_num_rss_want == $sub.ref(0, 624598);

procedure be_num_rss_want($p0: ref) returns ($r: i32);



const cpumask_weight: ref;

axiom cpumask_weight == $sub.ref(0, 625630);

procedure cpumask_weight($p0: ref) returns ($r: i32);



const pci_enable_msix: ref;

axiom pci_enable_msix == $sub.ref(0, 626662);

procedure pci_enable_msix($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const bitmap_weight: ref;

axiom bitmap_weight == $sub.ref(0, 627694);

procedure bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);



const __bitmap_weight: ref;

axiom __bitmap_weight == $sub.ref(0, 628726);

procedure __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);



const netif_get_num_default_rss_queues: ref;

axiom netif_get_num_default_rss_queues == $sub.ref(0, 629758);

procedure netif_get_num_default_rss_queues() returns ($r: i32);



const be_cmd_query_fw_cfg: ref;

axiom be_cmd_query_fw_cfg == $sub.ref(0, 630790);

procedure be_cmd_query_fw_cfg($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);



const be_get_resources: ref;

axiom be_get_resources == $sub.ref(0, 631822);

procedure be_get_resources($p0: ref);



const be_cmd_get_func_config: ref;

axiom be_cmd_get_func_config == $sub.ref(0, 632854);

procedure be_cmd_get_func_config($p0: ref) returns ($r: i32);



const ldv_mutex_lock_interruptible_44: ref;

axiom ldv_mutex_lock_interruptible_44 == $sub.ref(0, 633886);

procedure ldv_mutex_lock_interruptible_44($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_45: ref;

axiom ldv_mutex_unlock_45 == $sub.ref(0, 634918);

procedure ldv_mutex_unlock_45($p0: ref);



const ldv_mutex_lock_interruptible_30: ref;

axiom ldv_mutex_lock_interruptible_30 == $sub.ref(0, 635950);

procedure ldv_mutex_lock_interruptible_30($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_31: ref;

axiom ldv_mutex_unlock_31 == $sub.ref(0, 636982);

procedure ldv_mutex_unlock_31($p0: ref);



const ldv_mutex_lock_interruptible_38: ref;

axiom ldv_mutex_lock_interruptible_38 == $sub.ref(0, 638014);

procedure ldv_mutex_lock_interruptible_38($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_39: ref;

axiom ldv_mutex_unlock_39 == $sub.ref(0, 639046);

procedure ldv_mutex_unlock_39($p0: ref);



const ldv_mutex_lock_interruptible_16: ref;

axiom ldv_mutex_lock_interruptible_16 == $sub.ref(0, 640078);

procedure ldv_mutex_lock_interruptible_16($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_17: ref;

axiom ldv_mutex_unlock_17 == $sub.ref(0, 641110);

procedure ldv_mutex_unlock_17($p0: ref);



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 642142);

procedure pci_save_state($p0: ref) returns ($r: i32);



const pci_choose_state: ref;

axiom pci_choose_state == $sub.ref(0, 643174);

procedure pci_choose_state($p0: ref, $i1: i32) returns ($r: i32);



const be_roce_dev_remove: ref;

axiom be_roce_dev_remove == $sub.ref(0, 644206);

procedure be_roce_dev_remove($p0: ref);



const be_intr_set: ref;

axiom be_intr_set == $sub.ref(0, 645238);

procedure be_intr_set($p0: ref, $i1: i1);



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 646270);

procedure unregister_netdev($p0: ref);



const be_cmd_fw_clean: ref;

axiom be_cmd_fw_clean == $sub.ref(0, 647302);

procedure be_cmd_fw_clean($p0: ref) returns ($r: i32);



const be_stats_cleanup: ref;

axiom be_stats_cleanup == $sub.ref(0, 648334);

procedure be_stats_cleanup($p0: ref);



const be_ctrl_cleanup: ref;

axiom be_ctrl_cleanup == $sub.ref(0, 649366);

procedure be_ctrl_cleanup($p0: ref);



const pci_disable_pcie_error_reporting: ref;

axiom pci_disable_pcie_error_reporting == $sub.ref(0, 650398);

procedure pci_disable_pcie_error_reporting($p0: ref) returns ($r: i32);



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 651430);

procedure pci_set_drvdata($p0: ref, $p1: ref);



const pci_release_regions: ref;

axiom pci_release_regions == $sub.ref(0, 652462);

procedure pci_release_regions($p0: ref);



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 653494);

procedure free_netdev($p0: ref);



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 654526);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);



const be_unmap_pci_bars: ref;

axiom be_unmap_pci_bars == $sub.ref(0, 655558);

procedure be_unmap_pci_bars($p0: ref);



const pci_iounmap: ref;

axiom pci_iounmap == $sub.ref(0, 656590);

procedure pci_iounmap($p0: ref, $p1: ref);



const ldv_mutex_lock_interruptible_18: ref;

axiom ldv_mutex_lock_interruptible_18 == $sub.ref(0, 657622);

procedure ldv_mutex_lock_interruptible_18($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_19: ref;

axiom ldv_mutex_unlock_19 == $sub.ref(0, 658654);

procedure ldv_mutex_unlock_19($p0: ref);



const be_cmd_intr_set: ref;

axiom be_cmd_intr_set == $sub.ref(0, 659686);

procedure be_cmd_intr_set($p0: ref, $i1: i1) returns ($r: i32);



const be_reg_intr_set: ref;

axiom be_reg_intr_set == $sub.ref(0, 660718);

procedure be_reg_intr_set($p0: ref, $i1: i1);



const ldv_mutex_lock_interruptible_48: ref;

axiom ldv_mutex_lock_interruptible_48 == $sub.ref(0, 661750);

procedure ldv_mutex_lock_interruptible_48($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_49: ref;

axiom ldv_mutex_unlock_49 == $sub.ref(0, 662782);

procedure ldv_mutex_unlock_49($p0: ref);



const ldv_mutex_lock_106: ref;

axiom ldv_mutex_lock_106 == $sub.ref(0, 663814);

procedure ldv_mutex_lock_106($p0: ref);



const _be_roce_dev_remove: ref;

axiom _be_roce_dev_remove == $sub.ref(0, 664846);

procedure _be_roce_dev_remove($p0: ref);



const list_del: ref;

axiom list_del == $sub.ref(0, 665878);

procedure list_del($p0: ref);



const ldv_mutex_unlock_107: ref;

axiom ldv_mutex_unlock_107 == $sub.ref(0, 666910);

procedure ldv_mutex_unlock_107($p0: ref);



const pci_request_regions: ref;

axiom pci_request_regions == $sub.ref(0, 667942);

procedure pci_request_regions($p0: ref, $p1: ref) returns ($r: i32);



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 668974);

procedure pci_set_master($p0: ref);



const alloc_etherdev_mqs: ref;

axiom alloc_etherdev_mqs == $sub.ref(0, 670006);

procedure alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 671038);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);



const dma_set_coherent_mask: ref;

axiom dma_set_coherent_mask == $sub.ref(0, 672070);

procedure dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32);



const pci_enable_pcie_error_reporting: ref;

axiom pci_enable_pcie_error_reporting == $sub.ref(0, 673102);

procedure pci_enable_pcie_error_reporting($p0: ref) returns ($r: i32);



const be_ctrl_init: ref;

axiom be_ctrl_init == $sub.ref(0, 674134);

procedure be_ctrl_init($p0: ref) returns ($r: i32);



const be_fw_wait_ready: ref;

axiom be_fw_wait_ready == $sub.ref(0, 675166);

procedure be_fw_wait_ready($p0: ref) returns ($r: i32);



const be_reset_required: ref;

axiom be_reset_required == $sub.ref(0, 676198);

procedure be_reset_required($p0: ref) returns ($r: i1);



const be_stats_init: ref;

axiom be_stats_init == $sub.ref(0, 677230);

procedure be_stats_init($p0: ref) returns ($r: i32);



const be_get_initial_config: ref;

axiom be_get_initial_config == $sub.ref(0, 678262);

procedure be_get_initial_config($p0: ref) returns ($r: i32);



const __init_work: ref;

axiom __init_work == $sub.ref(0, 679294);

procedure __init_work($p0: ref, $i1: i32);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 680326);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 681358);

procedure INIT_LIST_HEAD($p0: ref);



const be_worker: ref;

axiom be_worker == $sub.ref(0, 682390);

procedure be_worker($p0: ref);



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 683422);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 684454);

procedure delayed_work_timer_fn($i0: i64);



const be_func_recovery_task: ref;

axiom be_func_recovery_task == $sub.ref(0, 685486);

procedure be_func_recovery_task($p0: ref);



const be_netdev_init: ref;

axiom be_netdev_init == $sub.ref(0, 686518);

procedure be_netdev_init($p0: ref);



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 687550);

procedure register_netdev($p0: ref) returns ($r: i32);



const be_roce_dev_add: ref;

axiom be_roce_dev_add == $sub.ref(0, 688582);

procedure be_roce_dev_add($p0: ref);



const be_cmd_query_port_name: ref;

axiom be_cmd_query_port_name == $sub.ref(0, 689614);

procedure be_cmd_query_port_name($p0: ref, $p1: ref) returns ($r: i32);



const mc_name: ref;

axiom mc_name == $sub.ref(0, 690646);

procedure mc_name($p0: ref) returns ($r: ref);



const func_name: ref;

axiom func_name == $sub.ref(0, 691678);

procedure func_name($p0: ref) returns ($r: ref);



const nic_name: ref;

axiom nic_name == $sub.ref(0, 692710);

procedure nic_name($p0: ref) returns ($r: ref);



const ldv_mutex_lock_104: ref;

axiom ldv_mutex_lock_104 == $sub.ref(0, 693742);

procedure ldv_mutex_lock_104($p0: ref);



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 694774);

procedure list_add_tail($p0: ref, $p1: ref);



const _be_roce_dev_add: ref;

axiom _be_roce_dev_add == $sub.ref(0, 695806);

procedure _be_roce_dev_add($p0: ref);



const ldv_mutex_unlock_105: ref;

axiom ldv_mutex_unlock_105 == $sub.ref(0, 696838);

procedure ldv_mutex_unlock_105($p0: ref);



const __list_add: ref;

axiom __list_add == $sub.ref(0, 697870);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);



const netif_set_gso_max_size: ref;

axiom netif_set_gso_max_size == $sub.ref(0, 698902);

procedure netif_set_gso_max_size($p0: ref, $i1: i32);



const be_poll: ref;

axiom be_poll == $sub.ref(0, 699934);

procedure be_poll($p0: ref, $i1: i32) returns ($r: i32);



const netif_napi_add: ref;

axiom netif_napi_add == $sub.ref(0, 700966);

procedure netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32);



const be_process_tx: ref;

axiom be_process_tx == $sub.ref(0, 701998);

procedure be_process_tx($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i1);



const be_process_rx: ref;

axiom be_process_rx == $sub.ref(0, 703030);

procedure be_process_rx($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const napi_complete: ref;

axiom napi_complete == $sub.ref(0, 704062);

procedure napi_complete($p0: ref);



const do_gro: ref;

axiom do_gro == $sub.ref(0, 705094);

procedure do_gro($p0: ref) returns ($r: i1);



const be_rx_compl_process_gro: ref;

axiom be_rx_compl_process_gro == $sub.ref(0, 706126);

procedure be_rx_compl_process_gro($p0: ref, $p1: ref, $p2: ref);



const be_rx_compl_process: ref;

axiom be_rx_compl_process == $sub.ref(0, 707158);

procedure be_rx_compl_process($p0: ref, $p1: ref);



const be_rx_stats_update: ref;

axiom be_rx_stats_update == $sub.ref(0, 708190);

procedure be_rx_stats_update($p0: ref, $p1: ref);



const u64_stats_update_begin: ref;

axiom u64_stats_update_begin == $sub.ref(0, 709222);

procedure u64_stats_update_begin($p0: ref);



const netdev_alloc_skb_ip_align: ref;

axiom netdev_alloc_skb_ip_align == $sub.ref(0, 710254);

procedure netdev_alloc_skb_ip_align($p0: ref, $i1: i32) returns ($r: ref);



const skb_fill_rx_data: ref;

axiom skb_fill_rx_data == $sub.ref(0, 711286);

procedure skb_fill_rx_data($p0: ref, $p1: ref, $p2: ref);



const csum_passed: ref;

axiom csum_passed == $sub.ref(0, 712318);

procedure csum_passed($p0: ref) returns ($r: i1);



const skb_checksum_none_assert: ref;

axiom skb_checksum_none_assert == $sub.ref(0, 713350);

procedure skb_checksum_none_assert($p0: ref);



const eth_type_trans: ref;

axiom eth_type_trans == $sub.ref(0, 714382);

procedure eth_type_trans($p0: ref, $p1: ref) returns ($r: i16);



const skb_record_rx_queue: ref;

axiom skb_record_rx_queue == $sub.ref(0, 715414);

procedure skb_record_rx_queue($p0: ref, $i1: i16);



const __vlan_hwaccel_put_tag: ref;

axiom __vlan_hwaccel_put_tag == $sub.ref(0, 716446);

procedure __vlan_hwaccel_put_tag($p0: ref, $i1: i16, $i2: i16) returns ($r: ref);



const netif_receive_skb: ref;

axiom netif_receive_skb == $sub.ref(0, 717478);

procedure netif_receive_skb($p0: ref) returns ($r: i32);



const llvm.prefetch: ref;

axiom llvm.prefetch == $sub.ref(0, 718510);

procedure llvm.prefetch($p0: ref, $i1: i32, $i2: i32, $i3: i32);



const skb_frag_set_page: ref;

axiom skb_frag_set_page == $sub.ref(0, 719542);

procedure skb_frag_set_page($p0: ref, $i1: i32, $p2: ref);



const skb_frag_size_set: ref;

axiom skb_frag_size_set == $sub.ref(0, 720574);

procedure skb_frag_size_set($p0: ref, $i1: i32);



const skb_frag_size_add: ref;

axiom skb_frag_size_add == $sub.ref(0, 721606);

procedure skb_frag_size_add($p0: ref, $i1: i32);



const __skb_frag_set_page: ref;

axiom __skb_frag_set_page == $sub.ref(0, 722638);

procedure __skb_frag_set_page($p0: ref, $p1: ref);



const __netdev_alloc_skb_ip_align: ref;

axiom __netdev_alloc_skb_ip_align == $sub.ref(0, 723670);

procedure __netdev_alloc_skb_ip_align($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);



const __netdev_alloc_skb: ref;

axiom __netdev_alloc_skb == $sub.ref(0, 724702);

procedure __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);



const napi_get_frags: ref;

axiom napi_get_frags == $sub.ref(0, 725734);

procedure napi_get_frags($p0: ref) returns ($r: ref);



const napi_gro_frags: ref;

axiom napi_gro_frags == $sub.ref(0, 726766);

procedure napi_gro_frags($p0: ref) returns ($r: i32);



const __netif_subqueue_stopped: ref;

axiom __netif_subqueue_stopped == $sub.ref(0, 727798);

procedure __netif_subqueue_stopped($p0: ref, $i1: i16) returns ($r: i1);



const netif_wake_subqueue: ref;

axiom netif_wake_subqueue == $sub.ref(0, 728830);

procedure netif_wake_subqueue($p0: ref, $i1: i16);



const netpoll_trap: ref;

axiom netpoll_trap == $sub.ref(0, 729862);

procedure netpoll_trap() returns ($r: i32);



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 730894);

procedure test_and_clear_bit($i0: i32, $p1: ref) returns ($r: i32);



const __netif_schedule: ref;

axiom __netif_schedule == $sub.ref(0, 731926);

procedure __netif_schedule($p0: ref);



const netif_tx_queue_stopped: ref;

axiom netif_tx_queue_stopped == $sub.ref(0, 732958);

procedure netif_tx_queue_stopped($p0: ref) returns ($r: i1);



const lancer_recover_func: ref;

axiom lancer_recover_func == $sub.ref(0, 733990);

procedure lancer_recover_func($p0: ref) returns ($r: i32);



const lancer_cmd_get_pport_stats: ref;

axiom lancer_cmd_get_pport_stats == $sub.ref(0, 735022);

procedure lancer_cmd_get_pport_stats($p0: ref, $p1: ref) returns ($r: i32);



const be_cmd_get_stats: ref;

axiom be_cmd_get_stats == $sub.ref(0, 736054);

procedure be_cmd_get_stats($p0: ref, $p1: ref) returns ($r: i32);



const be_cmd_get_die_temperature: ref;

axiom be_cmd_get_die_temperature == $sub.ref(0, 737086);

procedure be_cmd_get_die_temperature($p0: ref) returns ($r: i32);



const be_eqd_update: ref;

axiom be_eqd_update == $sub.ref(0, 738118);

procedure be_eqd_update($p0: ref, $p1: ref);



const u64_stats_fetch_begin_bh: ref;

axiom u64_stats_fetch_begin_bh == $sub.ref(0, 739150);

procedure u64_stats_fetch_begin_bh($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation u64_stats_fetch_begin_bh($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const u64_stats_fetch_retry_bh: ref;

axiom u64_stats_fetch_retry_bh == $sub.ref(0, 740182);

procedure u64_stats_fetch_retry_bh($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation u64_stats_fetch_retry_bh($p0: ref, $i1: i32) returns ($r: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} {:cexpr "u64_stats_fetch_retry_bh:arg:start"} boogie_si_record_i32($i1);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const be_cmd_modify_eqd: ref;

axiom be_cmd_modify_eqd == $sub.ref(0, 741214);

procedure be_cmd_modify_eqd($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const be_cmd_get_cntl_attributes: ref;

axiom be_cmd_get_cntl_attributes == $sub.ref(0, 742246);

procedure be_cmd_get_cntl_attributes($p0: ref) returns ($r: i32);



const be_cmd_get_acpi_wol_cap: ref;

axiom be_cmd_get_acpi_wol_cap == $sub.ref(0, 743278);

procedure be_cmd_get_acpi_wol_cap($p0: ref) returns ($r: i32);



const be_is_wol_excluded: ref;

axiom be_is_wol_excluded == $sub.ref(0, 744310);

procedure be_is_wol_excluded($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation be_is_wol_excluded($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364208, 1));
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(66, 1));
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 58946);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 58962);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 58962);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb8:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 58946);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb13;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i10, 58898);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i10, 58898);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb13;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb20;

  $bb17:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i10, 58882);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb13;

  $bb22:
    assume $i17 == 1;
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;
}



const be_is_wol_supported: ref;

axiom be_is_wol_supported == $sub.ref(0, 745342);

procedure be_is_wol_supported($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation be_is_wol_supported($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364268, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $i6 := be_is_wol_excluded($p0);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 857} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb9;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb8;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb5;
}



const be_get_fw_log_level: ref;

axiom be_get_fw_log_level == $sub.ref(0, 746374);

procedure be_get_fw_log_level($p0: ref) returns ($r: i32);



const be_cmd_get_ext_fat_capabilites: ref;

axiom be_cmd_get_ext_fat_capabilites == $sub.ref(0, 747406);

procedure be_cmd_get_ext_fat_capabilites($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed, $M.26, $CurrAddr;



implementation be_cmd_get_ext_fat_capabilites($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i9: i32;
  var $p18: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i3 := ldv_mutex_lock_interruptible_42($p2);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 859} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $p6 := wrb_from_mbox($p0);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.41, $p10);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.41, $p14);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} be_wrb_cmd_hdr_prepare($p13, 1, 125, $i15, $p6, $p1);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p12, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 1);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i17 := be_mbox_notify_wait($p0);
    call {:si_unique_call 864} {:cexpr "status"} boogie_si_record_i32($i17);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i9 := $i17;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(32, 1));
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} ldv_mutex_unlock_43($p18);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 16);
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_42: ref;

axiom ldv_mutex_lock_interruptible_42 == $sub.ref(0, 748438);

procedure ldv_mutex_lock_interruptible_42($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_interruptible_42($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 866} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i2 := ldv_mutex_lock_interruptible_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 868} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_43: ref;

axiom ldv_mutex_unlock_43 == $sub.ref(0, 749470);

procedure ldv_mutex_unlock_43($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_43($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} ldv_mutex_unlock_mbox_lock_of_be_adapter($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} mutex_unlock($p0);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_40: ref;

axiom ldv_mutex_lock_interruptible_40 == $sub.ref(0, 750502);

procedure ldv_mutex_lock_interruptible_40($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_41: ref;

axiom ldv_mutex_unlock_41 == $sub.ref(0, 751534);

procedure ldv_mutex_unlock_41($p0: ref);



const ldv_mutex_lock_interruptible_36: ref;

axiom ldv_mutex_lock_interruptible_36 == $sub.ref(0, 752566);

procedure ldv_mutex_lock_interruptible_36($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_37: ref;

axiom ldv_mutex_unlock_37 == $sub.ref(0, 753598);

procedure ldv_mutex_unlock_37($p0: ref);



const be_POST_stage_get: ref;

axiom be_POST_stage_get == $sub.ref(0, 754630);

procedure be_POST_stage_get($p0: ref) returns ($r: i16);



const msleep_interruptible: ref;

axiom msleep_interruptible == $sub.ref(0, 755662);

procedure msleep_interruptible($i0: i32) returns ($r: i64);



const be_map_pci_bars: ref;

axiom be_map_pci_bars == $sub.ref(0, 756694);

procedure be_map_pci_bars($p0: ref) returns ($r: i32);



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 757726);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 758758);

procedure spinlock_check($p0: ref) returns ($r: ref);



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 759790);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);



const init_completion: ref;

axiom init_completion == $sub.ref(0, 760822);

procedure init_completion($p0: ref);



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 761854);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);



const pci_iomap: ref;

axiom pci_iomap == $sub.ref(0, 762886);

procedure pci_iomap($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);



const db_bar: ref;

axiom db_bar == $sub.ref(0, 763918);

procedure db_bar($p0: ref) returns ($r: i32);



const be_roce_map_pci_bars: ref;

axiom be_roce_map_pci_bars == $sub.ref(0, 764950);

procedure be_roce_map_pci_bars($p0: ref) returns ($r: i32);



const dma_supported: ref;

axiom dma_supported == $sub.ref(0, 765982);

procedure dma_supported($p0: ref, $i1: i64) returns ($r: i32);



const be_eeh_err_detected: ref;

axiom be_eeh_err_detected == $sub.ref(0, 767014);

procedure be_eeh_err_detected($p0: ref, $i1: i32) returns ($r: i32);



const be_eeh_reset: ref;

axiom be_eeh_reset == $sub.ref(0, 768046);

procedure be_eeh_reset($p0: ref) returns ($r: i32);



const be_eeh_resume: ref;

axiom be_eeh_resume == $sub.ref(0, 769078);

procedure be_eeh_resume($p0: ref);



const be_clear_all_error: ref;

axiom be_clear_all_error == $sub.ref(0, 770110);

procedure be_clear_all_error($p0: ref);



const pci_cleanup_aer_uncorrect_error_status: ref;

axiom pci_cleanup_aer_uncorrect_error_status == $sub.ref(0, 771142);

procedure pci_cleanup_aer_uncorrect_error_status($p0: ref) returns ($r: i32);



const be_xmit: ref;

axiom be_xmit == $sub.ref(0, 772174);

procedure be_xmit($p0: ref, $p1: ref) returns ($r: i32);



const be_mac_addr_set: ref;

axiom be_mac_addr_set == $sub.ref(0, 773206);

procedure be_mac_addr_set($p0: ref, $p1: ref) returns ($r: i32);



const eth_validate_addr: ref;

axiom eth_validate_addr == $sub.ref(0, 774238);

procedure eth_validate_addr($p0: ref) returns ($r: i32);



const be_change_mtu: ref;

axiom be_change_mtu == $sub.ref(0, 775270);

procedure be_change_mtu($p0: ref, $i1: i32) returns ($r: i32);



const be_get_stats64: ref;

axiom be_get_stats64 == $sub.ref(0, 776302);

procedure be_get_stats64($p0: ref, $p1: ref) returns ($r: ref);



const be_vlan_add_vid: ref;

axiom be_vlan_add_vid == $sub.ref(0, 777334);

procedure be_vlan_add_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);



const be_vlan_rem_vid: ref;

axiom be_vlan_rem_vid == $sub.ref(0, 778366);

procedure be_vlan_rem_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);



const be_netpoll: ref;

axiom be_netpoll == $sub.ref(0, 779398);

procedure be_netpoll($p0: ref);



const be_set_vf_mac: ref;

axiom be_set_vf_mac == $sub.ref(0, 780430);

procedure be_set_vf_mac($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const be_set_vf_vlan: ref;

axiom be_set_vf_vlan == $sub.ref(0, 781462);

procedure be_set_vf_vlan($p0: ref, $i1: i32, $i2: i16, $i3: i8) returns ($r: i32);



const be_set_vf_tx_rate: ref;

axiom be_set_vf_tx_rate == $sub.ref(0, 782494);

procedure be_set_vf_tx_rate($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const be_get_vf_config: ref;

axiom be_get_vf_config == $sub.ref(0, 783526);

procedure be_get_vf_config($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const be_cmd_set_profile_config: ref;

axiom be_cmd_set_profile_config == $sub.ref(0, 784558);

procedure be_cmd_set_profile_config($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);



const be_cmd_set_hsw_config: ref;

axiom be_cmd_set_hsw_config == $sub.ref(0, 785590);

procedure be_cmd_set_hsw_config($p0: ref, $i1: i16, $i2: i32, $i3: i16) returns ($r: i32);



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 786622);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 787654);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);



const skb_get_queue_mapping: ref;

axiom skb_get_queue_mapping == $sub.ref(0, 788686);

procedure skb_get_queue_mapping($p0: ref) returns ($r: i16);



const is_ipv4_pkt: ref;

axiom is_ipv4_pkt == $sub.ref(0, 789718);

procedure is_ipv4_pkt($p0: ref) returns ($r: i1);



const ip_hdr: ref;

axiom ip_hdr == $sub.ref(0, 790750);

procedure ip_hdr($p0: ref) returns ($r: ref);



const pskb_trim: ref;

axiom pskb_trim == $sub.ref(0, 791782);

procedure pskb_trim($p0: ref, $i1: i32) returns ($r: i32);



const be_insert_vlan_in_pkt: ref;

axiom be_insert_vlan_in_pkt == $sub.ref(0, 792814);

procedure be_insert_vlan_in_pkt($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);



const be_ipv6_tx_stall_chk: ref;

axiom be_ipv6_tx_stall_chk == $sub.ref(0, 793846);

procedure be_ipv6_tx_stall_chk($p0: ref, $p1: ref) returns ($r: i32);



const qnq_async_evt_rcvd: ref;

axiom qnq_async_evt_rcvd == $sub.ref(0, 794878);

procedure qnq_async_evt_rcvd($p0: ref) returns ($r: i32);



const be_vlan_tag_tx_chk: ref;

axiom be_vlan_tag_tx_chk == $sub.ref(0, 795910);

procedure be_vlan_tag_tx_chk($p0: ref, $p1: ref) returns ($r: i32);



const make_tx_wrbs: ref;

axiom make_tx_wrbs == $sub.ref(0, 796942);

procedure make_tx_wrbs($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i1, $i5: i1) returns ($r: i32);



const netif_stop_subqueue: ref;

axiom netif_stop_subqueue == $sub.ref(0, 797974);

procedure netif_stop_subqueue($p0: ref, $i1: i16);



const be_txq_notify: ref;

axiom be_txq_notify == $sub.ref(0, 799006);

procedure be_txq_notify($p0: ref, $p1: ref, $i2: i16);



const be_tx_stats_update: ref;

axiom be_tx_stats_update == $sub.ref(0, 800038);

procedure be_tx_stats_update($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1);



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 801070);

procedure dev_kfree_skb_any($p0: ref);



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 802102);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);



const dma_mapping_error: ref;

axiom dma_mapping_error == $sub.ref(0, 803134);

procedure dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);



const wrb_fill: ref;

axiom wrb_fill == $sub.ref(0, 804166);

procedure wrb_fill($p0: ref, $i1: i64, $i2: i32);



const skb_frag_size: ref;

axiom skb_frag_size == $sub.ref(0, 805198);

procedure skb_frag_size($p0: ref) returns ($r: i32);



const skb_frag_dma_map: ref;

axiom skb_frag_dma_map == $sub.ref(0, 806230);

procedure skb_frag_dma_map($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);



const wrb_fill_hdr: ref;

axiom wrb_fill_hdr == $sub.ref(0, 807262);

procedure wrb_fill_hdr($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i1);



const skb_is_gso: ref;

axiom skb_is_gso == $sub.ref(0, 808294);

procedure skb_is_gso($p0: ref) returns ($r: i1);



const skb_is_gso_v6: ref;

axiom skb_is_gso_v6 == $sub.ref(0, 809326);

procedure skb_is_gso_v6($p0: ref) returns ($r: i1);



const is_tcp_pkt: ref;

axiom is_tcp_pkt == $sub.ref(0, 810358);

procedure is_tcp_pkt($p0: ref) returns ($r: i8);



const is_udp_pkt: ref;

axiom is_udp_pkt == $sub.ref(0, 811390);

procedure is_udp_pkt($p0: ref) returns ($r: i8);



const be_get_tx_vlan_tag: ref;

axiom be_get_tx_vlan_tag == $sub.ref(0, 812422);

procedure be_get_tx_vlan_tag($p0: ref, $p1: ref) returns ($r: i16);



const ipv6_hdr: ref;

axiom ipv6_hdr == $sub.ref(0, 813454);

procedure ipv6_hdr($p0: ref) returns ($r: ref);



const skb_network_header: ref;

axiom skb_network_header == $sub.ref(0, 814486);

procedure skb_network_header($p0: ref) returns ($r: ref);



const skb_frag_page: ref;

axiom skb_frag_page == $sub.ref(0, 815518);

procedure skb_frag_page($p0: ref) returns ($r: ref);



const debug_dma_mapping_error: ref;

axiom debug_dma_mapping_error == $sub.ref(0, 816550);

procedure debug_dma_mapping_error($p0: ref, $i1: i64);



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 817582);

procedure __phys_addr($i0: i64) returns ($r: i64);



const be_ipv6_exthdr_check: ref;

axiom be_ipv6_exthdr_check == $sub.ref(0, 818614);

procedure be_ipv6_exthdr_check($p0: ref) returns ($r: i1);



const skb_share_check: ref;

axiom skb_share_check == $sub.ref(0, 819646);

procedure skb_share_check($p0: ref, $i1: i32) returns ($r: ref);



const __vlan_put_tag: ref;

axiom __vlan_put_tag == $sub.ref(0, 820678);

procedure __vlan_put_tag($p0: ref, $i1: i16, $i2: i16) returns ($r: ref);



const vlan_insert_tag: ref;

axiom vlan_insert_tag == $sub.ref(0, 821710);

procedure vlan_insert_tag($p0: ref, $i1: i16, $i2: i16) returns ($r: ref);



const skb_cow_head: ref;

axiom skb_cow_head == $sub.ref(0, 822742);

procedure skb_cow_head($p0: ref, $i1: i32) returns ($r: i32);



const skb_push: ref;

axiom skb_push == $sub.ref(0, 823774);

procedure skb_push($p0: ref, $i1: i32) returns ($r: ref);



const llvm.memmove.p0i8.p0i8.i64: ref;

axiom llvm.memmove.p0i8.p0i8.i64 == $sub.ref(0, 824806);

procedure llvm.memmove.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const skb_header_cloned: ref;

axiom skb_header_cloned == $sub.ref(0, 825838);

procedure skb_header_cloned($p0: ref) returns ($r: i32);



const __skb_cow: ref;

axiom __skb_cow == $sub.ref(0, 826870);

procedure __skb_cow($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const skb_headroom: ref;

axiom skb_headroom == $sub.ref(0, 827902);

procedure skb_headroom($p0: ref) returns ($r: i32);



const pskb_expand_head: ref;

axiom pskb_expand_head == $sub.ref(0, 828934);

procedure pskb_expand_head($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 829966);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);



const skb_shared: ref;

axiom skb_shared == $sub.ref(0, 830998);

procedure skb_shared($p0: ref) returns ($r: i32);



const skb_clone: ref;

axiom skb_clone == $sub.ref(0, 832030);

procedure skb_clone($p0: ref, $i1: i32) returns ($r: ref);



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 833062);

procedure consume_skb($p0: ref);



const __pskb_trim: ref;

axiom __pskb_trim == $sub.ref(0, 834094);

procedure __pskb_trim($p0: ref, $i1: i32) returns ($r: i32);



const ___pskb_trim: ref;

axiom ___pskb_trim == $sub.ref(0, 835126);

procedure ___pskb_trim($p0: ref, $i1: i32) returns ($r: i32);



const __skb_trim: ref;

axiom __skb_trim == $sub.ref(0, 836158);

procedure __skb_trim($p0: ref, $i1: i32);



const skb_is_nonlinear: ref;

axiom skb_is_nonlinear == $sub.ref(0, 837190);

procedure skb_is_nonlinear($p0: ref) returns ($r: i1);



const skb_set_tail_pointer: ref;

axiom skb_set_tail_pointer == $sub.ref(0, 838222);

procedure skb_set_tail_pointer($p0: ref, $i1: i32);



const skb_reset_tail_pointer: ref;

axiom skb_reset_tail_pointer == $sub.ref(0, 839254);

procedure skb_reset_tail_pointer($p0: ref);



const be_set_rss_hash_opts: ref;

axiom be_set_rss_hash_opts == $sub.ref(0, 840286);

procedure be_set_rss_hash_opts($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $CurrAddr, assertsPassed, $M.26;



implementation be_set_rss_hash_opts($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i25: i32;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $i36: i32;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $i72: i32;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $i77: i32;
  var $i78: i32;
  var $i73: i32;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i16;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i16;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i16;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i16;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $i109: i32;
  var $p111: ref;
  var $i112: i64;
  var $i113: i1;
  var $i114: i32;
  var $i115: i32;
  var $i110: i32;
  var $i31: i32;
  var $i116: i64;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $i120: i1;
  var $i121: i8;
  var $i122: i1;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $i135: i32;
  var $i136: i1;
  var $p138: ref;
  var $i139: i8;
  var $i140: i32;
  var $i141: i64;
  var $p142: ref;
  var $i143: i32;
  var $p144: ref;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $p133: ref;
  var $i134: i32;
  var $i132: i32;
  var $i137: i32;
  var $p148: ref;
  var $i149: i32;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $i123: i32;
  var $p153: ref;
  var $i154: i32;
  var $i155: i1;
  var $i156: i64;
  var $p157: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $p2 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364312, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 872} {:cexpr "rss_flags"} boogie_si_record_i32($i5);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 48);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i14, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i14, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.0, $p79);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 240);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i107 := $load.i64($M.0, $p106);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i108 := $eq.i64($i107, 48);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i108 == 1);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i112 := $load.i64($M.0, $p111);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i113 := $eq.i64($i112, 240);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i115 := $i5;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i110 := $i115;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i31 := $i110;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i116 := $zext.i32.i64($i31);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364312, 1));
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i118 := $load.i64($M.0, $p117);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i119 := $eq.i64($i116, $i118);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $i120 := be_multi_rxq($p0);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i121 := $zext.i1.i8($i120);
    call {:si_unique_call 882} {:cexpr "tmp"} boogie_si_record_i8($i121);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i8.i1($i121);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p2);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i154 := be_cmd_rss_config($p0, $p153, $i31, 128);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 886} {:cexpr "status"} boogie_si_record_i32($i154);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 0);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i12 := $i154;
    goto $bb6;

  $bb97:
    assume $i155 == 1;
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i156 := $zext.i32.i64($i31);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364312, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p157, $i156);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    goto $bb99;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb77:
    assume $i122 == 1;
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i123 := 0;
    goto $bb79;

  $bb79:
    call $p124, $p125, $i126, $p127, $p128, $i129, $i130, $i131, $i135, $i136, $p138, $i139, $i140, $i141, $p142, $i143, $p144, $i145, $i146, $i147, $p133, $i134, $i132, $i137, $p148, $i149, $i150, $i151, $i152, $i123 := be_set_rss_hash_opts_loop_$bb79($p0, $p2, $p124, $p125, $i126, $p127, $p128, $i129, $i130, $i131, $i135, $i136, $p138, $i139, $i140, $i141, $p142, $i143, $p144, $i145, $i146, $i147, $p133, $i134, $i132, $i137, $p148, $i149, $i150, $i151, $i152, $i123);
    goto $bb79_last;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i126 := $sext.i32.i64(0);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p125, $mul.ref($i126, 24760));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i130 := $sub.i32($i129, 1);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i131 := $ult.i32(0, $i130);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i132 := $i123;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i137 := $i132;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, $p148);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i150 := $add.i32($i149, $i137);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i151 := $sub.i32($i150, 1);
    call {:si_unique_call 883} {:cexpr "j"} boogie_si_record_i32($i151);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i152 := $sle.i32($i151, 127);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb93:
    assume $i152 == 1;
    assume {:verifier.code 0} true;
    $i123 := $i151;
    goto $bb93_dummy;

  $bb81:
    assume $i131 == 1;
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $p133, $i134 := $p127, 0;
    goto $bb84;

  $bb84:
    call $i135, $i136, $p138, $i139, $i140, $i141, $p142, $i143, $p144, $i145, $i146, $i147, $p133, $i134 := be_set_rss_hash_opts_loop_$bb84($p2, $p128, $i135, $i136, $p138, $i139, $i140, $i141, $p142, $i143, $p144, $i145, $i146, $i147, $p133, $i134, $i123);
    goto $bb84_last;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i123, $i134);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i136 := $sgt.i32($i135, 127);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p133, $mul.ref(0, 24760)), $mul.ref(24752, 1));
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.0, $p138);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i140 := $add.i32($i123, $i134);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i140);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref($i141, 1));
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, $i139);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i134, 1);
    call {:si_unique_call 884} {:cexpr "i"} boogie_si_record_i32($i143);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p133, $mul.ref(1, 24760));
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p128);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i146 := $sub.i32($i145, 1);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i147 := $ult.i32($i143, $i146);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i147 == 1);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i132 := $i123;
    goto $bb83;

  $bb90:
    assume $i147 == 1;
    assume {:verifier.code 0} true;
    $p133, $i134 := $p144, $i143;
    goto $bb90_dummy;

  $bb86:
    assume $i136 == 1;
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i137 := $i123;
    goto $bb88;

  $bb74:
    assume $i119 == 1;
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb70:
    assume $i113 == 1;
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i114 := $or.i32($i5, 36);
    call {:si_unique_call 880} {:cexpr "rss_flags"} boogie_si_record_i32($i114);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i115 := $i114;
    goto $bb72;

  $bb67:
    assume $i108 == 1;
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i109 := $and.i32($i5, $sub.i32(0, 33));
    call {:si_unique_call 879} {:cexpr "rss_flags"} boogie_si_record_i32($i109);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i110 := $i109;
    goto $bb69;

  $bb54:
    assume $i81 == 1;
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.0, $p84);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 545);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb57, $bb59;

  $bb59:
    assume !($i87 == 1);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i91 := $load.i16($M.0, $p90);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i92 := $zext.i16.i32($i91);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 1808);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i93 == 1);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i97 := $load.i16($M.0, $p96);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i97);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 529);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i99 == 1);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i103 := $load.i16($M.0, $p102);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i32($i103);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 1792);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb56;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb58;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb58;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb58;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 48);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i34 == 1);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 240);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i5;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i36 := $i41;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i31 := $i36;
    goto $bb28;

  $bb32:
    assume $i39 == 1;
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i5, 12);
    call {:si_unique_call 876} {:cexpr "rss_flags"} boogie_si_record_i32($i40);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb34;

  $bb29:
    assume $i34 == 1;
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i5, $sub.i32(0, 9));
    call {:si_unique_call 875} {:cexpr "rss_flags"} boogie_si_record_i32($i35);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb31;

  $bb9:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i14, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i14, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb15;

  $bb18:
    assume $i19 == 1;
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 240);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.0, $p69);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i71 := $eq.i64($i70, 48);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i71 == 1);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i76 := $eq.i64($i75, 240);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i78 := $i5;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i73 := $i78;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i31 := $i73;
    goto $bb28;

  $bb51:
    assume $i76 == 1;
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i5, 17);
    call {:si_unique_call 878} {:cexpr "rss_flags"} boogie_si_record_i32($i77);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i78 := $i77;
    goto $bb53;

  $bb48:
    assume $i71 == 1;
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i5, $sub.i32(0, 17));
    call {:si_unique_call 877} {:cexpr "rss_flags"} boogie_si_record_i32($i72);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb50;

  $bb35:
    assume $i44 == 1;
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $p47);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 545);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb38, $bb40;

  $bb40:
    assume !($i50 == 1);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 1808);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i56 == 1);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 529);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i62 == 1);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 1792);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb37;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb39;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb39;

  $bb16:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i14, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb15;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 48);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i23 == 1);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 240);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i30 := $i5;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i25 := $i30;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i31 := $i25;
    goto $bb28;

  $bb25:
    assume $i28 == 1;
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i5, 3);
    call {:si_unique_call 874} {:cexpr "rss_flags"} boogie_si_record_i32($i29);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb27;

  $bb22:
    assume $i23 == 1;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i5, $sub.i32(0, 3));
    call {:si_unique_call 873} {:cexpr "rss_flags"} boogie_si_record_i32($i24);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb24;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 240);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;

  $bb90_dummy:
    assume false;
    return;

  $bb84_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6359;

  $bb93_dummy:
    assume false;
    return;

  $bb79_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6346;
}



const be_get_rss_hash_opts: ref;

axiom be_get_rss_hash_opts == $sub.ref(0, 841318);

procedure be_get_rss_hash_opts($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation be_get_rss_hash_opts($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $i57: i64;
  var $i58: i64;
  var $i21: i64;

  $bb0:
    call {:si_unique_call 887} {:cexpr "be_get_rss_hash_opts:arg:flow_type"} boogie_si_record_i64($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i64($i1, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i64($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb6:
    assume $i4 == 1;
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364312, 1));
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 4);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364312, 1));
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 32);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i58 := $i52;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i21 := $i58;
    goto $bb21;

  $bb37:
    assume $i56 == 1;
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i57 := $or.i64($i52, 192);
    call {:si_unique_call 895} {:cexpr "data"} boogie_si_record_i64($i57);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb39;

  $bb34:
    assume $i50 == 1;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i51 := $or.i64(0, 48);
    call {:si_unique_call 894} {:cexpr "data"} boogie_si_record_i64($i51);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb36;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364312, 1));
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 4);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364312, 1));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, 8);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i40;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i21 := $i46;
    goto $bb21;

  $bb31:
    assume $i44 == 1;
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i45 := $or.i64($i40, 192);
    call {:si_unique_call 893} {:cexpr "data"} boogie_si_record_i64($i45);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb33;

  $bb28:
    assume $i38 == 1;
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i39 := $or.i64(0, 48);
    call {:si_unique_call 892} {:cexpr "data"} boogie_si_record_i64($i39);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb30;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i64($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb11:
    assume $i6 == 1;
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364312, 1));
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 1);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364312, 1));
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 16);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i28;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i21 := $i34;
    goto $bb21;

  $bb25:
    assume $i32 == 1;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i33 := $or.i64($i28, 192);
    call {:si_unique_call 891} {:cexpr "data"} boogie_si_record_i64($i33);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb27;

  $bb22:
    assume $i26 == 1;
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i27 := $or.i64(0, 48);
    call {:si_unique_call 890} {:cexpr "data"} boogie_si_record_i64($i27);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb24;

  $bb9:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364312, 1));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364312, 1));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 2);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i14;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb21;

  $bb18:
    assume $i18 == 1;
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i19 := $or.i64($i14, 192);
    call {:si_unique_call 889} {:cexpr "data"} boogie_si_record_i64($i19);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb20;

  $bb15:
    assume $i12 == 1;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i13 := $or.i64(0, 48);
    call {:si_unique_call 888} {:cexpr "data"} boogie_si_record_i64($i13);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb17;
}



const be_cmd_get_beacon_state: ref;

axiom be_cmd_get_beacon_state == $sub.ref(0, 842350);

procedure be_cmd_get_beacon_state($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_get_beacon_state($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i7: i32;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} {:cexpr "be_cmd_get_beacon_state:arg:port_num"} boogie_si_record_i8($i1);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} spin_lock_bh($p3);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $p4 := wrb_from_mccq($p0);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $p8 := embedded_payload($p4);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} be_wrb_cmd_hdr_prepare($p10, 1, 70, 20, $p4, $0.ref);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i1);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $i12 := be_mcc_notify_wait($p0);
    call {:si_unique_call 903} {:cexpr "status"} boogie_si_record_i32($i12);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} spin_unlock_bh($p19);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $p14 := embedded_payload($p4);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i18);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const be_cmd_set_beacon_state: ref;

axiom be_cmd_set_beacon_state == $sub.ref(0, 843382);

procedure be_cmd_set_beacon_state($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_set_beacon_state($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i9: i32;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} {:cexpr "be_cmd_set_beacon_state:arg:port_num"} boogie_si_record_i8($i1);
    call {:si_unique_call 906} {:cexpr "be_cmd_set_beacon_state:arg:bcn"} boogie_si_record_i8($i2);
    call {:si_unique_call 907} {:cexpr "be_cmd_set_beacon_state:arg:sts"} boogie_si_record_i8($i3);
    call {:si_unique_call 908} {:cexpr "be_cmd_set_beacon_state:arg:state"} boogie_si_record_i8($i4);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} spin_lock_bh($p5);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $p6 := wrb_from_mccq($p0);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $p10 := embedded_payload($p6);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} be_wrb_cmd_hdr_prepare($p12, 1, 69, 20, $p6, $0.ref);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i1);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 20)), $mul.ref(17, 1));
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i4);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 20)), $mul.ref(18, 1));
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i2);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 20)), $mul.ref(19, 1));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i3);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i17 := be_mcc_notify_wait($p0);
    call {:si_unique_call 915} {:cexpr "status"} boogie_si_record_i32($i17);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i9 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} spin_unlock_bh($p18);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 16);
    goto $bb3;
}



const be_loopback_test: ref;

axiom be_loopback_test == $sub.ref(0, 844414);

procedure be_loopback_test($p0: ref, $i1: i8, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_loopback_test($p0: ref, $i1: i8, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i8;
  var $i21: i64;
  var vslice_dummy_var_345: i32;
  var vslice_dummy_var_346: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} {:cexpr "be_loopback_test:arg:loopback_type"} boogie_si_record_i8($i1);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364232, 1));
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} vslice_dummy_var_345 := be_cmd_set_loopback($p0, $i6, $i8, 1);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364232, 1));
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i1);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i14 := be_cmd_loopback_test($p0, $i12, $i13, 1500, 2, 2748);
    call {:si_unique_call 919} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i15);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(364232, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} vslice_dummy_var_346 := be_cmd_set_loopback($p0, $i19, $sub.i8(0, 1), 1);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;
}



const be_test_ddr_dma: ref;

axiom be_test_ddr_dma == $sub.ref(0, 845446);

procedure be_test_ddr_dma($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.56, $M.57, $M.58, $M.0, $M.21, $CurrAddr;



implementation be_test_ddr_dma($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i28: i32;
  var $i29: i1;
  var $i20: i32;
  var $i30: i32;
  var $i27: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $p1 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8));
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $M.56 := $store.i64($M.56, $p3, 6510615555426900570);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8));
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $M.56 := $store.i64($M.56, $p4, $sub.i64(0, 6510615555426900571));
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $M.57 := $store.i32($M.57, $p5, 8224);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.57, $p9);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $p13 := dma_alloc_attrs($p8, $i11, $p12, 208, $0.ref);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $M.58 := $store.ref($M.58, $p14, $p13);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.58, $p15);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb5;

  $bb5:
    call $i21, $p22, $i23, $i24, $i25, $i26, $i28, $i29, $i20, $i30 := be_test_ddr_dma_loop_$bb5($p0, $p1, $p2, $i21, $p22, $i23, $i24, $i25, $i26, $i28, $i29, $i20, $i30);
    goto $bb5_last;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref($i21, 8));
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.56, $p22);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i24 := be_cmd_ddr_dma_test($p0, $i23, 4096, $p1);
    call {:si_unique_call 925} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i20, 1);
    call {:si_unique_call 927} {:cexpr "i"} boogie_si_record_i32($i28);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i29 := $sle.i32($i28, 1);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i30 := $i24;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i27 := $i30;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.57, $p34);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.58, $p37);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.59, $p39);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} dma_free_attrs($p33, $i36, $p38, $i40, $0.ref);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i19 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb11:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i28;
    goto $bb11_dummy;

  $bb7:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb9;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 12);
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6585;
}



const be_cmd_ddr_dma_test: ref;

axiom be_cmd_ddr_dma_test == $sub.ref(0, 846478);

procedure be_cmd_ddr_dma_test($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_ddr_dma_test($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i8;
  var $i24: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i18: i32;
  var $i19: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i8: i32;
  var $p49: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} {:cexpr "be_cmd_ddr_dma_test:arg:pattern"} boogie_si_record_i64($i1);
    call {:si_unique_call 929} {:cexpr "be_cmd_ddr_dma_test:arg:byte_cnt"} boogie_si_record_i32($i2);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} spin_lock_bh($p4);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p5 := wrb_from_mccq($p0);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.58, $p9);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 8224)), $mul.ref(0, 1));
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.57, $p13);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} be_wrb_cmd_hdr_prepare($p12, 11, 17, $i14, $p5, $p3);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 8224)), $mul.ref(16, 1));
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i1);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 8224)), $mul.ref(24, 1));
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i2);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32(0, $i2);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $i32 := be_mcc_notify_wait($p0);
    call {:si_unique_call 937} {:cexpr "status"} boogie_si_record_i32($i32);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i48 := $i32;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i8 := $i48;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} spin_unlock_bh($p49);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.58, $p34);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 8224)), $mul.ref(4128, 1));
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p11, $mul.ref(0, 8224)), $mul.ref(32, 1));
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i2);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i42 := memcmp($p38, $p40, $i41);
    call {:si_unique_call 939} {:cexpr "tmp"} boogie_si_record_i32($i42);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i43 == 1);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p36, $mul.ref(0, 8224)), $mul.ref(28, 1));
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $i32;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb24;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 1);
    goto $bb23;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb19;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i18, $i19 := 0, 0;
    goto $bb8;

  $bb8:
    call $i20, $i21, $i22, $i23, $i24, $p26, $i27, $i28, $i29, $i30, $i31, $i18, $i19 := be_cmd_ddr_dma_test_loop_$bb8($i1, $i2, $p11, $i20, $i21, $i22, $i23, $i24, $p26, $i27, $i28, $i29, $i30, $i31, $i18, $i19);
    goto $bb8_last;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $mul.i32($i18, 8);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i64($i1, $i21);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i8($i22);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i19);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 8224)), $mul.ref(32, 1)), $mul.ref($i24, 1));
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i23);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i18, 1);
    call {:si_unique_call 934} {:cexpr "j"} boogie_si_record_i32($i27);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, 7);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i19, 1);
    call {:si_unique_call 935} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $i31 := $ult.i32($i30, $i2);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i18, $i19 := $i29, $i30;
    goto $bb13_dummy;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6639;
}



const be_cmd_set_loopback: ref;

axiom be_cmd_set_loopback == $sub.ref(0, 847510);

procedure be_cmd_set_loopback($p0: ref, $i1: i8, $i2: i8, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_set_loopback($p0: ref, $i1: i8, $i2: i8, $i3: i8) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i8: i32;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} {:cexpr "be_cmd_set_loopback:arg:port_num"} boogie_si_record_i8($i1);
    call {:si_unique_call 941} {:cexpr "be_cmd_set_loopback:arg:loopback_type"} boogie_si_record_i8($i2);
    call {:si_unique_call 942} {:cexpr "be_cmd_set_loopback:arg:enable"} boogie_si_record_i8($i3);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} spin_lock_bh($p4);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $p5 := wrb_from_mccq($p0);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $p9 := embedded_payload($p5);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} be_wrb_cmd_hdr_prepare($p11, 11, 19, 20, $p5, $0.ref);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i1);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(17, 1));
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i1);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(18, 1));
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i2);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 20)), $mul.ref(19, 1));
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i3);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $i16 := be_mcc_notify_wait($p0);
    call {:si_unique_call 949} {:cexpr "status"} boogie_si_record_i32($i16);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i8 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} spin_unlock_bh($p17);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb3;
}



const be_cmd_loopback_test: ref;

axiom be_cmd_loopback_test == $sub.ref(0, 848542);

procedure be_cmd_loopback_test($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_loopback_test($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i64) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i10: i32;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} {:cexpr "be_cmd_loopback_test:arg:port_num"} boogie_si_record_i32($i1);
    call {:si_unique_call 951} {:cexpr "be_cmd_loopback_test:arg:loopback_type"} boogie_si_record_i32($i2);
    call {:si_unique_call 952} {:cexpr "be_cmd_loopback_test:arg:pkt_size"} boogie_si_record_i32($i3);
    call {:si_unique_call 953} {:cexpr "be_cmd_loopback_test:arg:num_pkts"} boogie_si_record_i32($i4);
    call {:si_unique_call 954} {:cexpr "be_cmd_loopback_test:arg:pattern"} boogie_si_record_i64($i5);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} spin_lock_bh($p6);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $p7 := wrb_from_mccq($p0);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $p11 := embedded_payload($p7);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} be_wrb_cmd_hdr_prepare($p13, 11, 18, 48, $p7, $0.ref);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 4);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p16, $i5);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i1);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i1);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i3);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(20, 1));
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i4);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i2);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $i22 := be_mcc_notify_wait($p0);
    call {:si_unique_call 961} {:cexpr "status"} boogie_si_record_i32($i22);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i28 := $i22;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i10 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} spin_unlock_bh($p29);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $p24 := embedded_payload($p7);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    call {:si_unique_call 963} {:cexpr "status"} boogie_si_record_i32($i27);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb3;
}



const lancer_cmd_read_file: ref;

axiom lancer_cmd_read_file == $sub.ref(0, 849574);

procedure lancer_cmd_read_file($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.60, $M.61, $M.41, $M.0, $M.21, $M.62, $CurrAddr;



implementation lancer_cmd_read_file($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i26: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i48: i1;
  var $i28: i32;
  var $i29: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i49: i32;
  var $i27: i32;
  var $i47: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i25: i32;
  var cmdloc_dummy_var_260: [ref]i8;
  var cmdloc_dummy_var_261: [ref]i8;
  var cmdloc_dummy_var_262: [ref]i8;
  var vslice_dummy_var_347: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $p7 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 968} {:cexpr "lancer_cmd_read_file:arg:buf_len"} boogie_si_record_i32($i2);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $M.60 := $store.i32($M.60, $p5, 0);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $M.61 := $store.i32($M.61, $p6, 0);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p8, 32768);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.41, $p11);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $p15 := pci_alloc_consistent($p10, $i13, $p14);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p16, $p15);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.41, $p17);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i26 := $ult.i32(0, $i2);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i27 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i47 := $i27;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.41, $p55);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i56);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.41, $p58);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.41, $p60);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} pci_free_consistent($p54, $i57, $p59, $i61);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i25 := $i47;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i28, $i29 := 0, 0;
    goto $bb8;

  $bb8:
    call $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p41, $p42, $i43, $i44, $i45, $i46, $i48, $i28, $i29, $i50, $i51, $i52, $i49, cmdloc_dummy_var_260, cmdloc_dummy_var_261, cmdloc_dummy_var_262 := lancer_cmd_read_file_loop_$bb8($p0, $p1, $i2, $p3, $p4, $p5, $p6, $p7, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p41, $p42, $i43, $i44, $i45, $i46, $i48, $i28, $i29, $i50, $i51, $i52, $i49, cmdloc_dummy_var_260, cmdloc_dummy_var_261, cmdloc_dummy_var_262);
    goto $bb8_last;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.61, $p6);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i52 := $i28;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i27 := $i52;
    goto $bb7;

  $bb19:
    assume $i51 == 1;
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i2, $i29);
    call {:si_unique_call 971} {:cexpr "__min1"} boogie_si_record_i32($i30);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i31 := $ult.i32($i30, 32768);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i32 := 32768;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i32, 3);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, $sub.i32(0, 4));
    call {:si_unique_call 972} {:cexpr "chunk_size"} boogie_si_record_i32($i34);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $i35 := lancer_cmd_read_object($p0, $p4, $i34, $i29, $p1, $p5, $p6, $p7);
    call {:si_unique_call 974} {:cexpr "status"} boogie_si_record_i32($i35);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 5);
    goto $bb16;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.60, $p5);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    call {:si_unique_call 975} {:cexpr "__len"} boogie_si_record_i64($i38);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i29);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p3, $mul.ref($i39, 1));
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.41, $p41);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_260 := $M.0;
    cmdloc_dummy_var_261 := $M.0;
    call {:si_unique_call 976} cmdloc_dummy_var_262 := $memcpy.i8(cmdloc_dummy_var_260, cmdloc_dummy_var_261, $p40, $p42, $i38, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_262;
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.60, $p5);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i29, $i43);
    call {:si_unique_call 977} {:cexpr "total_read_len"} boogie_si_record_i32($i44);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.61, $p6);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, $sub.i32(0, 2147483648));
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $M.61 := $store.i32($M.61, $p6, $i46);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i48 := $ult.i32($i44, $i2);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i49 := $i35;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i27 := $i49;
    goto $bb7;

  $bb17:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i28, $i29 := $i35, $i44;
    goto $bb17_dummy;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    goto $bb12;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} vslice_dummy_var_347 := dev_err.ref.ref($p23, .str.173);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6783;
}



const be_cmd_get_seeprom_data: ref;

axiom be_cmd_get_seeprom_data == $sub.ref(0, 850606);

procedure be_cmd_get_seeprom_data($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_get_seeprom_data($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i6: i32;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} spin_lock_bh($p2);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $p3 := wrb_from_mccq($p0);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.4, $p7);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1040)), $mul.ref(0, 1));
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} be_wrb_cmd_hdr_prepare($p10, 1, 30, 1040, $p3, $p1);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $i11 := be_mcc_notify_wait($p0);
    call {:si_unique_call 984} {:cexpr "status"} boogie_si_record_i32($i11);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} spin_unlock_bh($p12);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;
}



const lancer_cmd_read_object: ref;

axiom lancer_cmd_read_object == $sub.ref(0, 851638);

procedure lancer_cmd_read_object($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $p5: ref, $p6: ref, $p7: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.60, $M.61, $M.62, $CurrAddr;



implementation lancer_cmd_read_object($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $p5: ref, $p6: ref, $p7: ref) returns ($r: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i8;
  var $i12: i32;
  var $p42: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} {:cexpr "lancer_cmd_read_object:arg:data_size"} boogie_si_record_i32($i2);
    call {:si_unique_call 986} {:cexpr "lancer_cmd_read_object:arg:data_offset"} boogie_si_record_i32($i3);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} spin_lock_bh($p8);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $p9 := wrb_from_mccq($p0);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $p13 := embedded_payload($p9);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} be_wrb_cmd_hdr_prepare($p15, 1, $sub.i8(0, 85), 144, $p9, $0.ref);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i2);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(20, 1));
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i3);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(24, 1));
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $p20 := strcpy($p19, $p4);
    assume $isExternal($p20);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 1);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(132, 1));
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i2);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.41, $p23);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i24);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.41, $p27);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i29 := $lshr.i64($i28, 32);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p14, $mul.ref(0, 144)), $mul.ref(140, 1));
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $i32 := be_mcc_notify_wait($p0);
    call {:si_unique_call 994} {:cexpr "status"} boogie_si_record_i32($i32);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $p33 := embedded_payload($p9);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i32, 0);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i35 == 1);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p34, $mul.ref(0, 24)), $mul.ref(5, 1));
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $M.62 := $store.i8($M.62, $p7, $i41);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $i32;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} spin_unlock_bh($p42);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i35 == 1;
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p34, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $M.60 := $store.i32($M.60, $p5, $i37);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p34, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $M.61 := $store.i32($M.61, $p6, $i39);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb3;
}



const check_privilege: ref;

axiom check_privilege == $sub.ref(0, 852670);

procedure check_privilege($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation check_privilege($p0: ref, $i1: i32) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} {:cexpr "check_privilege:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(363956, 1));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $i1);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const lancer_cmd_get_file_len: ref;

axiom lancer_cmd_get_file_len == $sub.ref(0, 853702);

procedure lancer_cmd_get_file_len($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.60, $M.41, $M.0, $M.21, $M.61, $M.62, $CurrAddr;



implementation lancer_cmd_get_file_len($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var cmdloc_dummy_var_263: [ref]i8;
  var cmdloc_dummy_var_264: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $M.60 := $store.i32($M.60, $p2, 0);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_263 := $M.41;
    call {:si_unique_call 1001} cmdloc_dummy_var_264 := $memset.i8(cmdloc_dummy_var_263, $p6, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.41 := cmdloc_dummy_var_264;
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $i7 := lancer_cmd_read_object($p0, $p5, 0, 0, $p1, $p2, $p3, $p4);
    call {:si_unique_call 1003} {:cexpr "status"} boogie_si_record_i32($i7);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.60, $p2);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const be_set_fw_log_level: ref;

axiom be_set_fw_log_level == $sub.ref(0, 854734);

procedure be_set_fw_log_level($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.41, $M.0, $M.25, $M.21, $CurrAddr, assertsPassed, $M.26;



implementation be_set_fw_log_level($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i31: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i38: i64;
  var $i39: i64;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i48: i64;
  var $i49: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i37: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i30: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var cmdloc_dummy_var_265: [ref]i8;
  var cmdloc_dummy_var_266: [ref]i8;
  var vslice_dummy_var_348: i32;
  var vslice_dummy_var_349: i32;
  var vslice_dummy_var_350: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 1005} {:cexpr "be_set_fw_log_level:arg:level"} boogie_si_record_i32($i1);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_265 := $M.41;
    call {:si_unique_call 1006} cmdloc_dummy_var_266 := $memset.i8(cmdloc_dummy_var_265, $p3, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.41 := cmdloc_dummy_var_266;
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p4, 2844);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.41, $p7);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $p11 := pci_alloc_consistent($p6, $i9, $p10);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p12, $p11);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.41, $p13);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $i21 := be_cmd_get_ext_fat_capabilites($p0, $p2);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 1010} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} vslice_dummy_var_349 := dev_err.ref.ref($p68, .str.178);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.41, $p72);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i73);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.41, $p75);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.41, $p77);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} pci_free_consistent($p71, $i74, $p76, $i78);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.41, $p23);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(16, 2832));
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p25, $mul.ref(16, 2832)), $mul.ref(16, 1));
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i29 := $ult.i32(0, $i28);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $i60 := be_cmd_set_ext_fat_capabilites($p0, $p2, $p26);
    call {:si_unique_call 1016} {:cexpr "status"} boogie_si_record_i32($i60);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i61 == 1;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} vslice_dummy_var_350 := dev_err.ref.ref($p64, .str.177);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb10;

  $bb10:
    call $i31, $p34, $i35, $i36, $i38, $i39, $p44, $i45, $i46, $i47, $i48, $i49, $p54, $i55, $i56, $i37, $i57, $i58, $i59, $i30 := be_set_fw_log_level_loop_$bb10($i1, $p25, $p27, $i31, $p34, $i35, $i36, $i38, $i39, $p44, $i45, $i46, $i47, $i48, $i49, $p54, $i55, $i56, $i37, $i57, $i58, $i59, $i30);
    goto $bb10_last;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref($i31, 104)), $mul.ref(36, 1));
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    call {:si_unique_call 1012} {:cexpr "num_modes"} boogie_si_record_i32($i35);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i36 := $ult.i32(0, $i35);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i30, 1);
    call {:si_unique_call 1014} {:cexpr "i"} boogie_si_record_i32($i57);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p27);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i59 := $ult.i32($i57, $i58);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i59 == 1);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb23:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i57;
    goto $bb23_dummy;

  $bb12:
    assume $i36 == 1;
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb15;

  $bb15:
    call $i38, $i39, $p44, $i45, $i46, $i47, $i48, $i49, $p54, $i55, $i56, $i37 := be_set_fw_log_level_loop_$bb15($i1, $p25, $i35, $i38, $i39, $p44, $i45, $i46, $i47, $i48, $i49, $p54, $i55, $i56, $i37, $i30);
    goto $bb15_last;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i30);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref($i39, 104)), $mul.ref(40, 1)), $mul.ref($i38, 16)), $mul.ref(0, 1));
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i37, 1);
    call {:si_unique_call 1013} {:cexpr "j"} boogie_si_record_i32($i55);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i56 := $ult.i32($i55, $i35);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i56 == 1);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb20:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i37 := $i55;
    goto $bb20_dummy;

  $bb17:
    assume $i47 == 1;
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i37);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i30);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref($i49, 104)), $mul.ref(40, 1)), $mul.ref($i48, 16)), $mul.ref(4, 1));
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i1);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} vslice_dummy_var_348 := dev_err.ref.ref.ref($p19, .str.8, .str.176);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6978;

  $bb23_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6969;
}



const be_cmd_set_ext_fat_capabilites: ref;

axiom be_cmd_set_ext_fat_capabilites == $sub.ref(0, 855766);

procedure be_cmd_set_ext_fat_capabilites($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_set_ext_fat_capabilites($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i7: i32;
  var $p22: ref;
  var cmdloc_dummy_var_267: [ref]i8;
  var cmdloc_dummy_var_268: [ref]i8;
  var cmdloc_dummy_var_269: [ref]i8;
  var cmdloc_dummy_var_270: [ref]i8;
  var cmdloc_dummy_var_271: [ref]i8;
  var cmdloc_dummy_var_272: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} spin_lock_bh($p3);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $p4 := wrb_from_mccq($p0);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.41, $p8);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i64(2828, 63);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 2848)), $mul.ref(16, 1));
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p2);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_270 := $M.0;
    cmdloc_dummy_var_271 := $M.0;
    call {:si_unique_call 1023} cmdloc_dummy_var_272 := $memcpy.i8(cmdloc_dummy_var_270, cmdloc_dummy_var_271, $p16, $p17, 2828, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_272;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p10, $mul.ref(0, 2848)), $mul.ref(0, 1));
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.41, $p19);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} be_wrb_cmd_hdr_prepare($p18, 1, 126, $i20, $p4, $p1);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $i21 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1026} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i7 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} spin_unlock_bh($p22);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 2848)), $mul.ref(16, 1));
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_267 := $M.0;
    cmdloc_dummy_var_268 := $M.0;
    call {:si_unique_call 1022} cmdloc_dummy_var_269 := $memcpy.i8(cmdloc_dummy_var_267, cmdloc_dummy_var_268, $p13, $p14, 2828, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_269;
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const be_cmd_get_regs: ref;

axiom be_cmd_get_regs == $sub.ref(0, 856798);

procedure be_cmd_get_regs($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.41, $M.0, $M.21, $CurrAddr;



implementation be_cmd_get_regs($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var cmdloc_dummy_var_273: [ref]i8;
  var cmdloc_dummy_var_274: [ref]i8;
  var cmdloc_dummy_var_275: [ref]i8;
  var vslice_dummy_var_351: i32;
  var vslice_dummy_var_352: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 1028} {:cexpr "be_cmd_get_regs:arg:buf_len"} boogie_si_record_i32($i1);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 0);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1029} {:cexpr "be_cmd_get_regs:arg:total_size"} boogie_si_record_i32($i1);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p5, 61476);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.41, $p8);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $p12 := pci_alloc_consistent($p7, $i10, $p11);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p13, $p12);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.41, $p14);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} spin_lock_bh($p22);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i1, 0);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.41, $p63);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.41, $p66);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.41, $p68);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} pci_free_consistent($p62, $i65, $p67, $i69);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} spin_unlock_bh($p70);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i24, $i25, $i26 := 4, $i1, 0;
    goto $bb11;

  $bb11:
    call $i27, $i28, $i29, $p30, $i31, $i32, $p33, $p34, $p35, $i36, $p37, $p38, $p39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $p47, $i48, $i49, $i50, $p51, $p52, $p53, $i58, $i59, $i60, $i24, $i25, $i26, cmdloc_dummy_var_273, cmdloc_dummy_var_274, cmdloc_dummy_var_275 := be_cmd_get_regs_loop_$bb11($p0, $p2, $p3, $i27, $i28, $i29, $p30, $i31, $i32, $p33, $p34, $p35, $i36, $p37, $p38, $p39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $p47, $i48, $i49, $i50, $p51, $p52, $p53, $i58, $i59, $i60, $i24, $i25, $i26, cmdloc_dummy_var_273, cmdloc_dummy_var_274, cmdloc_dummy_var_275);
    goto $bb11_last;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i27 := $ult.i32($i25, 61440);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i28 := 61440;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i25, $i28);
    call {:si_unique_call 1033} {:cexpr "total_size"} boogie_si_record_i32($i29);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $p30 := wrb_from_mccq($p0);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.41, $p33);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i28, 36);
    call {:si_unique_call 1037} {:cexpr "payload_len"} boogie_si_record_i32($i36);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p35, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} be_wrb_cmd_hdr_prepare($p37, 1, 68, $i36, $p30, $p3);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p35, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i24);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p35, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i28);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p35, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i28);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $i42 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1040} {:cexpr "status"} boogie_si_record_i32($i42);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} vslice_dummy_var_352 := dev_err.ref.ref($p56, .str.16);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.41, $p44);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    call {:si_unique_call 1041} {:cexpr "__len"} boogie_si_record_i64($i49);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i26);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p2, $mul.ref($i50, 1));
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p46, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_273 := $M.0;
    cmdloc_dummy_var_274 := $M.0;
    call {:si_unique_call 1042} cmdloc_dummy_var_275 := $memcpy.i8(cmdloc_dummy_var_273, cmdloc_dummy_var_274, $p51, $p53, $i49, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_275;
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i26, $i28);
    call {:si_unique_call 1044} {:cexpr "offset"} boogie_si_record_i32($i58);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i24, $i28);
    call {:si_unique_call 1045} {:cexpr "log_offset"} boogie_si_record_i32($i59);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i29, 0);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i60 == 1);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb23:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i24, $i25, $i26 := $i59, $i29, $i58;
    goto $bb23_dummy;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i28 := $i25;
    goto $bb15;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} vslice_dummy_var_351 := dev_err.ref.ref($p20, .str.15);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7093;
}



const be_cmd_get_reg_len: ref;

axiom be_cmd_get_reg_len == $sub.ref(0, 857830);

procedure be_cmd_get_reg_len($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.3, $CurrAddr;



implementation be_cmd_get_reg_len($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i6: i32;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} spin_lock_bh($p2);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $p3 := wrb_from_mccq($p0);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $p7 := embedded_payload($p3);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} be_wrb_cmd_hdr_prepare($p9, 1, 68, 36, $p3, $0.ref);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i11 := be_mcc_notify_wait($p0);
    call {:si_unique_call 1052} {:cexpr "status"} boogie_si_record_i32($i11);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 364320)), $mul.ref(336, 1));
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} spin_unlock_bh($p23);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $p13 := embedded_payload($p3);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p1);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb9;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p14, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i21, 4);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p1, $i22);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 858862);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1054} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1055} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1056} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 859894);

procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



const pci_name: ref;

axiom pci_name == $sub.ref(0, 860926);

procedure pci_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $p2 := dev_name($p1);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 861958);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(80, 1));
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $p9 := kobject_name($p8);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(80, 1));
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 862990);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ethtool_cmd_speed_set: ref;

axiom ethtool_cmd_speed_set == $sub.ref(0, 864022);

procedure ethtool_cmd_speed_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ethtool_cmd_speed_set($p0: ref, $i1: i32)
{
  var $i2: i16;
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} {:cexpr "ethtool_cmd_speed_set:arg:speed"} boogie_si_record_i32($i1);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i16($i1);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $i2);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i1, 16);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, $i5);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    return;
}



const convert_to_et_setting: ref;

axiom convert_to_et_setting == $sub.ref(0, 865054);

procedure convert_to_et_setting($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation convert_to_et_setting($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i25: i32;

  $bb0:
    call {:si_unique_call 1060} {:cexpr "convert_to_et_setting:arg:if_type"} boogie_si_record_i32($i0);
    call {:si_unique_call 1061} {:cexpr "convert_to_et_setting:arg:if_speeds"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i58 := $or.i32(0, 128);
    call {:si_unique_call 1077} {:cexpr "val"} boogie_si_record_i32($i58);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i25 := $i58;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i12 := $or.i32(0, 128);
    call {:si_unique_call 1062} {:cexpr "val"} boogie_si_record_i32($i12);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i1, 4);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i16 := $i12;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i1, 2);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i16;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i1, 1);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i20;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb36;

  $bb33:
    assume $i22 == 1;
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i20, 2);
    call {:si_unique_call 1069} {:cexpr "val"} boogie_si_record_i32($i23);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb35;

  $bb30:
    assume $i18 == 1;
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i16, 8);
    call {:si_unique_call 1068} {:cexpr "val"} boogie_si_record_i32($i19);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb32;

  $bb27:
    assume $i14 == 1;
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i12, 32);
    call {:si_unique_call 1067} {:cexpr "val"} boogie_si_record_i32($i15);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb29;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i4 == 1;
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i0, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i7 == 1);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i45 := $or.i32(0, 128);
    call {:si_unique_call 1064} {:cexpr "val"} boogie_si_record_i32($i45);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i1, 8);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i49 := $i45;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i1, 4);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i53 := $i49;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i1, 2);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i57 := $i53;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i25 := $i57;
    goto $bb36;

  $bb55:
    assume $i55 == 1;
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i53, 8);
    call {:si_unique_call 1076} {:cexpr "val"} boogie_si_record_i32($i56);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb57;

  $bb52:
    assume $i51 == 1;
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i49, 32);
    call {:si_unique_call 1075} {:cexpr "val"} boogie_si_record_i32($i52);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb54;

  $bb49:
    assume $i47 == 1;
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i45, 4096);
    call {:si_unique_call 1074} {:cexpr "val"} boogie_si_record_i32($i48);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb51;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i26 := $or.i32(0, 65536);
    call {:si_unique_call 1063} {:cexpr "val"} boogie_si_record_i32($i26);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i1, 4);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i30 := $i26;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i1, 8);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i30;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i25 := $i34;
    goto $bb36;

  $bb40:
    assume $i32 == 1;
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i30, 262144);
    call {:si_unique_call 1071} {:cexpr "val"} boogie_si_record_i32($i33);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb42;

  $bb37:
    assume $i28 == 1;
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i26, 131072);
    call {:si_unique_call 1070} {:cexpr "val"} boogie_si_record_i32($i29);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb39;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i9 == 1);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i35 := $or.i32(0, 589824);
    call {:si_unique_call 1065} {:cexpr "val"} boogie_si_record_i32($i35);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i25 := $i35;
    goto $bb36;

  $bb19:
    assume $i9 == 1;
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i36 := $or.i32(0, 1024);
    call {:si_unique_call 1066} {:cexpr "val"} boogie_si_record_i32($i36);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i1, 8);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i36;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i1, 4);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i44 := $i40;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i25 := $i44;
    goto $bb36;

  $bb46:
    assume $i42 == 1;
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i40, 32);
    call {:si_unique_call 1073} {:cexpr "val"} boogie_si_record_i32($i43);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb48;

  $bb43:
    assume $i38 == 1;
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i36, 4096);
    call {:si_unique_call 1072} {:cexpr "val"} boogie_si_record_i32($i39);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb45;

  $bb17:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb23;

  $bb21:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb14;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb25;
}



const be_get_port_type: ref;

axiom be_get_port_type == $sub.ref(0, 866086);

procedure be_get_port_type($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation be_get_port_type($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i12: i1;
  var $i13: i32;
  var $i11: i32;

  $bb0:
    call {:si_unique_call 1078} {:cexpr "be_get_port_type:arg:phy_type"} boogie_si_record_i32($i0);
    call {:si_unique_call 1079} {:cexpr "be_get_port_type:arg:dac_cable_len"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i11 := 255;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb24;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i0, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i6 == 1);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb24;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb12;

  $bb20:
    assume $i9 == 1;
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i1, 0);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then 5 else 3);
    call {:si_unique_call 1080} {:cexpr "port"} boogie_si_record_i32($i13);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb24;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i11 := 3;
    goto $bb24;

  $bb15:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb12;

  $bb22:
    assume $i10 == 1;
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    goto $bb18;
}



const ethtool_cmd_speed: ref;

axiom ethtool_cmd_speed == $sub.ref(0, 867118);

procedure ethtool_cmd_speed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ethtool_cmd_speed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 16);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i4, $i7);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const netif_carrier_ok: ref;

axiom netif_carrier_ok == $sub.ref(0, 868150);

procedure netif_carrier_ok($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_carrier_ok($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2784)), $mul.ref(72, 1));
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i2 := constant_test_bit(2, $p1);
    call {:si_unique_call 1082} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 869182);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.38, $M.63, $M.25, $M.64;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1083} {:cexpr "ldv_mutex_be_adapter_list_lock"} boogie_si_record_i32(1);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1084} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 1085} {:cexpr "ldv_mutex_mbox_lock_of_be_adapter"} boogie_si_record_i32(1);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1086} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    return;
}



const ldv_handler_precall: ref;

axiom ldv_handler_precall == $sub.ref(0, 870214);

procedure ldv_handler_precall();
  free requires assertsPassed;



implementation ldv_handler_precall()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 871246);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i0 := $M.38;
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} ldv_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.63;
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} ldv_error();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.25;
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} ldv_error();
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.64;
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} ldv_error();
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const main: ref;

axiom main == $sub.ref(0, 872278);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.63, $M.25, $M.64, $M.2, $M.0, $M.3, $M.4, $M.1, $M.66, $M.68, $M.69, $M.43, $M.44, $M.45, $M.70, $M.28, $M.27, $M.78, $M.79, $M.80, $M.81, $M.82, $CurrAddr, $M.56, $M.57, $M.58, $M.21, $M.60, $M.41, $M.61, $M.62, assertsPassed, $M.6, $M.7, $M.9, $M.10, $M.14, $M.15, $M.26, $M.13, $M.17, $M.18, $M.19, $M.20;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i41: i32;
  var $i42: i1;
  var vslice_dummy_var_353: i32;
  var vslice_dummy_var_354: i32;
  var vslice_dummy_var_355: i32;
  var vslice_dummy_var_356: i32;
  var vslice_dummy_var_357: i32;
  var vslice_dummy_var_358: i32;
  var vslice_dummy_var_359: i32;
  var vslice_dummy_var_360: i32;
  var vslice_dummy_var_361: i32;
  var vslice_dummy_var_362: i32;
  var vslice_dummy_var_363: i32;
  var vslice_dummy_var_364: i32;
  var vslice_dummy_var_365: i32;
  var vslice_dummy_var_366: i32;

  $bb0:
    call {:si_unique_call 1091} $initialize();
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} ldv_initialize();
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1095} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1096} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1097} {:cexpr "tmp___0"} boogie_si_record_i32($i0);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} ldv_check_final_state();
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i41, $i42, vslice_dummy_var_353, vslice_dummy_var_354, vslice_dummy_var_355, vslice_dummy_var_356, vslice_dummy_var_357, vslice_dummy_var_358, vslice_dummy_var_359, vslice_dummy_var_360, vslice_dummy_var_361, vslice_dummy_var_362, vslice_dummy_var_363, vslice_dummy_var_364, vslice_dummy_var_365, vslice_dummy_var_366 := main_loop_$bb4($i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i41, $i42, vslice_dummy_var_353, vslice_dummy_var_354, vslice_dummy_var_355, vslice_dummy_var_356, vslice_dummy_var_357, vslice_dummy_var_358, vslice_dummy_var_359, vslice_dummy_var_360, vslice_dummy_var_361, vslice_dummy_var_362, vslice_dummy_var_363, vslice_dummy_var_364, vslice_dummy_var_365, vslice_dummy_var_366);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1098} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1099} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1100} {:cexpr "tmp"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i2, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1147} $i41 := __VERIFIER_nondet_int();
    call {:si_unique_call 1148} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i41);
    call {:si_unique_call 1149} {:cexpr "tmp___0"} boogie_si_record_i32($i41);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i42 == 1);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb58_dummy;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} ldv_handler_precall();
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} vslice_dummy_var_354 := be_set_rxnfc($u1, $u15);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} ldv_handler_precall();
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} vslice_dummy_var_353 := be_get_rxnfc($u1, $u15, $u16);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} ldv_handler_precall();
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} be_self_test($u1, $u14, $u11);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i2, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i2, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i10 == 1);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} ldv_handler_precall();
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} vslice_dummy_var_356 := be_do_flash($u1, $u13);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb22:
    assume $i10 == 1;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} ldv_handler_precall();
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} be_get_regs($u1, $u12, $u6);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb20:
    assume $i9 == 1;
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} ldv_handler_precall();
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} vslice_dummy_var_355 := be_get_reg_len($u1);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i2, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i2, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i2, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i13 == 1);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} ldv_handler_precall();
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} be_get_ethtool_stats($u1, $u10, $u11);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb28:
    assume $i13 == 1;
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} ldv_handler_precall();
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} vslice_dummy_var_357 := be_get_sset_count($u1, $u0);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb26:
    assume $i12 == 1;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} ldv_handler_precall();
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} be_set_msg_level($u1, $u0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i2, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i2, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i15 == 1);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} ldv_handler_precall();
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} vslice_dummy_var_359 := be_get_msg_level($u1);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb32:
    assume $i15 == 1;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} ldv_handler_precall();
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} vslice_dummy_var_358 := be_set_phys_id($u1, $u0);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb30:
    assume $i14 == 1;
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} ldv_handler_precall();
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} be_get_stat_strings($u1, $u0, $u6);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb7:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i2, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i2, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i19 == 1);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} ldv_handler_precall();
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} vslice_dummy_var_360 := be_set_pauseparam($u1, $u9);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb40:
    assume $i19 == 1;
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} ldv_handler_precall();
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} be_get_pauseparam($u1, $u9);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb38:
    assume $i18 == 1;
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} ldv_handler_precall();
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} be_get_ringparam($u1, $u8);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb36:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i2, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i21 == 1);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} ldv_handler_precall();
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} vslice_dummy_var_363 := be_set_coalesce($u1, $u7);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb44:
    assume $i21 == 1;
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} ldv_handler_precall();
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} vslice_dummy_var_362 := be_get_coalesce($u1, $u7);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb42:
    assume $i20 == 1;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} ldv_handler_precall();
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} vslice_dummy_var_361 := be_read_eeprom($u1, $u5, $u6);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb34:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i24 == 1);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} ldv_handler_precall();
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} vslice_dummy_var_365 := be_get_eeprom_len($u1);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb50:
    assume $i24 == 1;
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} ldv_handler_precall();
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} vslice_dummy_var_364 := be_set_wol($u1, $u4);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb48:
    assume $i23 == 1;
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} ldv_handler_precall();
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} be_get_wol($u1, $u4);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb46:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i25 == 1);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} ldv_handler_precall();
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} be_get_drvinfo($u1, $u3);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb52:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb19;

  $bb54:
    assume $i26 == 1;
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} ldv_handler_precall();
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} vslice_dummy_var_366 := be_get_settings($u1, $u2);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb58_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 873310);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1151} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 1} true;
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 874342);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 875374);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 876406);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 877438);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 878470);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 879502);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 880534);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 881566);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 882598);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 883630);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 884662);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 885694);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 886726);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 887758);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1152} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1153} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1154} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1155} __VERIFIER_assume($i4);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 888790);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 889822);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 890854);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 891886);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1156} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1157} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1158} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1159} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1160} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1161} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1162} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1163} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1164} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1165} __VERIFIER_assume($i7);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1166} __VERIFIER_assume($i11);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 892918);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 893950);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 894982);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 896014);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 897046);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 898078);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1167} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1168} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1169} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1170} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1171} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1172} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1173} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1174} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1175} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1176} __VERIFIER_assume($i7);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1177} __VERIFIER_assume($i11);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 899110);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 900142);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 901174);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 902206);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 903238);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 904270);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 905302);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 906334);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 907366);

procedure __VERIFIER_nondet_bool() returns ($r: i1);



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 908398);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 909430);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1178} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1179} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1180} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 910462);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1181} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1182} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1183} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 911494);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 912526);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 913558);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1184} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 914590);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 915622);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 916654);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 917686);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.66, $M.0, $M.68, $M.69, $M.43, $M.44, $M.45, $M.70, $M.28, $M.27, $M.64, $M.25, $M.63, $M.38, $M.78, $M.79, $M.80, $M.81, $M.82;



implementation __SMACK_static_init()
{

  $bb0:
    $M.66 := $store.i8($M.66, flash_cookie, 42);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(1, 1)), 42);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(2, 1)), 42);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(3, 1)), 32);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(4, 1)), 83);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(5, 1)), 69);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(6, 1)), 32);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(7, 1)), 70);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(8, 1)), 76);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(9, 1)), 65);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(10, 1)), 83);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(11, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(12, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(13, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(14, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1)), 72);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(1, 1)), 32);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(2, 1)), 68);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(3, 1)), 73);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(4, 1)), 82);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(5, 1)), 69);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(6, 1)), 67);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(7, 1)), 84);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(8, 1)), 79);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(9, 1)), 82);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(10, 1)), 89);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(11, 1)), 32);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(12, 1)), 42);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(13, 1)), 42);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(14, 1)), 42);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(flash_cookie, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(15, 1)), 32);
    call {:si_unique_call 1185} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, be_ethtool_ops, be_get_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(16, 1)), be_get_drvinfo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(24, 1)), be_get_reg_len);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(32, 1)), be_get_regs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(40, 1)), be_get_wol);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(48, 1)), be_set_wol);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(56, 1)), be_get_msg_level);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(64, 1)), be_set_msg_level);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(80, 1)), ethtool_op_get_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(88, 1)), be_get_eeprom_len);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(96, 1)), be_read_eeprom);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(112, 1)), be_get_coalesce);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(120, 1)), be_set_coalesce);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(128, 1)), be_get_ringparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(144, 1)), be_get_pauseparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(152, 1)), be_set_pauseparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(160, 1)), be_self_test);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(168, 1)), be_get_stat_strings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(176, 1)), be_set_phys_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(184, 1)), be_get_ethtool_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(224, 1)), be_get_sset_count);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(232, 1)), be_get_rxnfc);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(240, 1)), be_set_rxnfc);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(248, 1)), be_do_flash);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_ethtool_ops, $mul.ref(0, 368)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.i32($M.0, be_adapter_list_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.187);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(be_adapter_list_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(be_adapter_list_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(112, 1)), be_adapter_list_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.188);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_adapter_list_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, et_self_tests, 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(1, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(4, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(1, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(2, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(4, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(9, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(16, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(2, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(4, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(5, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(3, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(et_self_tests, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(31, 1)), 0);
    $M.68 := $store.i8($M.68, et_tx_stats, 116);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 99);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 111);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 109);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 108);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(32, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(36, 1)), 8);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(0, 44)), $mul.ref(40, 1)), 32);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 98);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 121);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 101);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(32, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(36, 1)), 8);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(40, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 107);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(32, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(36, 1)), 8);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(40, 1)), 8);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 114);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 101);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 113);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(32, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(36, 1)), 8);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(40, 1)), 16);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 119);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 98);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(32, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(36, 1)), 8);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(40, 1)), 24);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 115);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 116);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(32, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(36, 1)), 4);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(40, 1)), 48);
    $M.69 := $store.i8($M.69, et_rx_stats, 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 98);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 121);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 101);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(32, 1)), 1);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(36, 1)), 8);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(0, 44)), $mul.ref(40, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 107);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(32, 1)), 1);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(36, 1)), 8);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(40, 1)), 8);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 99);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 111);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 109);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 108);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(32, 1)), 1);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(36, 1)), 4);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(40, 1)), 44);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 109);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 99);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 97);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 112);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 107);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(32, 1)), 1);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(36, 1)), 4);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(40, 1)), 48);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 111);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 102);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 97);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 105);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 108);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(32, 1)), 1);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(36, 1)), 4);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(40, 1)), 40);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 110);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 107);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 98);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(32, 1)), 1);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(36, 1)), 4);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(40, 1)), 32);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 110);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 102);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 97);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 103);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(32, 1)), 1);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(36, 1)), 4);
    $M.69 := $store.i32($M.69, $add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(40, 1)), 36);
    $M.0 := $store.i8($M.0, et_stats, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(0, 44)), $mul.ref(40, 1)), 36);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(1, 44)), $mul.ref(40, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(2, 44)), $mul.ref(40, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(3, 44)), $mul.ref(40, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(4, 44)), $mul.ref(40, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(5, 44)), $mul.ref(40, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(6, 44)), $mul.ref(40, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(7, 44)), $mul.ref(40, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(8, 44)), $mul.ref(40, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(9, 44)), $mul.ref(40, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(10, 44)), $mul.ref(40, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(11, 44)), $mul.ref(40, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(12, 44)), $mul.ref(40, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(13, 44)), $mul.ref(40, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(14, 44)), $mul.ref(40, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(15, 44)), $mul.ref(40, 1)), 92);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(16, 44)), $mul.ref(40, 1)), 96);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(17, 44)), $mul.ref(40, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(18, 44)), $mul.ref(40, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(19, 44)), $mul.ref(40, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(20, 44)), $mul.ref(40, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(21, 44)), $mul.ref(40, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(22, 44)), $mul.ref(40, 1)), 124);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(23, 44)), $mul.ref(40, 1)), 128);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(24, 44)), $mul.ref(40, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(25, 44)), $mul.ref(40, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(26, 44)), $mul.ref(40, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(27, 44)), $mul.ref(40, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(28, 44)), $mul.ref(40, 1)), 28);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(29, 44)), $mul.ref(40, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(30, 44)), $mul.ref(40, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(36, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(et_stats, $mul.ref(0, 1408)), $mul.ref(31, 44)), $mul.ref(40, 1)), 0);
    $M.43 := $store.i8($M.43, cmd_priv_map, 12);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(1, 1)), 3);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(4, 1)), 1800);
    $M.43 := $store.i8($M.43, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(0, 1)), 37);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(1, 1)), 1);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(4, 1)), 1794);
    $M.43 := $store.i8($M.43, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(0, 1)), 36);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(1, 1)), 1);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(4, 1)), 1800);
    $M.43 := $store.i8($M.43, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(0, 1)), 18);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(1, 1)), 3);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(4, 1)), 1800);
    $M.43 := $store.i8($M.43, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(0, 1)), 102);
    $M.44 := $store.i8($M.44, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(1, 1)), 1);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(cmd_priv_map, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(4, 1)), 1800);
    $M.0 := $store.ref($M.0, be_netdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(16, 1)), be_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(24, 1)), be_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(32, 1)), be_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(56, 1)), be_set_rx_mode);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(64, 1)), be_mac_addr_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(72, 1)), eth_validate_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(96, 1)), be_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(120, 1)), be_get_stats64);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(136, 1)), be_vlan_add_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(144, 1)), be_vlan_rem_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(152, 1)), be_netpoll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(176, 1)), be_set_vf_mac);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(184, 1)), be_set_vf_vlan);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(192, 1)), be_set_vf_tx_rate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(208, 1)), be_get_vf_config);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_netdev_ops, $mul.ref(0, 408)), $mul.ref(400, 1)), $0.ref);
    call {:si_unique_call 1186} {:cexpr "num_vfs"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, be_eeh_handlers, be_eeh_err_detected);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_eeh_handlers, $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_eeh_handlers, $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_eeh_handlers, $mul.ref(0, 40)), $mul.ref(24, 1)), be_eeh_reset);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(be_eeh_handlers, $mul.ref(0, 40)), $mul.ref(32, 1)), be_eeh_resume);
    $M.0 := $store.i32($M.0, be_dev_ids, 6562);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(4, 1)), 529);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(0, 1)), 6562);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(4, 1)), 545);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(0, 1)), 6562);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(4, 1)), 1792);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(0, 1)), 6562);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(4, 1)), 1808);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(0, 1)), 4319);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(4, 1)), 57888);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(0, 1)), 4319);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(4, 1)), 57896);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(0, 1)), 4319);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(4, 1)), 1824);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(0, 1)), 4319);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(4, 1)), 1832);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(be_dev_ids, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.70 := $store.ref($M.70, be_driver, $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.97);
    $M.70 := $store.ref($M.70, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), be_dev_ids);
    $M.70 := $store.ref($M.70, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), be_probe);
    $M.70 := $store.ref($M.70, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), be_remove);
    $M.70 := $store.ref($M.70, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), be_suspend);
    $M.70 := $store.ref($M.70, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), be_resume);
    $M.70 := $store.ref($M.70, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), be_shutdown);
    $M.70 := $store.ref($M.70, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), be_eeh_handlers);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.70 := $store.i32($M.70, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.70 := $store.i64($M.70, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.70 := $store.ref($M.70, $add.ref($add.ref($add.ref($add.ref(be_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.28 := $store.ref($M.28, ue_status_hi_desc, .str.57);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(1, 8)), .str.58);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(2, 8)), .str.59);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(3, 8)), .str.60);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(4, 8)), .str.61);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(5, 8)), .str.62);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(6, 8)), .str.63);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(7, 8)), .str.64);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(8, 8)), .str.65);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(9, 8)), .str.66);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(10, 8)), .str.67);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(11, 8)), .str.68);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(12, 8)), .str.69);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(13, 8)), .str.70);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(14, 8)), .str.71);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(15, 8)), .str.72);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(16, 8)), .str.73);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(17, 8)), .str.74);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(18, 8)), .str.75);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(19, 8)), .str.76);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(20, 8)), .str.77);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(21, 8)), .str.78);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(22, 8)), .str.79);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(23, 8)), .str.80);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(24, 8)), .str.81);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(25, 8)), .str.81);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(26, 8)), .str.81);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(27, 8)), .str.81);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(28, 8)), .str.81);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(29, 8)), .str.81);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(30, 8)), .str.81);
    $M.28 := $store.ref($M.28, $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(31, 8)), .str.81);
    $M.27 := $store.ref($M.27, ue_status_low_desc, .str.25);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(1, 8)), .str.26);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(2, 8)), .str.27);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(3, 8)), .str.28);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(4, 8)), .str.29);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(5, 8)), .str.30);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(6, 8)), .str.31);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(7, 8)), .str.32);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(8, 8)), .str.33);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(9, 8)), .str.34);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(10, 8)), .str.35);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(11, 8)), .str.36);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(12, 8)), .str.37);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(13, 8)), .str.38);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(14, 8)), .str.39);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(15, 8)), .str.40);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(16, 8)), .str.41);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(17, 8)), .str.42);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(18, 8)), .str.43);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(19, 8)), .str.44);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(20, 8)), .str.45);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(21, 8)), .str.46);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(22, 8)), .str.47);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(23, 8)), .str.48);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(24, 8)), .str.49);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(25, 8)), .str.50);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(26, 8)), .str.51);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(27, 8)), .str.52);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(28, 8)), .str.53);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(29, 8)), .str.54);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(30, 8)), .str.55);
    $M.27 := $store.ref($M.27, $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(31, 8)), .str.56);
    call {:si_unique_call 1187} {:cexpr "rx_frag_size"} boogie_si_record_i16(2048);
    $M.64 := 0;
    call {:si_unique_call 1188} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 1189} {:cexpr "ldv_mutex_mbox_lock_of_be_adapter"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 1190} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 1191} {:cexpr "ldv_mutex_be_adapter_list_lock"} boogie_si_record_i32(0);
    $M.78 := $store.i8($M.78, .str.95, 51);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(1, 1)), 46);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(2, 1)), 49);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(3, 1)), 48);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(4, 1)), 50);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(5, 1)), 46);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(6, 1)), 49);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(7, 1)), 52);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(8, 1)), 56);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(9, 1)), 46);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(10, 1)), 48);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.95, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.83, 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 5)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 5)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 5)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.97, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 7)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 7)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 7)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 7)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.79 := $store.i8($M.79, .str.99, 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.99, $mul.ref(0, 7)), $mul.ref(1, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.99, $mul.ref(0, 7)), $mul.ref(2, 1)), 45);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.99, $mul.ref(0, 7)), $mul.ref(3, 1)), 113);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.99, $mul.ref(0, 7)), $mul.ref(4, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.99, $mul.ref(0, 7)), $mul.ref(5, 1)), 100);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.99, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.187, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(19, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(20, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(21, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(22, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(25, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(27, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(28, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(29, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.187, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.188, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(19, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.80 := $store.i8($M.80, .str.183, 114);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(1, 1)), 120);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(2, 1)), 113);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(3, 1)), 37);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(4, 1)), 100);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(5, 1)), 58);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(6, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.183, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.81 := $store.i8($M.81, .str.184, 116);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(1, 1)), 120);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(2, 1)), 113);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(3, 1)), 37);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(4, 1)), 100);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(5, 1)), 58);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(6, 1)), 32);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.184, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.179, 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(1, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(4, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(11, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(12, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.180, 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(1, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(4, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(9, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(11, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(12, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.180, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.172, 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(4, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(9, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(10, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.170, 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(1, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(2, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(3, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(4, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(5, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(6, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(7, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.82 := $store.i8($M.82, .str.171, 37);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.171, $mul.ref(0, 8)), $mul.ref(1, 1)), 115);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.171, $mul.ref(0, 8)), $mul.ref(2, 1)), 32);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.171, $mul.ref(0, 8)), $mul.ref(3, 1)), 91);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.171, $mul.ref(0, 8)), $mul.ref(4, 1)), 37);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.171, $mul.ref(0, 8)), $mul.ref(5, 1)), 115);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.171, $mul.ref(0, 8)), $mul.ref(6, 1)), 93);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.171, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    call {:si_unique_call 1192} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 918718);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 919750);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 920782);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 921814);

procedure devirtbounce.3(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 922846);

procedure devirtbounce.4(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 923878);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(be_get_pauseparam, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(be_get_ringparam, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i11 == 1);
    $i10 := $eq.ref(be_get_wol, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i10 == 1);
    $i9 := $eq.ref(be_get_drvinfo, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1193} be_get_drvinfo($p1, $p2);
    return;

  $bb3:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1194} be_get_wol($p3, $p4);
    return;

  $bb4:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1195} be_get_ringparam($p5, $p6);
    return;

  $bb5:
    assume $i12 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1196} be_get_pauseparam($p7, $p8);
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 924910);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32);



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 925942);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 926974);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 928006);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 929038);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 930070);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32);



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 931102);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 932134);

procedure devirtbounce.13(funcPtr: ref, arg: i64, arg1: i32) returns ($r: i32);



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 933166);

procedure devirtbounce.14(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 934198);

procedure devirtbounce.15(funcPtr: ref, arg: ref);



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 935230);

procedure devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: ref);



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 936262);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

const $u1: ref;

const $u10: ref;

const $u11: ref;

const $u12: ref;

const $u13: ref;

const $u14: ref;

const $u15: ref;

const $u16: ref;

const $u2: ref;

const $u3: ref;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.66, $M.0, $M.68, $M.69, $M.43, $M.44, $M.45, $M.70, $M.28, $M.27, $M.64, $M.25, $M.63, $M.38, $M.78, $M.79, $M.80, $M.81, $M.82, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1197} __SMACK_static_init();
    call {:si_unique_call 1198} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.38, $M.63, $M.25, $M.64, $M.2, $M.0, $M.3, $M.4, $M.1, $M.66, $M.68, $M.69, $M.43, $M.44, $M.45, $M.70, $M.28, $M.27, $M.78, $M.79, $M.80, $M.81, $M.82, $CurrAddr, $M.56, $M.57, $M.58, $M.21, $M.60, $M.41, $M.61, $M.62, $M.6, $M.7, $M.9, $M.10, $M.14, $M.15, $M.26, $M.13, $M.17, $M.18, $M.19, $M.20;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation be_set_coalesce_loop_$bb4(in_$p1: ref, in_$p8: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$i17: i8, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i11: i32, in_$p12: ref) returns (out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$i17: i8, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i11: i32, out_$p12: ref)
{

  entry:
    out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i11, out_$p12 := in_$p13, in_$i14, in_$i15, in_$p16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i31, in_$p32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i11, in_$p12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_635;

  $bb12:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i11, out_$p12 := out_$i33, out_$p34;
    goto $bb12_dummy;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    out_$i36 := $ult.i32(out_$i33, out_$i35);
    goto corral_source_split_674;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, in_$p8);
    goto corral_source_split_673;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p12, $mul.ref(1, 272));
    goto corral_source_split_672;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i11, 1);
    call {:si_unique_call 85} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_671;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p32, out_$i31);
    goto corral_source_split_670;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p12, $mul.ref(0, 272)), $mul.ref(84, 1));
    goto corral_source_split_669;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_668;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_667;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p29, out_$i28);
    goto corral_source_split_666;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p12, $mul.ref(0, 272)), $mul.ref(76, 1));
    goto corral_source_split_665;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_664;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i26;
    goto $bb11;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i24;
    goto $bb11;

  $bb9:
    assume out_$i27 == 1;
    goto corral_source_split_660;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    out_$i27 := $ult.i32(out_$i24, out_$i26);
    goto corral_source_split_658;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    call {:si_unique_call 84} {:cexpr "_min2___0"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_657;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p12, $mul.ref(0, 272)), $mul.ref(80, 1));
    goto corral_source_split_656;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    call {:si_unique_call 83} {:cexpr "_min1___0"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_655;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p1, $mul.ref(0, 92)), $mul.ref(52, 1));
    goto corral_source_split_654;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p22, out_$i21);
    goto corral_source_split_653;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p12, $mul.ref(0, 272)), $mul.ref(80, 1));
    goto corral_source_split_652;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_651;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    out_$i21 := 96;
    goto $bb8;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i19;
    goto $bb8;

  $bb6:
    assume out_$i20 == 1;
    goto corral_source_split_647;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i32(out_$i19, 96);
    goto corral_source_split_645;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    call {:si_unique_call 82} {:cexpr "_min1"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_644;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p1, $mul.ref(0, 92)), $mul.ref(72, 1));
    goto corral_source_split_643;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p16, out_$i17);
    goto corral_source_split_642;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i1.i8(out_$i15);
    goto corral_source_split_641;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p12, $mul.ref(0, 272)), $mul.ref(72, 1));
    goto corral_source_split_640;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_639;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_638;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p1, $mul.ref(0, 92)), $mul.ref(40, 1));
    goto corral_source_split_637;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume !(out_$i20 == 1);
    goto corral_source_split_649;

  $bb10:
    assume !(out_$i27 == 1);
    goto corral_source_split_662;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i11, out_$p12 := be_set_coalesce_loop_$bb4(in_$p1, in_$p8, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i11, out_$p12);
    return;

  exit:
    return;
}



procedure be_set_coalesce_loop_$bb4(in_$p1: ref, in_$p8: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$i17: i8, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i11: i32, in_$p12: ref) returns (out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$i17: i8, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i11: i32, out_$p12: ref);
  modifies $M.0;



implementation be_get_stat_strings_loop_$bb31(in_$p23: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$p26: ref, in_$i27: i32, in_$i41: i64, in_$p42: ref, in_$i44: i64, in_$p45: ref, in_$i47: i64, in_$p48: ref, in_$i50: i64, in_$p51: ref, in_$i53: i64, in_$p54: ref, in_vslice_dummy_var_292: i32, in_vslice_dummy_var_293: i32, in_vslice_dummy_var_294: i32, in_vslice_dummy_var_295: i32, in_vslice_dummy_var_296: i32, in_vslice_dummy_var_297: i32) returns (out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$p26: ref, out_$i27: i32, out_$i41: i64, out_$p42: ref, out_$i44: i64, out_$p45: ref, out_$i47: i64, out_$p48: ref, out_$i50: i64, out_$p51: ref, out_$i53: i64, out_$p54: ref, out_vslice_dummy_var_292: i32, out_vslice_dummy_var_293: i32, out_vslice_dummy_var_294: i32, out_vslice_dummy_var_295: i32, out_vslice_dummy_var_296: i32, out_vslice_dummy_var_297: i32)
{

  entry:
    out_$p29, out_$i30, out_$i31, out_$i32, out_$p26, out_$i27, out_$i41, out_$p42, out_$i44, out_$p45, out_$i47, out_$p48, out_$i50, out_$p51, out_$i53, out_$p54, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295, out_vslice_dummy_var_296, out_vslice_dummy_var_297 := in_$p29, in_$i30, in_$i31, in_$i32, in_$p26, in_$i27, in_$i41, in_$p42, in_$i44, in_$p45, in_$i47, in_$p48, in_$i50, in_$p51, in_$i53, in_$p54, in_vslice_dummy_var_292, in_vslice_dummy_var_293, in_vslice_dummy_var_294, in_vslice_dummy_var_295, in_vslice_dummy_var_296, in_vslice_dummy_var_297;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_897;

  $bb37:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p26, out_$i27 := out_$p54, out_$i30;
    goto $bb37_dummy;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    out_$i32 := $ult.i32(out_$i30, out_$i31);
    goto corral_source_split_907;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, in_$p23);
    goto corral_source_split_906;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i27, 1);
    call {:si_unique_call 118} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_905;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p26, $mul.ref(out_$i53, 1));
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} out_vslice_dummy_var_297 := sprintf.ref.ref.i32.ref(out_$p51, .str.184, out_$i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i53 := $add.i64(out_$i50, 32);
    goto corral_source_split_956;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p26, $mul.ref(out_$i50, 1));
    goto corral_source_split_954;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} out_vslice_dummy_var_296 := sprintf.ref.ref.i32.ref(out_$p48, .str.184, out_$i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i50 := $add.i64(out_$i47, 32);
    goto corral_source_split_953;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p26, $mul.ref(out_$i47, 1));
    goto corral_source_split_951;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} out_vslice_dummy_var_295 := sprintf.ref.ref.i32.ref(out_$p45, .str.184, out_$i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i47 := $add.i64(out_$i44, 32);
    goto corral_source_split_950;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p26, $mul.ref(out_$i44, 1));
    goto corral_source_split_948;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} out_vslice_dummy_var_294 := sprintf.ref.ref.i32.ref(out_$p42, .str.184, out_$i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i44 := $add.i64(out_$i41, 32);
    goto corral_source_split_947;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p26, $mul.ref(out_$i41, 1));
    goto corral_source_split_903;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} out_vslice_dummy_var_293 := sprintf.ref.ref.i32.ref(out_$p29, .str.184, out_$i27, $add.ref($add.ref($add.ref($add.ref(et_tx_stats, $mul.ref(0, 264)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i41 := $add.i64(32, 32);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p26, $mul.ref(32, 1));
    goto corral_source_split_900;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} out_vslice_dummy_var_292 := sprintf.ref.ref.i32.ref(out_$p26, .str.184, out_$i27, et_tx_stats);
    goto corral_source_split_899;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb37_dummy:
    call {:si_unique_call 1} out_$p29, out_$i30, out_$i31, out_$i32, out_$p26, out_$i27, out_$i41, out_$p42, out_$i44, out_$p45, out_$i47, out_$p48, out_$i50, out_$p51, out_$i53, out_$p54, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295, out_vslice_dummy_var_296, out_vslice_dummy_var_297 := be_get_stat_strings_loop_$bb31(in_$p23, out_$p29, out_$i30, out_$i31, out_$i32, out_$p26, out_$i27, out_$i41, out_$p42, out_$i44, out_$p45, out_$i47, out_$p48, out_$i50, out_$p51, out_$i53, out_$p54, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295, out_vslice_dummy_var_296, out_vslice_dummy_var_297);
    return;

  exit:
    return;
}



procedure be_get_stat_strings_loop_$bb31(in_$p23: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$p26: ref, in_$i27: i32, in_$i41: i64, in_$p42: ref, in_$i44: i64, in_$p45: ref, in_$i47: i64, in_$p48: ref, in_$i50: i64, in_$p51: ref, in_$i53: i64, in_$p54: ref, in_vslice_dummy_var_292: i32, in_vslice_dummy_var_293: i32, in_vslice_dummy_var_294: i32, in_vslice_dummy_var_295: i32, in_vslice_dummy_var_296: i32, in_vslice_dummy_var_297: i32) returns (out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$p26: ref, out_$i27: i32, out_$i41: i64, out_$p42: ref, out_$i44: i64, out_$p45: ref, out_$i47: i64, out_$p48: ref, out_$i50: i64, out_$p51: ref, out_$i53: i64, out_$p54: ref, out_vslice_dummy_var_292: i32, out_vslice_dummy_var_293: i32, out_vslice_dummy_var_294: i32, out_vslice_dummy_var_295: i32, out_vslice_dummy_var_296: i32, out_vslice_dummy_var_297: i32);



implementation be_get_stat_strings_loop_$bb19(in_$p9: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$p14: ref, in_$i15: i32, in_$p21: ref, in_$i56: i64, in_$p57: ref, in_$i59: i64, in_$p60: ref, in_$i62: i64, in_$p63: ref, in_$i65: i64, in_$p66: ref, in_$i68: i64, in_$p69: ref, in_$i71: i64, in_$p22: ref, in_vslice_dummy_var_290: i32, in_vslice_dummy_var_291: i32, in_vslice_dummy_var_298: i32, in_vslice_dummy_var_299: i32, in_vslice_dummy_var_300: i32, in_vslice_dummy_var_301: i32, in_vslice_dummy_var_302: i32) returns (out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$p14: ref, out_$i15: i32, out_$p21: ref, out_$i56: i64, out_$p57: ref, out_$i59: i64, out_$p60: ref, out_$i62: i64, out_$p63: ref, out_$i65: i64, out_$p66: ref, out_$i68: i64, out_$p69: ref, out_$i71: i64, out_$p22: ref, out_vslice_dummy_var_290: i32, out_vslice_dummy_var_291: i32, out_vslice_dummy_var_298: i32, out_vslice_dummy_var_299: i32, out_vslice_dummy_var_300: i32, out_vslice_dummy_var_301: i32, out_vslice_dummy_var_302: i32)
{

  entry:
    out_$p17, out_$i18, out_$i19, out_$i20, out_$p14, out_$i15, out_$p21, out_$i56, out_$p57, out_$i59, out_$p60, out_$i62, out_$p63, out_$i65, out_$p66, out_$i68, out_$p69, out_$i71, out_$p22, out_vslice_dummy_var_290, out_vslice_dummy_var_291, out_vslice_dummy_var_298, out_vslice_dummy_var_299, out_vslice_dummy_var_300, out_vslice_dummy_var_301, out_vslice_dummy_var_302 := in_$p17, in_$i18, in_$i19, in_$i20, in_$p14, in_$i15, in_$p21, in_$i56, in_$p57, in_$i59, in_$p60, in_$i62, in_$p63, in_$i65, in_$p66, in_$i68, in_$p69, in_$i71, in_$p22, in_vslice_dummy_var_290, in_vslice_dummy_var_291, in_vslice_dummy_var_298, in_vslice_dummy_var_299, in_vslice_dummy_var_300, in_vslice_dummy_var_301, in_vslice_dummy_var_302;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_877;

  $bb25:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$i15 := out_$p22, out_$i18;
    goto $bb25_dummy;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p22;
    assume true;
    goto $bb25;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i32(out_$i18, out_$i19);
    goto corral_source_split_887;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, in_$p9);
    goto corral_source_split_886;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i15, 1);
    call {:si_unique_call 115} {:cexpr "i"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_885;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p14, $mul.ref(out_$i71, 1));
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} out_vslice_dummy_var_302 := sprintf.ref.ref.i32.ref(out_$p69, .str.183, out_$i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i71 := $add.i64(out_$i68, 32);
    goto corral_source_split_970;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(out_$p14, $mul.ref(out_$i68, 1));
    goto corral_source_split_968;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} out_vslice_dummy_var_301 := sprintf.ref.ref.i32.ref(out_$p66, .str.183, out_$i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i68 := $add.i64(out_$i65, 32);
    goto corral_source_split_967;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p14, $mul.ref(out_$i65, 1));
    goto corral_source_split_965;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} out_vslice_dummy_var_300 := sprintf.ref.ref.i32.ref(out_$p63, .str.183, out_$i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i65 := $add.i64(out_$i62, 32);
    goto corral_source_split_964;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p14, $mul.ref(out_$i62, 1));
    goto corral_source_split_962;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} out_vslice_dummy_var_299 := sprintf.ref.ref.i32.ref(out_$p60, .str.183, out_$i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i62 := $add.i64(out_$i59, 32);
    goto corral_source_split_961;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p14, $mul.ref(out_$i59, 1));
    goto corral_source_split_959;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} out_vslice_dummy_var_298 := sprintf.ref.ref.i32.ref(out_$p57, .str.183, out_$i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i59 := $add.i64(out_$i56, 32);
    goto corral_source_split_958;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref(out_$p14, $mul.ref(out_$i56, 1));
    goto corral_source_split_883;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} out_vslice_dummy_var_291 := sprintf.ref.ref.i32.ref(out_$p17, .str.183, out_$i15, $add.ref($add.ref($add.ref($add.ref(et_rx_stats, $mul.ref(0, 308)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    out_$i56 := $add.i64(32, 32);
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p14, $mul.ref(32, 1));
    goto corral_source_split_880;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} out_vslice_dummy_var_290 := sprintf.ref.ref.i32.ref(out_$p14, .str.183, out_$i15, et_rx_stats);
    goto corral_source_split_879;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p17, out_$i18, out_$i19, out_$i20, out_$p14, out_$i15, out_$p21, out_$i56, out_$p57, out_$i59, out_$p60, out_$i62, out_$p63, out_$i65, out_$p66, out_$i68, out_$p69, out_$i71, out_$p22, out_vslice_dummy_var_290, out_vslice_dummy_var_291, out_vslice_dummy_var_298, out_vslice_dummy_var_299, out_vslice_dummy_var_300, out_vslice_dummy_var_301, out_vslice_dummy_var_302 := be_get_stat_strings_loop_$bb19(in_$p9, out_$p17, out_$i18, out_$i19, out_$i20, out_$p14, out_$i15, out_$p21, out_$i56, out_$p57, out_$i59, out_$p60, out_$i62, out_$p63, out_$i65, out_$p66, out_$i68, out_$p69, out_$i71, out_$p22, out_vslice_dummy_var_290, out_vslice_dummy_var_291, out_vslice_dummy_var_298, out_vslice_dummy_var_299, out_vslice_dummy_var_300, out_vslice_dummy_var_301, out_vslice_dummy_var_302);
    return;

  exit:
    return;
}



procedure be_get_stat_strings_loop_$bb19(in_$p9: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$p14: ref, in_$i15: i32, in_$p21: ref, in_$i56: i64, in_$p57: ref, in_$i59: i64, in_$p60: ref, in_$i62: i64, in_$p63: ref, in_$i65: i64, in_$p66: ref, in_$i68: i64, in_$p69: ref, in_$i71: i64, in_$p22: ref, in_vslice_dummy_var_290: i32, in_vslice_dummy_var_291: i32, in_vslice_dummy_var_298: i32, in_vslice_dummy_var_299: i32, in_vslice_dummy_var_300: i32, in_vslice_dummy_var_301: i32, in_vslice_dummy_var_302: i32) returns (out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$p14: ref, out_$i15: i32, out_$p21: ref, out_$i56: i64, out_$p57: ref, out_$i59: i64, out_$p60: ref, out_$i62: i64, out_$p63: ref, out_$i65: i64, out_$p66: ref, out_$i68: i64, out_$p69: ref, out_$i71: i64, out_$p22: ref, out_vslice_dummy_var_290: i32, out_vslice_dummy_var_291: i32, out_vslice_dummy_var_298: i32, out_vslice_dummy_var_299: i32, out_vslice_dummy_var_300: i32, out_vslice_dummy_var_301: i32, out_vslice_dummy_var_302: i32);



implementation be_get_ethtool_stats_loop_$bb30(in_$p2: ref, in_$p63: ref, in_$p74: ref, in_$i75: i32, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$p80: ref, in_$i81: i32, in_$i82: i64, in_$i79: i64, in_$i83: i32, in_$i84: i64, in_$p85: ref, in_$p86: ref, in_$i87: i1, in_$i88: i8, in_$i89: i1, in_$i60: i32, in_$p62: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i32, in_$i99: i64, in_$p101: ref, in_$i102: i64, in_$i100: i64, in_$i103: i32, in_$i104: i64, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$i110: i64, in_$p112: ref, in_$i113: i64, in_$i111: i64, in_$i114: i32, in_$i115: i64, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$i120: i32, in_$i121: i64, in_$p123: ref, in_$i124: i64, in_$i122: i64, in_$i125: i32, in_$i126: i64, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$i131: i32, in_$i132: i64, in_$p134: ref, in_$i135: i64, in_$i133: i64, in_$i136: i32, in_$i137: i64, in_$p138: ref) returns (out_$p74: ref, out_$i75: i32, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$p80: ref, out_$i81: i32, out_$i82: i64, out_$i79: i64, out_$i83: i32, out_$i84: i64, out_$p85: ref, out_$p86: ref, out_$i87: i1, out_$i88: i8, out_$i89: i1, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i32, out_$i99: i64, out_$p101: ref, out_$i102: i64, out_$i100: i64, out_$i103: i32, out_$i104: i64, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$i110: i64, out_$p112: ref, out_$i113: i64, out_$i111: i64, out_$i114: i32, out_$i115: i64, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$i120: i32, out_$i121: i64, out_$p123: ref, out_$i124: i64, out_$i122: i64, out_$i125: i32, out_$i126: i64, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$i131: i32, out_$i132: i64, out_$p134: ref, out_$i135: i64, out_$i133: i64, out_$i136: i32, out_$i137: i64, out_$p138: ref)
{

  entry:
    out_$p74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i79, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p101, out_$i102, out_$i100, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i111, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$p119, out_$i120, out_$i121, out_$p123, out_$i124, out_$i122, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i133, out_$i136, out_$i137, out_$p138 := in_$p74, in_$i75, in_$p76, in_$p77, in_$i78, in_$p80, in_$i81, in_$i82, in_$i79, in_$i83, in_$i84, in_$p85, in_$p86, in_$i87, in_$i88, in_$i89, in_$p95, in_$p96, in_$p97, in_$i98, in_$i99, in_$p101, in_$i102, in_$i100, in_$i103, in_$i104, in_$p105, in_$p106, in_$p107, in_$p108, in_$i109, in_$i110, in_$p112, in_$i113, in_$i111, in_$i114, in_$i115, in_$p116, in_$p117, in_$p118, in_$p119, in_$i120, in_$i121, in_$p123, in_$i124, in_$i122, in_$i125, in_$i126, in_$p127, in_$p128, in_$p129, in_$p130, in_$i131, in_$i132, in_$p134, in_$i135, in_$i133, in_$i136, in_$i137, in_$p138;
    goto $bb30, exit;

  $bb30:
    out_$p74 := $add.ref($add.ref($add.ref(in_$p62, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_1361;

  $bb38:
    assume {:verifier.code 0} true;
    assume out_$i89 == 1;
    goto $bb38_dummy;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    out_$i89 := $trunc.i8.i1(out_$i88);
    goto corral_source_split_1387;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i1.i8(out_$i87);
    call {:si_unique_call 221} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i88);
    goto corral_source_split_1386;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} out_$i87 := u64_stats_fetch_retry_bh(out_$p86, out_$i75);
    goto corral_source_split_1385;

  $bb37:
    out_$p86 := $add.ref($add.ref($add.ref(in_$p62, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_1384;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p138, out_$i133);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref(in_$p2, $mul.ref(out_$i137, 8));
    goto corral_source_split_1463;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    out_$i137 := $zext.i32.i64(out_$i136);
    goto corral_source_split_1462;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    out_$i136 := $add.i32(in_$i60, 5);
    goto corral_source_split_1461;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_1460;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    out_$i133 := out_$i132;
    goto $bb58;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    out_$i133 := out_$i135;
    goto $bb58;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i64($M.0, out_$p134);
    goto corral_source_split_1453;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    out_$p134 := $bitcast.ref.ref(out_$p129);
    goto corral_source_split_1452;

  $bb56:
    assume 0 == 1;
    goto corral_source_split_1451;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb56, $bb57;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref(out_$p128, $mul.ref(48, 1));
    goto corral_source_split_1449;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p128 := $bitcast.ref.ref(in_$p63);
    goto corral_source_split_1448;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p127, out_$i122);
    goto corral_source_split_1446;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref(in_$p2, $mul.ref(out_$i126, 8));
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    out_$i126 := $zext.i32.i64(out_$i125);
    goto corral_source_split_1444;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    out_$i125 := $add.i32(in_$i60, 4);
    goto corral_source_split_1443;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_1442;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    out_$i122 := out_$i121;
    goto $bb54;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    out_$i122 := out_$i124;
    goto $bb54;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i64($M.0, out_$p123);
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    out_$p123 := $bitcast.ref.ref(out_$p118);
    goto corral_source_split_1434;

  $bb52:
    assume 1 == 1;
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb52, $bb53;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref(out_$p117, $mul.ref(24, 1));
    goto corral_source_split_1431;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p117 := $bitcast.ref.ref(in_$p63);
    goto corral_source_split_1430;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p116, out_$i111);
    goto corral_source_split_1428;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref(in_$p2, $mul.ref(out_$i115, 8));
    goto corral_source_split_1427;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    out_$i115 := $zext.i32.i64(out_$i114);
    goto corral_source_split_1426;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    out_$i114 := $add.i32(in_$i60, 3);
    goto corral_source_split_1425;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_1424;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i110;
    goto $bb50;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i113;
    goto $bb50;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i64($M.0, out_$p112);
    goto corral_source_split_1417;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    out_$p112 := $bitcast.ref.ref(out_$p107);
    goto corral_source_split_1416;

  $bb48:
    assume 1 == 1;
    goto corral_source_split_1415;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb48, $bb49;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref(out_$p106, $mul.ref(16, 1));
    goto corral_source_split_1413;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p106 := $bitcast.ref.ref(in_$p63);
    goto corral_source_split_1412;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p105, out_$i100);
    goto corral_source_split_1410;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref(in_$p2, $mul.ref(out_$i104, 8));
    goto corral_source_split_1409;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i32.i64(out_$i103);
    goto corral_source_split_1408;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    out_$i103 := $add.i32(in_$i60, 2);
    goto corral_source_split_1407;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1406;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i99;
    goto $bb46;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i102;
    goto $bb46;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i64($M.0, out_$p101);
    goto corral_source_split_1399;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    out_$p101 := $bitcast.ref.ref(out_$p96);
    goto corral_source_split_1398;

  $bb44:
    assume 1 == 1;
    goto corral_source_split_1397;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb44, $bb45;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(out_$p95, $mul.ref(8, 1));
    goto corral_source_split_1382;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p95 := $bitcast.ref.ref(in_$p63);
    goto corral_source_split_1381;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p85, out_$i79);
    goto corral_source_split_1379;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref(in_$p2, $mul.ref(out_$i84, 8));
    goto corral_source_split_1378;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i32.i64(out_$i83);
    goto corral_source_split_1377;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    out_$i83 := $add.i32(in_$i60, 1);
    goto corral_source_split_1376;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1375;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    out_$i79 := out_$i82;
    goto $bb35;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    out_$i79 := out_$i78;
    goto $bb35;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i64($M.0, out_$p77);
    goto corral_source_split_1368;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(out_$p76);
    goto corral_source_split_1367;

  $bb33:
    assume 1 == 1;
    goto corral_source_split_1366;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb33, $bb34;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(in_$p63);
    goto corral_source_split_1364;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} out_$i75 := u64_stats_fetch_begin_bh(out_$p74);
    call {:si_unique_call 219} {:cexpr "start"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_1362;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i32.i64(out_$i81);
    goto corral_source_split_1373;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.0, out_$p80);
    goto corral_source_split_1372;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    out_$p80 := $bitcast.ref.ref(out_$p76);
    goto corral_source_split_1371;

  $bb34:
    assume !(1 == 1);
    goto corral_source_split_1370;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i32.i64(out_$i98);
    goto corral_source_split_1404;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.0, out_$p97);
    goto corral_source_split_1403;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    out_$p97 := $bitcast.ref.ref(out_$p96);
    goto corral_source_split_1402;

  $bb45:
    assume !(1 == 1);
    goto corral_source_split_1401;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i32.i64(out_$i109);
    goto corral_source_split_1422;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i32($M.0, out_$p108);
    goto corral_source_split_1421;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    out_$p108 := $bitcast.ref.ref(out_$p107);
    goto corral_source_split_1420;

  $bb49:
    assume !(1 == 1);
    goto corral_source_split_1419;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i32.i64(out_$i120);
    goto corral_source_split_1440;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.0, out_$p119);
    goto corral_source_split_1439;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    out_$p119 := $bitcast.ref.ref(out_$p118);
    goto corral_source_split_1438;

  $bb53:
    assume !(1 == 1);
    goto corral_source_split_1437;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    out_$i132 := $zext.i32.i64(out_$i131);
    goto corral_source_split_1458;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i32($M.0, out_$p130);
    goto corral_source_split_1457;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    out_$p130 := $bitcast.ref.ref(out_$p129);
    goto corral_source_split_1456;

  $bb57:
    assume !(0 == 1);
    goto corral_source_split_1455;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i79, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p101, out_$i102, out_$i100, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i111, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$p119, out_$i120, out_$i121, out_$p123, out_$i124, out_$i122, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i133, out_$i136, out_$i137, out_$p138 := be_get_ethtool_stats_loop_$bb30(in_$p2, in_$p63, out_$p74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i79, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, in_$i60, in_$p62, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p101, out_$i102, out_$i100, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i111, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$p119, out_$i120, out_$i121, out_$p123, out_$i124, out_$i122, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i133, out_$i136, out_$i137, out_$p138);
    return;

  exit:
    return;
}



procedure be_get_ethtool_stats_loop_$bb30(in_$p2: ref, in_$p63: ref, in_$p74: ref, in_$i75: i32, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$p80: ref, in_$i81: i32, in_$i82: i64, in_$i79: i64, in_$i83: i32, in_$i84: i64, in_$p85: ref, in_$p86: ref, in_$i87: i1, in_$i88: i8, in_$i89: i1, in_$i60: i32, in_$p62: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i32, in_$i99: i64, in_$p101: ref, in_$i102: i64, in_$i100: i64, in_$i103: i32, in_$i104: i64, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$i110: i64, in_$p112: ref, in_$i113: i64, in_$i111: i64, in_$i114: i32, in_$i115: i64, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$i120: i32, in_$i121: i64, in_$p123: ref, in_$i124: i64, in_$i122: i64, in_$i125: i32, in_$i126: i64, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$i131: i32, in_$i132: i64, in_$p134: ref, in_$i135: i64, in_$i133: i64, in_$i136: i32, in_$i137: i64, in_$p138: ref) returns (out_$p74: ref, out_$i75: i32, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$p80: ref, out_$i81: i32, out_$i82: i64, out_$i79: i64, out_$i83: i32, out_$i84: i64, out_$p85: ref, out_$p86: ref, out_$i87: i1, out_$i88: i8, out_$i89: i1, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i32, out_$i99: i64, out_$p101: ref, out_$i102: i64, out_$i100: i64, out_$i103: i32, out_$i104: i64, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$i110: i64, out_$p112: ref, out_$i113: i64, out_$i111: i64, out_$i114: i32, out_$i115: i64, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$i120: i32, out_$i121: i64, out_$p123: ref, out_$i124: i64, out_$i122: i64, out_$i125: i32, out_$i126: i64, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$i131: i32, out_$i132: i64, out_$p134: ref, out_$i135: i64, out_$i133: i64, out_$i136: i32, out_$i137: i64, out_$p138: ref);
  modifies $M.0;



implementation be_get_ethtool_stats_loop_$bb26(in_$p2: ref, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$i71: i1, in_$i72: i8, in_$i73: i1, in_$i60: i32, in_$p62: ref) returns (out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$i71: i1, out_$i72: i8, out_$i73: i1)
{

  entry:
    out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73 := in_$p64, in_$i65, in_$p66, in_$i67, in_$i68, in_$p69, in_$p70, in_$i71, in_$i72, in_$i73;
    goto $bb26, exit;

  $bb26:
    out_$p64 := $add.ref($add.ref($add.ref(in_$p62, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_1351;

  $bb27:
    assume {:verifier.code 0} true;
    assume out_$i73 == 1;
    goto $bb27_dummy;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    out_$i73 := $trunc.i8.i1(out_$i72);
    goto corral_source_split_1359;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i1.i8(out_$i71);
    call {:si_unique_call 217} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i72);
    goto corral_source_split_1358;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} out_$i71 := u64_stats_fetch_retry_bh(out_$p70, out_$i65);
    goto corral_source_split_1357;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p69, out_$i67);
    out_$p70 := $add.ref($add.ref($add.ref(in_$p62, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_1356;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(in_$p2, $mul.ref(out_$i68, 8));
    goto corral_source_split_1355;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i32.i64(in_$i60);
    goto corral_source_split_1354;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i64($M.0, out_$p66);
    goto corral_source_split_1353;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} out_$i65 := u64_stats_fetch_begin_bh(out_$p64);
    call {:si_unique_call 215} {:cexpr "start"} boogie_si_record_i32(out_$i65);
    out_$p66 := $add.ref($add.ref($add.ref(in_$p62, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(32, 1));
    goto corral_source_split_1352;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73 := be_get_ethtool_stats_loop_$bb26(in_$p2, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, in_$i60, in_$p62);
    return;

  exit:
    return;
}



procedure be_get_ethtool_stats_loop_$bb26(in_$p2: ref, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$i71: i1, in_$i72: i8, in_$i73: i1, in_$i60: i32, in_$p62: ref) returns (out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$i71: i1, out_$i72: i8, out_$i73: i1);
  modifies $M.0;



implementation be_get_ethtool_stats_loop_$bb24(in_$p2: ref, in_$p57: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$i71: i1, in_$i72: i8, in_$i73: i1, in_$p74: ref, in_$i75: i32, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$p80: ref, in_$i81: i32, in_$i82: i64, in_$i79: i64, in_$i83: i32, in_$i84: i64, in_$p85: ref, in_$p86: ref, in_$i87: i1, in_$i88: i8, in_$i89: i1, in_$i90: i32, in_$i91: i32, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i32, in_$i99: i64, in_$p101: ref, in_$i102: i64, in_$i100: i64, in_$i103: i32, in_$i104: i64, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$i110: i64, in_$p112: ref, in_$i113: i64, in_$i111: i64, in_$i114: i32, in_$i115: i64, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$i120: i32, in_$i121: i64, in_$p123: ref, in_$i124: i64, in_$i122: i64, in_$i125: i32, in_$i126: i64, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$i131: i32, in_$i132: i64, in_$p134: ref, in_$i135: i64, in_$i133: i64, in_$i136: i32, in_$i137: i64, in_$p138: ref) returns (out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$i71: i1, out_$i72: i8, out_$i73: i1, out_$p74: ref, out_$i75: i32, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$p80: ref, out_$i81: i32, out_$i82: i64, out_$i79: i64, out_$i83: i32, out_$i84: i64, out_$p85: ref, out_$p86: ref, out_$i87: i1, out_$i88: i8, out_$i89: i1, out_$i90: i32, out_$i91: i32, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i32, out_$i99: i64, out_$p101: ref, out_$i102: i64, out_$i100: i64, out_$i103: i32, out_$i104: i64, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$i110: i64, out_$p112: ref, out_$i113: i64, out_$i111: i64, out_$i114: i32, out_$i115: i64, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$i120: i32, out_$i121: i64, out_$p123: ref, out_$i124: i64, out_$i122: i64, out_$i125: i32, out_$i126: i64, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$i131: i32, out_$i132: i64, out_$p134: ref, out_$i135: i64, out_$i133: i64, out_$i136: i32, out_$i137: i64, out_$p138: ref)
{

  entry:
    out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i79, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i60, out_$i61, out_$p62, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p101, out_$i102, out_$i100, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i111, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$p119, out_$i120, out_$i121, out_$p123, out_$i124, out_$i122, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i133, out_$i136, out_$i137, out_$p138 := in_$p63, in_$p64, in_$i65, in_$p66, in_$i67, in_$i68, in_$p69, in_$p70, in_$i71, in_$i72, in_$i73, in_$p74, in_$i75, in_$p76, in_$p77, in_$i78, in_$p80, in_$i81, in_$i82, in_$i79, in_$i83, in_$i84, in_$p85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$i60, in_$i61, in_$p62, in_$p95, in_$p96, in_$p97, in_$i98, in_$i99, in_$p101, in_$i102, in_$i100, in_$i103, in_$i104, in_$p105, in_$p106, in_$p107, in_$p108, in_$i109, in_$i110, in_$p112, in_$i113, in_$i111, in_$i114, in_$i115, in_$p116, in_$p117, in_$p118, in_$p119, in_$i120, in_$i121, in_$p123, in_$i124, in_$i122, in_$i125, in_$i126, in_$p127, in_$p128, in_$p129, in_$p130, in_$i131, in_$i132, in_$p134, in_$i135, in_$i133, in_$i136, in_$i137, in_$p138;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1347;

  $bb41:
    assume out_$i94 == 1;
    assume {:verifier.code 0} true;
    out_$i60, out_$i61, out_$p62 := out_$i90, out_$i91, out_$p92;
    goto $bb41_dummy;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    out_$i94 := $ugt.i32(out_$i93, out_$i91);
    goto corral_source_split_1393;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.0, in_$p57);
    goto corral_source_split_1392;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref(out_$p62, $mul.ref(1, 16528));
    goto corral_source_split_1391;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(out_$i61, 1);
    call {:si_unique_call 223} {:cexpr "j"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_1390;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i32(out_$i60, 6);
    call {:si_unique_call 222} {:cexpr "base"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_1389;

  $bb39:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    out_$i89 := $trunc.i8.i1(out_$i88);
    goto corral_source_split_1387;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i1.i8(out_$i87);
    call {:si_unique_call 221} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i88);
    goto corral_source_split_1386;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} out_$i87 := u64_stats_fetch_retry_bh(out_$p86, out_$i75);
    goto corral_source_split_1385;

  $bb37:
    out_$p86 := $add.ref($add.ref($add.ref(out_$p62, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_1384;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p138, out_$i133);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref(in_$p2, $mul.ref(out_$i137, 8));
    goto corral_source_split_1463;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    out_$i137 := $zext.i32.i64(out_$i136);
    goto corral_source_split_1462;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    out_$i136 := $add.i32(out_$i60, 5);
    goto corral_source_split_1461;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_1460;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    out_$i133 := out_$i132;
    goto $bb58;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    out_$i133 := out_$i135;
    goto $bb58;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i64($M.0, out_$p134);
    goto corral_source_split_1453;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    out_$p134 := $bitcast.ref.ref(out_$p129);
    goto corral_source_split_1452;

  $bb56:
    assume 0 == 1;
    goto corral_source_split_1451;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb56, $bb57;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref(out_$p128, $mul.ref(48, 1));
    goto corral_source_split_1449;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p128 := $bitcast.ref.ref(out_$p63);
    goto corral_source_split_1448;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p127, out_$i122);
    goto corral_source_split_1446;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref(in_$p2, $mul.ref(out_$i126, 8));
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    out_$i126 := $zext.i32.i64(out_$i125);
    goto corral_source_split_1444;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    out_$i125 := $add.i32(out_$i60, 4);
    goto corral_source_split_1443;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_1442;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    out_$i122 := out_$i121;
    goto $bb54;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    out_$i122 := out_$i124;
    goto $bb54;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i64($M.0, out_$p123);
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    out_$p123 := $bitcast.ref.ref(out_$p118);
    goto corral_source_split_1434;

  $bb52:
    assume 1 == 1;
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb52, $bb53;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref(out_$p117, $mul.ref(24, 1));
    goto corral_source_split_1431;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p117 := $bitcast.ref.ref(out_$p63);
    goto corral_source_split_1430;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p116, out_$i111);
    goto corral_source_split_1428;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref(in_$p2, $mul.ref(out_$i115, 8));
    goto corral_source_split_1427;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    out_$i115 := $zext.i32.i64(out_$i114);
    goto corral_source_split_1426;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    out_$i114 := $add.i32(out_$i60, 3);
    goto corral_source_split_1425;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_1424;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i110;
    goto $bb50;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i113;
    goto $bb50;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i64($M.0, out_$p112);
    goto corral_source_split_1417;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    out_$p112 := $bitcast.ref.ref(out_$p107);
    goto corral_source_split_1416;

  $bb48:
    assume 1 == 1;
    goto corral_source_split_1415;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb48, $bb49;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref(out_$p106, $mul.ref(16, 1));
    goto corral_source_split_1413;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p106 := $bitcast.ref.ref(out_$p63);
    goto corral_source_split_1412;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p105, out_$i100);
    goto corral_source_split_1410;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref(in_$p2, $mul.ref(out_$i104, 8));
    goto corral_source_split_1409;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i32.i64(out_$i103);
    goto corral_source_split_1408;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    out_$i103 := $add.i32(out_$i60, 2);
    goto corral_source_split_1407;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1406;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i99;
    goto $bb46;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i102;
    goto $bb46;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i64($M.0, out_$p101);
    goto corral_source_split_1399;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    out_$p101 := $bitcast.ref.ref(out_$p96);
    goto corral_source_split_1398;

  $bb44:
    assume 1 == 1;
    goto corral_source_split_1397;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb44, $bb45;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(out_$p95, $mul.ref(8, 1));
    goto corral_source_split_1382;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p95 := $bitcast.ref.ref(out_$p63);
    goto corral_source_split_1381;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p85, out_$i79);
    goto corral_source_split_1379;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref(in_$p2, $mul.ref(out_$i84, 8));
    goto corral_source_split_1378;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i32.i64(out_$i83);
    goto corral_source_split_1377;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    out_$i83 := $add.i32(out_$i60, 1);
    goto corral_source_split_1376;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1375;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    out_$i79 := out_$i82;
    goto $bb35;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    out_$i79 := out_$i78;
    goto $bb35;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i64($M.0, out_$p77);
    goto corral_source_split_1368;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(out_$p76);
    goto corral_source_split_1367;

  $bb33:
    assume 1 == 1;
    goto corral_source_split_1366;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb33, $bb34;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p63);
    goto corral_source_split_1364;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} out_$i75 := u64_stats_fetch_begin_bh(out_$p74);
    call {:si_unique_call 219} {:cexpr "start"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_1362;

  $bb30:
    call out_$p74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i79, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p101, out_$i102, out_$i100, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i111, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$p119, out_$i120, out_$i121, out_$p123, out_$i124, out_$i122, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i133, out_$i136, out_$i137, out_$p138 := be_get_ethtool_stats_loop_$bb30(in_$p2, out_$p63, out_$p74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i79, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i60, out_$p62, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p101, out_$i102, out_$i100, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i111, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$p119, out_$i120, out_$i121, out_$p123, out_$i124, out_$i122, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i133, out_$i136, out_$i137, out_$p138);
    goto $bb30_last;

  $bb30_last:
    out_$p74 := $add.ref($add.ref($add.ref(out_$p62, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_1361;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb38:
    assume {:verifier.code 0} true;
    assume out_$i89 == 1;
    assume false;
    return;

  $bb28:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    out_$i73 := $trunc.i8.i1(out_$i72);
    goto corral_source_split_1359;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i1.i8(out_$i71);
    call {:si_unique_call 217} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i72);
    goto corral_source_split_1358;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} out_$i71 := u64_stats_fetch_retry_bh(out_$p70, out_$i65);
    goto corral_source_split_1357;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p69, out_$i67);
    out_$p70 := $add.ref($add.ref($add.ref(out_$p62, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_1356;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(in_$p2, $mul.ref(out_$i68, 8));
    goto corral_source_split_1355;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i32.i64(out_$i60);
    goto corral_source_split_1354;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i64($M.0, out_$p66);
    goto corral_source_split_1353;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} out_$i65 := u64_stats_fetch_begin_bh(out_$p64);
    call {:si_unique_call 215} {:cexpr "start"} boogie_si_record_i32(out_$i65);
    out_$p66 := $add.ref($add.ref($add.ref(out_$p62, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(32, 1));
    goto corral_source_split_1352;

  $bb26:
    call out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73 := be_get_ethtool_stats_loop_$bb26(in_$p2, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i60, out_$p62);
    goto $bb26_last;

  $bb26_last:
    out_$p64 := $add.ref($add.ref($add.ref(out_$p62, $mul.ref(0, 16528)), $mul.ref(16472, 1)), $mul.ref(52, 1));
    goto corral_source_split_1351;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb27:
    assume {:verifier.code 0} true;
    assume out_$i73 == 1;
    assume false;
    return;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p62, $mul.ref(0, 16528)), $mul.ref(16472, 1));
    goto corral_source_split_1349;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i32.i64(out_$i81);
    goto corral_source_split_1373;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.0, out_$p80);
    goto corral_source_split_1372;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    out_$p80 := $bitcast.ref.ref(out_$p76);
    goto corral_source_split_1371;

  $bb34:
    assume !(1 == 1);
    goto corral_source_split_1370;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i32.i64(out_$i98);
    goto corral_source_split_1404;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.0, out_$p97);
    goto corral_source_split_1403;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    out_$p97 := $bitcast.ref.ref(out_$p96);
    goto corral_source_split_1402;

  $bb45:
    assume !(1 == 1);
    goto corral_source_split_1401;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i32.i64(out_$i109);
    goto corral_source_split_1422;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i32($M.0, out_$p108);
    goto corral_source_split_1421;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    out_$p108 := $bitcast.ref.ref(out_$p107);
    goto corral_source_split_1420;

  $bb49:
    assume !(1 == 1);
    goto corral_source_split_1419;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i32.i64(out_$i120);
    goto corral_source_split_1440;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.0, out_$p119);
    goto corral_source_split_1439;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    out_$p119 := $bitcast.ref.ref(out_$p118);
    goto corral_source_split_1438;

  $bb53:
    assume !(1 == 1);
    goto corral_source_split_1437;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    out_$i132 := $zext.i32.i64(out_$i131);
    goto corral_source_split_1458;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i32($M.0, out_$p130);
    goto corral_source_split_1457;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    out_$p130 := $bitcast.ref.ref(out_$p129);
    goto corral_source_split_1456;

  $bb57:
    assume !(0 == 1);
    goto corral_source_split_1455;

  $bb41_dummy:
    call {:si_unique_call 1} out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i79, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i60, out_$i61, out_$p62, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p101, out_$i102, out_$i100, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i111, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$p119, out_$i120, out_$i121, out_$p123, out_$i124, out_$i122, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i133, out_$i136, out_$i137, out_$p138 := be_get_ethtool_stats_loop_$bb24(in_$p2, in_$p57, out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i79, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i60, out_$i61, out_$p62, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p101, out_$i102, out_$i100, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i111, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$p119, out_$i120, out_$i121, out_$p123, out_$i124, out_$i122, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$p134, out_$i135, out_$i133, out_$i136, out_$i137, out_$p138);
    return;

  exit:
    return;
}



procedure be_get_ethtool_stats_loop_$bb24(in_$p2: ref, in_$p57: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$i71: i1, in_$i72: i8, in_$i73: i1, in_$p74: ref, in_$i75: i32, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$p80: ref, in_$i81: i32, in_$i82: i64, in_$i79: i64, in_$i83: i32, in_$i84: i64, in_$p85: ref, in_$p86: ref, in_$i87: i1, in_$i88: i8, in_$i89: i1, in_$i90: i32, in_$i91: i32, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i32, in_$i99: i64, in_$p101: ref, in_$i102: i64, in_$i100: i64, in_$i103: i32, in_$i104: i64, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$i110: i64, in_$p112: ref, in_$i113: i64, in_$i111: i64, in_$i114: i32, in_$i115: i64, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$i120: i32, in_$i121: i64, in_$p123: ref, in_$i124: i64, in_$i122: i64, in_$i125: i32, in_$i126: i64, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$i131: i32, in_$i132: i64, in_$p134: ref, in_$i135: i64, in_$i133: i64, in_$i136: i32, in_$i137: i64, in_$p138: ref) returns (out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$i71: i1, out_$i72: i8, out_$i73: i1, out_$p74: ref, out_$i75: i32, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$p80: ref, out_$i81: i32, out_$i82: i64, out_$i79: i64, out_$i83: i32, out_$i84: i64, out_$p85: ref, out_$p86: ref, out_$i87: i1, out_$i88: i8, out_$i89: i1, out_$i90: i32, out_$i91: i32, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i32, out_$i99: i64, out_$p101: ref, out_$i102: i64, out_$i100: i64, out_$i103: i32, out_$i104: i64, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$i110: i64, out_$p112: ref, out_$i113: i64, out_$i111: i64, out_$i114: i32, out_$i115: i64, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$i120: i32, out_$i121: i64, out_$p123: ref, out_$i124: i64, out_$i122: i64, out_$i125: i32, out_$i126: i64, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$i131: i32, out_$i132: i64, out_$p134: ref, out_$i135: i64, out_$i133: i64, out_$i136: i32, out_$i137: i64, out_$p138: ref);
  modifies $M.0;



implementation be_get_ethtool_stats_loop_$bb10(in_$p2: ref, in_$p24: ref, in_$i25: i32, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$i20: i32, in_$p22: ref) returns (out_$p24: ref, out_$i25: i32, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$i36: i1, out_$i37: i8, out_$i38: i1)
{

  entry:
    out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38 := in_$p24, in_$i25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38;
    goto $bb10, exit;

  $bb10:
    out_$p24 := $add.ref($add.ref($add.ref(in_$p22, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(60, 1));
    goto corral_source_split_1294;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i38 == 1;
    goto $bb11_dummy;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i8.i1(out_$i37);
    goto corral_source_split_1307;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i1.i8(out_$i36);
    call {:si_unique_call 211} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i37);
    goto corral_source_split_1306;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} out_$i36 := u64_stats_fetch_retry_bh(out_$p35, out_$i25);
    goto corral_source_split_1305;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p34, out_$i31);
    out_$p35 := $add.ref($add.ref($add.ref(in_$p22, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(60, 1));
    goto corral_source_split_1304;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(in_$p2, $mul.ref(out_$i33, 8));
    goto corral_source_split_1303;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i32.i64(out_$i32);
    goto corral_source_split_1302;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(in_$i20, 1);
    goto corral_source_split_1301;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i64($M.0, out_$p30);
    goto corral_source_split_1300;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p29, out_$i27);
    out_$p30 := $add.ref($add.ref($add.ref(in_$p22, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(8, 1));
    goto corral_source_split_1299;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(in_$p2, $mul.ref(out_$i28, 8));
    goto corral_source_split_1298;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i32.i64(in_$i20);
    goto corral_source_split_1297;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i64($M.0, out_$p26);
    goto corral_source_split_1296;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} out_$i25 := u64_stats_fetch_begin_bh(out_$p24);
    call {:si_unique_call 209} {:cexpr "start"} boogie_si_record_i32(out_$i25);
    out_$p26 := $add.ref($add.ref($add.ref(in_$p22, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(0, 1));
    goto corral_source_split_1295;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38 := be_get_ethtool_stats_loop_$bb10(in_$p2, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, in_$i20, in_$p22);
    return;

  exit:
    return;
}



procedure be_get_ethtool_stats_loop_$bb10(in_$p2: ref, in_$p24: ref, in_$i25: i32, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$i20: i32, in_$p22: ref) returns (out_$p24: ref, out_$i25: i32, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$i36: i1, out_$i37: i8, out_$i38: i1);
  modifies $M.0;



implementation be_get_ethtool_stats_loop_$bb8(in_$p2: ref, in_$p16: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i64, in_$i44: i32, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i20: i32, in_$i21: i32, in_$p22: ref, in_$i52: i32, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$i142: i32, in_$i143: i64, in_$i144: i32, in_$i145: i64, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$i150: i32, in_$i151: i64, in_$i152: i32, in_$i153: i64, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$i158: i32, in_$i159: i64, in_$i160: i32, in_$i161: i64, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$i166: i32, in_$i167: i64, in_$i168: i32, in_$i169: i64, in_$p170: ref) returns (out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i64, out_$i44: i32, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i20: i32, out_$i21: i32, out_$p22: ref, out_$i52: i32, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$i142: i32, out_$i143: i64, out_$i144: i32, out_$i145: i64, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$i150: i32, out_$i151: i64, out_$i152: i32, out_$i153: i64, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$i158: i32, out_$i159: i64, out_$i160: i32, out_$i161: i64, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$i166: i32, out_$i167: i64, out_$i168: i32, out_$i169: i64, out_$p170: ref)
{

  entry:
    out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i20, out_$i21, out_$p22, out_$i52, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$p147, out_$p148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$p155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170 := in_$p23, in_$p24, in_$i25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i20, in_$i21, in_$p22, in_$i52, in_$p139, in_$p140, in_$p141, in_$i142, in_$i143, in_$i144, in_$i145, in_$p146, in_$p147, in_$p148, in_$p149, in_$i150, in_$i151, in_$i152, in_$i153, in_$p154, in_$p155, in_$p156, in_$p157, in_$i158, in_$i159, in_$i160, in_$i161, in_$p162, in_$p163, in_$p164, in_$p165, in_$i166, in_$i167, in_$i168, in_$i169, in_$p170;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1290;

  $bb18:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i20, out_$i21, out_$p22 := out_$i47, out_$i48, out_$p49;
    goto $bb18_dummy;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i47;
    assume true;
    goto $bb18;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    out_$i51 := $ugt.i32(out_$i50, out_$i48);
    goto corral_source_split_1333;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, in_$p16);
    goto corral_source_split_1332;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p22, $mul.ref(1, 24760));
    goto corral_source_split_1331;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i21, 1);
    call {:si_unique_call 213} {:cexpr "j"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_1330;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i20, 7);
    call {:si_unique_call 212} {:cexpr "base"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_1329;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p170, out_$i167);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref(in_$p2, $mul.ref(out_$i169, 8));
    goto corral_source_split_1492;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    out_$i169 := $zext.i32.i64(out_$i168);
    goto corral_source_split_1491;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    out_$i168 := $add.i32(out_$i20, 6);
    goto corral_source_split_1490;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    out_$i167 := $zext.i32.i64(out_$i166);
    goto corral_source_split_1489;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i32($M.0, out_$p165);
    goto corral_source_split_1488;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    out_$p165 := $bitcast.ref.ref(out_$p164);
    goto corral_source_split_1487;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref(out_$p163, $mul.ref(36, 1));
    goto corral_source_split_1486;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p163 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p162, out_$i159);
    goto corral_source_split_1483;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref(in_$p2, $mul.ref(out_$i161, 8));
    goto corral_source_split_1482;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    out_$i161 := $zext.i32.i64(out_$i160);
    goto corral_source_split_1481;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    out_$i160 := $add.i32(out_$i20, 5);
    goto corral_source_split_1480;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    out_$i159 := $zext.i32.i64(out_$i158);
    goto corral_source_split_1479;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i32($M.0, out_$p157);
    goto corral_source_split_1478;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    out_$p157 := $bitcast.ref.ref(out_$p156);
    goto corral_source_split_1477;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref(out_$p155, $mul.ref(32, 1));
    goto corral_source_split_1476;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p155 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_1475;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p154, out_$i151);
    goto corral_source_split_1473;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref(in_$p2, $mul.ref(out_$i153, 8));
    goto corral_source_split_1472;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    out_$i153 := $zext.i32.i64(out_$i152);
    goto corral_source_split_1471;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    out_$i152 := $add.i32(out_$i20, 4);
    goto corral_source_split_1470;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    out_$i151 := $zext.i32.i64(out_$i150);
    goto corral_source_split_1469;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i32($M.0, out_$p149);
    goto corral_source_split_1468;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    out_$p149 := $bitcast.ref.ref(out_$p148);
    goto corral_source_split_1467;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref(out_$p147, $mul.ref(40, 1));
    goto corral_source_split_1466;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p147 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_1465;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p146, out_$i143);
    goto corral_source_split_1327;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref(in_$p2, $mul.ref(out_$i145, 8));
    goto corral_source_split_1326;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    out_$i145 := $zext.i32.i64(out_$i144);
    goto corral_source_split_1325;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    out_$i144 := $add.i32(out_$i20, 3);
    goto corral_source_split_1324;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    out_$i143 := $zext.i32.i64(out_$i142);
    goto corral_source_split_1323;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    out_$i142 := $load.i32($M.0, out_$p141);
    goto corral_source_split_1322;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    out_$p141 := $bitcast.ref.ref(out_$p140);
    goto corral_source_split_1321;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref(out_$p139, $mul.ref(48, 1));
    goto corral_source_split_1320;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p139 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_1319;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p46, out_$i43);
    goto corral_source_split_1317;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(in_$p2, $mul.ref(out_$i45, 8));
    goto corral_source_split_1316;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i32.i64(out_$i44);
    goto corral_source_split_1315;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i20, 2);
    goto corral_source_split_1314;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i32.i64(out_$i42);
    goto corral_source_split_1313;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_1312;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_1311;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p39, $mul.ref(44, 1));
    goto corral_source_split_1310;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_1309;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i8.i1(out_$i37);
    goto corral_source_split_1307;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i1.i8(out_$i36);
    call {:si_unique_call 211} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i37);
    goto corral_source_split_1306;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} out_$i36 := u64_stats_fetch_retry_bh(out_$p35, out_$i25);
    goto corral_source_split_1305;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p34, out_$i31);
    out_$p35 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(60, 1));
    goto corral_source_split_1304;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(in_$p2, $mul.ref(out_$i33, 8));
    goto corral_source_split_1303;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i32.i64(out_$i32);
    goto corral_source_split_1302;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i20, 1);
    goto corral_source_split_1301;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i64($M.0, out_$p30);
    goto corral_source_split_1300;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p29, out_$i27);
    out_$p30 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(8, 1));
    goto corral_source_split_1299;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(in_$p2, $mul.ref(out_$i28, 8));
    goto corral_source_split_1298;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i32.i64(out_$i20);
    goto corral_source_split_1297;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i64($M.0, out_$p26);
    goto corral_source_split_1296;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} out_$i25 := u64_stats_fetch_begin_bh(out_$p24);
    call {:si_unique_call 209} {:cexpr "start"} boogie_si_record_i32(out_$i25);
    out_$p26 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(0, 1));
    goto corral_source_split_1295;

  $bb10:
    call out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38 := be_get_ethtool_stats_loop_$bb10(in_$p2, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i20, out_$p22);
    goto $bb10_last;

  $bb10_last:
    out_$p24 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 24760)), $mul.ref(24688, 1)), $mul.ref(60, 1));
    goto corral_source_split_1294;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i38 == 1;
    assume false;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 24760)), $mul.ref(24688, 1));
    goto corral_source_split_1292;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i20, out_$i21, out_$p22, out_$i52, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$p147, out_$p148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$p155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170 := be_get_ethtool_stats_loop_$bb8(in_$p2, in_$p16, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i20, out_$i21, out_$p22, out_$i52, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$p147, out_$p148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$p155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170);
    return;

  exit:
    return;
}



procedure be_get_ethtool_stats_loop_$bb8(in_$p2: ref, in_$p16: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i64, in_$i44: i32, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i20: i32, in_$i21: i32, in_$p22: ref, in_$i52: i32, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$i142: i32, in_$i143: i64, in_$i144: i32, in_$i145: i64, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$i150: i32, in_$i151: i64, in_$i152: i32, in_$i153: i64, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$i158: i32, in_$i159: i64, in_$i160: i32, in_$i161: i64, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$i166: i32, in_$i167: i64, in_$i168: i32, in_$i169: i64, in_$p170: ref) returns (out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i64, out_$i44: i32, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i20: i32, out_$i21: i32, out_$p22: ref, out_$i52: i32, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$i142: i32, out_$i143: i64, out_$i144: i32, out_$i145: i64, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$i150: i32, out_$i151: i64, out_$i152: i32, out_$i153: i64, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$i158: i32, out_$i159: i64, out_$i160: i32, out_$i161: i64, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$i166: i32, out_$i167: i64, out_$i168: i32, out_$i169: i64, out_$p170: ref);
  modifies $M.0;



implementation lancer_fw_download_loop_$bb11(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p31: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i64, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i32, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i64, in_$p56: ref, in_$i57: i32, in_$i58: i64, in_$i59: i64, in_$i60: i1, in_$i39: i32, in_$p40: ref, in_$i41: i64, in_$i61: i32, in_$i62: i32, in_cmdloc_dummy_var_235: [ref]i8, in_cmdloc_dummy_var_236: [ref]i8, in_cmdloc_dummy_var_237: [ref]i8) returns (out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i64, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i32, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i64, out_$p56: ref, out_$i57: i32, out_$i58: i64, out_$i59: i64, out_$i60: i1, out_$i39: i32, out_$p40: ref, out_$i41: i64, out_$i61: i32, out_$i62: i32, out_cmdloc_dummy_var_235: [ref]i8, out_cmdloc_dummy_var_236: [ref]i8, out_cmdloc_dummy_var_237: [ref]i8)
{

  entry:
    out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i39, out_$p40, out_$i41, out_$i61, out_$i62, out_cmdloc_dummy_var_235, out_cmdloc_dummy_var_236, out_cmdloc_dummy_var_237 := in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i39, in_$p40, in_$i41, in_$i61, in_$i62, in_cmdloc_dummy_var_235, in_cmdloc_dummy_var_236, in_cmdloc_dummy_var_237;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1987;

  $bb20:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i39, out_$p40, out_$i41 := out_$i53, out_$p56, out_$i59;
    goto $bb20_dummy;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    out_$i61, out_$i62 := out_$i53, out_$i46;
    assume true;
    goto $bb20;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_2015;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    out_$i59 := $sub.i64(out_$i41, out_$i58);
    call {:si_unique_call 283} {:cexpr "image_size"} boogie_si_record_i64(out_$i59);
    goto corral_source_split_2014;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i32.i64(out_$i57);
    goto corral_source_split_2013;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.6, in_$p3);
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(out_$p40, $mul.ref(out_$i55, 1));
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i32.i64(out_$i54);
    goto corral_source_split_2010;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.6, in_$p3);
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i39, out_$i52);
    call {:si_unique_call 282} {:cexpr "offset"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_2008;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.6, in_$p3);
    goto corral_source_split_2007;

  $bb17:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    out_$i48, out_$i49 := out_$i39, out_$i46;
    assume true;
    goto $bb17;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_2000;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} out_$i46 := lancer_cmd_write_object(in_$p0, in_$p2, out_$i44, out_$i39, .str.83, in_$p3, in_$p5, in_$p4);
    call {:si_unique_call 281} {:cexpr "status"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_1999;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_235 := $M.0;
    out_cmdloc_dummy_var_236 := $M.0;
    call {:si_unique_call 279} out_cmdloc_dummy_var_237 := $memcpy.i8(out_cmdloc_dummy_var_235, out_cmdloc_dummy_var_236, in_$p31, out_$p40, out_$i45, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_237;
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i32.i64(out_$i44);
    call {:si_unique_call 278} {:cexpr "__len"} boogie_si_record_i64(out_$i45);
    goto corral_source_split_1997;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1996;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    out_$i44 := 32768;
    goto $bb15;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i42;
    goto $bb15;

  $bb13:
    assume out_$i43 == 1;
    goto corral_source_split_1992;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$i43 := $ult.i32(out_$i42, 32768);
    goto corral_source_split_1990;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i64.i32(out_$i41);
    call {:si_unique_call 277} {:cexpr "__min1"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb14:
    assume !(out_$i43 == 1);
    goto corral_source_split_1994;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i39, out_$p40, out_$i41, out_$i61, out_$i62, out_cmdloc_dummy_var_235, out_cmdloc_dummy_var_236, out_cmdloc_dummy_var_237 := lancer_fw_download_loop_$bb11(in_$p0, in_$p2, in_$p3, in_$p4, in_$p5, in_$p31, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i39, out_$p40, out_$i41, out_$i61, out_$i62, out_cmdloc_dummy_var_235, out_cmdloc_dummy_var_236, out_cmdloc_dummy_var_237);
    return;

  exit:
    return;
}



procedure lancer_fw_download_loop_$bb11(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p31: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i64, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i32, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i64, in_$p56: ref, in_$i57: i32, in_$i58: i64, in_$i59: i64, in_$i60: i1, in_$i39: i32, in_$p40: ref, in_$i41: i64, in_$i61: i32, in_$i62: i32, in_cmdloc_dummy_var_235: [ref]i8, in_cmdloc_dummy_var_236: [ref]i8, in_cmdloc_dummy_var_237: [ref]i8) returns (out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i64, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i32, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i64, out_$p56: ref, out_$i57: i32, out_$i58: i64, out_$i59: i64, out_$i60: i1, out_$i39: i32, out_$p40: ref, out_$i41: i64, out_$i61: i32, out_$i62: i32, out_cmdloc_dummy_var_235: [ref]i8, out_cmdloc_dummy_var_236: [ref]i8, out_cmdloc_dummy_var_237: [ref]i8);
  modifies $M.0, $M.6, $M.13, $M.7, $M.21, $CurrAddr;



implementation be_fw_download_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i21: i32, in_$i23: i32, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i45: i32, in_$p46: ref, in_$i47: i16, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i51: i32, in_$i56: i32, in_$i44: i32, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i26: i32, in_$i27: i32, in_$i60: i32, in_vslice_dummy_var_316: i32) returns (out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i45: i32, out_$p46: ref, out_$i47: i16, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i51: i32, out_$i56: i32, out_$i44: i32, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i26: i32, out_$i27: i32, out_$i60: i32, out_vslice_dummy_var_316: i32)
{

  entry:
    out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p52, out_$p53, out_$p54, out_$i51, out_$i56, out_$i44, out_$i57, out_$i58, out_$i59, out_$i26, out_$i27, out_$i60, out_vslice_dummy_var_316 := in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$p33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p52, in_$p53, in_$p54, in_$i51, in_$i56, in_$i44, in_$i57, in_$i58, in_$i59, in_$i26, in_$i27, in_$i60, in_vslice_dummy_var_316;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2107;

  $bb30:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i26, out_$i27 := out_$i58, out_$i57;
    goto $bb30_dummy;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i57;
    assume true;
    goto $bb30;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i58, in_$i23);
    goto corral_source_split_2148;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i26, 1);
    call {:si_unique_call 305} {:cexpr "i"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_2147;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_2146;

  $bb11:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    out_$i57 := out_$i27;
    goto $bb29;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i44;
    goto $bb29;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2132;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i56;
    goto $bb24;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i45;
    goto $bb24;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i43;
    goto $bb24;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} out_$i43 := be_flash_skyhawk(in_$p0, in_$p1, in_$p2, in_$i23);
    call {:si_unique_call 301} {:cexpr "status"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_2124;

  $bb20:
    assume out_$i41 == 1;
    goto corral_source_split_2123;

  $bb15:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(in_$i21, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(in_$i21, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(in_$i21, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb10:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 1);
    goto corral_source_split_2118;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_2117;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2116;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_2115;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p29, $mul.ref(out_$i32, 1));
    goto corral_source_split_2114;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i64(out_$i31, 128);
    goto corral_source_split_2113;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    out_$i31 := $mul.i64(out_$i30, 48);
    goto corral_source_split_2112;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i26);
    goto corral_source_split_2111;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.11, out_$p28);
    goto corral_source_split_2110;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2109;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} out_$i45 := be_flash_BEx(in_$p0, in_$p1, in_$p2, in_$i23);
    call {:si_unique_call 299} {:cexpr "status"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_2121;

  $bb17:
    assume out_$i40 == 1;
    goto corral_source_split_2120;

  $bb16:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(in_$i21, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_2144;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i27;
    goto $bb28;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i51;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2142;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} out_vslice_dummy_var_316 := dev_err.ref.ref(out_$p54, .str.88);
    assume {:verifier.code 0} true;
    out_$i51 := $sub.i32(0, 1);
    goto $bb27;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i50;
    goto $bb27;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} out_$i50 := be_flash_BEx(in_$p0, in_$p1, in_$p2, in_$i23);
    call {:si_unique_call 303} {:cexpr "status"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_2135;

  $bb25:
    assume out_$i49 == 1;
    goto corral_source_split_2134;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    out_$i49 := $ule.i32(out_$i48, 15);
    goto corral_source_split_2130;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i16.i32(out_$i47);
    goto corral_source_split_2129;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i16($M.0, out_$p46);
    goto corral_source_split_2128;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(364276, 1));
    goto corral_source_split_2127;

  $bb22:
    assume out_$i42 == 1;
    goto corral_source_split_2126;

  $bb13:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(in_$i21, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p53, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_2140;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_2139;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_2138;

  $bb26:
    assume !(out_$i49 == 1);
    goto corral_source_split_2137;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb19;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb19;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p52, out_$p53, out_$p54, out_$i51, out_$i56, out_$i44, out_$i57, out_$i58, out_$i59, out_$i26, out_$i27, out_$i60, out_vslice_dummy_var_316 := be_fw_download_loop_$bb8(in_$p0, in_$p1, in_$p2, in_$i21, in_$i23, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p52, out_$p53, out_$p54, out_$i51, out_$i56, out_$i44, out_$i57, out_$i58, out_$i59, out_$i26, out_$i27, out_$i60, out_vslice_dummy_var_316);
    return;

  exit:
    return;
}



procedure be_fw_download_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i21: i32, in_$i23: i32, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i45: i32, in_$p46: ref, in_$i47: i16, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i51: i32, in_$i56: i32, in_$i44: i32, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i26: i32, in_$i27: i32, in_$i60: i32, in_vslice_dummy_var_316: i32) returns (out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i45: i32, out_$p46: ref, out_$i47: i16, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i51: i32, out_$i56: i32, out_$i44: i32, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i26: i32, out_$i27: i32, out_$i60: i32, out_vslice_dummy_var_316: i32);
  modifies $M.0, $CurrAddr, $M.21, $M.17, $M.18, $M.19, $M.20;



implementation be_flash_skyhawk_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i4: i32, in_$p6: ref, in_$p15: ref, in_$i19: i64, in_$p22: ref, in_$i23: i32, in_$i24: i64, in_$p27: ref, in_$i28: i32, in_$i29: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i32, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i8, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p70: ref, in_$i71: i64, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i32, in_$i46: i32, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$i18: i32) returns (out_$i19: i64, out_$p22: ref, out_$i23: i32, out_$i24: i64, out_$p27: ref, out_$i28: i32, out_$i29: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i32, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i8, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p70: ref, out_$i71: i64, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i32, out_$i46: i32, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$i18: i32)
{

  entry:
    out_$i19, out_$p22, out_$i23, out_$i24, out_$p27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i46, out_$i86, out_$i87, out_$i88, out_$i18 := in_$i19, in_$p22, in_$i23, in_$i24, in_$p27, in_$i28, in_$i29, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$p57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$p64, in_$i65, in_$p66, in_$p67, in_$p68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i46, in_$i86, in_$i87, in_$i88, in_$i18;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2326;

  $bb49:
    assume out_$i88 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i86;
    goto $bb49_dummy;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$i88 := $ult.i32(out_$i86, out_$i87);
    goto corral_source_split_2357;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.0, in_$p15);
    goto corral_source_split_2356;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i32(out_$i46, 1);
    call {:si_unique_call 328} {:cexpr "i"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_2355;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_2354;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i18;
    goto $bb36;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i18;
    goto $bb36;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i18;
    goto $bb36;

  $bb39:
    assume out_$i55 == 1;
    goto corral_source_split_2369;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, 0);
    goto corral_source_split_2367;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i1.i32(out_$i53);
    call {:si_unique_call 331} {:cexpr "redboot"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_2366;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    out_$i53 := $trunc.i8.i1(out_$i52);
    goto corral_source_split_2365;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i1.i8(out_$i51);
    call {:si_unique_call 330} {:cexpr "tmp"} boogie_si_record_i8(out_$i52);
    goto corral_source_split_2364;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} out_$i51 := be_flash_redboot(in_$p0, out_$p49, out_$i23, out_$i28, out_$i50);
    goto corral_source_split_2363;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(128, in_$i4);
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.11, out_$p48);
    goto corral_source_split_2361;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2360;

  $bb37:
    assume out_$i47 == 1;
    goto corral_source_split_2359;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i45, 1);
    goto corral_source_split_2352;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2351;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    out_$i45 := 1;
    goto $bb34;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    out_$i45 := 9;
    goto $bb34;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    out_$i45 := 0;
    goto $bb34;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    out_$i45 := 2;
    goto $bb34;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$i45 := 8;
    goto $bb34;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    out_$i45 := 3;
    goto $bb34;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    out_$i45 := 13;
    goto $bb34;

  $bb32:
    assume out_$i44 == 1;
    goto corral_source_split_2349;

  $bb28:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i33, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb11:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i33, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i33, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(out_$i29, 64)), $mul.ref(0, 1));
    goto corral_source_split_2335;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i18);
    goto corral_source_split_2334;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    call {:si_unique_call 327} {:cexpr "img_size"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_2333;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(out_$i24, 64)), $mul.ref(8, 1));
    goto corral_source_split_2332;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i18);
    goto corral_source_split_2331;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    call {:si_unique_call 326} {:cexpr "img_offset"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_2330;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 2240)), $mul.ref(192, 1)), $mul.ref(out_$i19, 64)), $mul.ref(4, 1));
    goto corral_source_split_2329;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i18);
    goto corral_source_split_2328;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb30:
    assume out_$i43 == 1;
    goto corral_source_split_2345;

  $bb29:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i33, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !(out_$i43 == 1);
    goto corral_source_split_2347;

  $bb26:
    assume out_$i41 == 1;
    goto corral_source_split_2343;

  $bb22:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i33, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb13:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i33, 160);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb12:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i33, 176);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb24:
    assume out_$i40 == 1;
    goto corral_source_split_2341;

  $bb23:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i33, 160);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb20:
    assume out_$i38 == 1;
    goto corral_source_split_2339;

  $bb15:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i33, 176);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i33, 224);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb17:
    assume out_$i37 == 1;
    goto corral_source_split_2337;

  $bb16:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i33, 224);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb47:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$i75, out_$i76 := out_$i18, out_$i73;
    assume true;
    goto $bb47;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i73, 0);
    goto corral_source_split_2391;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} out_$i73 := be_flash(in_$p0, out_$p61, in_$p2, out_$i45, out_$i28);
    call {:si_unique_call 333} {:cexpr "status"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_2390;

  $bb44:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$i72 := $ugt.i64(out_$i65, out_$i71);
    goto corral_source_split_2386;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    out_$i71 := $p2i.ref.i64(out_$p70);
    goto corral_source_split_2385;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref(out_$p67, $mul.ref(out_$i69, 1));
    goto corral_source_split_2384;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i64($M.8, out_$p68);
    goto corral_source_split_2383;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2382;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.11, out_$p66);
    goto corral_source_split_2381;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2380;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p64);
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p57, $mul.ref(out_$i63, 1));
    goto corral_source_split_2378;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i28);
    out_$i63 := $add.i64(out_$i60, out_$i62);
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(out_$p57, $mul.ref(out_$i60, 1));
    goto corral_source_split_2376;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i59);
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i58, in_$i4);
    goto corral_source_split_2374;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(128, out_$i23);
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.11, out_$p56);
    goto corral_source_split_2372;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2371;

  $bb38:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb19;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb19;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb19;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb19;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i44 == 1);
    goto $bb19;

  $bb49_dummy:
    call {:si_unique_call 1} out_$i19, out_$p22, out_$i23, out_$i24, out_$p27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i46, out_$i86, out_$i87, out_$i88, out_$i18 := be_flash_skyhawk_loop_$bb8(in_$p0, in_$p1, in_$p2, in_$i4, in_$p6, in_$p15, out_$i19, out_$p22, out_$i23, out_$i24, out_$p27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i46, out_$i86, out_$i87, out_$i88, out_$i18);
    return;

  exit:
    return;
}



procedure be_flash_skyhawk_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i4: i32, in_$p6: ref, in_$p15: ref, in_$i19: i64, in_$p22: ref, in_$i23: i32, in_$i24: i64, in_$p27: ref, in_$i28: i32, in_$i29: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i32, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i8, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p70: ref, in_$i71: i64, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i32, in_$i46: i32, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$i18: i32) returns (out_$i19: i64, out_$p22: ref, out_$i23: i32, out_$i24: i64, out_$p27: ref, out_$i28: i32, out_$i29: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i32, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i8, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p70: ref, out_$i71: i64, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i32, out_$i46: i32, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$i18: i32);
  modifies $M.0, $CurrAddr, $M.21;



implementation be_flash_BEx_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$p164: ref, in_$i165: i32, in_$i166: i32, in_$p169: ref, in_$i178: i64, in_$p180: ref, in_$i181: i32, in_$i182: i1, in_$i183: i8, in_$i184: i1, in_$i185: i32, in_$i186: i1, in_$i188: i64, in_$p190: ref, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$p194: ref, in_$i195: i32, in_$i196: i1, in_$i197: i64, in_$p199: ref, in_$i200: i32, in_$i201: i1, in_$i202: i1, in_$i203: i8, in_$i204: i1, in_$i205: i32, in_$i206: i1, in_$i207: i64, in_$p209: ref, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$p213: ref, in_$i214: i64, in_$p216: ref, in_$i217: i64, in_$i218: i32, in_$i219: i64, in_$p221: ref, in_$i222: i32, in_$i223: i32, in_$i224: i1, in_$i225: i8, in_$i226: i1, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$p230: ref, in_$i231: i64, in_$i232: i64, in_$p234: ref, in_$i235: i64, in_$i236: i64, in_$i237: i64, in_$i238: i64, in_$p239: ref, in_$i240: i64, in_$p242: ref, in_$i243: i32, in_$i244: i64, in_$i245: i64, in_$p246: ref, in_$i247: i64, in_$p248: ref, in_$p249: ref, in_$p250: ref, in_$i251: i64, in_$p252: ref, in_$i253: i64, in_$i254: i1, in_$i255: i64, in_$p257: ref, in_$i258: i32, in_$i259: i64, in_$p261: ref, in_$i262: i32, in_$i263: i32, in_$i264: i1, in_$i265: i32, in_$i266: i32, in_$i187: i32, in_$i275: i32, in_$i276: i1, in_$i177: i32) returns (out_$i178: i64, out_$p180: ref, out_$i181: i32, out_$i182: i1, out_$i183: i8, out_$i184: i1, out_$i185: i32, out_$i186: i1, out_$i188: i64, out_$p190: ref, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$p194: ref, out_$i195: i32, out_$i196: i1, out_$i197: i64, out_$p199: ref, out_$i200: i32, out_$i201: i1, out_$i202: i1, out_$i203: i8, out_$i204: i1, out_$i205: i32, out_$i206: i1, out_$i207: i64, out_$p209: ref, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$p213: ref, out_$i214: i64, out_$p216: ref, out_$i217: i64, out_$i218: i32, out_$i219: i64, out_$p221: ref, out_$i222: i32, out_$i223: i32, out_$i224: i1, out_$i225: i8, out_$i226: i1, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$p230: ref, out_$i231: i64, out_$i232: i64, out_$p234: ref, out_$i235: i64, out_$i236: i64, out_$i237: i64, out_$i238: i64, out_$p239: ref, out_$i240: i64, out_$p242: ref, out_$i243: i32, out_$i244: i64, out_$i245: i64, out_$p246: ref, out_$i247: i64, out_$p248: ref, out_$p249: ref, out_$p250: ref, out_$i251: i64, out_$p252: ref, out_$i253: i64, out_$i254: i1, out_$i255: i64, out_$p257: ref, out_$i258: i32, out_$i259: i64, out_$p261: ref, out_$i262: i32, out_$i263: i32, out_$i264: i1, out_$i265: i32, out_$i266: i32, out_$i187: i32, out_$i275: i32, out_$i276: i1, out_$i177: i32)
{

  entry:
    out_$i178, out_$p180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i188, out_$p190, out_$i191, out_$i192, out_$p193, out_$p194, out_$i195, out_$i196, out_$i197, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$p209, out_$i210, out_$i211, out_$p212, out_$p213, out_$i214, out_$p216, out_$i217, out_$i218, out_$i219, out_$p221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$p229, out_$p230, out_$i231, out_$i232, out_$p234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i240, out_$p242, out_$i243, out_$i244, out_$i245, out_$p246, out_$i247, out_$p248, out_$p249, out_$p250, out_$i251, out_$p252, out_$i253, out_$i254, out_$i255, out_$p257, out_$i258, out_$i259, out_$p261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i187, out_$i275, out_$i276, out_$i177 := in_$i178, in_$p180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i188, in_$p190, in_$i191, in_$i192, in_$p193, in_$p194, in_$i195, in_$i196, in_$i197, in_$p199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$p209, in_$i210, in_$i211, in_$p212, in_$p213, in_$i214, in_$p216, in_$i217, in_$i218, in_$i219, in_$p221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$p229, in_$p230, in_$i231, in_$i232, in_$p234, in_$i235, in_$i236, in_$i237, in_$i238, in_$p239, in_$i240, in_$p242, in_$i243, in_$i244, in_$i245, in_$p246, in_$i247, in_$p248, in_$p249, in_$p250, in_$i251, in_$p252, in_$i253, in_$i254, in_$i255, in_$p257, in_$i258, in_$i259, in_$p261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i187, in_$i275, in_$i276, in_$i177;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2583;

  $bb47:
    assume out_$i276 == 1;
    assume {:verifier.code 0} true;
    out_$i177 := out_$i275;
    goto $bb47_dummy;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    out_$i276 := $slt.i32(out_$i275, in_$i166);
    goto corral_source_split_2602;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    out_$i275 := $add.i32(out_$i187, 1);
    call {:si_unique_call 343} {:cexpr "i"} boogie_si_record_i32(out_$i275);
    goto corral_source_split_2601;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2600;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i187 := out_$i177;
    goto $bb18;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    out_$i187 := out_$i177;
    goto $bb18;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    out_$i187 := out_$i177;
    goto $bb18;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    out_$i187 := out_$i177;
    goto $bb18;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    out_$i187 := out_$i177;
    goto $bb18;

  $bb16:
    assume out_$i186 == 1;
    goto corral_source_split_2598;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    out_$i186 := $ne.i32(out_$i185, 0);
    goto corral_source_split_2596;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2595;

  $bb14:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    out_$i185 := 1;
    goto $bb15;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    out_$i185 := 0;
    goto $bb15;

  $bb13:
    assume out_$i184 == 1;
    goto corral_source_split_2593;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    out_$i184 := $trunc.i8.i1(out_$i183);
    goto corral_source_split_2591;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    out_$i183 := $zext.i1.i8(out_$i182);
    call {:si_unique_call 342} {:cexpr "tmp"} boogie_si_record_i8(out_$i183);
    goto corral_source_split_2590;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} out_$i182 := is_comp_in_ufi(in_$p0, in_$p169, out_$i181);
    goto corral_source_split_2589;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    out_$i181 := $load.i32($M.20, out_$p180);
    goto corral_source_split_2588;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(in_$p164, $mul.ref(out_$i178, 24)), $mul.ref(16, 1));
    goto corral_source_split_2587;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    goto corral_source_split_2586;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i178 := $sext.i32.i64(out_$i177);
    goto corral_source_split_2585;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb22:
    assume out_$i196 == 1;
    goto corral_source_split_2616;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    out_$i196 := $slt.i32(out_$i195, 0);
    goto corral_source_split_2614;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} out_$i195 := memcmp(out_$p194, .str.95, 11);
    call {:si_unique_call 345} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i195);
    goto corral_source_split_2613;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    out_$p194 := $bitcast.ref.ref(out_$p193);
    goto corral_source_split_2612;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(363960, 1));
    goto corral_source_split_2611;

  $bb20:
    assume out_$i192 == 1;
    goto corral_source_split_2610;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 13);
    goto corral_source_split_2608;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    out_$i191 := $load.i32($M.18, out_$p190);
    goto corral_source_split_2607;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(in_$p164, $mul.ref(out_$i188, 24)), $mul.ref(8, 1));
    goto corral_source_split_2606;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    goto corral_source_split_2605;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i188 := $sext.i32.i64(out_$i177);
    goto corral_source_split_2604;

  $bb17:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb31:
    assume out_$i206 == 1;
    goto corral_source_split_2634;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    out_$i206 := $ne.i32(out_$i205, 0);
    goto corral_source_split_2632;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_2631;

  $bb29:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    out_$i205 := 1;
    goto $bb30;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    out_$i205 := 0;
    goto $bb30;

  $bb28:
    assume out_$i204 == 1;
    goto corral_source_split_2629;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    out_$i204 := $trunc.i8.i1(out_$i203);
    goto corral_source_split_2627;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    out_$i203 := $zext.i1.i8(out_$i202);
    call {:si_unique_call 347} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i203);
    goto corral_source_split_2626;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} out_$i202 := phy_flashing_required(in_$p0);
    goto corral_source_split_2625;

  $bb26:
    assume out_$i201 == 1;
    goto corral_source_split_2624;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i200, 99);
    goto corral_source_split_2622;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    out_$i200 := $load.i32($M.18, out_$p199);
    goto corral_source_split_2621;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    out_$p199 := $add.ref($add.ref(in_$p164, $mul.ref(out_$i197, 24)), $mul.ref(8, 1));
    goto corral_source_split_2620;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    goto corral_source_split_2619;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i197 := $sext.i32.i64(out_$i177);
    goto corral_source_split_2618;

  $bb21:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb37:
    assume out_$i228 == 1;
    goto corral_source_split_2661;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 0);
    goto corral_source_split_2659;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    out_$i227 := $zext.i1.i32(out_$i226);
    call {:si_unique_call 350} {:cexpr "redboot"} boogie_si_record_i32(out_$i227);
    goto corral_source_split_2658;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    out_$i226 := $trunc.i8.i1(out_$i225);
    goto corral_source_split_2657;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    out_$i225 := $zext.i1.i8(out_$i224);
    call {:si_unique_call 349} {:cexpr "tmp___4"} boogie_si_record_i8(out_$i225);
    goto corral_source_split_2656;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} out_$i224 := be_flash_redboot(in_$p0, out_$p213, out_$i218, out_$i222, out_$i223);
    goto corral_source_split_2655;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    out_$i223 := $add.i32(in_$i165, in_$i6);
    goto corral_source_split_2654;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    out_$i222 := $load.i32($M.19, out_$p221);
    goto corral_source_split_2653;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    out_$p221 := $add.ref($add.ref(in_$p164, $mul.ref(out_$i219, 24)), $mul.ref(12, 1));
    goto corral_source_split_2652;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    goto corral_source_split_2651;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    out_$i219 := $sext.i32.i64(out_$i177);
    goto corral_source_split_2650;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    out_$i218 := $trunc.i64.i32(out_$i217);
    goto corral_source_split_2649;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    out_$i217 := $load.i64($M.17, out_$p216);
    goto corral_source_split_2648;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref($add.ref(in_$p164, $mul.ref(out_$i214, 24)), $mul.ref(0, 1));
    goto corral_source_split_2647;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    goto corral_source_split_2646;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    out_$i214 := $sext.i32.i64(out_$i177);
    goto corral_source_split_2645;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    out_$p213 := $load.ref($M.11, out_$p212);
    goto corral_source_split_2644;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    out_$p212 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2643;

  $bb35:
    assume out_$i211 == 1;
    goto corral_source_split_2642;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 1);
    goto corral_source_split_2640;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    out_$i210 := $load.i32($M.18, out_$p209);
    goto corral_source_split_2639;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref($add.ref(in_$p164, $mul.ref(out_$i207, 24)), $mul.ref(8, 1));
    goto corral_source_split_2638;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    goto corral_source_split_2637;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i207 := $sext.i32.i64(out_$i177);
    goto corral_source_split_2636;

  $bb27:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb45:
    assume !(out_$i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    out_$i265, out_$i266 := out_$i177, out_$i263;
    assume true;
    goto $bb45;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    out_$i264 := $ne.i32(out_$i263, 0);
    goto corral_source_split_2700;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} out_$i263 := be_flash(in_$p0, out_$p239, in_$p2, out_$i258, out_$i262);
    call {:si_unique_call 352} {:cexpr "status"} boogie_si_record_i32(out_$i263);
    goto corral_source_split_2699;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    out_$i262 := $load.i32($M.19, out_$p261);
    goto corral_source_split_2698;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    out_$p261 := $add.ref($add.ref(in_$p164, $mul.ref(out_$i259, 24)), $mul.ref(12, 1));
    goto corral_source_split_2697;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    goto corral_source_split_2696;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    out_$i259 := $sext.i32.i64(out_$i177);
    goto corral_source_split_2695;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    out_$i258 := $load.i32($M.18, out_$p257);
    goto corral_source_split_2694;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    out_$p257 := $add.ref($add.ref(in_$p164, $mul.ref(out_$i255, 24)), $mul.ref(8, 1));
    goto corral_source_split_2693;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    goto corral_source_split_2692;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i255 := $sext.i32.i64(out_$i177);
    goto corral_source_split_2691;

  $bb42:
    assume !(out_$i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    out_$i254 := $ugt.i64(out_$i247, out_$i253);
    goto corral_source_split_2687;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    out_$i253 := $p2i.ref.i64(out_$p252);
    goto corral_source_split_2686;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    out_$p252 := $add.ref(out_$p249, $mul.ref(out_$i251, 1));
    goto corral_source_split_2685;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    out_$i251 := $load.i64($M.8, out_$p250);
    goto corral_source_split_2684;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    out_$p250 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2683;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    out_$p249 := $load.ref($M.11, out_$p248);
    goto corral_source_split_2682;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    out_$p248 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2681;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    out_$i247 := $p2i.ref.i64(out_$p246);
    goto corral_source_split_2680;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    out_$p246 := $add.ref(out_$p230, $mul.ref(out_$i245, 1));
    goto corral_source_split_2679;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    out_$i244 := $sext.i32.i64(out_$i243);
    out_$i245 := $add.i64(out_$i238, out_$i244);
    goto corral_source_split_2678;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    out_$i243 := $load.i32($M.19, out_$p242);
    goto corral_source_split_2677;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    out_$p242 := $add.ref($add.ref(in_$p164, $mul.ref(out_$i240, 24)), $mul.ref(12, 1));
    goto corral_source_split_2676;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    goto corral_source_split_2675;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    out_$i240 := $sext.i32.i64(out_$i177);
    goto corral_source_split_2674;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    out_$p239 := $add.ref(out_$p230, $mul.ref(out_$i238, 1));
    goto corral_source_split_2673;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    out_$i238 := $add.i64(out_$i236, out_$i237);
    goto corral_source_split_2672;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    out_$i237 := $sext.i32.i64(in_$i6);
    goto corral_source_split_2671;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    out_$i236 := $add.i64(out_$i231, out_$i235);
    goto corral_source_split_2670;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    out_$i235 := $load.i64($M.17, out_$p234);
    goto corral_source_split_2669;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    out_$p234 := $add.ref($add.ref(in_$p164, $mul.ref(out_$i232, 24)), $mul.ref(0, 1));
    goto corral_source_split_2668;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    goto corral_source_split_2667;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    out_$i232 := $sext.i32.i64(out_$i177);
    goto corral_source_split_2666;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$i231 := $sext.i32.i64(in_$i165);
    goto corral_source_split_2665;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    out_$p230 := $load.ref($M.11, out_$p229);
    goto corral_source_split_2664;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p229 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2663;

  $bb36:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb38:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb47_dummy:
    call {:si_unique_call 1} out_$i178, out_$p180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i188, out_$p190, out_$i191, out_$i192, out_$p193, out_$p194, out_$i195, out_$i196, out_$i197, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$p209, out_$i210, out_$i211, out_$p212, out_$p213, out_$i214, out_$p216, out_$i217, out_$i218, out_$i219, out_$p221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$p229, out_$p230, out_$i231, out_$i232, out_$p234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i240, out_$p242, out_$i243, out_$i244, out_$i245, out_$p246, out_$i247, out_$p248, out_$p249, out_$p250, out_$i251, out_$p252, out_$i253, out_$i254, out_$i255, out_$p257, out_$i258, out_$i259, out_$p261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i187, out_$i275, out_$i276, out_$i177 := be_flash_BEx_loop_$bb11(in_$p0, in_$p1, in_$p2, in_$i6, in_$p164, in_$i165, in_$i166, in_$p169, out_$i178, out_$p180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i188, out_$p190, out_$i191, out_$i192, out_$p193, out_$p194, out_$i195, out_$i196, out_$i197, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$p209, out_$i210, out_$i211, out_$p212, out_$p213, out_$i214, out_$p216, out_$i217, out_$i218, out_$i219, out_$p221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$p229, out_$p230, out_$i231, out_$i232, out_$p234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i240, out_$p242, out_$i243, out_$i244, out_$i245, out_$p246, out_$i247, out_$p248, out_$p249, out_$p250, out_$i251, out_$p252, out_$i253, out_$i254, out_$i255, out_$p257, out_$i258, out_$i259, out_$p261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i187, out_$i275, out_$i276, out_$i177);
    return;

  exit:
    return;
}



procedure be_flash_BEx_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$p164: ref, in_$i165: i32, in_$i166: i32, in_$p169: ref, in_$i178: i64, in_$p180: ref, in_$i181: i32, in_$i182: i1, in_$i183: i8, in_$i184: i1, in_$i185: i32, in_$i186: i1, in_$i188: i64, in_$p190: ref, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$p194: ref, in_$i195: i32, in_$i196: i1, in_$i197: i64, in_$p199: ref, in_$i200: i32, in_$i201: i1, in_$i202: i1, in_$i203: i8, in_$i204: i1, in_$i205: i32, in_$i206: i1, in_$i207: i64, in_$p209: ref, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$p213: ref, in_$i214: i64, in_$p216: ref, in_$i217: i64, in_$i218: i32, in_$i219: i64, in_$p221: ref, in_$i222: i32, in_$i223: i32, in_$i224: i1, in_$i225: i8, in_$i226: i1, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$p230: ref, in_$i231: i64, in_$i232: i64, in_$p234: ref, in_$i235: i64, in_$i236: i64, in_$i237: i64, in_$i238: i64, in_$p239: ref, in_$i240: i64, in_$p242: ref, in_$i243: i32, in_$i244: i64, in_$i245: i64, in_$p246: ref, in_$i247: i64, in_$p248: ref, in_$p249: ref, in_$p250: ref, in_$i251: i64, in_$p252: ref, in_$i253: i64, in_$i254: i1, in_$i255: i64, in_$p257: ref, in_$i258: i32, in_$i259: i64, in_$p261: ref, in_$i262: i32, in_$i263: i32, in_$i264: i1, in_$i265: i32, in_$i266: i32, in_$i187: i32, in_$i275: i32, in_$i276: i1, in_$i177: i32) returns (out_$i178: i64, out_$p180: ref, out_$i181: i32, out_$i182: i1, out_$i183: i8, out_$i184: i1, out_$i185: i32, out_$i186: i1, out_$i188: i64, out_$p190: ref, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$p194: ref, out_$i195: i32, out_$i196: i1, out_$i197: i64, out_$p199: ref, out_$i200: i32, out_$i201: i1, out_$i202: i1, out_$i203: i8, out_$i204: i1, out_$i205: i32, out_$i206: i1, out_$i207: i64, out_$p209: ref, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$p213: ref, out_$i214: i64, out_$p216: ref, out_$i217: i64, out_$i218: i32, out_$i219: i64, out_$p221: ref, out_$i222: i32, out_$i223: i32, out_$i224: i1, out_$i225: i8, out_$i226: i1, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$p230: ref, out_$i231: i64, out_$i232: i64, out_$p234: ref, out_$i235: i64, out_$i236: i64, out_$i237: i64, out_$i238: i64, out_$p239: ref, out_$i240: i64, out_$p242: ref, out_$i243: i32, out_$i244: i64, out_$i245: i64, out_$p246: ref, out_$i247: i64, out_$p248: ref, out_$p249: ref, out_$p250: ref, out_$i251: i64, out_$p252: ref, out_$i253: i64, out_$i254: i1, out_$i255: i64, out_$p257: ref, out_$i258: i32, out_$i259: i64, out_$p261: ref, out_$i262: i32, out_$i263: i32, out_$i264: i1, out_$i265: i32, out_$i266: i32, out_$i187: i32, out_$i275: i32, out_$i276: i1, out_$i177: i32);
  modifies $M.0, $CurrAddr, $M.21;



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation get_fsec_info_loop_$bb4(in_$p7: ref, in_$p9: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$p15: ref)
{

  entry:
    out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p15 := in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p21, in_$p23, in_$p24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2803;

  $bb10:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p23;
    goto $bb10_dummy;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    out_$i29 := $ugt.i64(out_$i27, out_$i28);
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p24, $mul.ref(out_$i25, 1));
    goto corral_source_split_2818;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.8, in_$p9);
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.11, in_$p7);
    goto corral_source_split_2816;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p15, $mul.ref(32, 1));
    goto corral_source_split_2815;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p15;
    assume true;
    goto $bb7;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, 0);
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} out_$i19 := memcmp(flash_cookie, out_$p18, 32);
    call {:si_unique_call 383} {:cexpr "tmp"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_2808;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 2240)), $mul.ref(0, 1));
    goto corral_source_split_2806;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p15 := get_fsec_info_loop_$bb4(in_$p7, in_$p9, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p15);
    return;

  exit:
    return;
}



procedure get_fsec_info_loop_$bb4(in_$p7: ref, in_$p9: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$p15: ref);



implementation be_flash_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i3: i32, in_$p7: ref, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i18: i1, in_$i19: i32, in_$i17: i32, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i35: i1, in_$p9: ref, in_$i10: i32, in_cmdloc_dummy_var_238: [ref]i8, in_cmdloc_dummy_var_239: [ref]i8, in_cmdloc_dummy_var_240: [ref]i8) returns (out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i18: i1, out_$i19: i32, out_$i17: i32, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i35: i1, out_$p9: ref, out_$i10: i32, out_cmdloc_dummy_var_238: [ref]i8, out_cmdloc_dummy_var_239: [ref]i8, out_cmdloc_dummy_var_240: [ref]i8)
{

  entry:
    out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i17, out_$i20, out_$p21, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i35, out_$p9, out_$i10, out_cmdloc_dummy_var_238, out_cmdloc_dummy_var_239, out_cmdloc_dummy_var_240 := in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i18, in_$i19, in_$i17, in_$i20, in_$p21, in_$p22, in_$i23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i35, in_$p9, in_$i10, in_cmdloc_dummy_var_238, in_cmdloc_dummy_var_239, in_cmdloc_dummy_var_240;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3311;

  $bb29:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p9, out_$i10 := out_$p24, out_$i13;
    goto $bb29_dummy;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i13, 0);
    goto corral_source_split_3360;

  $bb19:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i25;
    assume true;
    goto $bb19;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_3341;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} out_$i25 := be_cmd_write_flashrom(in_$p0, in_$p2, in_$i3, out_$i17, out_$i12);
    call {:si_unique_call 404} {:cexpr "status"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_3340;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p9, $mul.ref(out_$i23, 1));
    goto corral_source_split_3339;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i32.i64(out_$i12);
    goto corral_source_split_3338;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_238 := $M.0;
    out_cmdloc_dummy_var_239 := $M.0;
    call {:si_unique_call 402} out_cmdloc_dummy_var_240 := $memcpy.i8(out_cmdloc_dummy_var_238, out_cmdloc_dummy_var_239, out_$p22, out_$p9, out_$i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_240;
    goto corral_source_split_3337;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_3336;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p7, $mul.ref(0, 32804)), $mul.ref(32, 1));
    goto corral_source_split_3335;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i32.i64(out_$i12);
    call {:si_unique_call 401} {:cexpr "__len"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_3334;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3333;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i19;
    goto $bb14;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i16;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3331;

  $bb12:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := 1;
    goto $bb13;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    out_$i16 := 9;
    goto $bb13;

  $bb11:
    assume out_$i15 == 1;
    goto corral_source_split_3329;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(in_$i3, 99);
    goto corral_source_split_3324;

  $bb9:
    assume out_$i14 == 1;
    goto corral_source_split_3323;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, 0);
    goto corral_source_split_3321;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    out_$i13 := $sub.i32(out_$i10, out_$i12);
    call {:si_unique_call 400} {:cexpr "total_bytes"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_3320;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3319;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i10;
    goto $bb8;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$i12 := 32768;
    goto $bb8;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_3315;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i11 := $ult.i32(32768, out_$i10);
    goto corral_source_split_3313;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume !(out_$i11 == 1);
    goto corral_source_split_3317;

  $bb16:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := 2;
    goto $bb17;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    out_$i19 := 10;
    goto $bb17;

  $bb15:
    assume out_$i18 == 1;
    goto corral_source_split_3343;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(in_$i3, 99);
    goto corral_source_split_3327;

  $bb10:
    assume !(out_$i14 == 1);
    goto corral_source_split_3326;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i17, out_$i20, out_$p21, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i35, out_$p9, out_$i10, out_cmdloc_dummy_var_238, out_cmdloc_dummy_var_239, out_cmdloc_dummy_var_240 := be_flash_loop_$bb4(in_$p0, in_$p2, in_$i3, in_$p7, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i17, out_$i20, out_$p21, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i35, out_$p9, out_$i10, out_cmdloc_dummy_var_238, out_cmdloc_dummy_var_239, out_cmdloc_dummy_var_240);
    return;

  exit:
    return;
}



procedure be_flash_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i3: i32, in_$p7: ref, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i18: i1, in_$i19: i32, in_$i17: i32, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i35: i1, in_$p9: ref, in_$i10: i32, in_cmdloc_dummy_var_238: [ref]i8, in_cmdloc_dummy_var_239: [ref]i8, in_cmdloc_dummy_var_240: [ref]i8) returns (out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i18: i1, out_$i19: i32, out_$i17: i32, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i35: i1, out_$p9: ref, out_$i10: i32, out_cmdloc_dummy_var_238: [ref]i8, out_cmdloc_dummy_var_239: [ref]i8, out_cmdloc_dummy_var_240: [ref]i8);
  modifies $M.0, $M.21, $CurrAddr;



implementation MODULO___0_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} MODULO___0_loop_$bb3();
    return;

  exit:
    return;
}



procedure MODULO___0_loop_$bb3();



implementation be_mcc_wait_compl_loop_$bb1(in_$p0: ref, in_$i3: i1, in_$i4: i8, in_$i5: i1, in_$i7: i32, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i16: i32, in_$i17: i1, in_$i2: i32, in_$i18: i32, in_$i19: i32) returns (out_$i3: i1, out_$i4: i8, out_$i5: i1, out_$i7: i32, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i16: i32, out_$i17: i1, out_$i2: i32, out_$i18: i32, out_$i19: i32)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i16, out_$i17, out_$i2, out_$i18, out_$i19 := in_$i3, in_$i4, in_$i5, in_$i7, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i16, in_$i17, in_$i2, in_$i18, in_$i19;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3716;

  $bb11:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i2 := out_$i16;
    goto $bb11_dummy;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    out_$i18, out_$i19 := out_$i16, out_$i7;
    assume true;
    goto $bb11;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    out_$i17 := $sle.i32(out_$i16, 119999);
    goto corral_source_split_3739;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i2, 1);
    call {:si_unique_call 493} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_3738;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} __const_udelay(429500);
    goto corral_source_split_3737;

  $bb8:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    out_$i12, out_$i13 := out_$i2, out_$i7;
    assume true;
    goto $bb8;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 0);
    goto corral_source_split_3730;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} out_$i10 := atomic_read(out_$p9);
    call {:si_unique_call 491} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_3729;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} local_bh_enable();
    out_$p9 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_3728;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} out_$i7 := be_process_mcc(in_$p0);
    call {:si_unique_call 488} {:cexpr "status"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_3727;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} local_bh_disable();
    goto corral_source_split_3726;

  $bb4:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    out_$i5 := $trunc.i8.i1(out_$i4);
    goto corral_source_split_3720;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    out_$i4 := $zext.i1.i8(out_$i3);
    call {:si_unique_call 485} {:cexpr "tmp"} boogie_si_record_i8(out_$i4);
    goto corral_source_split_3719;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} out_$i3 := be_error(in_$p0);
    goto corral_source_split_3718;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i16, out_$i17, out_$i2, out_$i18, out_$i19 := be_mcc_wait_compl_loop_$bb1(in_$p0, out_$i3, out_$i4, out_$i5, out_$i7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i16, out_$i17, out_$i2, out_$i18, out_$i19);
    return;

  exit:
    return;
}



procedure be_mcc_wait_compl_loop_$bb1(in_$p0: ref, in_$i3: i1, in_$i4: i8, in_$i5: i1, in_$i7: i32, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i16: i32, in_$i17: i1, in_$i2: i32, in_$i18: i32, in_$i19: i32) returns (out_$i3: i1, out_$i4: i8, out_$i5: i1, out_$i7: i32, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i16: i32, out_$i17: i1, out_$i2: i32, out_$i18: i32, out_$i19: i32);
  modifies $M.0, $M.21, $CurrAddr;



implementation be_process_mcc_loop_$bb4(in_$p0: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i8, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i8, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i8, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$p42: ref, in_$i43: i32, in_$i35: i32, in_$i44: i32, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i48: i32, in_$i49: i32) returns (out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i8, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i8, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i8, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$p42: ref, out_$i43: i32, out_$i35: i32, out_$i44: i32, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i48: i32, out_$i49: i32)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i35, out_$i44, out_$p45, out_$i46, out_$i47, out_$p8, out_$i9, out_$i10, out_$i48, out_$i49 := in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p42, in_$i43, in_$i35, in_$i44, in_$p45, in_$i46, in_$i47, in_$p8, in_$i9, in_$i10, in_$i48, in_$i49;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3761;

  $bb21:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$p8, out_$i9, out_$i10 := out_$p45, out_$i35, out_$i44;
    goto $bb21_dummy;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    out_$i48, out_$i49 := out_$i44, out_$i35;
    assume true;
    goto $bb21;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_3814;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_3813;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} out_$p45 := be_mcc_compl_get(in_$p0);
    goto corral_source_split_3812;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i10, 1);
    call {:si_unique_call 507} {:cexpr "num"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_3811;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} be_mcc_compl_use(out_$p8);
    goto corral_source_split_3810;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3809;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i35 := out_$i43;
    goto $bb17;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i9;
    goto $bb17;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} be_async_link_state_process(in_$p0, out_$p20);
    goto corral_source_split_3783;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_3782;

  $bb8:
    assume out_$i19 == 1;
    goto corral_source_split_3781;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i8.i1(out_$i18);
    goto corral_source_split_3773;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i1.i8(out_$i17);
    call {:si_unique_call 498} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i18);
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} out_$i17 := is_link_state_evt(out_$i16);
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3769;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_3768;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_3766;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    out_$i13 := $and.i32(out_$i12, 1073741824);
    goto corral_source_split_3765;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_3764;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3763;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} be_async_grp5_evt_process(in_$p0, out_$i27, out_$p8);
    goto corral_source_split_3795;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_3794;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3793;

  $bb11:
    assume out_$i25 == 1;
    goto corral_source_split_3792;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i25 := $trunc.i8.i1(out_$i24);
    goto corral_source_split_3790;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i8(out_$i23);
    call {:si_unique_call 501} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i24);
    goto corral_source_split_3789;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} out_$i23 := is_grp5_evt(out_$i22);
    goto corral_source_split_3788;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_3787;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3786;

  $bb9:
    assume !(out_$i19 == 1);
    goto corral_source_split_3785;

  $bb15:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} be_async_dbg_evt_process(in_$p0, out_$i34, out_$p8);
    goto corral_source_split_3807;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_3806;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3805;

  $bb14:
    assume out_$i32 == 1;
    goto corral_source_split_3804;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    out_$i32 := $trunc.i8.i1(out_$i31);
    goto corral_source_split_3802;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i1.i8(out_$i30);
    call {:si_unique_call 504} {:cexpr "tmp"} boogie_si_record_i8(out_$i31);
    goto corral_source_split_3801;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} out_$i30 := is_dbg_evt(out_$i29);
    goto corral_source_split_3800;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_3799;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3798;

  $bb12:
    assume !(out_$i25 == 1);
    goto corral_source_split_3797;

  $bb19:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := out_$i9;
    goto $bb20;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i40;
    goto $bb20;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} atomic_dec(out_$p42);
    goto corral_source_split_3818;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} out_$i40 := be_mcc_compl_process(in_$p0, out_$p8);
    call {:si_unique_call 510} {:cexpr "status"} boogie_si_record_i32(out_$i40);
    out_$p42 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(248, 1)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_3817;

  $bb18:
    assume out_$i39 == 1;
    goto corral_source_split_3816;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_3779;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i32(out_$i37, 268435456);
    goto corral_source_split_3778;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_3777;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3776;

  $bb7:
    assume !(out_$i14 == 1);
    goto corral_source_split_3775;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i35, out_$i44, out_$p45, out_$i46, out_$i47, out_$p8, out_$i9, out_$i10, out_$i48, out_$i49 := be_process_mcc_loop_$bb4(in_$p0, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i35, out_$i44, out_$p45, out_$i46, out_$i47, out_$p8, out_$i9, out_$i10, out_$i48, out_$i49);
    return;

  exit:
    return;
}



procedure be_process_mcc_loop_$bb4(in_$p0: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i8, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i8, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i8, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$p42: ref, in_$i43: i32, in_$i35: i32, in_$i44: i32, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i48: i32, in_$i49: i32) returns (out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i8, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i8, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i8, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$p42: ref, out_$i43: i32, out_$i35: i32, out_$i44: i32, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i48: i32, out_$i49: i32);
  modifies $M.0, $M.21, $CurrAddr;



implementation be_parse_stats_loop_$bb16(in_$p0: ref, in_$p2: ref, in_$p31: ref, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i64, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i34: i32, in_$p35: ref) returns (out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i64, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i34: i32, out_$p35: ref)
{

  entry:
    out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i34, out_$p35 := in_$p37, in_$i38, in_$i39, in_$i40, in_$p42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i34, in_$p35;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4206;

  $bb18:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i34, out_$p35 := out_$i44, out_$p45;
    goto $bb18_dummy;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    out_$i47 := $ult.i32(out_$i44, out_$i46);
    goto corral_source_split_4218;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, in_$p31);
    goto corral_source_split_4217;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p35, $mul.ref(1, 24760));
    goto corral_source_split_4216;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i34, 1);
    call {:si_unique_call 561} {:cexpr "i"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_4215;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} populate_erx_stats(in_$p0, out_$p35, out_$i43);
    goto corral_source_split_4214;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    call {:si_unique_call 559} {:cexpr "erx_stat"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_4213;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(out_$i40, 4));
    goto corral_source_split_4212;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i39);
    goto corral_source_split_4211;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i38);
    goto corral_source_split_4210;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i16($M.0, out_$p37);
    goto corral_source_split_4209;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p35, $mul.ref(0, 24760)), $mul.ref(8, 1)), $mul.ref(28, 1));
    goto corral_source_split_4208;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i34, out_$p35 := be_parse_stats_loop_$bb16(in_$p0, in_$p2, in_$p31, out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i34, out_$p35);
    return;

  exit:
    return;
}



procedure be_parse_stats_loop_$bb16(in_$p0: ref, in_$p2: ref, in_$p31: ref, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i64, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i34: i32, in_$p35: ref) returns (out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i64, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i34: i32, out_$p35: ref);
  modifies $M.0;



implementation be_mbox_db_ready_wait_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i32, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i1, in_$i11: i1, in_$i17: i32, in_$i18: i1, in_$i19: i8, in_$i20: i1) returns (out_$i5: i32, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i1, out_$i11: i1, out_$i17: i32, out_$i18: i1, out_$i19: i8, out_$i20: i1)
{

  entry:
    out_$i5, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i17, out_$i18, out_$i19, out_$i20 := in_$i5, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i17, in_$i18, in_$i19, in_$i20;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb18:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := out_$i17;
    goto $bb18_dummy;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i8.i1(out_$i19);
    goto corral_source_split_5322;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i1.i8(out_$i18);
    call {:si_unique_call 726} {:cexpr "tmp"} boogie_si_record_i8(out_$i19);
    goto corral_source_split_5321;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} out_$i18 := be_error(in_$p0);
    goto corral_source_split_5320;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i5, 1);
    call {:si_unique_call 724} {:cexpr "msecs"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_5319;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} msleep(1);
    goto corral_source_split_5318;

  $bb16:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i11 := $sgt.i32(out_$i5, 4000);
    goto corral_source_split_5307;

  $bb12:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_5303;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i9 := $and.i32(out_$i7, 1);
    call {:si_unique_call 720} {:cexpr "ready"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_5302;

  $bb9:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i7, $sub.i32(0, 1));
    goto corral_source_split_5298;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} out_$i7 := ioread32(in_$p1);
    call {:si_unique_call 719} {:cexpr "ready"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_5297;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i5, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i17, out_$i18, out_$i19, out_$i20 := be_mbox_db_ready_wait_loop_$bb4(in_$p0, in_$p1, out_$i5, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i17, out_$i18, out_$i19, out_$i20);
    return;

  exit:
    return;
}



procedure be_mbox_db_ready_wait_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i32, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i1, in_$i11: i1, in_$i17: i32, in_$i18: i1, in_$i19: i8, in_$i20: i1) returns (out_$i5: i32, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i1, out_$i11: i1, out_$i17: i32, out_$i18: i1, out_$i19: i8, out_$i20: i1);



implementation be_detect_error_loop_$bb39(in_$p0: ref, in_$p2: ref, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i64, in_$p109: ref, in_$p110: ref, in_$i112: i32, in_$i113: i32, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i101: i32, in_vslice_dummy_var_343: i32) returns (out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i64, out_$p109: ref, out_$p110: ref, out_$i112: i32, out_$i113: i32, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i101: i32, out_vslice_dummy_var_343: i32)
{

  entry:
    out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$p110, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i101, out_vslice_dummy_var_343 := in_$i102, in_$i103, in_$i104, in_$p105, in_$p106, in_$p107, in_$i108, in_$p109, in_$p110, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i101, in_vslice_dummy_var_343;
    goto $bb39, exit;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_5460;

  $bb44:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$i101 := out_$i114;
    goto $bb44_dummy;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i32(out_$i115, 0);
    goto corral_source_split_5480;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.26, in_$p2);
    goto corral_source_split_5479;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    out_$i114 := $add.i32(out_$i101, 1);
    call {:si_unique_call 750} {:cexpr "i"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_5478;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, in_$p2, out_$i113);
    goto corral_source_split_5477;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    out_$i113 := $lshr.i32(out_$i112, 1);
    goto corral_source_split_5476;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.26, in_$p2);
    goto corral_source_split_5475;

  $bb42:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} out_vslice_dummy_var_343 := dev_err.ref.ref.ref(out_$p107, .str.5, out_$p110);
    goto corral_source_split_5473;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.28, out_$p109);
    goto corral_source_split_5472;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(ue_status_hi_desc, $mul.ref(0, 256)), $mul.ref(out_$i108, 8));
    goto corral_source_split_5471;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i32.i64(out_$i101);
    goto corral_source_split_5470;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p106, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5469;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.0, out_$p105);
    goto corral_source_split_5468;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5467;

  $bb41:
    assume out_$i104 == 1;
    goto corral_source_split_5466;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i32(out_$i103, 0);
    goto corral_source_split_5464;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    out_$i103 := $and.i32(out_$i102, 1);
    goto corral_source_split_5463;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.26, in_$p2);
    goto corral_source_split_5462;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb44_dummy:
    call {:si_unique_call 1} out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$p110, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i101, out_vslice_dummy_var_343 := be_detect_error_loop_$bb39(in_$p0, in_$p2, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$p107, out_$i108, out_$p109, out_$p110, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i101, out_vslice_dummy_var_343);
    return;

  exit:
    return;
}



procedure be_detect_error_loop_$bb39(in_$p0: ref, in_$p2: ref, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i64, in_$p109: ref, in_$p110: ref, in_$i112: i32, in_$i113: i32, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i101: i32, in_vslice_dummy_var_343: i32) returns (out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i64, out_$p109: ref, out_$p110: ref, out_$i112: i32, out_$i113: i32, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i101: i32, out_vslice_dummy_var_343: i32);
  modifies $M.26;



implementation be_detect_error_loop_$bb25(in_$p0: ref, in_$p1: ref, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$p89: ref, in_$p90: ref, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i81: i32, in_vslice_dummy_var_342: i32) returns (out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$p89: ref, out_$p90: ref, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i81: i32, out_vslice_dummy_var_342: i32)
{

  entry:
    out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$p90, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i81, out_vslice_dummy_var_342 := in_$i82, in_$i83, in_$i84, in_$p85, in_$p86, in_$p87, in_$i88, in_$p89, in_$p90, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i81, in_vslice_dummy_var_342;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5427;

  $bb30:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i81 := out_$i94;
    goto $bb30_dummy;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i32(out_$i95, 0);
    goto corral_source_split_5447;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i32($M.26, in_$p1);
    goto corral_source_split_5446;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i81, 1);
    call {:si_unique_call 748} {:cexpr "i"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_5445;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, in_$p1, out_$i93);
    goto corral_source_split_5444;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    out_$i93 := $lshr.i32(out_$i92, 1);
    goto corral_source_split_5443;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.26, in_$p1);
    goto corral_source_split_5442;

  $bb28:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} out_vslice_dummy_var_342 := dev_err.ref.ref.ref(out_$p87, .str.5, out_$p90);
    goto corral_source_split_5440;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.27, out_$p89);
    goto corral_source_split_5439;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(ue_status_low_desc, $mul.ref(0, 256)), $mul.ref(out_$i88, 8));
    goto corral_source_split_5438;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i32.i64(out_$i81);
    goto corral_source_split_5437;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p86, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5436;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.0, out_$p85);
    goto corral_source_split_5435;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(0, 1));
    goto corral_source_split_5434;

  $bb27:
    assume out_$i84 == 1;
    goto corral_source_split_5433;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i32(out_$i83, 0);
    goto corral_source_split_5431;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    out_$i83 := $and.i32(out_$i82, 1);
    goto corral_source_split_5430;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.26, in_$p1);
    goto corral_source_split_5429;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$p90, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i81, out_vslice_dummy_var_342 := be_detect_error_loop_$bb25(in_$p0, in_$p1, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$p90, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i81, out_vslice_dummy_var_342);
    return;

  exit:
    return;
}



procedure be_detect_error_loop_$bb25(in_$p0: ref, in_$p1: ref, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$p89: ref, in_$p90: ref, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i81: i32, in_vslice_dummy_var_342: i32) returns (out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$p89: ref, out_$p90: ref, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i81: i32, out_vslice_dummy_var_342: i32);
  modifies $M.26;



implementation be_set_rss_hash_opts_loop_$bb84(in_$p2: ref, in_$p128: ref, in_$i135: i32, in_$i136: i1, in_$p138: ref, in_$i139: i8, in_$i140: i32, in_$i141: i64, in_$p142: ref, in_$i143: i32, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$i147: i1, in_$p133: ref, in_$i134: i32, in_$i123: i32) returns (out_$i135: i32, out_$i136: i1, out_$p138: ref, out_$i139: i8, out_$i140: i32, out_$i141: i64, out_$p142: ref, out_$i143: i32, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$i147: i1, out_$p133: ref, out_$i134: i32)
{

  entry:
    out_$i135, out_$i136, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$p133, out_$i134 := in_$i135, in_$i136, in_$p138, in_$i139, in_$i140, in_$i141, in_$p142, in_$i143, in_$p144, in_$i145, in_$i146, in_$i147, in_$p133, in_$i134;
    goto $bb84, exit;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6359;

  $bb90:
    assume out_$i147 == 1;
    assume {:verifier.code 0} true;
    out_$p133, out_$i134 := out_$p144, out_$i143;
    goto $bb90_dummy;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    out_$i147 := $ult.i32(out_$i143, out_$i146);
    goto corral_source_split_6383;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    out_$i146 := $sub.i32(out_$i145, 1);
    goto corral_source_split_6382;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i32($M.0, in_$p128);
    goto corral_source_split_6381;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref(out_$p133, $mul.ref(1, 24760));
    goto corral_source_split_6380;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    out_$i143 := $add.i32(out_$i134, 1);
    call {:si_unique_call 884} {:cexpr "i"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_6379;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p142, out_$i139);
    goto corral_source_split_6378;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p2, $mul.ref(0, 128)), $mul.ref(out_$i141, 1));
    goto corral_source_split_6377;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    out_$i141 := $sext.i32.i64(out_$i140);
    goto corral_source_split_6376;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    out_$i140 := $add.i32(in_$i123, out_$i134);
    goto corral_source_split_6375;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i8($M.0, out_$p138);
    goto corral_source_split_6374;

  $bb89:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(out_$p133, $mul.ref(0, 24760)), $mul.ref(24752, 1));
    goto corral_source_split_6373;

  $bb87:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    out_$i136 := $sgt.i32(out_$i135, 127);
    goto corral_source_split_6362;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i135 := $add.i32(in_$i123, out_$i134);
    goto corral_source_split_6361;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb90_dummy:
    call {:si_unique_call 1} out_$i135, out_$i136, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$p133, out_$i134 := be_set_rss_hash_opts_loop_$bb84(in_$p2, in_$p128, out_$i135, out_$i136, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$p133, out_$i134, in_$i123);
    return;

  exit:
    return;
}



procedure be_set_rss_hash_opts_loop_$bb84(in_$p2: ref, in_$p128: ref, in_$i135: i32, in_$i136: i1, in_$p138: ref, in_$i139: i8, in_$i140: i32, in_$i141: i64, in_$p142: ref, in_$i143: i32, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$i147: i1, in_$p133: ref, in_$i134: i32, in_$i123: i32) returns (out_$i135: i32, out_$i136: i1, out_$p138: ref, out_$i139: i8, out_$i140: i32, out_$i141: i64, out_$p142: ref, out_$i143: i32, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$i147: i1, out_$p133: ref, out_$i134: i32);
  modifies $M.0;



implementation be_set_rss_hash_opts_loop_$bb79(in_$p0: ref, in_$p2: ref, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$p127: ref, in_$p128: ref, in_$i129: i32, in_$i130: i32, in_$i131: i1, in_$i135: i32, in_$i136: i1, in_$p138: ref, in_$i139: i8, in_$i140: i32, in_$i141: i64, in_$p142: ref, in_$i143: i32, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$i147: i1, in_$p133: ref, in_$i134: i32, in_$i132: i32, in_$i137: i32, in_$p148: ref, in_$i149: i32, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i123: i32) returns (out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$p127: ref, out_$p128: ref, out_$i129: i32, out_$i130: i32, out_$i131: i1, out_$i135: i32, out_$i136: i1, out_$p138: ref, out_$i139: i8, out_$i140: i32, out_$i141: i64, out_$p142: ref, out_$i143: i32, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$i147: i1, out_$p133: ref, out_$i134: i32, out_$i132: i32, out_$i137: i32, out_$p148: ref, out_$i149: i32, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i123: i32)
{

  entry:
    out_$p124, out_$p125, out_$i126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i135, out_$i136, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$p133, out_$i134, out_$i132, out_$i137, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i123 := in_$p124, in_$p125, in_$i126, in_$p127, in_$p128, in_$i129, in_$i130, in_$i131, in_$i135, in_$i136, in_$p138, in_$i139, in_$i140, in_$i141, in_$p142, in_$i143, in_$p144, in_$i145, in_$i146, in_$i147, in_$p133, in_$i134, in_$i132, in_$i137, in_$p148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i123;
    goto $bb79, exit;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_6346;

  $bb93:
    assume out_$i152 == 1;
    assume {:verifier.code 0} true;
    out_$i123 := out_$i151;
    goto $bb93_dummy;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    out_$i152 := $sle.i32(out_$i151, 127);
    goto corral_source_split_6371;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    out_$i151 := $sub.i32(out_$i150, 1);
    call {:si_unique_call 883} {:cexpr "j"} boogie_si_record_i32(out_$i151);
    goto corral_source_split_6370;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    out_$i150 := $add.i32(out_$i149, out_$i137);
    goto corral_source_split_6369;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i32($M.0, out_$p148);
    goto corral_source_split_6368;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_6367;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_6366;

  $bb92:
    assume {:verifier.code 0} true;
    out_$i137 := out_$i132;
    goto $bb88;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    out_$i137 := out_$i123;
    goto $bb88;

  $bb86:
    assume out_$i136 == 1;
    goto corral_source_split_6364;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    out_$i136 := $sgt.i32(out_$i135, 127);
    goto corral_source_split_6362;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i135 := $add.i32(out_$i123, out_$i134);
    goto corral_source_split_6361;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb84:
    call out_$i135, out_$i136, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$p133, out_$i134 := be_set_rss_hash_opts_loop_$bb84(in_$p2, out_$p128, out_$i135, out_$i136, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$p133, out_$i134, out_$i123);
    goto $bb84_last;

  $bb84_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6359;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    out_$p133, out_$i134 := out_$p127, 0;
    goto $bb84;

  $bb90:
    assume out_$i147 == 1;
    assume {:verifier.code 0} true;
    out_$p133, out_$i134 := out_$p144, out_$i143;
    assume false;
    return;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    out_$i147 := $ult.i32(out_$i143, out_$i146);
    goto corral_source_split_6383;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    out_$i146 := $sub.i32(out_$i145, 1);
    goto corral_source_split_6382;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i32($M.0, out_$p128);
    goto corral_source_split_6381;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref(out_$p133, $mul.ref(1, 24760));
    goto corral_source_split_6380;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    out_$i143 := $add.i32(out_$i134, 1);
    call {:si_unique_call 884} {:cexpr "i"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_6379;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p142, out_$i139);
    goto corral_source_split_6378;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p2, $mul.ref(0, 128)), $mul.ref(out_$i141, 1));
    goto corral_source_split_6377;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    out_$i141 := $sext.i32.i64(out_$i140);
    goto corral_source_split_6376;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    out_$i140 := $add.i32(out_$i123, out_$i134);
    goto corral_source_split_6375;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i8($M.0, out_$p138);
    goto corral_source_split_6374;

  $bb89:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(out_$p133, $mul.ref(0, 24760)), $mul.ref(24752, 1));
    goto corral_source_split_6373;

  $bb87:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb81:
    assume out_$i131 == 1;
    goto corral_source_split_6357;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    out_$i132 := out_$i123;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    out_$i131 := $ult.i32(0, out_$i130);
    goto corral_source_split_6355;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    out_$i130 := $sub.i32(out_$i129, 1);
    goto corral_source_split_6354;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i32($M.0, out_$p128);
    goto corral_source_split_6353;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(136360, 1));
    goto corral_source_split_6352;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref(out_$p125, $mul.ref(out_$i126, 24760));
    goto corral_source_split_6351;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    out_$i126 := $sext.i32.i64(0);
    goto corral_source_split_6350;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    out_$p125 := $bitcast.ref.ref(out_$p124);
    goto corral_source_split_6349;

  $bb80:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p0, $mul.ref(0, 364320)), $mul.ref(136368, 1));
    goto corral_source_split_6348;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb83:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb82:
    assume {:verifier.code 0} true;
    assume !(out_$i131 == 1);
    goto $bb83;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    out_$i132 := out_$i123;
    goto $bb83;

  $bb91:
    assume !(out_$i147 == 1);
    goto corral_source_split_6385;

  $bb93_dummy:
    call {:si_unique_call 1} out_$p124, out_$p125, out_$i126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i135, out_$i136, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$p133, out_$i134, out_$i132, out_$i137, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i123 := be_set_rss_hash_opts_loop_$bb79(in_$p0, in_$p2, out_$p124, out_$p125, out_$i126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i135, out_$i136, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$p133, out_$i134, out_$i132, out_$i137, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i123);
    return;

  exit:
    return;
}



procedure be_set_rss_hash_opts_loop_$bb79(in_$p0: ref, in_$p2: ref, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$p127: ref, in_$p128: ref, in_$i129: i32, in_$i130: i32, in_$i131: i1, in_$i135: i32, in_$i136: i1, in_$p138: ref, in_$i139: i8, in_$i140: i32, in_$i141: i64, in_$p142: ref, in_$i143: i32, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$i147: i1, in_$p133: ref, in_$i134: i32, in_$i132: i32, in_$i137: i32, in_$p148: ref, in_$i149: i32, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i123: i32) returns (out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$p127: ref, out_$p128: ref, out_$i129: i32, out_$i130: i32, out_$i131: i1, out_$i135: i32, out_$i136: i1, out_$p138: ref, out_$i139: i8, out_$i140: i32, out_$i141: i64, out_$p142: ref, out_$i143: i32, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$i147: i1, out_$p133: ref, out_$i134: i32, out_$i132: i32, out_$i137: i32, out_$p148: ref, out_$i149: i32, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i123: i32);
  modifies $M.0;



implementation be_test_ddr_dma_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i21: i64, in_$p22: ref, in_$i23: i64, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i28: i32, in_$i29: i1, in_$i20: i32, in_$i30: i32) returns (out_$i21: i64, out_$p22: ref, out_$i23: i64, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i28: i32, out_$i29: i1, out_$i20: i32, out_$i30: i32)
{

  entry:
    out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i28, out_$i29, out_$i20, out_$i30 := in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i28, in_$i29, in_$i20, in_$i30;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6585;

  $bb11:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i28;
    goto $bb11_dummy;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i24;
    assume true;
    goto $bb11;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    out_$i29 := $sle.i32(out_$i28, 1);
    goto corral_source_split_6609;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i20, 1);
    call {:si_unique_call 927} {:cexpr "i"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_6608;

  $bb8:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i24;
    assume true;
    goto $bb8;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_6591;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} out_$i24 := be_cmd_ddr_dma_test(in_$p0, out_$i23, 4096, in_$p1);
    call {:si_unique_call 925} {:cexpr "ret"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_6590;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i64($M.56, out_$p22);
    goto corral_source_split_6589;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(out_$i21, 8));
    goto corral_source_split_6588;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_6587;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i28, out_$i29, out_$i20, out_$i30 := be_test_ddr_dma_loop_$bb5(in_$p0, in_$p1, in_$p2, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i28, out_$i29, out_$i20, out_$i30);
    return;

  exit:
    return;
}



procedure be_test_ddr_dma_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i21: i64, in_$p22: ref, in_$i23: i64, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i28: i32, in_$i29: i1, in_$i20: i32, in_$i30: i32) returns (out_$i21: i64, out_$p22: ref, out_$i23: i64, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i28: i32, out_$i29: i1, out_$i20: i32, out_$i30: i32);
  modifies $M.0, $M.21, $CurrAddr;



implementation be_cmd_ddr_dma_test_loop_$bb8(in_$i1: i64, in_$i2: i32, in_$p11: ref, in_$i20: i32, in_$i21: i64, in_$i22: i64, in_$i23: i8, in_$i24: i64, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i18: i32, in_$i19: i32) returns (out_$i20: i32, out_$i21: i64, out_$i22: i64, out_$i23: i8, out_$i24: i64, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i18: i32, out_$i19: i32)
{

  entry:
    out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i18, out_$i19 := in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i18, in_$i19;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6639;

  $bb13:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i18, out_$i19 := out_$i29, out_$i30;
    goto $bb13_dummy;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    out_$i31 := $ult.i32(out_$i30, in_$i2);
    goto corral_source_split_6655;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i19, 1);
    call {:si_unique_call 935} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_6654;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6653;

  $bb11:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := out_$i27;
    goto $bb12;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    out_$i29 := 0;
    goto $bb12;

  $bb10:
    assume out_$i28 == 1;
    goto corral_source_split_6651;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    out_$i28 := $sgt.i32(out_$i27, 7);
    goto corral_source_split_6649;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i18, 1);
    call {:si_unique_call 934} {:cexpr "j"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_6648;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p26, out_$i23);
    goto corral_source_split_6647;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(in_$p11, $mul.ref(0, 8224)), $mul.ref(32, 1)), $mul.ref(out_$i24, 1));
    goto corral_source_split_6646;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i19);
    goto corral_source_split_6645;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    out_$i23 := $trunc.i64.i8(out_$i22);
    goto corral_source_split_6644;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    out_$i22 := $lshr.i64(in_$i1, out_$i21);
    goto corral_source_split_6643;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i32.i64(out_$i20);
    goto corral_source_split_6642;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i20 := $mul.i32(out_$i18, 8);
    goto corral_source_split_6641;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i18, out_$i19 := be_cmd_ddr_dma_test_loop_$bb8(in_$i1, in_$i2, in_$p11, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i18, out_$i19);
    return;

  exit:
    return;
}



procedure be_cmd_ddr_dma_test_loop_$bb8(in_$i1: i64, in_$i2: i32, in_$p11: ref, in_$i20: i32, in_$i21: i64, in_$i22: i64, in_$i23: i8, in_$i24: i64, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i18: i32, in_$i19: i32) returns (out_$i20: i32, out_$i21: i64, out_$i22: i64, out_$i23: i8, out_$i24: i64, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i18: i32, out_$i19: i32);
  modifies $M.0;



implementation lancer_cmd_read_file_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i64, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i48: i1, in_$i28: i32, in_$i29: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i49: i32, in_cmdloc_dummy_var_260: [ref]i8, in_cmdloc_dummy_var_261: [ref]i8, in_cmdloc_dummy_var_262: [ref]i8) returns (out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i64, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i48: i1, out_$i28: i32, out_$i29: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i49: i32, out_cmdloc_dummy_var_260: [ref]i8, out_cmdloc_dummy_var_261: [ref]i8, out_cmdloc_dummy_var_262: [ref]i8)
{

  entry:
    out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i28, out_$i29, out_$i50, out_$i51, out_$i52, out_$i49, out_cmdloc_dummy_var_260, out_cmdloc_dummy_var_261, out_cmdloc_dummy_var_262 := in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i48, in_$i28, in_$i29, in_$i50, in_$i51, in_$i52, in_$i49, in_cmdloc_dummy_var_260, in_cmdloc_dummy_var_261, in_cmdloc_dummy_var_262;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6783;

  $bb17:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i35, out_$i44;
    goto $bb17_dummy;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i35;
    assume true;
    goto $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i48 := $ult.i32(out_$i44, in_$i2);
    goto corral_source_split_6816;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $M.61 := $store.i32($M.61, in_$p6, out_$i46);
    goto corral_source_split_6812;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    out_$i46 := $and.i32(out_$i45, $sub.i32(0, 2147483648));
    goto corral_source_split_6811;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.61, in_$p6);
    goto corral_source_split_6810;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i29, out_$i43);
    call {:si_unique_call 977} {:cexpr "total_read_len"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_6809;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.60, in_$p5);
    goto corral_source_split_6808;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_260 := $M.0;
    out_cmdloc_dummy_var_261 := $M.0;
    call {:si_unique_call 976} out_cmdloc_dummy_var_262 := $memcpy.i8(out_cmdloc_dummy_var_260, out_cmdloc_dummy_var_261, out_$p40, out_$p42, out_$i38, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_262;
    goto corral_source_split_6807;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.41, out_$p41);
    goto corral_source_split_6806;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(in_$p3, $mul.ref(out_$i39, 1));
    goto corral_source_split_6804;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i32.i64(out_$i29);
    goto corral_source_split_6803;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i32.i64(out_$i37);
    call {:si_unique_call 975} {:cexpr "__len"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_6802;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.60, in_$p5);
    goto corral_source_split_6801;

  $bb13:
    assume out_$i36 == 1;
    goto corral_source_split_6800;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 0);
    goto corral_source_split_6798;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} out_$i35 := lancer_cmd_read_object(in_$p0, in_$p4, out_$i34, out_$i29, in_$p1, in_$p5, in_$p6, in_$p7);
    call {:si_unique_call 974} {:cexpr "status"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_6797;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    out_$i34 := $and.i32(out_$i33, $sub.i32(0, 4));
    call {:si_unique_call 972} {:cexpr "chunk_size"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_6796;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i32, 3);
    goto corral_source_split_6795;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6794;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    out_$i32 := 32768;
    goto $bb12;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i30;
    goto $bb12;

  $bb10:
    assume out_$i31 == 1;
    goto corral_source_split_6790;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    out_$i31 := $ult.i32(out_$i30, 32768);
    goto corral_source_split_6788;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i30 := $sub.i32(in_$i2, out_$i29);
    call {:si_unique_call 971} {:cexpr "__min1"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_6787;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19:
    assume out_$i51 == 1;
    goto corral_source_split_6832;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i28;
    assume true;
    goto $bb19;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 0);
    goto corral_source_split_6785;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.61, in_$p6);
    goto corral_source_split_6784;

  $bb11:
    assume !(out_$i31 == 1);
    goto corral_source_split_6792;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i28, out_$i29, out_$i50, out_$i51, out_$i52, out_$i49, out_cmdloc_dummy_var_260, out_cmdloc_dummy_var_261, out_cmdloc_dummy_var_262 := lancer_cmd_read_file_loop_$bb8(in_$p0, in_$p1, in_$i2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i28, out_$i29, out_$i50, out_$i51, out_$i52, out_$i49, out_cmdloc_dummy_var_260, out_cmdloc_dummy_var_261, out_cmdloc_dummy_var_262);
    return;

  exit:
    return;
}



procedure lancer_cmd_read_file_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i64, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i48: i1, in_$i28: i32, in_$i29: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i49: i32, in_cmdloc_dummy_var_260: [ref]i8, in_cmdloc_dummy_var_261: [ref]i8, in_cmdloc_dummy_var_262: [ref]i8) returns (out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i64, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i48: i1, out_$i28: i32, out_$i29: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i49: i32, out_cmdloc_dummy_var_260: [ref]i8, out_cmdloc_dummy_var_261: [ref]i8, out_cmdloc_dummy_var_262: [ref]i8);
  modifies $M.61, $M.0, $M.21, $M.60, $M.62, $CurrAddr;



implementation be_set_fw_log_level_loop_$bb15(in_$i1: i32, in_$p25: ref, in_$i35: i32, in_$i38: i64, in_$i39: i64, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i48: i64, in_$i49: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i37: i32, in_$i30: i32) returns (out_$i38: i64, out_$i39: i64, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i48: i64, out_$i49: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i37: i32)
{

  entry:
    out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p54, out_$i55, out_$i56, out_$i37 := in_$i38, in_$i39, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p54, in_$i55, in_$i56, in_$i37;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_6978;

  $bb20:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := out_$i55;
    goto $bb20_dummy;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    out_$i56 := $ult.i32(out_$i55, in_$i35);
    goto corral_source_split_6994;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i37, 1);
    call {:si_unique_call 1013} {:cexpr "j"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_6993;

  $bb18:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p54, in_$i1);
    goto corral_source_split_6991;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p25, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref(out_$i49, 104)), $mul.ref(40, 1)), $mul.ref(out_$i48, 16)), $mul.ref(4, 1));
    goto corral_source_split_6990;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(in_$i30);
    goto corral_source_split_6989;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i37);
    goto corral_source_split_6988;

  $bb17:
    assume out_$i47 == 1;
    goto corral_source_split_6987;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 0);
    goto corral_source_split_6985;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i45);
    goto corral_source_split_6984;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.0, out_$p44);
    goto corral_source_split_6983;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p25, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref(out_$i39, 104)), $mul.ref(40, 1)), $mul.ref(out_$i38, 16)), $mul.ref(0, 1));
    goto corral_source_split_6982;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(in_$i30);
    goto corral_source_split_6981;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i37);
    goto corral_source_split_6980;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p54, out_$i55, out_$i56, out_$i37 := be_set_fw_log_level_loop_$bb15(in_$i1, in_$p25, in_$i35, out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p54, out_$i55, out_$i56, out_$i37, in_$i30);
    return;

  exit:
    return;
}



procedure be_set_fw_log_level_loop_$bb15(in_$i1: i32, in_$p25: ref, in_$i35: i32, in_$i38: i64, in_$i39: i64, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i48: i64, in_$i49: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i37: i32, in_$i30: i32) returns (out_$i38: i64, out_$i39: i64, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i48: i64, out_$i49: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i37: i32);
  modifies $M.0;



implementation be_set_fw_log_level_loop_$bb10(in_$i1: i32, in_$p25: ref, in_$p27: ref, in_$i31: i64, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i38: i64, in_$i39: i64, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i48: i64, in_$i49: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i37: i32, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i30: i32) returns (out_$i31: i64, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i38: i64, out_$i39: i64, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i48: i64, out_$i49: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i37: i32, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i30: i32)
{

  entry:
    out_$i31, out_$p34, out_$i35, out_$i36, out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p54, out_$i55, out_$i56, out_$i37, out_$i57, out_$i58, out_$i59, out_$i30 := in_$i31, in_$p34, in_$i35, in_$i36, in_$i38, in_$i39, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p54, in_$i55, in_$i56, in_$i37, in_$i57, in_$i58, in_$i59, in_$i30;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6969;

  $bb23:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i57;
    goto $bb23_dummy;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    out_$i59 := $ult.i32(out_$i57, out_$i58);
    goto corral_source_split_7000;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, in_$p27);
    goto corral_source_split_6999;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i30, 1);
    call {:si_unique_call 1014} {:cexpr "i"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_6998;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb14;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb21:
    assume !(out_$i56 == 1);
    goto corral_source_split_6996;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    out_$i56 := $ult.i32(out_$i55, out_$i35);
    goto corral_source_split_6994;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i37, 1);
    call {:si_unique_call 1013} {:cexpr "j"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_6993;

  $bb18:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p54, in_$i1);
    goto corral_source_split_6991;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p25, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref(out_$i49, 104)), $mul.ref(40, 1)), $mul.ref(out_$i48, 16)), $mul.ref(4, 1));
    goto corral_source_split_6990;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i30);
    goto corral_source_split_6989;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i37);
    goto corral_source_split_6988;

  $bb17:
    assume out_$i47 == 1;
    goto corral_source_split_6987;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 0);
    goto corral_source_split_6985;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i45);
    goto corral_source_split_6984;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.0, out_$p44);
    goto corral_source_split_6983;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p25, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref(out_$i39, 104)), $mul.ref(40, 1)), $mul.ref(out_$i38, 16)), $mul.ref(0, 1));
    goto corral_source_split_6982;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i30);
    goto corral_source_split_6981;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i37);
    goto corral_source_split_6980;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb15:
    call out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p54, out_$i55, out_$i56, out_$i37 := be_set_fw_log_level_loop_$bb15(in_$i1, in_$p25, out_$i35, out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p54, out_$i55, out_$i56, out_$i37, out_$i30);
    goto $bb15_last;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6978;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    out_$i37 := 0;
    goto $bb15;

  $bb20:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := out_$i55;
    assume false;
    return;

  $bb12:
    assume out_$i36 == 1;
    goto corral_source_split_6976;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    out_$i36 := $ult.i32(0, out_$i35);
    goto corral_source_split_6974;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    call {:si_unique_call 1012} {:cexpr "num_modes"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_6973;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref($add.ref(in_$p25, $mul.ref(16, 2832)), $mul.ref(24, 1)), $mul.ref(out_$i31, 104)), $mul.ref(36, 1));
    goto corral_source_split_6972;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    goto corral_source_split_6971;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i31, out_$p34, out_$i35, out_$i36, out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p54, out_$i55, out_$i56, out_$i37, out_$i57, out_$i58, out_$i59, out_$i30 := be_set_fw_log_level_loop_$bb10(in_$i1, in_$p25, in_$p27, out_$i31, out_$p34, out_$i35, out_$i36, out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p54, out_$i55, out_$i56, out_$i37, out_$i57, out_$i58, out_$i59, out_$i30);
    return;

  exit:
    return;
}



procedure be_set_fw_log_level_loop_$bb10(in_$i1: i32, in_$p25: ref, in_$p27: ref, in_$i31: i64, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i38: i64, in_$i39: i64, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i48: i64, in_$i49: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i37: i32, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i30: i32) returns (out_$i31: i64, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i38: i64, out_$i39: i64, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i48: i64, out_$i49: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i37: i32, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i30: i32);
  modifies $M.0;



implementation be_cmd_get_regs_loop_$bb11(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$i49: i64, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_cmdloc_dummy_var_273: [ref]i8, in_cmdloc_dummy_var_274: [ref]i8, in_cmdloc_dummy_var_275: [ref]i8) returns (out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$i49: i64, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_cmdloc_dummy_var_273: [ref]i8, out_cmdloc_dummy_var_274: [ref]i8, out_cmdloc_dummy_var_275: [ref]i8)
{

  entry:
    out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i58, out_$i59, out_$i60, out_$i24, out_$i25, out_$i26, out_cmdloc_dummy_var_273, out_cmdloc_dummy_var_274, out_cmdloc_dummy_var_275 := in_$i27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$p33, in_$p34, in_$p35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$i58, in_$i59, in_$i60, in_$i24, in_$i25, in_$i26, in_cmdloc_dummy_var_273, in_cmdloc_dummy_var_274, in_cmdloc_dummy_var_275;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7093;

  $bb23:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i24, out_$i25, out_$i26 := out_$i59, out_$i29, out_$i58;
    goto $bb23_dummy;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i29, 0);
    goto corral_source_split_7160;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i24, out_$i28);
    call {:si_unique_call 1045} {:cexpr "log_offset"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_7159;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i26, out_$i28);
    call {:si_unique_call 1044} {:cexpr "offset"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_7158;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_273 := $M.0;
    out_cmdloc_dummy_var_274 := $M.0;
    call {:si_unique_call 1042} out_cmdloc_dummy_var_275 := $memcpy.i8(out_cmdloc_dummy_var_273, out_cmdloc_dummy_var_274, out_$p51, out_$p53, out_$i49, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_275;
    goto corral_source_split_7150;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_7149;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p46, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_7148;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(in_$p2, $mul.ref(out_$i50, 1));
    goto corral_source_split_7147;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i32.i64(out_$i26);
    goto corral_source_split_7146;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i32.i64(out_$i48);
    call {:si_unique_call 1041} {:cexpr "__len"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_7145;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_7144;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p46, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_7143;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_7142;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.41, out_$p44);
    goto corral_source_split_7141;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7140;

  $bb20:
    assume out_$i43 == 1;
    goto corral_source_split_7139;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 0);
    goto corral_source_split_7137;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} out_$i42 := be_mcc_notify_wait(in_$p0);
    call {:si_unique_call 1040} {:cexpr "status"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_7136;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p41, out_$i28);
    goto corral_source_split_7135;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p35, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_7134;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p40, out_$i28);
    goto corral_source_split_7133;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p35, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_7132;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p39, out_$i24);
    goto corral_source_split_7131;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p35, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_7130;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p38, 0);
    goto corral_source_split_7129;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p35, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_7128;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} be_wrb_cmd_hdr_prepare(out_$p37, 1, 68, out_$i36, out_$p30, in_$p3);
    goto corral_source_split_7127;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p35, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_7126;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i28, 36);
    call {:si_unique_call 1037} {:cexpr "payload_len"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_7125;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_7124;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.41, out_$p33);
    goto corral_source_split_7123;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7122;

  $bb17:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i64(out_$i31, 0);
    goto corral_source_split_7105;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_7104;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} out_$p30 := wrb_from_mccq(in_$p0);
    goto corral_source_split_7103;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i32(out_$i25, out_$i28);
    call {:si_unique_call 1033} {:cexpr "total_size"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_7102;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7101;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    out_$i28 := 61440;
    goto $bb15;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i25;
    goto $bb15;

  $bb13:
    assume out_$i27 == 1;
    goto corral_source_split_7097;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i27 := $ult.i32(out_$i25, 61440);
    goto corral_source_split_7095;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb14:
    assume !(out_$i27 == 1);
    goto corral_source_split_7099;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i58, out_$i59, out_$i60, out_$i24, out_$i25, out_$i26, out_cmdloc_dummy_var_273, out_cmdloc_dummy_var_274, out_cmdloc_dummy_var_275 := be_cmd_get_regs_loop_$bb11(in_$p0, in_$p2, in_$p3, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i58, out_$i59, out_$i60, out_$i24, out_$i25, out_$i26, out_cmdloc_dummy_var_273, out_cmdloc_dummy_var_274, out_cmdloc_dummy_var_275);
    return;

  exit:
    return;
}



procedure be_cmd_get_regs_loop_$bb11(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$i49: i64, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_cmdloc_dummy_var_273: [ref]i8, in_cmdloc_dummy_var_274: [ref]i8, in_cmdloc_dummy_var_275: [ref]i8) returns (out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$i49: i64, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_cmdloc_dummy_var_273: [ref]i8, out_cmdloc_dummy_var_274: [ref]i8, out_cmdloc_dummy_var_275: [ref]i8);
  modifies $M.0, $M.21, $CurrAddr;



implementation main_loop_$bb4(in_$i2: i32, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i41: i32, in_$i42: i1, in_vslice_dummy_var_353: i32, in_vslice_dummy_var_354: i32, in_vslice_dummy_var_355: i32, in_vslice_dummy_var_356: i32, in_vslice_dummy_var_357: i32, in_vslice_dummy_var_358: i32, in_vslice_dummy_var_359: i32, in_vslice_dummy_var_360: i32, in_vslice_dummy_var_361: i32, in_vslice_dummy_var_362: i32, in_vslice_dummy_var_363: i32, in_vslice_dummy_var_364: i32, in_vslice_dummy_var_365: i32, in_vslice_dummy_var_366: i32) returns (out_$i2: i32, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i41: i32, out_$i42: i1, out_vslice_dummy_var_353: i32, out_vslice_dummy_var_354: i32, out_vslice_dummy_var_355: i32, out_vslice_dummy_var_356: i32, out_vslice_dummy_var_357: i32, out_vslice_dummy_var_358: i32, out_vslice_dummy_var_359: i32, out_vslice_dummy_var_360: i32, out_vslice_dummy_var_361: i32, out_vslice_dummy_var_362: i32, out_vslice_dummy_var_363: i32, out_vslice_dummy_var_364: i32, out_vslice_dummy_var_365: i32, out_vslice_dummy_var_366: i32)
{

  entry:
    out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i41, out_$i42, out_vslice_dummy_var_353, out_vslice_dummy_var_354, out_vslice_dummy_var_355, out_vslice_dummy_var_356, out_vslice_dummy_var_357, out_vslice_dummy_var_358, out_vslice_dummy_var_359, out_vslice_dummy_var_360, out_vslice_dummy_var_361, out_vslice_dummy_var_362, out_vslice_dummy_var_363, out_vslice_dummy_var_364, out_vslice_dummy_var_365, out_vslice_dummy_var_366 := in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i41, in_$i42, in_vslice_dummy_var_353, in_vslice_dummy_var_354, in_vslice_dummy_var_355, in_vslice_dummy_var_356, in_vslice_dummy_var_357, in_vslice_dummy_var_358, in_vslice_dummy_var_359, in_vslice_dummy_var_360, in_vslice_dummy_var_361, in_vslice_dummy_var_362, in_vslice_dummy_var_363, in_vslice_dummy_var_364, in_vslice_dummy_var_365, in_vslice_dummy_var_366;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb58:
    assume {:verifier.code 0} true;
    assume out_$i42 == 1;
    goto $bb58_dummy;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_7495;

  $bb56:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1147} out_$i41 := __VERIFIER_nondet_int();
    call {:si_unique_call 1148} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i41);
    call {:si_unique_call 1149} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_7494;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} out_vslice_dummy_var_366 := be_get_settings($u1, $u2);
    goto corral_source_split_7492;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} ldv_handler_precall();
    goto corral_source_split_7491;

  $bb54:
    assume out_$i26 == 1;
    goto corral_source_split_7490;

  $bb52:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb46:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb34:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb7:
    assume out_$i3 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i2, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i2, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb5:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1098} out_$i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1099} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i2);
    call {:si_unique_call 1100} {:cexpr "tmp"} boogie_si_record_i32(out_$i2);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} be_get_drvinfo($u1, $u3);
    goto corral_source_split_7488;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} ldv_handler_precall();
    goto corral_source_split_7487;

  $bb53:
    assume !(out_$i25 == 1);
    goto corral_source_split_7486;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} be_get_wol($u1, $u4);
    goto corral_source_split_7476;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} ldv_handler_precall();
    goto corral_source_split_7475;

  $bb48:
    assume out_$i23 == 1;
    goto corral_source_split_7474;

  $bb47:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i2, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} out_vslice_dummy_var_364 := be_set_wol($u1, $u4);
    goto corral_source_split_7480;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} ldv_handler_precall();
    goto corral_source_split_7479;

  $bb50:
    assume out_$i24 == 1;
    goto corral_source_split_7478;

  $bb49:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i2, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} out_vslice_dummy_var_365 := be_get_eeprom_len($u1);
    goto corral_source_split_7484;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} ldv_handler_precall();
    goto corral_source_split_7483;

  $bb51:
    assume !(out_$i24 == 1);
    goto corral_source_split_7482;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} out_vslice_dummy_var_361 := be_read_eeprom($u1, $u5, $u6);
    goto corral_source_split_7464;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} ldv_handler_precall();
    goto corral_source_split_7463;

  $bb42:
    assume out_$i20 == 1;
    goto corral_source_split_7462;

  $bb36:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i2, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb35:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i2, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} out_vslice_dummy_var_362 := be_get_coalesce($u1, $u7);
    goto corral_source_split_7468;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} ldv_handler_precall();
    goto corral_source_split_7467;

  $bb44:
    assume out_$i21 == 1;
    goto corral_source_split_7466;

  $bb43:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i2, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} out_vslice_dummy_var_363 := be_set_coalesce($u1, $u7);
    goto corral_source_split_7472;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} ldv_handler_precall();
    goto corral_source_split_7471;

  $bb45:
    assume !(out_$i21 == 1);
    goto corral_source_split_7470;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} be_get_ringparam($u1, $u8);
    goto corral_source_split_7452;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} ldv_handler_precall();
    goto corral_source_split_7451;

  $bb38:
    assume out_$i18 == 1;
    goto corral_source_split_7450;

  $bb37:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i2, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} be_get_pauseparam($u1, $u9);
    goto corral_source_split_7456;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} ldv_handler_precall();
    goto corral_source_split_7455;

  $bb40:
    assume out_$i19 == 1;
    goto corral_source_split_7454;

  $bb39:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i2, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} out_vslice_dummy_var_360 := be_set_pauseparam($u1, $u9);
    goto corral_source_split_7460;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} ldv_handler_precall();
    goto corral_source_split_7459;

  $bb41:
    assume !(out_$i19 == 1);
    goto corral_source_split_7458;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} be_get_stat_strings($u1, $u0, $u6);
    goto corral_source_split_7440;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} ldv_handler_precall();
    goto corral_source_split_7439;

  $bb30:
    assume out_$i14 == 1;
    goto corral_source_split_7438;

  $bb24:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i2, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb9:
    assume out_$i4 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i2, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb8:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    out_$i4 := $slt.i32(out_$i2, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} out_vslice_dummy_var_358 := be_set_phys_id($u1, $u0);
    goto corral_source_split_7444;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} ldv_handler_precall();
    goto corral_source_split_7443;

  $bb32:
    assume out_$i15 == 1;
    goto corral_source_split_7442;

  $bb31:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i2, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} out_vslice_dummy_var_359 := be_get_msg_level($u1);
    goto corral_source_split_7448;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} ldv_handler_precall();
    goto corral_source_split_7447;

  $bb33:
    assume !(out_$i15 == 1);
    goto corral_source_split_7446;

  SeqInstr_63:
    goto corral_source_split_7428;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} be_set_msg_level($u1, $u0);
    goto SeqInstr_62;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} ldv_handler_precall();
    goto corral_source_split_7427;

  $bb26:
    assume out_$i12 == 1;
    goto corral_source_split_7426;

  $bb25:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i2, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} out_vslice_dummy_var_357 := be_get_sset_count($u1, $u0);
    goto corral_source_split_7432;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} ldv_handler_precall();
    goto corral_source_split_7431;

  $bb28:
    assume out_$i13 == 1;
    goto corral_source_split_7430;

  $bb27:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i2, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} be_get_ethtool_stats($u1, $u10, $u11);
    goto corral_source_split_7436;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} ldv_handler_precall();
    goto corral_source_split_7435;

  $bb29:
    assume !(out_$i13 == 1);
    goto corral_source_split_7434;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} out_vslice_dummy_var_355 := be_get_reg_len($u1);
    goto corral_source_split_7416;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} ldv_handler_precall();
    goto corral_source_split_7415;

  $bb20:
    assume out_$i9 == 1;
    goto corral_source_split_7414;

  $bb11:
    assume out_$i5 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i2, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb10:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i2, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} be_get_regs($u1, $u12, $u6);
    goto corral_source_split_7420;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} ldv_handler_precall();
    goto corral_source_split_7419;

  $bb22:
    assume out_$i10 == 1;
    goto corral_source_split_7418;

  $bb21:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i2, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} out_vslice_dummy_var_356 := be_do_flash($u1, $u13);
    goto corral_source_split_7424;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} ldv_handler_precall();
    goto corral_source_split_7423;

  $bb23:
    assume !(out_$i10 == 1);
    goto corral_source_split_7422;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} be_self_test($u1, $u14, $u11);
    goto corral_source_split_7404;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} ldv_handler_precall();
    goto corral_source_split_7403;

  $bb13:
    assume out_$i6 == 1;
    goto corral_source_split_7402;

  $bb12:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i2, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} out_vslice_dummy_var_353 := be_get_rxnfc($u1, $u15, $u16);
    goto corral_source_split_7408;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} ldv_handler_precall();
    goto corral_source_split_7407;

  $bb15:
    assume out_$i7 == 1;
    goto corral_source_split_7406;

  $bb14:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i2, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  SeqInstr_60:
    goto corral_source_split_7412;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} out_vslice_dummy_var_354 := be_set_rxnfc($u1, $u15);
    goto SeqInstr_59;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} ldv_handler_precall();
    goto corral_source_split_7411;

  $bb17:
    assume out_$i8 == 1;
    goto corral_source_split_7410;

  $bb16:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i2, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i8 == 1);
    goto $bb19;

  $bb55:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb19;

  $bb58_dummy:
    call {:si_unique_call 1} out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i41, out_$i42, out_vslice_dummy_var_353, out_vslice_dummy_var_354, out_vslice_dummy_var_355, out_vslice_dummy_var_356, out_vslice_dummy_var_357, out_vslice_dummy_var_358, out_vslice_dummy_var_359, out_vslice_dummy_var_360, out_vslice_dummy_var_361, out_vslice_dummy_var_362, out_vslice_dummy_var_363, out_vslice_dummy_var_364, out_vslice_dummy_var_365, out_vslice_dummy_var_366 := main_loop_$bb4(out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i41, out_$i42, out_vslice_dummy_var_353, out_vslice_dummy_var_354, out_vslice_dummy_var_355, out_vslice_dummy_var_356, out_vslice_dummy_var_357, out_vslice_dummy_var_358, out_vslice_dummy_var_359, out_vslice_dummy_var_360, out_vslice_dummy_var_361, out_vslice_dummy_var_362, out_vslice_dummy_var_363, out_vslice_dummy_var_364, out_vslice_dummy_var_365, out_vslice_dummy_var_366);
    return;

  exit:
    return;
}



procedure main_loop_$bb4(in_$i2: i32, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i41: i32, in_$i42: i1, in_vslice_dummy_var_353: i32, in_vslice_dummy_var_354: i32, in_vslice_dummy_var_355: i32, in_vslice_dummy_var_356: i32, in_vslice_dummy_var_357: i32, in_vslice_dummy_var_358: i32, in_vslice_dummy_var_359: i32, in_vslice_dummy_var_360: i32, in_vslice_dummy_var_361: i32, in_vslice_dummy_var_362: i32, in_vslice_dummy_var_363: i32, in_vslice_dummy_var_364: i32, in_vslice_dummy_var_365: i32, in_vslice_dummy_var_366: i32) returns (out_$i2: i32, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i41: i32, out_$i42: i1, out_vslice_dummy_var_353: i32, out_vslice_dummy_var_354: i32, out_vslice_dummy_var_355: i32, out_vslice_dummy_var_356: i32, out_vslice_dummy_var_357: i32, out_vslice_dummy_var_358: i32, out_vslice_dummy_var_359: i32, out_vslice_dummy_var_360: i32, out_vslice_dummy_var_361: i32, out_vslice_dummy_var_362: i32, out_vslice_dummy_var_363: i32, out_vslice_dummy_var_364: i32, out_vslice_dummy_var_365: i32, out_vslice_dummy_var_366: i32);
  modifies $M.1, $M.0, $M.2, $M.21, $M.41, $CurrAddr, $M.60, $M.61, $M.62, $M.4, $M.25, assertsPassed, $M.26, $M.3, $M.6, $M.7, $M.9, $M.10, $M.14, $M.15, $M.13, $M.17, $M.18, $M.19, $M.20, $M.56, $M.57, $M.58;


