var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]i24;

var $M.6: [ref]i8;

var $M.7: [ref]i8;

var $M.8: i32;

var $M.9: ref;

var $M.10: [ref]ref;

var $M.11: [ref]i8;

var $M.12: [ref]i32;

var $M.13: [ref]ref;

var $M.14: [ref]ref;

var $M.15: [ref]ref;

var $M.16: [ref]ref;

var $M.17: [ref]ref;

var $M.18: [ref]ref;

var $M.19: ref;

var $M.20: i64;

var $M.21: [ref]ref;

var $M.22: i32;

var $M.23: [ref]ref;

var $M.24: i64;

var $M.25: i32;

var $M.26: [ref]ref;

var $M.27: [ref]ref;

var $M.28: [ref]ref;

var $M.34: [ref]ref;

var $M.35: [ref]ref;

var $M.36: [ref]ref;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.41: [ref]i8;

var $M.42: [ref]i8;

var $M.43: [ref]i8;

var $M.51: [ref]i8;

var $M.52: [ref]i8;

var $M.53: [ref]i8;

var $M.54: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 597006);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const i2o_controllers: ref;

axiom i2o_controllers == $sub.ref(0, 1040);

const i2o_exec_driver: ref;

axiom i2o_exec_driver == $sub.ref(0, 2360);

const {:count 9} .str.70: ref;

axiom .str.70 == $sub.ref(0, 3393);

const i2o_exec_class_id: ref;

axiom i2o_exec_class_id == $sub.ref(0, 4421);

const mem_lock: ref;

axiom mem_lock == $sub.ref(0, 5613);

const dev_attr_product_id: ref;

axiom dev_attr_product_id == $sub.ref(0, 6685);

const dev_attr_vendor_id: ref;

axiom dev_attr_vendor_id == $sub.ref(0, 7757);

const i2o_exec_wait_list: ref;

axiom i2o_exec_wait_list == $sub.ref(0, 8797);

const {:count 4} i2o_pci_ids: ref;

axiom i2o_pci_ids == $sub.ref(0, 9949);

const i2o_pci_driver: ref;

axiom i2o_pci_driver == $sub.ref(0, 11285);

const i2o_max_drivers: ref;

axiom i2o_max_drivers == $sub.ref(0, 12313);

const i2o_systab: ref;

axiom i2o_systab == $sub.ref(0, 13361);

const ldv_mutex_mutex: ref;

axiom ldv_mutex_mutex == $sub.ref(0, 14389);

const ldv_mutex_mem_lock: ref;

axiom ldv_mutex_mem_lock == $sub.ref(0, 15417);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 16445);

const ldv_mutex_lct_lock: ref;

axiom ldv_mutex_lct_lock == $sub.ref(0, 17473);

const ldv_mutex_cred_guard_mutex: ref;

axiom ldv_mutex_cred_guard_mutex == $sub.ref(0, 18501);

const __mod_pci_device_table: ref;

axiom __mod_pci_device_table == $sub.ref(0, 19557);

const i2o_drivers: ref;

axiom i2o_drivers == $sub.ref(0, 20589);

const i2o_drivers_lock: ref;

axiom i2o_drivers_lock == $sub.ref(0, 21685);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 22713);

const {:count 3} i2o_device_attrs: ref;

axiom i2o_device_attrs == $sub.ref(0, 23881);

const i2o_bus_type: ref;

axiom i2o_bus_type == $sub.ref(0, 25033);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 4} .str.1: ref;

axiom .str.1 == $sub.ref(0, 26061);

const {:count 9} .str.34: ref;

axiom .str.34 == $sub.ref(0, 27094);

const {:count 4} .str.35: ref;

axiom .str.35 == $sub.ref(0, 28122);

const {:count 8} .str.96: ref;

axiom .str.96 == $sub.ref(0, 29154);

const {:count 8} .str.221: ref;

axiom .str.221 == $sub.ref(0, 30186);

const {:count 26} .str.246: ref;

axiom .str.246 == $sub.ref(0, 31236);

const {:count 169} .str.264: ref;

axiom .str.264 == $sub.ref(0, 32429);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 166} .str.265: ref;

axiom .str.265 == $sub.ref(0, 33619);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 29} .str.72: ref;

axiom .str.72 == $sub.ref(0, 34672);

const {:count 29} .str.73: ref;

axiom .str.73 == $sub.ref(0, 35725);

const {:count 59} .str.74: ref;

axiom .str.74 == $sub.ref(0, 36808);

const {:count 41} .str.76: ref;

axiom .str.76 == $sub.ref(0, 37873);

const {:count 4} .str.69: ref;

axiom .str.69 == $sub.ref(0, 38901);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 22} .str.247: ref;

axiom .str.247 == $sub.ref(0, 39947);

const {:count 30} .str.6: ref;

axiom .str.6 == $sub.ref(0, 41001);

const {:count 42} .str.75: ref;

axiom .str.75 == $sub.ref(0, 42067);

const {:count 7} .str.36: ref;

axiom .str.36 == $sub.ref(0, 43098);

const {:count 5} .str.37: ref;

axiom .str.37 == $sub.ref(0, 44127);

const {:count 43} .str.222: ref;

axiom .str.222 == $sub.ref(0, 45194);

const {:count 47} .str.223: ref;

axiom .str.223 == $sub.ref(0, 46265);

const {:count 33} .str.224: ref;

axiom .str.224 == $sub.ref(0, 47322);

const {:count 36} .str.225: ref;

axiom .str.225 == $sub.ref(0, 48382);

const {:count 39} .str.226: ref;

axiom .str.226 == $sub.ref(0, 49445);

const {:count 28} .str.227: ref;

axiom .str.227 == $sub.ref(0, 50497);

const {:count 43} .str.228: ref;

axiom .str.228 == $sub.ref(0, 51564);

const {:count 38} .str.229: ref;

axiom .str.229 == $sub.ref(0, 52626);

const {:count 29} .str.230: ref;

axiom .str.230 == $sub.ref(0, 53679);

const {:count 23} .str.231: ref;

axiom .str.231 == $sub.ref(0, 54726);

const {:count 52} .str.232: ref;

axiom .str.232 == $sub.ref(0, 55802);

const {:count 53} .str.233: ref;

axiom .str.233 == $sub.ref(0, 56879);

const {:count 35} .str.13: ref;

axiom .str.13 == $sub.ref(0, 57938);

const {:count 39} .str.14: ref;

axiom .str.14 == $sub.ref(0, 59001);

const {:count 64} .str.15: ref;

axiom .str.15 == $sub.ref(0, 60089);

const {:count 40} .str.16: ref;

axiom .str.16 == $sub.ref(0, 61153);

const {:count 27} .str.17: ref;

axiom .str.17 == $sub.ref(0, 62204);

const {:count 9} .str.26: ref;

axiom .str.26 == $sub.ref(0, 63237);

const {:count 21} .str.38: ref;

axiom .str.38 == $sub.ref(0, 64282);

const {:count 290} .str.28: ref;

axiom .str.28 == $sub.ref(0, 65596);

const {:count 39} .str.39: ref;

axiom .str.39 == $sub.ref(0, 66659);

const {:count 37} .str.97: ref;

axiom .str.97 == $sub.ref(0, 67720);

const {:count 8} .str.98: ref;

axiom .str.98 == $sub.ref(0, 68752);

const {:count 15} .str.99: ref;

axiom .str.99 == $sub.ref(0, 69791);

const {:count 22} .str.100: ref;

axiom .str.100 == $sub.ref(0, 70837);

const {:count 11} .str.101: ref;

axiom .str.101 == $sub.ref(0, 71872);

const {:count 19} .str.102: ref;

axiom .str.102 == $sub.ref(0, 72915);

const {:count 25} .str.103: ref;

axiom .str.103 == $sub.ref(0, 73964);

const {:count 45} .str.88: ref;

axiom .str.88 == $sub.ref(0, 75033);

const {:count 38} .str.89: ref;

axiom .str.89 == $sub.ref(0, 76095);

const {:count 59} .str.90: ref;

axiom .str.90 == $sub.ref(0, 77178);

const {:count 56} .str.91: ref;

axiom .str.91 == $sub.ref(0, 78258);

const {:count 45} .str.92: ref;

axiom .str.92 == $sub.ref(0, 79327);

const {:count 41} .str.93: ref;

axiom .str.93 == $sub.ref(0, 80392);

const {:count 49} .str.85: ref;

axiom .str.85 == $sub.ref(0, 81465);

const {:count 51} .str.86: ref;

axiom .str.86 == $sub.ref(0, 82540);

const {:count 83} .str.87: ref;

axiom .str.87 == $sub.ref(0, 83647);

const {:count 55} .str.77: ref;

axiom .str.77 == $sub.ref(0, 84726);

const {:count 60} .str.78: ref;

axiom .str.78 == $sub.ref(0, 85810);

const {:count 25} .str.79: ref;

axiom .str.79 == $sub.ref(0, 86859);

const {:count 46} .str.80: ref;

axiom .str.80 == $sub.ref(0, 87929);

const {:count 41} .str.83: ref;

axiom .str.83 == $sub.ref(0, 88994);

const {:count 54} .str.84: ref;

axiom .str.84 == $sub.ref(0, 90072);

const {:count 53} .str.53: ref;

axiom .str.53 == $sub.ref(0, 91149);

const {:count 43} .str.54: ref;

axiom .str.54 == $sub.ref(0, 92216);

const {:count 16} .str.55: ref;

axiom .str.55 == $sub.ref(0, 93256);

const {:count 11} .str.56: ref;

axiom .str.56 == $sub.ref(0, 94291);

const {:count 2} .str.57: ref;

axiom .str.57 == $sub.ref(0, 95317);

const {:count 2} .str.58: ref;

axiom .str.58 == $sub.ref(0, 96343);

const {:count 2} .str.59: ref;

axiom .str.59 == $sub.ref(0, 97369);

const {:count 2} .str.60: ref;

axiom .str.60 == $sub.ref(0, 98395);

const {:count 3} .str.61: ref;

axiom .str.61 == $sub.ref(0, 99422);

const {:count 39} .str.62: ref;

axiom .str.62 == $sub.ref(0, 100485);

const {:count 40} .str.63: ref;

axiom .str.63 == $sub.ref(0, 101549);

const {:count 42} .str.64: ref;

axiom .str.64 == $sub.ref(0, 102615);

const {:count 41} .str.65: ref;

axiom .str.65 == $sub.ref(0, 103680);

const {:count 37} .str.66: ref;

axiom .str.66 == $sub.ref(0, 104741);

const {:count 22} .str.67: ref;

axiom .str.67 == $sub.ref(0, 105787);

const {:count 2} .str.68: ref;

axiom .str.68 == $sub.ref(0, 106813);

const {:count 31} .str.71: ref;

axiom .str.71 == $sub.ref(0, 107868);

const x86_dma_fallback_dev: ref;

axiom x86_dma_fallback_dev == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 40} .str.82: ref;

axiom .str.82 == $sub.ref(0, 108932);

const {:count 31} .str.81: ref;

axiom .str.81 == $sub.ref(0, 109987);

const {:count 39} .str.244: ref;

axiom .str.244 == $sub.ref(0, 111050);

const {:count 26} .str.245: ref;

axiom .str.245 == $sub.ref(0, 112100);

const {:count 46} .str.21: ref;

axiom .str.21 == $sub.ref(0, 113170);

const {:count 13} .str.22: ref;

axiom .str.22 == $sub.ref(0, 114207);

const {:count 20} .str.95: ref;

axiom .str.95 == $sub.ref(0, 115251);

const {:count 14} .str.234: ref;

axiom .str.234 == $sub.ref(0, 116289);

const {:count 29} .str.235: ref;

axiom .str.235 == $sub.ref(0, 117342);

const {:count 52} .str.236: ref;

axiom .str.236 == $sub.ref(0, 118418);

const {:count 25} .str.237: ref;

axiom .str.237 == $sub.ref(0, 119467);

const {:count 32} .str.238: ref;

axiom .str.238 == $sub.ref(0, 120523);

const {:count 32} .str.239: ref;

axiom .str.239 == $sub.ref(0, 121579);

const {:count 43} .str.240: ref;

axiom .str.240 == $sub.ref(0, 122646);

const {:count 32} .str.241: ref;

axiom .str.241 == $sub.ref(0, 123702);

const {:count 48} .str.242: ref;

axiom .str.242 == $sub.ref(0, 124774);

const {:count 37} .str.243: ref;

axiom .str.243 == $sub.ref(0, 125835);

const {:count 61} .str.7: ref;

axiom .str.7 == $sub.ref(0, 126920);

const {:count 6} .str.8: ref;

axiom .str.8 == $sub.ref(0, 127950);

const {:count 18} .str.9: ref;

axiom .str.9 == $sub.ref(0, 128992);

const {:count 19} .str.10: ref;

axiom .str.10 == $sub.ref(0, 130035);

const {:count 13} .str.11: ref;

axiom .str.11 == $sub.ref(0, 131072);

const {:count 32} .str.12: ref;

axiom .str.12 == $sub.ref(0, 132128);

const {:count 10} .str.258: ref;

axiom .str.258 == $sub.ref(0, 133162);

const {:count 7} .str.259: ref;

axiom .str.259 == $sub.ref(0, 134193);

const {:count 11} .str.260: ref;

axiom .str.260 == $sub.ref(0, 135228);

const {:count 19} .str.262: ref;

axiom .str.262 == $sub.ref(0, 136271);

const {:count 9} .str.263: ref;

axiom .str.263 == $sub.ref(0, 137304);

const {:count 2} .str.249: ref;

axiom .str.249 == $sub.ref(0, 138330);

const {:count 15} .str.250: ref;

axiom .str.250 == $sub.ref(0, 139369);

const {:count 292} .str.251: ref;

axiom .str.251 == $sub.ref(0, 140685);

const {:count 25} .str.252: ref;

axiom .str.252 == $sub.ref(0, 141734);

const {:count 14} .str.253: ref;

axiom .str.253 == $sub.ref(0, 142772);

const {:count 70} .str.254: ref;

axiom .str.254 == $sub.ref(0, 143866);

const {:count 27} .str.255: ref;

axiom .str.255 == $sub.ref(0, 144917);

const {:count 30} .str.256: ref;

axiom .str.256 == $sub.ref(0, 145971);

const {:count 55} .str.257: ref;

axiom .str.257 == $sub.ref(0, 147050);

const {:count 7} .str.41: ref;

axiom .str.41 == $sub.ref(0, 148081);

const {:count 14} .str.42: ref;

axiom .str.42 == $sub.ref(0, 149119);

const {:count 28} .str.43: ref;

axiom .str.43 == $sub.ref(0, 150171);

const {:count 8} .str.131: ref;

axiom .str.131 == $sub.ref(0, 151203);

const {:count 5} .str.145: ref;

axiom .str.145 == $sub.ref(0, 152232);

const {:count 8} .str.146: ref;

axiom .str.146 == $sub.ref(0, 153264);

const {:count 10} .str.147: ref;

axiom .str.147 == $sub.ref(0, 154298);

const {:count 18} .str.148: ref;

axiom .str.148 == $sub.ref(0, 155340);

const {:count 13} .str.149: ref;

axiom .str.149 == $sub.ref(0, 156377);

const {:count 27} .str.150: ref;

axiom .str.150 == $sub.ref(0, 157428);

const {:count 27} .str.151: ref;

axiom .str.151 == $sub.ref(0, 158479);

const {:count 5} .str.152: ref;

axiom .str.152 == $sub.ref(0, 159508);

const {:count 23} .str.153: ref;

axiom .str.153 == $sub.ref(0, 160555);

const {:count 21} .str.154: ref;

axiom .str.154 == $sub.ref(0, 161600);

const {:count 14} .str.155: ref;

axiom .str.155 == $sub.ref(0, 162638);

const {:count 13} .str.156: ref;

axiom .str.156 == $sub.ref(0, 163675);

const {:count 23} .str.157: ref;

axiom .str.157 == $sub.ref(0, 164722);

const {:count 26} .str.158: ref;

axiom .str.158 == $sub.ref(0, 165772);

const {:count 22} .str.159: ref;

axiom .str.159 == $sub.ref(0, 166818);

const {:count 15} .str.113: ref;

axiom .str.113 == $sub.ref(0, 167857);

const {:count 18} .str.160: ref;

axiom .str.160 == $sub.ref(0, 168899);

const {:count 16} .str.161: ref;

axiom .str.161 == $sub.ref(0, 169939);

const {:count 23} .str.162: ref;

axiom .str.162 == $sub.ref(0, 170986);

const {:count 18} .str.163: ref;

axiom .str.163 == $sub.ref(0, 172028);

const {:count 18} .str.164: ref;

axiom .str.164 == $sub.ref(0, 173070);

const {:count 18} .str.165: ref;

axiom .str.165 == $sub.ref(0, 174112);

const {:count 8} .str.166: ref;

axiom .str.166 == $sub.ref(0, 175144);

const {:count 14} .str.167: ref;

axiom .str.167 == $sub.ref(0, 176182);

const {:count 17} .str.168: ref;

axiom .str.168 == $sub.ref(0, 177223);

const {:count 20} .str.169: ref;

axiom .str.169 == $sub.ref(0, 178267);

const {:count 12} .str.170: ref;

axiom .str.170 == $sub.ref(0, 179303);

const {:count 21} .str.171: ref;

axiom .str.171 == $sub.ref(0, 180348);

const {:count 8} .str.172: ref;

axiom .str.172 == $sub.ref(0, 181380);

const {:count 12} .str.132: ref;

axiom .str.132 == $sub.ref(0, 182416);

const {:count 23} .str.133: ref;

axiom .str.133 == $sub.ref(0, 183463);

const {:count 23} .str.134: ref;

axiom .str.134 == $sub.ref(0, 184510);

const {:count 12} .str.135: ref;

axiom .str.135 == $sub.ref(0, 185546);

const {:count 23} .str.136: ref;

axiom .str.136 == $sub.ref(0, 186593);

const {:count 23} .str.137: ref;

axiom .str.137 == $sub.ref(0, 187640);

const {:count 20} .str.138: ref;

axiom .str.138 == $sub.ref(0, 188684);

const {:count 31} .str.139: ref;

axiom .str.139 == $sub.ref(0, 189739);

const {:count 31} .str.140: ref;

axiom .str.140 == $sub.ref(0, 190794);

const {:count 18} .str.141: ref;

axiom .str.141 == $sub.ref(0, 191836);

const {:count 16} .str.142: ref;

axiom .str.142 == $sub.ref(0, 192876);

const {:count 22} .str.143: ref;

axiom .str.143 == $sub.ref(0, 193922);

const {:count 3} .str.144: ref;

axiom .str.144 == $sub.ref(0, 194949);

const {:count 5} .str.104: ref;

axiom .str.104 == $sub.ref(0, 195978);

const {:count 18} .str.105: ref;

axiom .str.105 == $sub.ref(0, 197020);

const {:count 19} .str.106: ref;

axiom .str.106 == $sub.ref(0, 198063);

const {:count 11} .str.107: ref;

axiom .str.107 == $sub.ref(0, 199098);

const {:count 8} .str.108: ref;

axiom .str.108 == $sub.ref(0, 200130);

const {:count 12} .str.109: ref;

axiom .str.109 == $sub.ref(0, 201166);

const {:count 9} .str.110: ref;

axiom .str.110 == $sub.ref(0, 202199);

const {:count 16} .str.111: ref;

axiom .str.111 == $sub.ref(0, 203239);

const {:count 16} .str.112: ref;

axiom .str.112 == $sub.ref(0, 204279);

const {:count 18} .str.114: ref;

axiom .str.114 == $sub.ref(0, 205321);

const {:count 16} .str.115: ref;

axiom .str.115 == $sub.ref(0, 206361);

const {:count 16} .str.116: ref;

axiom .str.116 == $sub.ref(0, 207401);

const {:count 18} .str.117: ref;

axiom .str.117 == $sub.ref(0, 208443);

const {:count 21} .str.118: ref;

axiom .str.118 == $sub.ref(0, 209488);

const {:count 25} .str.119: ref;

axiom .str.119 == $sub.ref(0, 210537);

const {:count 16} .str.120: ref;

axiom .str.120 == $sub.ref(0, 211577);

const {:count 36} .str.121: ref;

axiom .str.121 == $sub.ref(0, 212637);

const {:count 15} .str.122: ref;

axiom .str.122 == $sub.ref(0, 213676);

const {:count 36} .str.123: ref;

axiom .str.123 == $sub.ref(0, 214736);

const {:count 52} .str.124: ref;

axiom .str.124 == $sub.ref(0, 215812);

const {:count 51} .str.125: ref;

axiom .str.125 == $sub.ref(0, 216887);

const {:count 22} .str.126: ref;

axiom .str.126 == $sub.ref(0, 217933);

const {:count 60} .str.127: ref;

axiom .str.127 == $sub.ref(0, 219017);

const {:count 62} .str.128: ref;

axiom .str.128 == $sub.ref(0, 220103);

const {:count 57} .str.129: ref;

axiom .str.129 == $sub.ref(0, 221184);

const {:count 78} .str.130: ref;

axiom .str.130 == $sub.ref(0, 222286);

const {:count 22} .str.187: ref;

axiom .str.187 == $sub.ref(0, 223332);

const {:count 20} .str.188: ref;

axiom .str.188 == $sub.ref(0, 224376);

const {:count 23} .str.189: ref;

axiom .str.189 == $sub.ref(0, 225423);

const {:count 21} .str.190: ref;

axiom .str.190 == $sub.ref(0, 226468);

const {:count 23} .str.191: ref;

axiom .str.191 == $sub.ref(0, 227515);

const {:count 23} .str.192: ref;

axiom .str.192 == $sub.ref(0, 228562);

const {:count 18} .str.193: ref;

axiom .str.193 == $sub.ref(0, 229604);

const {:count 19} .str.194: ref;

axiom .str.194 == $sub.ref(0, 230647);

const {:count 18} .str.195: ref;

axiom .str.195 == $sub.ref(0, 231689);

const {:count 19} .str.196: ref;

axiom .str.196 == $sub.ref(0, 232732);

const {:count 17} .str.197: ref;

axiom .str.197 == $sub.ref(0, 233773);

const {:count 19} .str.198: ref;

axiom .str.198 == $sub.ref(0, 234816);

const {:count 21} .str.199: ref;

axiom .str.199 == $sub.ref(0, 235861);

const {:count 22} .str.200: ref;

axiom .str.200 == $sub.ref(0, 236907);

const {:count 15} .str.201: ref;

axiom .str.201 == $sub.ref(0, 237946);

const {:count 17} .str.202: ref;

axiom .str.202 == $sub.ref(0, 238987);

const {:count 19} .str.203: ref;

axiom .str.203 == $sub.ref(0, 240030);

const {:count 17} .str.204: ref;

axiom .str.204 == $sub.ref(0, 241071);

const {:count 18} .str.205: ref;

axiom .str.205 == $sub.ref(0, 242113);

const {:count 21} .str.206: ref;

axiom .str.206 == $sub.ref(0, 243158);

const {:count 19} .str.207: ref;

axiom .str.207 == $sub.ref(0, 244201);

const {:count 20} .str.208: ref;

axiom .str.208 == $sub.ref(0, 245245);

const {:count 18} .str.209: ref;

axiom .str.209 == $sub.ref(0, 246287);

const {:count 24} .str.210: ref;

axiom .str.210 == $sub.ref(0, 247335);

const {:count 25} .str.211: ref;

axiom .str.211 == $sub.ref(0, 248384);

const {:count 18} .str.212: ref;

axiom .str.212 == $sub.ref(0, 249426);

const {:count 19} .str.213: ref;

axiom .str.213 == $sub.ref(0, 250469);

const {:count 17} .str.214: ref;

axiom .str.214 == $sub.ref(0, 251510);

const {:count 17} .str.215: ref;

axiom .str.215 == $sub.ref(0, 252551);

const {:count 18} .str.216: ref;

axiom .str.216 == $sub.ref(0, 253593);

const {:count 18} .str.217: ref;

axiom .str.217 == $sub.ref(0, 254635);

const {:count 19} .str.218: ref;

axiom .str.218 == $sub.ref(0, 255678);

const {:count 19} .str.219: ref;

axiom .str.219 == $sub.ref(0, 256721);

const {:count 14} .str.220: ref;

axiom .str.220 == $sub.ref(0, 257759);

const {:count 11} .str.173: ref;

axiom .str.173 == $sub.ref(0, 258794);

const {:count 13} .str.174: ref;

axiom .str.174 == $sub.ref(0, 259831);

const {:count 13} .str.175: ref;

axiom .str.175 == $sub.ref(0, 260868);

const {:count 21} .str.176: ref;

axiom .str.176 == $sub.ref(0, 261913);

const {:count 21} .str.177: ref;

axiom .str.177 == $sub.ref(0, 262958);

const {:count 22} .str.178: ref;

axiom .str.178 == $sub.ref(0, 264004);

const {:count 22} .str.179: ref;

axiom .str.179 == $sub.ref(0, 265050);

const {:count 25} .str.180: ref;

axiom .str.180 == $sub.ref(0, 266099);

const {:count 22} .str.181: ref;

axiom .str.181 == $sub.ref(0, 267145);

const {:count 12} .str.182: ref;

axiom .str.182 == $sub.ref(0, 268181);

const {:count 20} .str.183: ref;

axiom .str.183 == $sub.ref(0, 269225);

const {:count 18} .str.184: ref;

axiom .str.184 == $sub.ref(0, 270267);

const {:count 18} .str.185: ref;

axiom .str.185 == $sub.ref(0, 271309);

const {:count 26} .str.186: ref;

axiom .str.186 == $sub.ref(0, 272359);

const .str: ref;

axiom .str == $sub.ref(0, 273436);

const {:count 61} .str.2: ref;

axiom .str.2 == $sub.ref(0, 274521);

const {:count 46} .str.3: ref;

axiom .str.3 == $sub.ref(0, 275591);

const {:count 34} .str.4: ref;

axiom .str.4 == $sub.ref(0, 276649);

const {:count 44} .str.5: ref;

axiom .str.5 == $sub.ref(0, 277717);

const {:count 23} .str.94: ref;

axiom .str.94 == $sub.ref(0, 278764);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 10} .str.18: ref;

axiom .str.18 == $sub.ref(0, 279798);

const {:count 53} .str.19: ref;

axiom .str.19 == $sub.ref(0, 280875);

const {:count 56} .str.20: ref;

axiom .str.20 == $sub.ref(0, 281955);

const {:count 28} .str.23: ref;

axiom .str.23 == $sub.ref(0, 283007);

const {:count 55} .str.24: ref;

axiom .str.24 == $sub.ref(0, 284086);

const {:count 23} .str.25: ref;

axiom .str.25 == $sub.ref(0, 285133);

const {:count 17} .str.27: ref;

axiom .str.27 == $sub.ref(0, 286174);

const {:count 35} .str.29: ref;

axiom .str.29 == $sub.ref(0, 287233);

const {:count 35} .str.30: ref;

axiom .str.30 == $sub.ref(0, 288292);

const {:count 25} .str.31: ref;

axiom .str.31 == $sub.ref(0, 289341);

const {:count 43} .str.32: ref;

axiom .str.32 == $sub.ref(0, 290408);

const {:count 43} .str.33: ref;

axiom .str.33 == $sub.ref(0, 291475);

const {:count 35} .str.40: ref;

axiom .str.40 == $sub.ref(0, 292534);

const {:count 14} .str.44: ref;

axiom .str.44 == $sub.ref(0, 293572);

const {:count 6} .str.45: ref;

axiom .str.45 == $sub.ref(0, 294602);

const {:count 7} .str.46: ref;

axiom .str.46 == $sub.ref(0, 295633);

const {:count 6} .str.47: ref;

axiom .str.47 == $sub.ref(0, 296663);

const {:count 7} .str.48: ref;

axiom .str.48 == $sub.ref(0, 297694);

const {:count 13} .str.49: ref;

axiom .str.49 == $sub.ref(0, 298731);

const {:count 8} .str.50: ref;

axiom .str.50 == $sub.ref(0, 299763);

const {:count 9} .str.51: ref;

axiom .str.51 == $sub.ref(0, 300796);

const {:count 17} .str.52: ref;

axiom .str.52 == $sub.ref(0, 301837);

const {:count 28} .str.261: ref;

axiom .str.261 == $sub.ref(0, 302889);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 303921);

const {:count 3} .str.1.525: ref;

axiom .str.1.525 == $sub.ref(0, 304948);

const {:count 14} .str.526: ref;

axiom .str.526 == $sub.ref(0, 305986);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 307014);

const i2o_exec_reply: ref;

axiom i2o_exec_reply == $sub.ref(0, 308046);

procedure i2o_exec_reply($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.34, $M.35, $M.36;



implementation i2o_exec_reply($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i21: i32;
  var $i26: i1;
  var $i27: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i24;
  var $i42: i24;
  var $i43: i24;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $i28: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i1;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 3} {:cexpr "i2o_exec_reply:arg:m"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 8192);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 10} {:cexpr "context"} boogie_si_record_i32($i25);
    assume {:verifier.code 0} true;
    $i21 := $i25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i21, 0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i33 := $lshr.i32($i32, 24);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 162);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} vslice_dummy_var_40 := printk.ref.ref(.str.254, $p75);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} i2o_dump_message($p2);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 14);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p35, .str.26);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p36, .str.250);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p37, .str.251);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p38, .str.252);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i41 := $load.i24($M.5, $p40);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i42 := $and.i24($i41, $sub.i24(0, 262144));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i43 := $or.i24($i42, 539);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p40, $i43);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p44, 0);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.6, $p45);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i64($i46);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, 1);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 14} {:cexpr "tmp___0"} boogie_si_record_i64($i49);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p54 := kmalloc(88, 32);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p55, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $p0);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p55, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} __init_work($p59, 0);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p60, 4195328);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p5);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 18} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p63, $p64, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} lockdep_init_map($p66, .str.253, $p4, 0);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} INIT_LIST_HEAD($p68);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, i2o_exec_lct_modified);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.7, $add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(40, 1)));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p55, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} vslice_dummy_var_39 := queue_work($p71, $p72);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i28 := 1;
    goto $bb6;

  $bb13:
    assume $i57 == 1;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 12);
    goto $bb6;

  $bb10:
    assume $i50 == 1;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} vslice_dummy_var_38 := __dynamic_pr_debug.ref.ref.ref($p3, .str.252, $p52);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i27 := i2o_msg_post_wait_complete($p0, $i1, $p2, $i21);
    call {:si_unique_call 12} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(3, 4));
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    call {:si_unique_call 4} {:cexpr "pm"} boogie_si_record_i32($i14);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $p15 := i2o_msg_in_to_virt($p0, $i14);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i20 := readl($p19);
    call {:si_unique_call 7} {:cexpr "context"} boogie_si_record_i32($i20);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} i2o_report_status(.str.249, .str.26, $p2);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} i2o_msg_nop_mfa($p0, $i14);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb3;
}



const i2o_exec_event: ref;

axiom i2o_exec_event == $sub.ref(0, 309078);

procedure i2o_exec_event($p0: ref);
  free requires assertsPassed;



implementation i2o_exec_event($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i8 := ldv__builtin_expect($i7, 1);
    call {:si_unique_call 25} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} kfree($p9);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    return;
}



const i2o_exec_probe: ref;

axiom i2o_exec_probe == $sub.ref(0, 310110);

procedure i2o_exec_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i2o_exec_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i8: i32;
  var $p15: ref;
  var $p16: ref;
  var $i5: i32;
  var $i14: i32;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 64), 1376));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i3 := i2o_event_register($p2, i2o_exec_driver, 0, $sub.i32(0, 1));
    call {:si_unique_call 28} {:cexpr "rc"} boogie_si_record_i32($i3);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i6 := device_create_file($p0, dev_attr_vendor_id);
    call {:si_unique_call 30} {:cexpr "rc"} boogie_si_record_i32($i6);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $i9 := device_create_file($p0, dev_attr_product_id);
    call {:si_unique_call 33} {:cexpr "rc"} boogie_si_record_i32($i9);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 64), 1376)), $mul.ref(40, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 1976)), $mul.ref(1736, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p2);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} device_remove_file($p0, dev_attr_vendor_id);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref($sub.ref(0, 64), 1376));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} vslice_dummy_var_41 := i2o_event_register($p16, i2o_exec_driver, 0, 0);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i5 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i14 := $i5;
    goto $bb13;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const i2o_exec_remove: ref;

axiom i2o_exec_remove == $sub.ref(0, 311142);

procedure i2o_exec_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i2o_exec_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} device_remove_file($p0, dev_attr_product_id);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} device_remove_file($p0, dev_attr_vendor_id);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 64), 1376));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} vslice_dummy_var_42 := i2o_event_register($p2, i2o_exec_driver, 0, 0);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 312174);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const device_remove_file: ref;

axiom device_remove_file == $sub.ref(0, 313206);

procedure device_remove_file($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation device_remove_file($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    return;
}



const i2o_event_register: ref;

axiom i2o_event_register == $sub.ref(0, 314238);

procedure i2o_event_register($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i2o_event_register($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} {:cexpr "i2o_event_register:arg:tcntxt"} boogie_si_record_i32($i2);
    call {:si_unique_call 39} {:cexpr "i2o_event_register:arg:evt_mask"} boogie_si_record_i32($i3);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1376)), $mul.ref(40, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p6 := i2o_msg_get_wait($p5, 5);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i8 := IS_ERR($p7);
    call {:si_unique_call 42} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 327681);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i20 := $and.i16($i19, 4095);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, 318771200);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i22);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.7, $p26);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i27);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i2);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i3);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} i2o_msg_post($p5, $p6);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p6);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i11 := PTR_ERR($p10);
    call {:si_unique_call 44} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const i2o_msg_get_wait: ref;

axiom i2o_msg_get_wait == $sub.ref(0, 315270);

procedure i2o_msg_get_wait($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i2o_msg_get_wait($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p10: ref;
  var $p16: ref;
  var vslice_dummy_var_43: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} {:cexpr "i2o_msg_get_wait:arg:wait"} boogie_si_record_i32($i1);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i2 := $mul.i32($i1, 250);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.7, jiffies);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i3, $i4);
    call {:si_unique_call 47} {:cexpr "timeout"} boogie_si_record_i64($i5);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $p6 := i2o_msg_get($p0);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $i8 := IS_ERR($p7);
    call {:si_unique_call 50} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p10 := $p6;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p16 := $p10;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $r := $p16;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i11, $i12, $i13, $p18, $p19, $i20, $i21, $p22, vslice_dummy_var_43 := i2o_msg_get_wait_loop_$bb4($p0, $i5, $i11, $i12, $i13, $p18, $p19, $i20, $i21, $p22, vslice_dummy_var_43);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.7, jiffies);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64($i5, $i11);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i13 := $slt.i64($i12, 0);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} vslice_dummy_var_43 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p18 := i2o_msg_get($p0);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i20 := IS_ERR($p19);
    call {:si_unique_call 55} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p22 := $p18;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p10 := $p22;
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb10_dummy;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $p14 := ERR_PTR($sub.i64(0, 110));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p16 := $p14;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 316302);

procedure IS_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 57} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 317334);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const i2o_msg_post: ref;

axiom i2o_msg_post == $sub.ref(0, 318366);

procedure i2o_msg_post($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i2o_msg_post($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 4), 24));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 4), 24)), $mul.ref(0, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $p6 := i2o_msg_in_to_virt($p0, $i5);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i32($i12, 16);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i14 := $shl.i32($i13, 2);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} memcpy_toio($p7, $p8, $i15);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 4), 24)), $mul.ref(0, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(72, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} writel($i17, $p19);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p3);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(448, 1)), $mul.ref(16, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} mempool_free($p20, $p23);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    return;
}



const i2o_msg_in_to_virt: ref;

axiom i2o_msg_in_to_virt == $sub.ref(0, 319398);

procedure i2o_msg_in_to_virt($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation i2o_msg_in_to_virt($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} {:cexpr "i2o_msg_in_to_virt:arg:m"} boogie_si_record_i32($i1);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(400, 1)), $mul.ref(0, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i1);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p5, $mul.ref($i6, 20));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const memcpy_toio: ref;

axiom memcpy_toio == $sub.ref(0, 320430);

procedure memcpy_toio($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation memcpy_toio($p0: ref, $p1: ref, $i2: i64)
{
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} {:cexpr "memcpy_toio:arg:count"} boogie_si_record_i64($i2);
    call {:si_unique_call 64} {:cexpr "memcpy_toio:arg:__len"} boogie_si_record_i64($i2);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 65} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p0, $p1, $i2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    return;
}



const writel: ref;

axiom writel == $sub.ref(0, 321462);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 67} devirtbounce(0, $i0, $p2);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    return;
}



const mempool_free: ref;

axiom mempool_free == $sub.ref(0, 322494);

procedure mempool_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation mempool_free($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 323526);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 324558);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 69} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 325590);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const schedule_timeout_uninterruptible: ref;

axiom schedule_timeout_uninterruptible == $sub.ref(0, 326622);

procedure schedule_timeout_uninterruptible($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout_uninterruptible($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 71} {:cexpr "schedule_timeout_uninterruptible:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 1} true;
    call {:si_unique_call 72} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 73} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const i2o_msg_get: ref;

axiom i2o_msg_get == $sub.ref(0, 327654);

procedure i2o_msg_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i2o_msg_get($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(448, 1)), $mul.ref(16, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $p4 := mempool_alloc($p3, 32);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(72, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i13 := readl($p12);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(400, 1)), $mul.ref(16, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i21 := $uge.i64($i17, $i20);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 78} {:cexpr "tmp___3"} boogie_si_record_i64($i24);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p10 := $p37;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    call {:si_unique_call 79} {:cexpr "mfa"} boogie_si_record_i32($i27);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p5);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(448, 1)), $mul.ref(16, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} mempool_free($p28, $p31);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i27, $sub.i32(0, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $p35 := ERR_PTR($sub.i64(0, 14));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p10 := $p35;
    goto $bb3;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $p33 := ERR_PTR($sub.i64(0, 16));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p10 := $p33;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $p8 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p10 := $p8;
    goto $bb3;
}



const mempool_alloc: ref;

axiom mempool_alloc == $sub.ref(0, 328686);

procedure mempool_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation mempool_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} {:cexpr "mempool_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $p2 := external_alloc();
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 329718);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 85} $i2 := devirtbounce.1(0, $p1);
    call {:si_unique_call 86} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 330750);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 1} true;
    call {:si_unique_call 87} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 88} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const i2o_bus_match: ref;

axiom i2o_bus_match == $sub.ref(0, 331782);

procedure i2o_bus_match($p0: ref, $p1: ref) returns ($r: i32);



const i2o_device_show_class_id: ref;

axiom i2o_device_show_class_id == $sub.ref(0, 332814);

procedure i2o_device_show_class_id($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const i2o_device_show_tid: ref;

axiom i2o_device_show_tid == $sub.ref(0, 333846);

procedure i2o_device_show_tid($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const sprintf: ref;

axiom sprintf == $sub.ref(0, 334878);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const strlen: ref;

axiom strlen == $sub.ref(0, 335910);

procedure strlen($p0: ref) returns ($r: i64);



const i2o_pci_probe: ref;

axiom i2o_pci_probe == $sub.ref(0, 336942);

procedure i2o_pci_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.19, $CurrAddr, $M.12, $M.13, $M.14, $M.15, $M.16, $M.24, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.25, assertsPassed, $M.22;



implementation i2o_pci_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i8;
  var $i46: i8;
  var $i47: i8;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p68: ref;
  var $i69: i8;
  var $i70: i8;
  var $i71: i8;
  var $p72: ref;
  var $i73: i8;
  var $i74: i8;
  var $i75: i8;
  var $p76: ref;
  var $p77: ref;
  var $i78: i16;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i8;
  var $i83: i8;
  var $i84: i8;
  var $p85: ref;
  var $i86: i16;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i8;
  var $i91: i8;
  var $i92: i8;
  var $p93: ref;
  var $i94: i16;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i98: i8;
  var $i99: i8;
  var $i100: i8;
  var $p101: ref;
  var $i102: i16;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i106: i8;
  var $i107: i8;
  var $i108: i8;
  var $p109: ref;
  var $p110: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i8;
  var $i120: i8;
  var $p121: ref;
  var $p122: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $i136: i32;
  var $i137: i1;
  var $i138: i64;
  var $i139: i1;
  var $i135: i32;
  var $i129: i32;
  var $i18: i32;
  var $i9: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} vslice_dummy_var_44 := printk.ref(.str.222);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(68, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 255);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 1);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $i10 := pci_enable_device($p0);
    call {:si_unique_call 93} {:cexpr "rc"} boogie_si_record_i32($i10);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i14 := pci_set_dma_mask($p0, 4294967295);
    call {:si_unique_call 97} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} pci_set_master($p0);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $p19 := i2o_iop_alloc();
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i21 := IS_ERR($p20);
    call {:si_unique_call 104} {:cexpr "tmp___6"} boogie_si_record_i64($i21);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $p28 := pci_name($p0);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} vslice_dummy_var_49 := printk.ref.ref.ref(.str.227, $p30, $p28);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p0);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(592, 1)), $mul.ref(0, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p33);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(60, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 4096);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(64, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 4186);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $p76 := $0.ref;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(64, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.0, $p77);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i78);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 4164);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(60, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i86 := $load.i16($M.0, $p85);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i86);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 4164);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i124 := i2o_pci_alloc($p19);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 122} {:cexpr "rc"} boogie_si_record_i32($i124);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i130 := i2o_pci_irq_enable($p19);
    call {:si_unique_call 126} {:cexpr "tmp___8"} boogie_si_record_i32($i130);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i136 := i2o_iop_add($p19);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 130} {:cexpr "rc"} boogie_si_record_i32($i136);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i136, 0);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i138 := $p2i.ref.i64($p76);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i139 := $ne.i64($i138, 0);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb54:
    assume $i139 == 1;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} vslice_dummy_var_57 := pci_write_config_word($p76, 66, 1023);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb50:
    assume $i137 == 1;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} i2o_pci_irq_disable($p19);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i135 := $i136;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} i2o_pci_free($p19);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i129 := $i135;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} i2o_iop_free($p19);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i18 := $i129;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} pci_disable_device($p0);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i9 := $i18;
    goto $bb3;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i131 == 1;
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} vslice_dummy_var_56 := printk.ref.ref(.str.233, $p133);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i135 := $i124;
    goto $bb48;

  $bb42:
    assume $i125 == 1;
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} vslice_dummy_var_55 := printk.ref.ref(.str.232, $p127);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i129 := $i124;
    goto $bb44;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i88 == 1;
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(32, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i91 := $and.i8($i90, $sub.i8(0, 9));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i92 := $or.i8($i91, 8);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p89, $i92);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i94 := $load.i16($M.0, $p93);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i95 := $zext.i16.i32($i94);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 42257);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(66, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.0, $p101);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 49242);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i112 := pci_set_dma_mask($p0, $sub.i64(0, 1));
    call {:si_unique_call 118} {:cexpr "tmp___7"} boogie_si_record_i32($i112);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i113 == 1);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(32, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i119 := $and.i8($i118, $sub.i8(0, 65));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i120 := $or.i8($i119, 64);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p117, $i120);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} vslice_dummy_var_54 := printk.ref.ref(.str.231, $p122);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i113 == 1;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} vslice_dummy_var_53 := printk.ref.ref(.str.230, $p115);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i104 == 1;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(32, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i107 := $and.i8($i106, $sub.i8(0, 33));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i108 := $or.i8($i107, 32);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, $i108);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} vslice_dummy_var_52 := printk.ref.ref.i32(.str.229, $p110, 128);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i96 == 1;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(32, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i99 := $and.i8($i98, $sub.i8(0, 5));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i100 := $or.i8($i99, 4);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, $i100);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb27:
    assume $i80 == 1;
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(32, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i83 := $and.i8($i82, $sub.i8(0, 3));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i84 := $or.i8($i83, 2);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, $i84);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21:
    assume $i54 == 1;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 248);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $p64 := pci_get_slot($p58, $i63);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(32, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i70 := $and.i8($i69, $sub.i8(0, 2));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i71 := $or.i8($i70, 1);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, $i71);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(32, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i74 := $and.i8($i73, $sub.i8(0, 33));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i75 := $or.i8($i74, 32);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, $i75);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p76 := $p64;
    goto $bb26;

  $bb23:
    assume $i66 == 1;
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} vslice_dummy_var_51 := pci_write_config_word($p64, 66, 0);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} pci_dev_put($p64);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb15:
    assume $i39 == 1;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 1584);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb17;

  $bb18:
    assume $i43 == 1;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(32, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i46 := $and.i8($i45, $sub.i8(0, 17));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i47 := $or.i8($i46, 16);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $i47);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p19, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} vslice_dummy_var_50 := printk.ref.ref(.str.228, $p49);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $p23 := pci_name($p0);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} vslice_dummy_var_48 := printk.ref.ref(.str.226, $p23);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p19);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i26 := PTR_ERR($p25);
    call {:si_unique_call 108} {:cexpr "tmp___4"} boogie_si_record_i64($i26);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    call {:si_unique_call 109} {:cexpr "rc"} boogie_si_record_i32($i27);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i18 := $i27;
    goto $bb10;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $p16 := pci_name($p0);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} vslice_dummy_var_47 := printk.ref.ref(.str.225, $p16);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 19);
    goto $bb10;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $p12 := pci_name($p0);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} vslice_dummy_var_46 := printk.ref.ref(.str.224, $p12);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $p7 := pci_name($p0);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} vslice_dummy_var_45 := printk.ref.ref(.str.223, $p7);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;
}



const i2o_pci_remove: ref;

axiom i2o_pci_remove == $sub.ref(0, 337974);

procedure i2o_pci_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.22, assertsPassed, $M.25;



implementation i2o_pci_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} i2o_iop_remove($p2);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} i2o_pci_irq_disable($p2);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} i2o_pci_free($p2);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} pci_disable_device($p0);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} vslice_dummy_var_58 := printk.ref.ref(.str.246, $p4);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 1976)), $mul.ref(592, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} put_device($p6);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 339006);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const i2o_iop_remove: ref;

axiom i2o_iop_remove == $sub.ref(0, 340038);

procedure i2o_iop_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.22, assertsPassed, $M.25;



implementation i2o_iop_remove($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p17: ref;
  var $p18: ref;
  var $p27: ref;
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} i2o_driver_notify_controller_remove_all($p0);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(56, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} list_del($p1);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p5, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i13, $i15);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(592, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} device_del($p27);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} vslice_dummy_var_59 := i2o_iop_reset($p0);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p17, $p18 := $p11, $p6;
    goto $bb4;

  $bb4:
    call $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p17, $p18 := i2o_iop_remove_loop_$bb4($i15, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p17, $p18);
    goto $bb4_last;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} i2o_device_remove($p18);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p17, $mul.ref(0, 1376)), $mul.ref(48, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $i15);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p17, $p18 := $p23, $p17;
    goto $bb6_dummy;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_593;
}



const i2o_pci_irq_disable: ref;

axiom i2o_pci_irq_disable == $sub.ref(0, 341070);

procedure i2o_pci_irq_disable($p0: ref);
  free requires assertsPassed;



implementation i2o_pci_irq_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(96, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} writel($sub.i32(0, 1), $p2);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2696)), $mul.ref(1300, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2696)), $mul.ref(1300, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} free_irq($i11, $p12);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i2o_pci_free: ref;

axiom i2o_pci_free == $sub.ref(0, 342102);

procedure i2o_pci_free($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i2o_pci_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(424, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} i2o_dma_free($p3, $p4);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(352, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} i2o_dma_free($p3, $p5);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(152, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} kfree($p8);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(160, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} i2o_dma_free($p3, $p9);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} i2o_dma_free($p3, $p10);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(104, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} i2o_dma_free($p3, $p11);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(32, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(0, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} pci_release_regions($p34);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(0, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} iounmap($p32);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(400, 1)), $mul.ref(0, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb3;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(400, 1)), $mul.ref(0, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} iounmap($p24);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 343134);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 344166);

procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 1} true;
    call {:si_unique_call 157} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 158} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 1} true;
    call {:si_unique_call 159} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 160} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 1} true;
    call {:si_unique_call 161} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 162} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 1} true;
    call {:si_unique_call 163} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 164} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 1} true;
    call {:si_unique_call 165} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 166} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 1} true;
    call {:si_unique_call 167} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 168} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: i64, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: i64, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 1} true;
    call {:si_unique_call 169} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 170} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 1} true;
    call {:si_unique_call 171} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 172} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 1} true;
    call {:si_unique_call 173} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 174} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 1} true;
    call {:si_unique_call 175} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 176} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 1} true;
    call {:si_unique_call 177} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 178} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 1} true;
    call {:si_unique_call 179} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 180} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: ref, p.3: i64, p.4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: ref, p.3: i64, p.4: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 1} true;
    call {:si_unique_call 181} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 182} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const put_device: ref;

axiom put_device == $sub.ref(0, 345198);

procedure put_device($p0: ref);
  free requires assertsPassed;



implementation put_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    return;
}



const i2o_dma_free: ref;

axiom i2o_dma_free == $sub.ref(0, 346230);

procedure i2o_dma_free($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i2o_dma_free($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} kfree($p16);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $0.ref);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} dma_free_attrs($p0, $i10, $p12, $i14, $0.ref);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 347262);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} free_($p0);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 348294);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    return;
}



const pci_release_regions: ref;

axiom pci_release_regions == $sub.ref(0, 349326);

procedure pci_release_regions($p0: ref);
  free requires assertsPassed;



implementation pci_release_regions($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 350358);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 186} $free($p0);
    return;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 351390);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_60: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} {:cexpr "dma_free_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 188} {:cexpr "dma_free_attrs:arg:bus"} boogie_si_record_i64($i3);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $p5 := get_dma_ops($p0);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i6 := arch_local_save_flags();
    call {:si_unique_call 191} {:cexpr "_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i7 := arch_irqs_disabled_flags($i6);
    call {:si_unique_call 193} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 194} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 196} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} vslice_dummy_var_60 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} debug_dma_free_coherent($p0, $i1, $p2, $i3);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 200} devirtbounce.2($p24, $p0, $i1, $p2, $i3, $p4);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} warn_slowpath_null(.str.264, 166);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 352422);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 202} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(952, 1)), $mul.ref(0, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.7, dma_ops);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 353454);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.7, pv_irq_ops);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 204} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 206} $i7 := devirtbounce.4(0, 45, pv_irq_ops, 1);
    call {:si_unique_call 207} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 205} devirtbounce.3(0, .str.265, 825, 12);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 354486);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 355518);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_free_coherent: ref;

axiom debug_dma_free_coherent == $sub.ref(0, 356550);

procedure debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} {:cexpr "debug_dma_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 211} {:cexpr "debug_dma_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 357582);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    return;
}



const i2o_driver_notify_controller_remove_all: ref;

axiom i2o_driver_notify_controller_remove_all == $sub.ref(0, 358614);

procedure i2o_driver_notify_controller_remove_all($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_driver_notify_controller_remove_all($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i2 := $ult.i32(0, $i1);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb4;

  $bb4:
    call $p4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i3 := i2o_driver_notify_controller_remove_all_loop_$bb4($p0, $p4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i3);
    goto $bb4_last;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p4 := $M.9;
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i3);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 8));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.10, $p6);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i3, 1);
    call {:si_unique_call 214} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i11 := $M.8;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32($i10, $i11);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i10;
    goto $bb9_dummy;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} i2o_driver_notify_controller_remove($p7, $p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_835;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 359646);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    return;
}



const i2o_device_remove: ref;

axiom i2o_device_remove == $sub.ref(0, 360678);

procedure i2o_device_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_device_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p19: ref;
  var $i20: i16;
  var $i21: i16;
  var $i22: i32;
  var $p24: ref;
  var $i25: i16;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i16;
  var $i35: i32;
  var $p37: ref;
  var $i38: i16;
  var $i39: i16;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p17: ref;
  var $p52: ref;
  var $p53: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1376)), $mul.ref(40, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} i2o_driver_notify_device_remove_all($p0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} sysfs_remove_link($p4, .str.36);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} sysfs_remove_link($p6, .str.37);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1976)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 1976)), $mul.ref(40, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i13, $i15);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1376)), $mul.ref(48, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} list_del($p52);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1376)), $mul.ref(64, 1));
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} device_unregister($p53);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p17 := $p11;
    goto $bb4;

  $bb4:
    call $p19, $i20, $i21, $i22, $p24, $i25, $i26, $i27, $i28, $p30, $p32, $i33, $i34, $i35, $p37, $i38, $i39, $i40, $i41, $p43, $p45, $p46, $p47, $p48, $p49, $i50, $i51, $p17 := i2o_device_remove_loop_$bb4($p0, $i15, $p19, $i20, $i21, $i22, $p24, $i25, $i26, $i27, $i28, $p30, $p32, $i33, $i34, $i35, $p37, $i38, $i39, $i40, $i41, $p43, $p45, $p46, $p47, $p48, $p49, $i50, $i51, $p17);
    goto $bb4_last;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(22, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i21 := $and.i16($i20, 4095);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i26 := $and.i16($i25, 4095);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i22, $i27);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i34 := $and.i16($i33, 4095);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i39 := $and.i16($i38, 4095);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i35, $i40);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p47, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, $i15);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i51 == 1);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $p17 := $p48;
    goto $bb12_dummy;

  $bb9:
    assume $i41 == 1;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} sysfs_remove_link($p43, .str.37);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i28 == 1;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} sysfs_remove_link($p30, .str.36);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_875;
}



const device_del: ref;

axiom device_del == $sub.ref(0, 361710);

procedure device_del($p0: ref);
  free requires assertsPassed;



implementation device_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    return;
}



const i2o_iop_reset: ref;

axiom i2o_iop_reset == $sub.ref(0, 362742);

procedure i2o_iop_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation i2o_iop_reset($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $p41: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i32;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p74: ref;
  var $p91: ref;
  var $p73: ref;
  var $p92: ref;
  var $i93: i8;
  var $i94: i8;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p108: ref;
  var $p109: ref;
  var $i68: i32;
  var $i85: i32;
  var $i15: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var vslice_dummy_var_61: i64;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i64;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $p8 := i2o_msg_get_wait($p0, 5);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i10 := IS_ERR($p9);
    call {:si_unique_call 224} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 227} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p18, 0, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} i2o_iop_quiesce_all();
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 524289);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $sub.i32(0, 1124069376));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.7, $add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(8, 1)));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p8, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i25);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 0);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(1, 4));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 0);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(104, 1)), $mul.ref(8, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $i39 := i2o_dma_low($i38);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(2, 4));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i39);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(104, 1)), $mul.ref(8, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i45 := i2o_dma_high($i44);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(3, 4));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i45);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} i2o_msg_post($p0, $p8);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.7, jiffies);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 7500);
    call {:si_unique_call 232} {:cexpr "timeout"} boogie_si_record_i64($i49);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p3);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p3);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i61, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} vslice_dummy_var_67 := printk.ref.ref.ref(.str.73, .str.1, $p109);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, 110);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i85 := $i68;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} i2o_iop_enable_all();
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i15 := $i85;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb20:
    assume $i63 == 1;
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} vslice_dummy_var_62 := printk.ref.ref.ref(.str.72, .str.1, $p66);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, 1);
    goto $bb25;

  $bb18:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i61, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb22;

  $bb23:
    assume $i64 == 1;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p69 := i2o_msg_get_wait($p0, 30);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i71 := IS_ERR($p70);
    call {:si_unique_call 237} {:cexpr "tmp___2"} boogie_si_record_i64($i71);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p73 := $p69;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} i2o_msg_nop($p0, $p73);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(32, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p92);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i94 := $and.i8($i93, $sub.i8(0, 9));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, $i94);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} vslice_dummy_var_65 := i2o_status_get($p0);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p0);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p96, $mul.ref(32, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 0);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i68 := 0;
    goto $bb25;

  $bb38:
    assume $i100 == 1;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p7, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 2);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb40;

  $bb41:
    assume $i104 == 1;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} vslice_dummy_var_66 := printk.ref.ref.ref(.str.74, .str.1, $p106);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb26:
    assume $i72 == 1;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p74 := $p69;
    goto $bb29;

  $bb29:
    call $i75, $i76, $i77, $p78, $p87, $p88, $i89, $i90, $p74, $p91, vslice_dummy_var_64 := i2o_iop_reset_loop_$bb29($p0, $i49, $i75, $i76, $i77, $p78, $p87, $p88, $i89, $i90, $p74, $p91, vslice_dummy_var_64);
    goto $bb29_last;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.7, jiffies);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i76 := $sub.i64($i49, $i75);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i77 := $slt.i64($i76, 0);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p78 := $p74;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} vslice_dummy_var_64 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $p87 := i2o_msg_get_wait($p0, 30);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i89 := IS_ERR($p88);
    call {:si_unique_call 246} {:cexpr "tmp___2"} boogie_si_record_i64($i89);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p91 := $p87;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p73 := $p91;
    goto $bb28;

  $bb35:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $p74 := $p87;
    goto $bb35_dummy;

  $bb31:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} vslice_dummy_var_63 := printk.ref.ref.ref(.str.73, .str.1, $p80);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p78);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i83 := PTR_ERR($p82);
    call {:si_unique_call 240} {:cexpr "tmp___1"} boogie_si_record_i64($i83);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i64.i32($i83);
    call {:si_unique_call 241} {:cexpr "rc"} boogie_si_record_i32($i84);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i85 := $i84;
    goto $bb33;

  $bb5:
    assume $i52 == 1;
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $i53, $i54, $i55, $i57, $i58, $i59, vslice_dummy_var_61 := i2o_iop_reset_loop_$bb8($p3, $i49, $i53, $i54, $i55, $i57, $i58, $i59, vslice_dummy_var_61);
    goto $bb8_last;

  $bb9:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.7, jiffies);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i54 := $sub.i64($i49, $i53);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i55 := $slt.i64($i54, 0);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} vslice_dummy_var_61 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p3);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i59 == 1);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb14_dummy;

  $bb10:
    assume $i55 == 1;
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p8);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i13 := PTR_ERR($p12);
    call {:si_unique_call 226} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;

  $bb35_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1014;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 363774);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const i2o_iop_quiesce_all: ref;

axiom i2o_iop_quiesce_all == $sub.ref(0, 364806);

procedure i2o_iop_quiesce_all();
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation i2o_iop_quiesce_all()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, i2o_controllers);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 56), 1976));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 56), 1976)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 56), 1976));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 56), 1976)), $mul.ref(56, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, $p2i.ref.i64(i2o_controllers));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p11, $p12 := $p2, $p7;
    goto $bb4;

  $bb4:
    call $p13, $p14, $i15, $i16, $i17, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p11, $p12, vslice_dummy_var_68 := i2o_iop_quiesce_all_loop_$bb4($p13, $p14, $i15, $i16, $i17, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p11, $p12, vslice_dummy_var_68);
    goto $bb4_last;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p11);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(32, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 1976)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref($sub.ref(0, 56), 1976));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p12, $mul.ref(0, 1976)), $mul.ref(56, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $p2i.ref.i64(i2o_controllers));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p11, $p12 := $p12, $p23;
    goto $bb9_dummy;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} vslice_dummy_var_68 := i2o_iop_quiesce($p11);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1080;
}



const i2o_dma_low: ref;

axiom i2o_dma_low == $sub.ref(0, 365838);

procedure i2o_dma_low($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation i2o_dma_low($i0: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} {:cexpr "i2o_dma_low:arg:dma_addr"} boogie_si_record_i64($i0);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i64.i32($i0);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const i2o_dma_high: ref;

axiom i2o_dma_high == $sub.ref(0, 366870);

procedure i2o_dma_high($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation i2o_dma_high($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} {:cexpr "i2o_dma_high:arg:dma_addr"} boogie_si_record_i64($i0);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i1 := $lshr.i64($i0, 32);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const i2o_msg_nop: ref;

axiom i2o_msg_nop == $sub.ref(0, 367902);

procedure i2o_msg_nop($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i2o_msg_nop($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 4), 24));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 4), 24)), $mul.ref(0, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} i2o_msg_nop_mfa($p0, $i5);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(448, 1)), $mul.ref(16, 1));
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} mempool_free($p6, $p9);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    return;
}



const i2o_status_get: ref;

axiom i2o_status_get == $sub.ref(0, 368934);

procedure i2o_status_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i2o_status_get($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i32;
  var $p37: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i32;
  var $p43: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $i14: i32;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 256} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p6, 0, 88, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $p7 := i2o_msg_get_wait($p0, 5);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $i9 := IS_ERR($p8);
    call {:si_unique_call 259} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 589825);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $sub.i32(0, 1610608640));
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.7, $add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(8, 1)));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i21);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 0);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(1, 4));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 0);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(352, 1)), $mul.ref(8, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i35 := i2o_dma_low($i34);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(2, 4));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i35);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(352, 1)), $mul.ref(8, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i41 := i2o_dma_high($i40);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(3, 4));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i41);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(4, 4));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 88);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} i2o_msg_post($p0, $p7);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.7, jiffies);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 1250);
    call {:si_unique_call 265} {:cexpr "timeout"} boogie_si_record_i64($i47);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p3, $mul.ref(87, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 255);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb5:
    assume $i51 == 1;
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $i52, $i53, $i54, $i59, $i60, $i61, vslice_dummy_var_70 := i2o_status_get_loop_$bb8($i47, $p48, $i52, $i53, $i54, $i59, $i60, $i61, vslice_dummy_var_70);
    goto $bb8_last;

  $bb9:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.7, jiffies);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i53 := $sub.i64($i47, $i52);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i54 := $slt.i64($i53, 0);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} vslice_dummy_var_70 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p48);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 255);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i61 == 1);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb13_dummy;

  $bb10:
    assume $i54 == 1;
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} vslice_dummy_var_69 := printk.ref.ref.ref(.str.6, .str.1, $p56);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 110);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p7);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i12 := PTR_ERR($p11);
    call {:si_unique_call 261} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const i2o_iop_enable_all: ref;

axiom i2o_iop_enable_all == $sub.ref(0, 369966);

procedure i2o_iop_enable_all();
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation i2o_iop_enable_all()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, i2o_controllers);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 56), 1976));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 56), 1976)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 56), 1976));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 56), 1976)), $mul.ref(56, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, $p2i.ref.i64(i2o_controllers));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p11, $p12 := $p2, $p7;
    goto $bb4;

  $bb4:
    call $p15, $p16, $p17, $p18, $p19, $i20, $i21, $p11, $p12, vslice_dummy_var_71 := i2o_iop_enable_all_loop_$bb4($p15, $p16, $p17, $p18, $p19, $i20, $i21, $p11, $p12, vslice_dummy_var_71);
    goto $bb4_last;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} vslice_dummy_var_71 := i2o_iop_enable($p11);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 1976)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref($sub.ref(0, 56), 1976));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p12, $mul.ref(0, 1976)), $mul.ref(56, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, $p2i.ref.i64(i2o_controllers));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $p11, $p12 := $p12, $p18;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1210;
}



const i2o_iop_enable: ref;

axiom i2o_iop_enable == $sub.ref(0, 370998);

procedure i2o_iop_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation i2o_iop_enable($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i10: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vslice_dummy_var_72 := i2o_status_get($p0);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 5);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p11 := i2o_msg_get_wait($p0, 5);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i13 := IS_ERR($p12);
    call {:si_unique_call 272} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 262145);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $sub.i32(0, 788525056));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i24 := i2o_msg_post_wait($p0, $p11, 240);
    call {:si_unique_call 276} {:cexpr "rc"} boogie_si_record_i32($i24);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} vslice_dummy_var_74 := i2o_status_get($p0);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i10 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, $i24);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} vslice_dummy_var_73 := printk.ref.ref.ref.i32(.str.76, .str.1, $p27, $i28);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p11);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i16 := PTR_ERR($p15);
    call {:si_unique_call 274} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i10 := $i17;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const i2o_msg_post_wait: ref;

axiom i2o_msg_post_wait == $sub.ref(0, 372030);

procedure i2o_msg_post_wait($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation i2o_msg_post_wait($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} {:cexpr "i2o_msg_post_wait:arg:timeout"} boogie_si_record_i64($i2);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i3 := i2o_msg_post_wait_mem($p0, $p1, $i2, $0.ref);
    call {:si_unique_call 281} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const i2o_msg_post_wait_mem: ref;

axiom i2o_msg_post_wait_mem == $sub.ref(0, 373062);

procedure i2o_msg_post_wait_mem($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation i2o_msg_post_wait_mem($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i13: i1;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i64;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $i70: i32;
  var $p74: ref;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $i12: i32;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $p4 := $alloc($mul.ref(88, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 285} {:cexpr "i2o_msg_post_wait_mem:arg:timeout"} boogie_si_record_i64($i2);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} __init_waitqueue_head($p4, .str.69, $p5);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p4);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p4);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 287} cmdloc_dummy_var_12 := $memcpy.i8(cmdloc_dummy_var_10, cmdloc_dummy_var_11, $p7, $p8, 88, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $p9 := i2o_exec_wait_alloc();
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($sub.i32(0, 2147483648), $sub.i32(0, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p3);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.7, $add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(8, 1)));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i19);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p9, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $sub.i32(0, 2147483648));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p9, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i25);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p4);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p9, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} list_add($p30, i2o_exec_wait_list);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} i2o_msg_post($p0, $p1);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i31 := $mul.i64($i2, 250);
    call {:si_unique_call 293} {:cexpr "__ret"} boogie_si_record_i64($i31);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p9, $mul.ref(0, 144)), $mul.ref(36, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p9, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $p58 := spinlock_check($p57);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $i59 := _raw_spin_lock_irqsave($p58);
    call {:si_unique_call 305} {:cexpr "flags"} boogie_si_record_i64($i59);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p9, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $0.ref);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p9, $mul.ref(0, 144)), $mul.ref(36, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i63 == 1);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p3);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i70 := $sub.i32(0, 110);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p9, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} spin_unlock_irqrestore($p74, $i59);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i70, $sub.i32(0, 110));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i12 := $i70;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb35:
    assume $i75 == 1;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p9, $mul.ref(0, 144)), $mul.ref(40, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} i2o_flush_reply($p0, $i77);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} i2o_exec_wait_free($p9);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i72 == 1;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $0.ref);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i63 == 1;
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p9, $mul.ref(0, 144)), $mul.ref(48, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p65, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i69 := $lshr.i32($i68, 24);
    call {:si_unique_call 306} {:cexpr "rc"} boogie_si_record_i32($i69);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i70 := $i69;
    goto $bb31;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $p35 := get_current();
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p36, 0);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p38, $p35);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p39, autoremove_wake_function);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p42, $p40);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p45, $p43);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} prepare_to_wait($p4, $p6, 1);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p9, $mul.ref(0, 144)), $mul.ref(36, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i48 == 1);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i49 := $i31;
    goto $bb16;

  $bb16:
    call $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56 := i2o_msg_post_wait_mem_loop_$bb16($p4, $p6, $p46, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56);
    goto $bb16_last;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p50 := get_current();
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i51 := signal_pending($p50);
    call {:si_unique_call 299} {:cexpr "tmp___2"} boogie_si_record_i32($i51);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} finish_wait($p4, $p6);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i52 == 1;
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i53 := schedule_timeout($i49);
    call {:si_unique_call 301} {:cexpr "__ret"} boogie_si_record_i64($i53);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} prepare_to_wait($p4, $p6, 1);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p46);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb27;

  $bb27:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i49 := $i53;
    goto $bb27_dummy;

  $bb17:
    assume $i56 == 1;
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb22:
    assume $i54 == 1;
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb14;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 144)), $mul.ref(8, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p3);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 290} cmdloc_dummy_var_15 := $memcpy.i8(cmdloc_dummy_var_13, cmdloc_dummy_var_14, $p17, $p18, 24, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} i2o_msg_nop($p0, $p1);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 374094);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    return;
}



const i2o_exec_wait_alloc: ref;

axiom i2o_exec_wait_alloc == $sub.ref(0, 375126);

procedure i2o_exec_wait_alloc() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i2o_exec_wait_alloc() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p10: ref;
  var $p11: ref;
  var $p5: ref;
  var vslice_dummy_var_75: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $p1 := kzalloc(144, 208);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} INIT_LIST_HEAD($p6);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} vslice_dummy_var_75 := spinlock_check($p7);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} __raw_spin_lock_init($p11, .str.247, $p0);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 376158);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} __list_add($p0, $p1, $p3);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 377190);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $p0 := devirtbounce.5(0, current_task);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 378222);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 379254);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 380286);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 319} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 321} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 381318);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 322} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 1} true;
    call {:si_unique_call 323} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 324} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 382350);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 383382);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 384414);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 1} true;
    call {:si_unique_call 325} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 326} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 385446);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    return;
}



const i2o_flush_reply: ref;

axiom i2o_flush_reply == $sub.ref(0, 386478);

procedure i2o_flush_reply($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation i2o_flush_reply($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} {:cexpr "i2o_flush_reply:arg:m"} boogie_si_record_i32($i1);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(80, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} writel($i1, $p3);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    return;
}



const i2o_exec_wait_free: ref;

axiom i2o_exec_wait_free == $sub.ref(0, 387510);

procedure i2o_exec_wait_free($p0: ref);
  free requires assertsPassed;



implementation i2o_exec_wait_free($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} kfree($p1);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 388542);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 389574);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 9576)), $mul.ref(8, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.11, $p2);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 335} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 390606);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i4 := variable_test_bit($i1, $p3);
    call {:si_unique_call 338} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 391638);

procedure variable_test_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 340} $i2 := devirtbounce.6(0, $p1, $i0);
    call {:si_unique_call 341} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 392670);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 393702);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 343} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 394734);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 395766);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 396798);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 346} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 397830);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 349} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $p2 := ldv_malloc($i0);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 398862);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 351} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 1} true;
    call {:si_unique_call 352} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 353} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $p3 := malloc($i0);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $i4 := ldv_is_err($p3);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 1} true;
    call {:si_unique_call 356} __VERIFIER_assume($i7);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 399894);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 357} $r := $malloc($i0);
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 400926);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const i2o_msg_nop_mfa: ref;

axiom i2o_msg_nop_mfa == $sub.ref(0, 401958);

procedure i2o_msg_nop_mfa($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i2o_msg_nop_mfa($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 359} {:cexpr "i2o_msg_nop_mfa:arg:mfa"} boogie_si_record_i32($i1);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 196609);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 4096);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 4));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $p6 := i2o_msg_in_to_virt($p0, $i1);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} memcpy_toio($p7, $p8, 12);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(72, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} writel($i1, $p10);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    return;
}



const i2o_iop_quiesce: ref;

axiom i2o_iop_quiesce == $sub.ref(0, 402990);

procedure i2o_iop_quiesce($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation i2o_iop_quiesce($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i14: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} vslice_dummy_var_76 := i2o_status_get($p0);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 5);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $p15 := i2o_msg_get_wait($p0, 5);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i17 := IS_ERR($p16);
    call {:si_unique_call 366} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p15, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 262145);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p15, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $sub.i32(0, 1023406080));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i28 := i2o_msg_post_wait($p0, $p15, 240);
    call {:si_unique_call 370} {:cexpr "rc"} boogie_si_record_i32($i28);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} vslice_dummy_var_78 := i2o_status_get($p0);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i14 := $i28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, $i28);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} vslice_dummy_var_77 := printk.ref.ref.ref.i32(.str.75, .str.1, $p31, $i32);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p15);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i20 := PTR_ERR($p19);
    call {:si_unique_call 368} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i14 := $i21;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 8);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;
}



const i2o_driver_notify_device_remove_all: ref;

axiom i2o_driver_notify_device_remove_all == $sub.ref(0, 404022);

procedure i2o_driver_notify_device_remove_all($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_driver_notify_device_remove_all($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i2 := $ult.i32(0, $i1);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb4;

  $bb4:
    call $p4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i3 := i2o_driver_notify_device_remove_all_loop_$bb4($p0, $p4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i3);
    goto $bb4_last;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p4 := $M.9;
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i3);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 8));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.10, $p6);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i3, 1);
    call {:si_unique_call 374} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i11 := $M.8;
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32($i10, $i11);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i10;
    goto $bb9_dummy;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} i2o_driver_notify_device_remove($p7, $p0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1584;
}



const sysfs_remove_link: ref;

axiom sysfs_remove_link == $sub.ref(0, 405054);

procedure sysfs_remove_link($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sysfs_remove_link($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    return;
}



const device_unregister: ref;

axiom device_unregister == $sub.ref(0, 406086);

procedure device_unregister($p0: ref);
  free requires assertsPassed;



implementation device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    return;
}



const i2o_driver_notify_device_remove: ref;

axiom i2o_driver_notify_device_remove == $sub.ref(0, 407118);

procedure i2o_driver_notify_device_remove($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_driver_notify_device_remove($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.17, $p2);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.17, $p6);
    call {:si_unique_call 375} devirtbounce.7($p7, $p1);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const i2o_driver_notify_controller_remove: ref;

axiom i2o_driver_notify_controller_remove == $sub.ref(0, 408150);

procedure i2o_driver_notify_controller_remove($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_driver_notify_controller_remove($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(176, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.18, $p2);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(176, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.18, $p6);
    call {:si_unique_call 376} devirtbounce.8($p7, $p1);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 409182);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $p1 := external_alloc();
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const pci_name: ref;

axiom pci_name == $sub.ref(0, 410214);

procedure pci_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $p2 := dev_name($p1);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 411246);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 1} true;
    call {:si_unique_call 379} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 380} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_set_dma_mask: ref;

axiom pci_set_dma_mask == $sub.ref(0, 412278);

procedure pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} {:cexpr "pci_set_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i3 := dma_set_mask($p2, $i1);
    call {:si_unique_call 383} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 413310);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    return;
}



const i2o_iop_alloc: ref;

axiom i2o_iop_alloc == $sub.ref(0, 414342);

procedure i2o_iop_alloc() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i2o_iop_alloc() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p43: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p11: ref;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: ref;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $p0 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $p4 := kzalloc(1968, 208);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(16, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(16, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} vslice_dummy_var_80 := sprintf.ref.ref.i32($p14, .str.8, $i16);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p0);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vslice_dummy_var_81 := snprintf.ref.i64.ref.ref($p18, 32, .str.9, $p20);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(448, 1));
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i24 := i2o_pool_alloc($p22, $p23, 516, 32);
    call {:si_unique_call 394} {:cexpr "tmp___3"} boogie_si_record_i32($i24);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(40, 1));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} INIT_LIST_HEAD($p29);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(1840, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} vslice_dummy_var_82 := spinlock_check($p30);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(1840, 1)), $mul.ref(0, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} __raw_spin_lock_init($p34, .str.10, $p1);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(184, 1));
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} __mutex_init($p35, .str.11, $p2);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(592, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} device_initialize($p36);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(592, 1)), $mul.ref(1128, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, i2o_iop_release);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(592, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(16, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} vslice_dummy_var_83 := dev_set_name.ref.ref.i32($p39, .str.8, $i41);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(1744, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} vslice_dummy_var_84 := spinlock_check($p43);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(1744, 1)), $mul.ref(0, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} __raw_spin_lock_init($p47, .str.12, $p3);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(1816, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} atomic_set($p48, 0);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 1976)), $mul.ref(1824, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} INIT_LIST_HEAD($p49);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p5);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} kfree($p26);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $p27 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p11 := $p27;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} vslice_dummy_var_79 := printk.ref.ref(.str.7, .str.1);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $p9 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p11 := $p9;
    goto $bb3;
}



const pci_get_slot: ref;

axiom pci_get_slot == $sub.ref(0, 415374);

procedure pci_get_slot($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_slot($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} {:cexpr "pci_get_slot:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $p2 := external_alloc();
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const pci_write_config_word: ref;

axiom pci_write_config_word == $sub.ref(0, 416406);

procedure pci_write_config_word($p0: ref, $i1: i32, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation pci_write_config_word($p0: ref, $i1: i32, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} {:cexpr "pci_write_config_word:arg:where"} boogie_si_record_i32($i1);
    call {:si_unique_call 410} {:cexpr "pci_write_config_word:arg:val"} boogie_si_record_i16($i2);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i2);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i9 := pci_bus_write_config_word($p4, $i6, $i1, $i8);
    call {:si_unique_call 412} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const pci_dev_put: ref;

axiom pci_dev_put == $sub.ref(0, 417438);

procedure pci_dev_put($p0: ref);
  free requires assertsPassed;



implementation pci_dev_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    return;
}



const i2o_pci_alloc: ref;

axiom i2o_pci_alloc == $sub.ref(0, 418470);

procedure i2o_pci_alloc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed;



implementation i2o_pci_alloc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i11: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i23: i64;
  var $p26: ref;
  var $i27: i64;
  var $p29: ref;
  var $i30: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $i47: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i16;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i16;
  var $i72: i32;
  var $i73: i1;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p79: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i22: i32;
  var $i93: i64;
  var $p96: ref;
  var $i97: i64;
  var $p99: ref;
  var $i100: i64;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $i106: i64;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $p114: ref;
  var $i115: i64;
  var $i116: i1;
  var $i117: i64;
  var $p120: ref;
  var $i121: i64;
  var $i122: i64;
  var $p125: ref;
  var $i126: i64;
  var $i127: i64;
  var $i128: i64;
  var $i129: i32;
  var $i130: i64;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $i10: i32;
  var $i136: i32;
  var $i92: i32;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i8;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $p147: ref;
  var $p150: ref;
  var $i151: i64;
  var $p153: ref;
  var $i154: i64;
  var $p157: ref;
  var $i158: i64;
  var $p160: ref;
  var $i161: i64;
  var $p163: ref;
  var $p164: ref;
  var $p166: ref;
  var $i167: i64;
  var $p169: ref;
  var $i170: i64;
  var $p173: ref;
  var $i174: i64;
  var $p176: ref;
  var $i177: i64;
  var $p178: ref;
  var $p180: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $i185: i1;
  var $p186: ref;
  var $p187: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i8;
  var $i192: i32;
  var $i193: i1;
  var $p195: ref;
  var $i196: i64;
  var $p198: ref;
  var $i199: i64;
  var $p200: ref;
  var $p202: ref;
  var $p204: ref;
  var $p205: ref;
  var $i206: i64;
  var $i207: i1;
  var $p208: ref;
  var $p209: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $i236: i16;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $i240: i16;
  var $i241: i32;
  var $i242: i1;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $i247: i32;
  var $i248: i32;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $p252: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p273: ref;
  var $i274: i32;
  var $i275: i1;
  var $p276: ref;
  var $i277: i32;
  var $i278: i1;
  var $p279: ref;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $i283: i32;
  var $i284: i1;
  var $p285: ref;
  var $i286: i32;
  var $i287: i1;
  var $p288: ref;
  var $i9: i32;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i4 := pci_request_regions($p2, .str.234);
    call {:si_unique_call 414} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb5:
    call $i11, $p14, $i15, $i16, $i17, $p19, $i20, $i21, $i23, $p26, $i27, $p29, $i30, $p33, $i34, $i35, $i36, $p39, $i40, $i41, $p44, $i45, $i46, $i47, $p50, $i51, $i52, $p55, $i56, $i57, $i58, $i59, $p61, $p62, $i63, $i64, $i65, $p66, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $p75, $i76, $i77, $p79, $p81, $i82, $i83, $p85, $p86, $p87, $i88, $i89, $i90, $i91, $i22, $i133, $i134, $i135, $i10, $i136 := i2o_pci_alloc_loop_$bb5($p0, $p2, $i11, $p14, $i15, $i16, $i17, $p19, $i20, $i21, $i23, $p26, $i27, $p29, $i30, $p33, $i34, $i35, $i36, $p39, $i40, $i41, $p44, $i45, $i46, $i47, $p50, $i51, $i52, $p55, $i56, $i57, $i58, $i59, $p61, $p62, $i63, $i64, $i65, $p66, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $p75, $i76, $i77, $p79, $p81, $i82, $i83, $p85, $p86, $p87, $i88, $i89, $i90, $i91, $i22, $i133, $i134, $i135, $i10, $i136);
    goto $bb5_last;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i11, 56)), $mul.ref(24, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 256);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i133 := $i10;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i133, 1);
    call {:si_unique_call 416} {:cexpr "i"} boogie_si_record_i32($i134);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i135 := $sle.i32($i134, 5);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i136 := $i134;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i92 := $i136;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i92, 6);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p0);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p141, $mul.ref(32, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.0, $p142);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i143);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i145 == 1);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(8, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i167 := $load.i64($M.0, $p166);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i170 := $load.i64($M.0, $p169);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} vslice_dummy_var_90 := printk.ref.ref.i64.i64(.str.240, $p164, $i167, $i170);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(8, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i174 := $load.i64($M.0, $p173);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i177 := $load.i64($M.0, $p176);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $p178 := ioremap_nocache($i174, $i177);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(0, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p180, $p178);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(0, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i184 := $p2i.ref.i64($p183);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i185 := $eq.i64($i184, 0);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p0);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($p189, $mul.ref(32, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.0, $p190);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i192 := $zext.i8.i32($i191);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i193 := $ne.i32($i192, 0);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i193 == 1);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(400, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p211);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p214 := $bitcast.ref.ref($p212);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 427} cmdloc_dummy_var_18 := $memcpy.i8(cmdloc_dummy_var_16, cmdloc_dummy_var_17, $p213, $p214, 24, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(0, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($p217, $mul.ref(48, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(88, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p219, $p218);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(0, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($p222, $mul.ref(52, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(96, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, $p223);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(0, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($p227, $mul.ref(64, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(72, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p229, $p228);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(0, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.0, $p231);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($p232, $mul.ref(68, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(80, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p234, $p233);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(60, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i236 := $load.i16($M.0, $p235);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i237 := $zext.i16.i32($i236);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 4183);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i238 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(104, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i274 := i2o_dma_alloc($p3, $p273, 8);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 438} {:cexpr "tmp___2"} boogie_si_record_i32($i274);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i275 := $ne.i32($i274, 0);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i275} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i277 := i2o_dma_alloc($p3, $p276, 24);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 441} {:cexpr "tmp___3"} boogie_si_record_i32($i277);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i278 := $ne.i32($i277, 0);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(160, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i280 := i2o_dma_alloc($p3, $p279, 8192);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 444} {:cexpr "tmp___4"} boogie_si_record_i32($i280);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i281 := $ne.i32($i280, 0);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(352, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i283 := i2o_dma_alloc($p3, $p282, 88);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 447} {:cexpr "tmp___5"} boogie_si_record_i32($i283);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i284 := $ne.i32($i283, 0);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(424, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $i286 := i2o_dma_alloc($p3, $p285, 65536);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 450} {:cexpr "tmp___6"} boogie_si_record_i32($i286);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i287 := $ne.i32($i286, 0);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p288 := $bitcast.ref.ref($p0);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} pci_set_drvdata($p2, $p288);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb83:
    assume $i287 == 1;
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} i2o_pci_free($p0);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb80:
    assume $i284 == 1;
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} i2o_pci_free($p0);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb77:
    assume $i281 == 1;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} i2o_pci_free($p0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb74:
    assume $i278 == 1;
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} i2o_pci_free($p0);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb71:
    assume $i275 == 1;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} i2o_pci_free($p0);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb62:
    assume $i238 == 1;
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i240 := $load.i16($M.0, $p239);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i241 := $zext.i16.i32($i240);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 6336);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i242 == 1);
    goto $bb64;

  $bb65:
    assume $i242 == 1;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(0, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($p245, $mul.ref(65536, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i247 := readl($p246);
    call {:si_unique_call 431} {:cexpr "tmp___0"} boogie_si_record_i32($i247);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $i248 := __fswab32($i247);
    call {:si_unique_call 433} {:cexpr "tmp___1"} boogie_si_record_i32($i248);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i249 := $and.i32($i248, 268435456);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i250 := $ne.i32($i249, 0);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i250 == 1);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(88, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p255 := $load.ref($M.0, $p254);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($p255, $mul.ref(66560, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(88, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p257, $p256);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(96, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($p259, $mul.ref(66560, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(96, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p261, $p260);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(72, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p263 := $load.ref($M.0, $p262);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($p263, $mul.ref(66560, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(72, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p265, $p264);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(80, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.0, $p266);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($p267, $mul.ref(66560, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(80, 1));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p269, $p268);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p271 := $bitcast.ref.ref($p270);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} vslice_dummy_var_94 := printk.ref.ref(.str.243, $p271);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb67:
    assume $i250 == 1;
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p251);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} vslice_dummy_var_93 := printk.ref.ref(.str.242, $p252);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} i2o_pci_free($p0);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;

  $bb56:
    assume $i193 == 1;
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(400, 1)), $mul.ref(8, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i196 := $load.i64($M.0, $p195);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(400, 1)), $mul.ref(16, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i199 := $load.i64($M.0, $p198);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p200 := ioremap_nocache($i196, $i199);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(400, 1)), $mul.ref(0, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p202, $p200);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(400, 1)), $mul.ref(0, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i206 := $p2i.ref.i64($p205);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i207 := $eq.i64($i206, 0);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i207 == 1;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p209 := $bitcast.ref.ref($p208);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} vslice_dummy_var_92 := printk.ref.ref(.str.241, $p209);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} i2o_pci_free($p0);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  $bb53:
    assume $i185 == 1;
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p186);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} vslice_dummy_var_91 := printk.ref.ref(.str.241, $p187);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} i2o_pci_free($p0);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  $bb50:
    assume $i145 == 1;
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vslice_dummy_var_87 := printk.ref.ref(.str.237, $p147);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(8, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i151 := $load.i64($M.0, $p150);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i154 := $load.i64($M.0, $p153);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} vslice_dummy_var_88 := printk.ref.i64.i64(.str.238, $i151, $i154);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(400, 1)), $mul.ref(8, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i158 := $load.i64($M.0, $p157);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(400, 1)), $mul.ref(16, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i161 := $load.i64($M.0, $p160);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vslice_dummy_var_89 := printk.ref.i64.i64(.str.239, $i158, $i161);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i137 == 1;
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} vslice_dummy_var_86 := printk.ref.ref(.str.236, $p139);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} i2o_pci_free($p0);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb44:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i134;
    goto $bb44_dummy;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(8, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i22 := $i10;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i22);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i93, 56)), $mul.ref(0, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.0, $p96);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(400, 1)), $mul.ref(8, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p99, $i97);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i100 := $sext.i32.i64($i22);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i100, 56)), $mul.ref(0, 1));
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.0, $p103);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb37, $bb39;

  $bb39:
    assume !($i105 == 1);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i106 := $sext.i32.i64($i22);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i106, 56)), $mul.ref(8, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.0, $p109);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i111 := $sext.i32.i64($i22);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i111, 56)), $mul.ref(0, 1));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.0, $p114);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i110, $i115);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i116 == 1);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i129, $i130 := $i22, 0;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(400, 1)), $mul.ref(16, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p132, $i130);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i92 := $i129;
    goto $bb34;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i117 := $sext.i32.i64($i22);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i117, 56)), $mul.ref(8, 1));
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i121 := $load.i64($M.0, $p120);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i122 := $sext.i32.i64($i22);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i122, 56)), $mul.ref(0, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i126 := $load.i64($M.0, $p125);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i127 := $sub.i64($i121, $i126);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i128 := $add.i64($i127, 1);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i129, $i130 := $i22, $i128;
    goto $bb42;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb38;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i10);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i23, 56)), $mul.ref(0, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(8, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i27);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i10);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i30, 56)), $mul.ref(0, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i35 == 1);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i10);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i36, 56)), $mul.ref(8, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i10);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i41, 56)), $mul.ref(0, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i40, $i45);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i46 == 1);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, $i59);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.0, $p62);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 42241);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p0);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p86, $mul.ref(32, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 0);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i91 := $i10;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i133 := $i10;
    goto $bb43;

  $bb32:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i92 := $i91;
    goto $bb34;

  $bb17:
    assume $i65 == 1;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(66, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.0, $p66);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i67);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i69 := $ugt.i32($i68, 49201);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb19:
    assume $i69 == 1;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(66, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $p70);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i73 := $ule.i32($i72, 49211);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb21;

  $bb22:
    assume $i73 == 1;
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.0, $p75);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i77 := $ugt.i64($i76, 4194304);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i77 == 1);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i82 := $load.i64($M.0, $p81);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i83 := $ugt.i64($i82, 1048576);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i83 == 1;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p85, 1048576);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i77 == 1;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p79, 4194304);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i10);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i47, 56)), $mul.ref(8, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i10);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i52, 56)), $mul.ref(0, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i57 := $sub.i64($i51, $i56);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 1);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb12;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} vslice_dummy_var_85 := printk.ref.ref(.str.235, $p7);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;

  $bb44_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1733;
}



const i2o_pci_irq_enable: ref;

axiom i2o_pci_irq_enable == $sub.ref(0, 419502);

procedure i2o_pci_irq_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i2o_pci_irq_enable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i20: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(96, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} writel($sub.i32(0, 1), $p4);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1300, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(96, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} writel(0, $p22);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1300, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} vslice_dummy_var_96 := printk.ref.ref.i32(.str.245, $p24, $i26);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1300, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i13 := request_irq($i9, i2o_pci_interrupt, 128, $p11, $p12);
    call {:si_unique_call 455} {:cexpr "rc"} boogie_si_record_i32($i13);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1300, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} vslice_dummy_var_95 := printk.ref.ref.i32(.str.244, $p16, $i18);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i20 := $i13;
    goto $bb5;
}



const i2o_iop_add: ref;

axiom i2o_iop_add == $sub.ref(0, 420534);

procedure i2o_iop_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.19, $M.12, $M.13, $M.14, $M.15, $M.16, $M.24, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.22, assertsPassed, $M.25;



implementation i2o_iop_add($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i19: i32;
  var $p31: ref;
  var $i7: i32;
  var $i30: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(592, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i2 := device_add($p1);
    call {:si_unique_call 460} {:cexpr "rc"} boogie_si_record_i32($i2);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} vslice_dummy_var_99 := printk.ref.ref.ref(.str.14, .str.1, $p9);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} vslice_dummy_var_100 := printk.ref.ref.ref(.str.15, .str.1, $p12);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i14 := i2o_iop_activate($p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 466} {:cexpr "rc"} boogie_si_record_i32($i14);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i20 := i2o_systab_build();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 470} {:cexpr "rc"} boogie_si_record_i32($i20);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i22 := i2o_iop_online($p0);
    call {:si_unique_call 472} {:cexpr "rc"} boogie_si_record_i32($i22);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i24 := i2o_exec_lct_get($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 474} {:cexpr "rc"} boogie_si_record_i32($i24);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(56, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} list_add($p26, i2o_controllers);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} i2o_driver_notify_controller_add_all($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} vslice_dummy_var_102 := printk.ref.ref.ref(.str.17, .str.1, $p28);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i25 == 1;
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i19 := $i24;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(592, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} device_del($p31);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} vslice_dummy_var_98 := i2o_iop_reset($p0);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i30 := $i7;
    goto $bb18;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i19 := $i22;
    goto $bb7;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i19 := $i20;
    goto $bb7;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_101 := printk.ref.ref.ref(.str.16, .str.1, $p17);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i19 := $i14;
    goto $bb7;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} vslice_dummy_var_97 := printk.ref.ref.ref(.str.13, .str.1, $p5);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;
}



const i2o_iop_free: ref;

axiom i2o_iop_free == $sub.ref(0, 421566);

procedure i2o_iop_free($p0: ref);
  free requires assertsPassed;



implementation i2o_iop_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(448, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} i2o_pool_free($p1);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} kfree($p2);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    return;
}



const i2o_pool_free: ref;

axiom i2o_pool_free == $sub.ref(0, 422598);

procedure i2o_pool_free($p0: ref);
  free requires assertsPassed;



implementation i2o_pool_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} mempool_destroy($p2);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} kmem_cache_destroy($p4);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} kfree($p6);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    return;
}



const mempool_destroy: ref;

axiom mempool_destroy == $sub.ref(0, 423630);

procedure mempool_destroy($p0: ref);
  free requires assertsPassed;



implementation mempool_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    return;
}



const kmem_cache_destroy: ref;

axiom kmem_cache_destroy == $sub.ref(0, 424662);

procedure kmem_cache_destroy($p0: ref);
  free requires assertsPassed;



implementation kmem_cache_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    return;
}



const device_add: ref;

axiom device_add == $sub.ref(0, 425694);

procedure device_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_add($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 1} true;
    call {:si_unique_call 483} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 484} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const i2o_iop_activate: ref;

axiom i2o_iop_activate == $sub.ref(0, 426726);

procedure i2o_iop_activate($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.25, assertsPassed;



implementation i2o_iop_activate($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i16;
  var $i15: i16;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i53: i32;
  var $i12: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i5 := i2o_status_get($p0);
    call {:si_unique_call 486} {:cexpr "rc"} boogie_si_record_i32($i5);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i16($i14, 12);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i16.i8($i15);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 1);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i24, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i24, 17);
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i24, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    call {:si_unique_call 494} {:cexpr "state"} boogie_si_record_i32($i40);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $i41 := i2o_iop_init_outbound_queue($p0);
    call {:si_unique_call 496} {:cexpr "rc"} boogie_si_record_i32($i41);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i40, 2);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} vslice_dummy_var_107 := i2o_status_get($p0);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 4);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i53 := i2o_hrt_get($p0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 501} {:cexpr "tmp"} boogie_si_record_i32($i53);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i12 := $i53;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i49 == 1;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} vslice_dummy_var_108 := printk.ref.ref.ref(.str.80, .str.1, $p51);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 5);
    goto $bb5;

  $bb39:
    assume $i43 == 1;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_106 := i2o_iop_clear($p0);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i42 == 1;
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i12 := $i41;
    goto $bb5;

  $bb19:
    assume $i28 == 1;
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} vslice_dummy_var_105 := printk.ref.ref.ref(.str.79, .str.1, $p34);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 14);
    goto $bb5;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i36 := i2o_iop_reset($p0);
    call {:si_unique_call 492} {:cexpr "rc"} boogie_si_record_i32($i36);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i37 == 1;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i12 := $i36;
    goto $bb5;

  $bb14:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i24, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb21;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i24, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i24, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb21;

  $bb27:
    assume $i31 == 1;
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb25:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i24, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb29, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb21;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb30;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_104 := printk.ref.ref.ref(.str.78, .str.1, $p20);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb5;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} vslice_dummy_var_103 := printk.ref.ref.ref(.str.77, .str.1, $p8);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i10 := i2o_iop_reset($p0);
    call {:si_unique_call 489} {:cexpr "rc"} boogie_si_record_i32($i10);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb5;
}



const i2o_systab_build: ref;

axiom i2o_systab_build == $sub.ref(0, 427758);

procedure i2o_systab_build() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.19, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.22, assertsPassed, $M.25;



implementation i2o_systab_build() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p14: ref;
  var $i15: i32;
  var $i25: i32;
  var $i13: i32;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $i61: i1;
  var $i62: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p79: ref;
  var $i80: i16;
  var $i81: i64;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i16;
  var $i88: i32;
  var $i89: i32;
  var $i90: i16;
  var $i91: i64;
  var $p94: ref;
  var $p95: ref;
  var $i96: i48;
  var $i97: i48;
  var $i98: i48;
  var $i99: i48;
  var $i100: i48;
  var $i101: i64;
  var $p104: ref;
  var $p105: ref;
  var $i106: i48;
  var $i107: i48;
  var $p108: ref;
  var $i109: i16;
  var $i110: i16;
  var $i111: i8;
  var $i112: i64;
  var $p115: ref;
  var $p116: ref;
  var $i117: i48;
  var $i118: i48;
  var $i119: i48;
  var $i120: i48;
  var $i121: i48;
  var $i122: i48;
  var $p123: ref;
  var $i124: i8;
  var $i125: i64;
  var $p128: ref;
  var $p129: ref;
  var $i130: i8;
  var $i131: i64;
  var $p134: ref;
  var $p135: ref;
  var $i136: i16;
  var $i137: i64;
  var $p140: ref;
  var $i141: i64;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i64;
  var $p150: ref;
  var $p152: ref;
  var $i153: i64;
  var $i154: i64;
  var $i155: i32;
  var $i156: i64;
  var $p159: ref;
  var $p161: ref;
  var $i162: i64;
  var $i163: i64;
  var $i164: i32;
  var $i165: i64;
  var $p168: ref;
  var $i169: i32;
  var $i78: i32;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i64;
  var $i177: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i178: i32;
  var $i57: i32;
  var $i64: i32;
  var $i179: i8;
  var $p180: ref;
  var $i42: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p0 := $M.19;
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, i2o_controllers);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 56), 1976)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 56), 1976));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 56), 1976)), $mul.ref(56, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, $p2i.ref.i64(i2o_controllers));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i13);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i33 := $mul.i64($i32, 32);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 16);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $M.20 := $i34;
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i35 := $M.20;
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $p36 := kzalloc($i35, 208);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $M.19 := $p36;
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p37 := $M.19;
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, 1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i31, 1);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, i2o_controllers);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref($sub.ref(0, 56), 1976));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p47, $mul.ref($sub.ref(0, 56), 1976)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref($sub.ref(0, 56), 1976));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p47, $mul.ref($sub.ref(0, 56), 1976)), $mul.ref(56, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, $p2i.ref.i64(i2o_controllers));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i57 := 0;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i64 := $i57;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i32.i8($i64);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p180, $i179);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb16:
    assume $i56 == 1;
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p58, $p59, $i60 := $p48, $p53, 0;
    goto $bb19;

  $bb19:
    call $i61, $i62, $p66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $p76, $p79, $i80, $i81, $p84, $p85, $i86, $i87, $i88, $i89, $i90, $i91, $p94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $p104, $p105, $i106, $i107, $p108, $i109, $i110, $i111, $i112, $p115, $p116, $i117, $i118, $i119, $i120, $i121, $i122, $p123, $i124, $i125, $p128, $p129, $i130, $i131, $p134, $p135, $i136, $i137, $p140, $i141, $p144, $p145, $i146, $i147, $p150, $p152, $i153, $i154, $i155, $i156, $p159, $p161, $i162, $i163, $i164, $i165, $p168, $i169, $i78, $p171, $p172, $p173, $p174, $p175, $i176, $i177, $p58, $p59, $i60, $i178, vslice_dummy_var_111 := i2o_systab_build_loop_$bb19($i13, $i31, $p38, $i61, $i62, $p66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $p76, $p79, $i80, $i81, $p84, $p85, $i86, $i87, $i88, $i89, $i90, $i91, $p94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $p104, $p105, $i106, $i107, $p108, $i109, $i110, $i111, $i112, $p115, $p116, $i117, $i118, $i119, $i120, $i121, $i122, $p123, $i124, $i125, $p128, $p129, $i130, $i131, $p134, $p135, $i136, $i137, $p140, $i141, $p144, $p145, $i146, $i147, $p150, $p152, $i153, $i154, $i155, $i156, $p159, $p161, $i162, $i163, $i164, $i165, $p168, $i169, $i78, $p171, $p172, $p173, $p174, $p175, $i176, $i177, $p58, $p59, $i60, $i178, vslice_dummy_var_111);
    goto $bb19_last;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i61 := $sge.i32($i60, $i13);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i62 := $i60;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 1976)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i69 := i2o_status_get($p58);
    call {:si_unique_call 509} {:cexpr "tmp___0"} boogie_si_record_i32($i69);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i71 := $zext.i1.i32($i70);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i73 := ldv__builtin_expect($i72, 0);
    call {:si_unique_call 511} {:cexpr "tmp___1"} boogie_si_record_i64($i73);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p68, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.0, $p79);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i60);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i81, 32)), $mul.ref(0, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p84, $i80);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p58, $mul.ref(0, 1976)), $mul.ref(16, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i16($i86);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i32($i87);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i88, 2);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i60);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i91, 32)), $mul.ref(4, 1));
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i48($i90);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i97 := $load.i48($M.0, $p95);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i98 := $and.i48($i96, 4095);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i99 := $and.i48($i97, $sub.i48(0, 4096));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i100 := $or.i48($i99, $i98);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i48($M.0, $p95, $i100);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i60);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i101, 32)), $mul.ref(4, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i106 := $load.i48($M.0, $p105);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i107 := $and.i48($i106, $sub.i48(0, 17587891077121));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i48($M.0, $p105, $i107);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p68, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i109 := $load.i16($M.0, $p108);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i110 := $lshr.i16($i109, 12);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i16.i8($i110);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i60);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i112, 32)), $mul.ref(4, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i48($i111);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i118 := $load.i48($M.0, $p116);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i119 := $and.i48($i117, 15);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i120 := $shl.i48($i119, 44);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i121 := $and.i48($i118, 17592186044415);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i122 := $or.i48($i121, $i120);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i48($M.0, $p116, $i122);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p68, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.0, $p123);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i60);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i125, 32)), $mul.ref(10, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p128, $i124);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p68, $mul.ref(0, 88)), $mul.ref(11, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.0, $p129);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i60);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i131, 32)), $mul.ref(11, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p134, $i130);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p68, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i136 := $load.i16($M.0, $p135);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i137 := $sext.i32.i64($i60);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i137, 32)), $mul.ref(12, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p140, $i136);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i60);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i141, 32)), $mul.ref(16, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, $i31);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p68, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i147 := $sext.i32.i64($i60);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i147, 32)), $mul.ref(20, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p150, $i146);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(8, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i153 := $load.i64($M.0, $p152);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i154 := $add.i64($i153, 64);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i155 := i2o_dma_low($i154);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i156 := $sext.i32.i64($i60);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i156, 32)), $mul.ref(24, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p159, $i155);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(8, 1));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i162 := $load.i64($M.0, $p161);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i163 := $add.i64($i162, 64);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i164 := i2o_dma_high($i163);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i165 := $sext.i32.i64($i60);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i165, 32)), $mul.ref(28, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p168, $i164);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i169 := $add.i32($i60, 1);
    call {:si_unique_call 516} {:cexpr "count"} boogie_si_record_i32($i169);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i78 := $i169;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p59, $mul.ref(0, 1976)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p173, $mul.ref($sub.ref(0, 56), 1976));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p59, $mul.ref(0, 1976)), $mul.ref(56, 1));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p175);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i177 := $ne.i64($i176, $p2i.ref.i64(i2o_controllers));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i178 := $i78;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i57 := $i178;
    goto $bb18;

  $bb29:
    assume $i177 == 1;
    assume {:verifier.code 0} true;
    $p58, $p59, $i60 := $p59, $p174, $i78;
    goto $bb29_dummy;

  $bb25:
    assume $i74 == 1;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p58, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} vslice_dummy_var_111 := printk.ref.ref.ref(.str.87, .str.1, $p76);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} i2o_iop_remove($p58);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i78 := $i60;
    goto $bb27;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} vslice_dummy_var_110 := printk.ref.ref(.str.86, .str.1);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i64 := $i62;
    goto $bb23;

  $bb12:
    assume $i40 == 1;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} vslice_dummy_var_109 := printk.ref.ref(.str.85, .str.1);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 12);
    goto $bb14;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    call {:si_unique_call 503} {:cexpr "change_ind"} boogie_si_record_i32($i29);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p30 := $M.19;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} kfree($p30);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb11;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p14, $i15 := $p9, 0;
    goto $bb4;

  $bb4:
    call $i16, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $p14, $i15, $i25 := i2o_systab_build_loop_$bb4($i16, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $p14, $i15, $i25);
    goto $bb4_last;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    call {:si_unique_call 502} {:cexpr "num_controllers"} boogie_si_record_i32($i16);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 1976)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref($sub.ref(0, 56), 1976));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p14, $mul.ref(0, 1976)), $mul.ref(56, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, $p2i.ref.i64(i2o_controllers));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i25 := $i16;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i13 := $i25;
    goto $bb3;

  $bb6:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p14, $i15 := $p21, $i16;
    goto $bb6_dummy;

  $bb29_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2319;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2261;
}



const i2o_iop_online: ref;

axiom i2o_iop_online == $sub.ref(0, 428790);

procedure i2o_iop_online($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation i2o_iop_online($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i1 := i2o_iop_systab_set($p0);
    call {:si_unique_call 518} {:cexpr "rc"} boogie_si_record_i32($i1);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i4 := i2o_iop_enable($p0);
    call {:si_unique_call 520} {:cexpr "rc"} boogie_si_record_i32($i4);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const i2o_exec_lct_get: ref;

axiom i2o_exec_lct_get == $sub.ref(0, 429822);

procedure i2o_exec_lct_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.22, assertsPassed, $M.25;



implementation i2o_exec_lct_get($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $i24: i32;
  var $p26: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i36: i32;
  var $i9: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i32;
  var $i59: i32;
  var $p61: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i32;
  var $i90: i32;
  var $p92: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i32;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $i40: i32;
  var $i101: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $p1 := i2o_msg_get_wait($p0, 5);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i3 := IS_ERR($p2);
    call {:si_unique_call 523} {:cexpr "tmp___0"} boogie_si_record_i64($i3);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 524385);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $sub.i32(0, 1577054208));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $sub.i32(0, 1));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(1, 4));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(160, 1)), $mul.ref(16, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, $sub.i32(0, 805306368));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(2, 4));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i24);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(160, 1)), $mul.ref(8, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(3, 4));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i30);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i33 := i2o_msg_post_wait($p0, $p1, 360);
    call {:si_unique_call 527} {:cexpr "rc"} boogie_si_record_i32($i33);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i35 := $i33;
    assume {:branchcond $i34} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i37 := i2o_device_parse_lct($p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 529} {:cexpr "rc"} boogie_si_record_i32($i37);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, $sub.i32(0, 11));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i39 := $i37;
    assume {:branchcond $i38} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $p41 := i2o_msg_get_wait($p0, 5);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i43 := IS_ERR($p42);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p5 := $p41;
    assume {:branchcond $i44} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p41, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, 524385);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p41, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $sub.i32(0, 1577054208));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $sub.i32(0, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(1, 4));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(160, 1)), $mul.ref(16, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i64.i32($i57);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, $sub.i32(0, 805306368));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(2, 4));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i59);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(160, 1)), $mul.ref(8, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p63);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i32($i64);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(3, 4));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i65);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i68 := i2o_msg_post_wait($p0, $p41, 360);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 0);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i35 := $i68;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i70 := i2o_device_parse_lct($p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, $sub.i32(0, 11));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i39 := $i70;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $p72 := i2o_msg_get_wait($p0, 5);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i74 := IS_ERR($p73);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p5 := $p72;
    assume {:branchcond $i75} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p72, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, 524385);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p72, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $sub.i32(0, 1577054208));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p72, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $sub.i32(0, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p72, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(1, 4));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, 0);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(160, 1)), $mul.ref(16, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.0, $p87);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i64.i32($i88);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i90 := $or.i32($i89, $sub.i32(0, 805306368));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p72, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(2, 4));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i90);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(160, 1)), $mul.ref(8, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.0, $p94);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i64.i32($i95);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p72, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(3, 4));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, $i96);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i99 := i2o_msg_post_wait($p0, $p72, 360);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i99, 0);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i35 := $i99;
    assume {:branchcond $i100} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $i40 := i2o_device_parse_lct($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i40, $sub.i32(0, 11));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i39 := $i40;
    assume {:branchcond $i101} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i36 := $i40;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i9 := $i36;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i101 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i36 := $i39;
    goto $bb11;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb11;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i7 := PTR_ERR($p6);
    call {:si_unique_call 525} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb6;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb14;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb9;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb4;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb14;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb9;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb4;
}



const i2o_driver_notify_controller_add_all: ref;

axiom i2o_driver_notify_controller_add_all == $sub.ref(0, 430854);

procedure i2o_driver_notify_controller_add_all($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_driver_notify_controller_add_all($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i2 := $ult.i32(0, $i1);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb4;

  $bb4:
    call $p4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i3 := i2o_driver_notify_controller_add_all_loop_$bb4($p0, $p4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i3);
    goto $bb4_last;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p4 := $M.9;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i3);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 8));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.10, $p6);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i3, 1);
    call {:si_unique_call 539} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i11 := $M.8;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32($i10, $i11);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i10;
    goto $bb9_dummy;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} i2o_driver_notify_controller_add($p7, $p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2573;
}



const i2o_driver_notify_controller_add: ref;

axiom i2o_driver_notify_controller_add == $sub.ref(0, 431886);

procedure i2o_driver_notify_controller_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_driver_notify_controller_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.21, $p2);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.21, $p6);
    call {:si_unique_call 540} devirtbounce.8($p7, $p1);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const i2o_device_parse_lct: ref;

axiom i2o_device_parse_lct == $sub.ref(0, 432918);

procedure i2o_device_parse_lct($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_device_parse_lct($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $i26: i16;
  var $i27: i16;
  var $i28: i16;
  var $i29: i16;
  var $i30: i16;
  var $i31: i16;
  var $i32: i32;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i16;
  var $p37: ref;
  var $i38: i16;
  var $i39: i16;
  var $i40: i16;
  var $i41: i16;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i16;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i24;
  var $i61: i24;
  var $i62: i24;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i76: i32;
  var $i77: i1;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i16;
  var $p89: ref;
  var $i90: i32;
  var $i91: i16;
  var $i92: i32;
  var $i93: i32;
  var $i94: i16;
  var $p95: ref;
  var $i96: i16;
  var $i97: i16;
  var $i98: i16;
  var $i99: i16;
  var $i100: i64;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $i104: i64;
  var $p105: ref;
  var $i106: i32;
  var $p107: ref;
  var $i108: i64;
  var $p109: ref;
  var $i110: i32;
  var $i111: i16;
  var $i112: i32;
  var $i113: i32;
  var $i114: i16;
  var $p115: ref;
  var $i116: i16;
  var $i117: i16;
  var $i118: i16;
  var $i119: i16;
  var $i120: i32;
  var $i121: i8;
  var $i122: i32;
  var $i123: i32;
  var $i124: i8;
  var $p125: ref;
  var $i126: i16;
  var $i127: i16;
  var $i128: i16;
  var $i129: i16;
  var $i130: i16;
  var $i131: i16;
  var $i132: i32;
  var $i133: i16;
  var $p134: ref;
  var $i135: i64;
  var $p136: ref;
  var $i137: i32;
  var $p138: ref;
  var $i139: i64;
  var $p140: ref;
  var $i141: i32;
  var $i142: i16;
  var $i143: i32;
  var $i144: i32;
  var $i145: i16;
  var $p146: ref;
  var $i147: i16;
  var $i148: i16;
  var $i149: i16;
  var $i150: i16;
  var $i151: i32;
  var $i152: i16;
  var $i153: i32;
  var $i154: i32;
  var $i155: i16;
  var $p156: ref;
  var $i157: i16;
  var $i158: i16;
  var $i159: i16;
  var $i160: i16;
  var $i161: i32;
  var $i162: i8;
  var $p163: ref;
  var $i164: i1;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i64;
  var $p172: ref;
  var $i173: i64;
  var $p174: ref;
  var $i175: i32;
  var $p176: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i64;
  var $p189: ref;
  var $i190: i64;
  var $i191: i1;
  var $p194: ref;
  var $i195: i16;
  var $i196: i16;
  var $i197: i32;
  var $p199: ref;
  var $i200: i16;
  var $i201: i16;
  var $i202: i32;
  var $i203: i1;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $i211: i64;
  var $i212: i1;
  var $p192: ref;
  var $p193: ref;
  var $i204: i32;
  var $i213: i1;
  var $i215: i32;
  var $i216: i32;
  var $i217: i16;
  var $i218: i32;
  var $i219: i32;
  var $i220: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i16;
  var $i221: i32;
  var $i78: i32;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $i233: i64;
  var $p234: ref;
  var $i235: i64;
  var $i236: i1;
  var $i239: i1;
  var $i241: i64;
  var $p244: ref;
  var $i245: i16;
  var $i246: i16;
  var $i247: i32;
  var $p249: ref;
  var $i250: i16;
  var $i251: i16;
  var $i252: i32;
  var $i253: i1;
  var $i255: i32;
  var $i256: i1;
  var $i240: i32;
  var $i254: i32;
  var $i257: i1;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $i264: i64;
  var $i265: i1;
  var $p237: ref;
  var $p238: ref;
  var $p266: ref;
  var $i22: i32;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(160, 1)), $mul.ref(0, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(184, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} ldv_mutex_lock_34($p6);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(152, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} kfree($p9);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p5, $mul.ref(1, 4));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p5);
    call {:si_unique_call 544} {:cexpr "buf"} boogie_si_record_i32($i11);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    call {:si_unique_call 545} {:cexpr "table_size"} boogie_si_record_i16($i12);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i14 := $mul.i32($i13, 4);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $p16 := kmalloc($i15, 208);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(152, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p16);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p17);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i23 := $lshr.i32($i11, 28);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p17, $mul.ref(0, 52)), $mul.ref(2, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i16($i24);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $p25);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i28 := $and.i16($i26, 15);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i29 := $shl.i16($i28, 12);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i30 := $and.i16($i27, 4095);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i31 := $or.i16($i30, $i29);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i31);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i32 := $lshr.i32($i11, 16);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 4095);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p17, $mul.ref(0, 52)), $mul.ref(2, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i39 := $and.i16($i36, 4095);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i40 := $and.i16($i38, $sub.i16(0, 4096));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i41 := $or.i16($i40, $i39);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, $i41);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p17, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p42, $i12);
    $i43 := $add.i64(1, 1);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p5, $mul.ref($i43, 4));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p10);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p17, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    $i47 := $add.i64($i43, 1);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p5, $mul.ref($i47, 4));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p44);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p17, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i49);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i12);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 65533);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    call {:si_unique_call 548} {:cexpr "table_size"} boogie_si_record_i16($i53);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p54, .str.26);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p55, .str.38);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p56, .str.28);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p57, .str.39);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i60 := $load.i24($M.5, $p59);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i61 := $and.i24($i60, $sub.i24(0, 262144));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i62 := $or.i24($i61, 426);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p59, $i62);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p63, 0);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.6, $p64);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i64($i65);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i66, 1);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 550} {:cexpr "tmp___5"} boogie_si_record_i64($i68);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i53);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i78 := 0;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.0, $p223);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p225 := $bitcast.ref.ref($p224);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($p225, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p225, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p230 := $bitcast.ref.ref($p229);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($p230, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p225, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i233 := $p2i.ref.i64($p232);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i235 := $p2i.ref.i64($p234);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i236 := $ne.i64($i233, $i235);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i236 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(184, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} ldv_mutex_unlock_36($p266);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i236 == 1;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p237, $p238 := $p226, $p231;
    goto $bb37;

  $bb37:
    call $i239, $i241, $p244, $i245, $i246, $i247, $p249, $i250, $i251, $i252, $i253, $i255, $i256, $i240, $i254, $i257, $p259, $p260, $p261, $p262, $p263, $i264, $i265, $p237, $p238 := i2o_device_parse_lct_loop_$bb37($p17, $i78, $i235, $i239, $i241, $p244, $i245, $i246, $i247, $p249, $i250, $i251, $i252, $i253, $i255, $i256, $i240, $i254, $i257, $p259, $p260, $p261, $p262, $p263, $i264, $i265, $p237, $p238);
    goto $bb37_last;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i239 := $slt.i32(0, $i78);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i239 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i254 := 0;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i254, 0);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($add.ref($p238, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p260 := $load.ref($M.0, $p259);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p261 := $bitcast.ref.ref($p260);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($p261, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p238, $mul.ref(0, 1376)), $mul.ref(48, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i264 := $p2i.ref.i64($p263);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i265 := $ne.i64($i264, $i235);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i265 == 1);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb54:
    assume $i265 == 1;
    assume {:verifier.code 0} true;
    $p237, $p238 := $p238, $p262;
    goto $bb54_dummy;

  $bb51:
    assume $i257 == 1;
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} i2o_device_remove($p237);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i239 == 1;
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i240 := 0;
    goto $bb42;

  $bb42:
    call $i241, $p244, $i245, $i246, $i247, $p249, $i250, $i251, $i252, $i253, $i255, $i256, $i240 := i2o_device_parse_lct_loop_$bb42($p17, $i78, $i241, $p244, $i245, $i246, $i247, $p249, $i250, $i251, $i252, $i253, $i255, $i256, $i240, $p237);
    goto $bb42_last;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i241 := $sext.i32.i64($i240);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 52)), $mul.ref(12, 1)), $mul.ref($i241, 40)), $mul.ref(2, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i245 := $load.i16($M.0, $p244);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i246 := $and.i16($i245, 4095);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i247 := $zext.i16.i32($i246);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p237, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i250 := $load.i16($M.0, $p249);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i251 := $and.i16($i250, 4095);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i252 := $zext.i16.i32($i251);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i247, $i252);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i255 := $add.i32($i240, 1);
    call {:si_unique_call 560} {:cexpr "i"} boogie_si_record_i32($i255);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i256 := $slt.i32($i255, $i78);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i256 == 1);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb48:
    assume $i256 == 1;
    assume {:verifier.code 0} true;
    $i240 := $i255;
    goto $bb48_dummy;

  $bb44:
    assume $i253 == 1;
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i254 := 1;
    goto $bb46;

  $bb8:
    assume $i77 == 1;
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p79, $i80, $i81 := $p48, 0, $i53;
    goto $bb11;

  $bb11:
    call $p82, $p83, $i84, $p85, $p86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $i100, $p101, $i102, $p103, $i104, $p105, $i106, $p107, $i108, $p109, $i110, $i111, $i112, $i113, $i114, $p115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $p125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $i135, $p136, $i137, $p138, $i139, $p140, $i141, $i142, $i143, $i144, $i145, $p146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $p156, $i157, $i158, $i159, $i160, $i161, $i162, $p163, $i164, $p165, $p166, $p167, $p168, $p169, $p170, $i171, $p172, $i173, $p174, $i175, $p176, $p178, $p179, $p180, $p181, $p183, $p184, $p185, $p186, $p187, $i188, $p189, $i190, $i191, $p194, $i195, $i196, $i197, $p199, $i200, $i201, $i202, $i203, $p206, $p207, $p208, $p209, $p210, $i211, $i212, $p192, $p193, $i204, $i213, $i215, $i216, $i217, $i218, $i219, $i220, $p79, $i80, $i81, $i221, cmdloc_dummy_var_19, cmdloc_dummy_var_20, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23, cmdloc_dummy_var_24, vslice_dummy_var_113 := i2o_device_parse_lct_loop_$bb11($p0, $p17, $p82, $p83, $i84, $p85, $p86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $i100, $p101, $i102, $p103, $i104, $p105, $i106, $p107, $i108, $p109, $i110, $i111, $i112, $i113, $i114, $p115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $p125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $i135, $p136, $i137, $p138, $i139, $p140, $i141, $i142, $i143, $i144, $i145, $p146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $p156, $i157, $i158, $i159, $i160, $i161, $i162, $p163, $i164, $p165, $p166, $p167, $p168, $p169, $p170, $i171, $p172, $i173, $p174, $i175, $p176, $p178, $p179, $p180, $p181, $p183, $p184, $p185, $p186, $p187, $i188, $p189, $i190, $i191, $p194, $i195, $i196, $i197, $p199, $i200, $i201, $i202, $i203, $p206, $p207, $p208, $p209, $p210, $i211, $i212, $p192, $p193, $i204, $i213, $i215, $i216, $i217, $i218, $i219, $i220, $p79, $i80, $i81, $i221, cmdloc_dummy_var_19, cmdloc_dummy_var_20, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23, cmdloc_dummy_var_24, vslice_dummy_var_113);
    goto $bb11_last;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p17, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i80);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p83, $mul.ref($i84, 40));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p79, $mul.ref(1, 4));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p79);
    call {:si_unique_call 552} {:cexpr "buf"} boogie_si_record_i32($i87);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i16($i87);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p83, $mul.ref($i84, 40)), $mul.ref(0, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, $i88);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i90 := $lshr.i32($i87, 16);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i16($i90);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i92 := $zext.i16.i32($i91);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 4095);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i16($i93);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p83, $mul.ref($i84, 40)), $mul.ref(2, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i96 := $load.i16($M.0, $p95);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i97 := $and.i16($i94, 4095);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i98 := $and.i16($i96, $sub.i16(0, 4096));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i99 := $or.i16($i98, $i97);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p95, $i99);
    $i100 := $add.i64(1, 1);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p79, $mul.ref($i100, 4));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p86);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p83, $mul.ref($i84, 40)), $mul.ref(4, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, $i102);
    $i104 := $add.i64($i100, 1);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p79, $mul.ref($i104, 4));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p101);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p83, $mul.ref($i84, 40)), $mul.ref(8, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p107, $i106);
    $i108 := $add.i64($i104, 1);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p79, $mul.ref($i108, 4));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p105);
    call {:si_unique_call 553} {:cexpr "buf"} boogie_si_record_i32($i110);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i16($i110);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i111);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i113 := $and.i32($i112, 4095);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i16($i113);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p83, $mul.ref($i84, 40)), $mul.ref(12, 1));
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i116 := $load.i16($M.0, $p115);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i117 := $and.i16($i114, 4095);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i118 := $and.i16($i116, $sub.i16(0, 4096));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i119 := $or.i16($i118, $i117);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p115, $i119);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i120 := $lshr.i32($i110, 12);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i32.i8($i120);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i122, 15);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i8($i123);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p83, $mul.ref($i84, 40)), $mul.ref(12, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i16($i124);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i127 := $load.i16($M.0, $p125);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i128 := $and.i16($i126, 15);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i129 := $shl.i16($i128, 12);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i130 := $and.i16($i127, 4095);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i131 := $or.i16($i130, $i129);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p125, $i131);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i132 := $lshr.i32($i110, 16);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i16($i132);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p83, $mul.ref($i84, 40)), $mul.ref(14, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p134, $i133);
    $i135 := $add.i64($i108, 1);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p79, $mul.ref($i135, 4));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p109);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p83, $mul.ref($i84, 40)), $mul.ref(16, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p138, $i137);
    $i139 := $add.i64($i135, 1);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p79, $mul.ref($i139, 4));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p136);
    call {:si_unique_call 554} {:cexpr "buf"} boogie_si_record_i32($i141);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i32.i16($i141);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i32($i142);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i144 := $and.i32($i143, 4095);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i32.i16($i144);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p83, $mul.ref($i84, 40)), $mul.ref(20, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i147 := $load.i16($M.0, $p146);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i148 := $and.i16($i145, 4095);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i149 := $and.i16($i147, $sub.i16(0, 4096));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i150 := $or.i16($i149, $i148);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p146, $i150);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i151 := $lshr.i32($i141, 12);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i32.i16($i151);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i153 := $zext.i16.i32($i152);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i153, 4095);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i32.i16($i154);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p83, $mul.ref($i84, 40)), $mul.ref(22, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i157 := $load.i16($M.0, $p156);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i158 := $and.i16($i155, 4095);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i159 := $and.i16($i157, $sub.i16(0, 4096));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i160 := $or.i16($i159, $i158);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p156, $i160);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i161 := $lshr.i32($i141, 24);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i162 := $trunc.i32.i8($i161);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p83, $mul.ref($i84, 40)), $mul.ref(24, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p163, $i162);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i164 := $ugt.i64(8, 63);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i164 == 1);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p83, $mul.ref($i84, 40)), $mul.ref(25, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p168);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p140);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 556} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p169, $p170, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $i171 := $add.i64($i139, 2);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($p79, $mul.ref($i171, 4));
    $i173 := $add.i64($i171, 1);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p79, $mul.ref($i173, 4));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.0, $p172);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p83, $mul.ref($i84, 40)), $mul.ref(36, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p176, $i175);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p180 := $bitcast.ref.ref($p179);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p180, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p180, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p184);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p185, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p180, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i188 := $p2i.ref.i64($p187);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i190 := $p2i.ref.i64($p189);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i191 := $ne.i64($i188, $i190);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i191 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i204 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i204, 0);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i215 := $zext.i16.i32($i81);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i216 := $add.i32($i215, 65527);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i217 := $trunc.i32.i16($i216);
    call {:si_unique_call 558} {:cexpr "table_size"} boogie_si_record_i16($i217);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i218 := $add.i32($i80, 1);
    call {:si_unique_call 559} {:cexpr "max"} boogie_si_record_i32($i218);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i219 := $zext.i16.i32($i217);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i220 := $ne.i32($i219, 0);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i221 := $i218;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i78 := $i221;
    goto $bb10;

  $bb31:
    assume $i220 == 1;
    assume {:verifier.code 0} true;
    $p79, $i80, $i81 := $p174, $i218, $i217;
    goto $bb31_dummy;

  $bb28:
    assume $i213 == 1;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} vslice_dummy_var_113 := i2o_device_add($p0, $p85);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i191 == 1;
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p192, $p193 := $p181, $p186;
    goto $bb19;

  $bb19:
    call $p194, $i195, $i196, $i197, $p199, $i200, $i201, $i202, $i203, $p206, $p207, $p208, $p209, $p210, $i211, $i212, $p192, $p193 := i2o_device_parse_lct_loop_$bb19($p83, $i84, $i190, $p194, $i195, $i196, $i197, $p199, $i200, $i201, $i202, $i203, $p206, $p207, $p208, $p209, $p210, $i211, $i212, $p192, $p193);
    goto $bb19_last;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p83, $mul.ref($i84, 40)), $mul.ref(2, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i195 := $load.i16($M.0, $p194);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i196 := $and.i16($i195, 4095);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i197 := $zext.i16.i32($i196);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p192, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i200 := $load.i16($M.0, $p199);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i201 := $and.i16($i200, 4095);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i202 := $zext.i16.i32($i201);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i197, $i202);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p193, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($p208, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p193, $mul.ref(0, 1376)), $mul.ref(48, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i211 := $p2i.ref.i64($p210);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i212 := $ne.i64($i211, $i190);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i212 == 1);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb25:
    assume $i212 == 1;
    assume {:verifier.code 0} true;
    $p192, $p193 := $p193, $p209;
    goto $bb25_dummy;

  $bb21:
    assume $i203 == 1;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i204 := 1;
    goto $bb23;

  $bb13:
    assume $i164 == 1;
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p83, $mul.ref($i84, 40)), $mul.ref(25, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p165);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p140);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 555} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p166, $p167, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i69 == 1;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p17, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} vslice_dummy_var_112 := __dynamic_pr_debug.ref.ref.ref.i32.i32($p1, .str.39, $p71, 0, $i74);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(184, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} ldv_mutex_unlock_35($p21);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb48_dummy:
    assume false;
    return;

  $bb42_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2886;

  $bb54_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2880;

  $bb25_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2825;

  $bb31_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2700;
}



const ldv_mutex_lock_34: ref;

axiom ldv_mutex_lock_34 == $sub.ref(0, 433950);

procedure ldv_mutex_lock_34($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_mutex_lock_34($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} ldv_mutex_lock_lct_lock($p0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} mutex_lock($p0);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_35: ref;

axiom ldv_mutex_unlock_35 == $sub.ref(0, 434982);

procedure ldv_mutex_unlock_35($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_mutex_unlock_35($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} ldv_mutex_unlock_lct_lock($p0);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} mutex_unlock($p0);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 436014);

procedure __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 1} true;
    call {:si_unique_call 567} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 568} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 1} true;
    call {:si_unique_call 569} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 570} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const i2o_device_add: ref;

axiom i2o_device_add == $sub.ref(0, 437046);

procedure i2o_device_add($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_device_add($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p19: ref;
  var $i20: i16;
  var $i21: i16;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i16;
  var $i40: i32;
  var $i41: i16;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p49: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p67: ref;
  var $i68: i16;
  var $i69: i16;
  var $i70: i32;
  var $p72: ref;
  var $i73: i16;
  var $i74: i16;
  var $i75: i32;
  var $i76: i1;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $p81: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p65: ref;
  var $p96: ref;
  var $p97: ref;
  var $p99: ref;
  var $i100: i16;
  var $i101: i16;
  var $i102: i32;
  var $i103: i16;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $i107: i64;
  var $i108: i64;
  var $i109: i1;
  var $p111: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $p123: ref;
  var $i124: i64;
  var $i125: i1;
  var $p128: ref;
  var $i129: i16;
  var $i130: i16;
  var $i131: i32;
  var $p133: ref;
  var $i134: i16;
  var $i135: i16;
  var $i136: i32;
  var $i137: i1;
  var $i138: i64;
  var $i139: i64;
  var $i140: i1;
  var $p142: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $i147: i32;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i64;
  var $i155: i1;
  var $p126: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i24;
  var $i163: i24;
  var $i164: i24;
  var $p165: ref;
  var $p166: ref;
  var $i167: i8;
  var $i168: i64;
  var $i169: i64;
  var $i170: i64;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $i181: i64;
  var $p182: ref;
  var $i183: i64;
  var $i184: i1;
  var $p187: ref;
  var $i188: i16;
  var $i189: i16;
  var $i190: i32;
  var $p192: ref;
  var $i193: i16;
  var $i194: i16;
  var $i195: i32;
  var $i196: i1;
  var $p198: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i64;
  var $i206: i1;
  var $p185: ref;
  var $p208: ref;
  var $i87: i32;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $i215: i64;
  var $p216: ref;
  var $i217: i64;
  var $i218: i1;
  var $p221: ref;
  var $i222: i16;
  var $i223: i16;
  var $i224: i32;
  var $p226: ref;
  var $i227: i16;
  var $i228: i16;
  var $i229: i32;
  var $i230: i1;
  var $p232: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $i239: i64;
  var $i240: i1;
  var $p219: ref;
  var $p242: ref;
  var $i54: i32;
  var $p243: ref;
  var $p244: ref;
  var $i31: i32;
  var $p245: ref;
  var $i11: i32;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $p3 := i2o_device_alloc();
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i5 := IS_ERR($p4);
    call {:si_unique_call 574} {:cexpr "tmp___1"} boogie_si_record_i64($i5);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(0, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 578} cmdloc_dummy_var_27 := $memcpy.i8(cmdloc_dummy_var_25, cmdloc_dummy_var_26, $p13, $p14, 40, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_27;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(64, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(16, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i21 := $and.i16($i20, 4095);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} vslice_dummy_var_115 := dev_set_name.ref.ref.i32.i32($p15, .str.98, $i17, $i22);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(40, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p0);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(592, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p25);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(64, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i29 := device_register($p28);
    call {:si_unique_call 581} {:cexpr "rc"} boogie_si_record_i32($i29);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(48, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} list_add_tail($p32, $p33);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(40, 1));
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i39 := $and.i16($i38, 4095);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $p42 := i2o_iop_find_device($p35, $i41);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p58, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i61, $i63);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(40, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(22, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i100 := $load.i16($M.0, $p99);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i101 := $and.i16($i100, 4095);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $p104 := i2o_iop_find_device($p97, $i103);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($p119, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p119, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p121);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p123);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i125 := $ne.i64($i122, $i124);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} i2o_driver_notify_device_add_all($p3);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p156, .str.26);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p157, .str.99);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p158, .str.28);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p159, .str.100);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i162 := $load.i24($M.5, $p161);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i163 := $and.i24($i162, $sub.i24(0, 262144));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i164 := $or.i24($i163, 329);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p161, $i164);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p165, 0);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.6, $p166);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i64($i167);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i169 := $and.i64($i168, 1);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i170 := ldv__builtin_expect($i169, 0);
    call {:si_unique_call 598} {:cexpr "tmp___3"} boogie_si_record_i64($i170);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb64:
    assume $i171 == 1;
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(64, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $p173 := dev_name($p172);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} vslice_dummy_var_116 := __dynamic_pr_debug.ref.ref.ref($p2, .str.100, $p173);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    goto $bb66;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i125 == 1;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p126 := $p120;
    goto $bb49;

  $bb49:
    call $p128, $i129, $i130, $i131, $p133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $p142, $p144, $i145, $i146, $i147, $p149, $p150, $p151, $p152, $p153, $i154, $i155, $p126 := i2o_device_add_loop_$bb49($p3, $i124, $p128, $i129, $i130, $i131, $p133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $p142, $p144, $i145, $i146, $i147, $p149, $p150, $p151, $p152, $p153, $i154, $i155, $p126);
    goto $bb49_last;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p126, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(22, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i129 := $load.i16($M.0, $p128);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i130 := $and.i16($i129, 4095);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i131 := $zext.i16.i32($i130);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i134 := $load.i16($M.0, $p133);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i135 := $and.i16($i134, 4095);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i136 := $zext.i16.i32($i135);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i131, $i136);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p126, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($p151, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p151, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i154 := $p2i.ref.i64($p153);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, $i124);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i155 == 1);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb61:
    assume $i155 == 1;
    assume {:verifier.code 0} true;
    $p126 := $p152;
    goto $bb61_dummy;

  $bb51:
    assume $i137 == 1;
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i138 := $p2i.ref.i64($p126);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p3);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i140 := $ne.i64($i138, $i139);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb53;

  $bb54:
    assume $i140 == 1;
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p126, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i145 := sysfs_create_link($p142, $p144, .str.36);
    call {:si_unique_call 595} {:cexpr "rc"} boogie_si_record_i32($i145);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i147 := $i145;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb56:
    assume $i146 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($p178, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p178, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i181 := $p2i.ref.i64($p180);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i183 := $p2i.ref.i64($p182);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i184 := $ne.i64($i181, $i183);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i184 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} sysfs_remove_link($p208, .str.36);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i87 := $i147;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p211);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($p212, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p212, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i215 := $p2i.ref.i64($p214);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i217 := $p2i.ref.i64($p216);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i218 := $ne.i64($i215, $i217);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i218 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} sysfs_remove_link($p242, .str.37);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i54 := $i87;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(48, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} list_del($p243);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(64, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} device_unregister($p244);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i31 := $i54;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p245 := $bitcast.ref.ref($p3);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} kfree($p245);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i11 := $i31;
    goto $bb3;

  $bb78:
    assume $i218 == 1;
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p219 := $p213;
    goto $bb81;

  $bb81:
    call $p221, $i222, $i223, $i224, $p226, $i227, $i228, $i229, $i230, $p232, $p234, $p235, $p236, $p237, $p238, $i239, $i240, $p219 := i2o_device_add_loop_$bb81($p3, $i217, $p221, $i222, $i223, $i224, $p226, $i227, $i228, $i229, $i230, $p232, $p234, $p235, $p236, $p237, $p238, $i239, $i240, $p219);
    goto $bb81_last;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p219, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i222 := $load.i16($M.0, $p221);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i223 := $and.i16($i222, 4095);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i224 := $zext.i16.i32($i223);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i227 := $load.i16($M.0, $p226);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i228 := $and.i16($i227, 4095);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i229 := $zext.i16.i32($i228);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i224, $i229);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($p219, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.0, $p234);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p236 := $bitcast.ref.ref($p235);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($p236, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p236, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i239 := $p2i.ref.i64($p238);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i240 := $ne.i64($i239, $i217);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i240 == 1);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb86:
    assume $i240 == 1;
    assume {:verifier.code 0} true;
    $p219 := $p237;
    goto $bb86_dummy;

  $bb83:
    assume $i230 == 1;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($p219, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} sysfs_remove_link($p232, .str.37);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb67:
    assume $i184 == 1;
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p185 := $p179;
    goto $bb70;

  $bb70:
    call $p187, $i188, $i189, $i190, $p192, $i193, $i194, $i195, $i196, $p198, $p200, $p201, $p202, $p203, $p204, $i205, $i206, $p185 := i2o_device_add_loop_$bb70($p3, $i183, $p187, $i188, $i189, $i190, $p192, $i193, $i194, $i195, $i196, $p198, $p200, $p201, $p202, $p203, $p204, $i205, $i206, $p185);
    goto $bb70_last;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p185, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(22, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i188 := $load.i16($M.0, $p187);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i189 := $and.i16($i188, 4095);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i190 := $zext.i16.i32($i189);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i193 := $load.i16($M.0, $p192);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i194 := $and.i16($i193, 4095);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i195 := $zext.i16.i32($i194);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i190, $i195);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p185, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.0, $p200);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p201);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($p202, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p202, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i205 := $p2i.ref.i64($p204);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i206 := $ne.i64($i205, $i183);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i206 == 1);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb75:
    assume $i206 == 1;
    assume {:verifier.code 0} true;
    $p185 := $p203;
    goto $bb75_dummy;

  $bb72:
    assume $i196 == 1;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p185, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} sysfs_remove_link($p198, .str.36);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb37:
    assume $i106 == 1;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p104);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p3);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i107, $i108);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb39;

  $bb40:
    assume $i109 == 1;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p104, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $i114 := sysfs_create_link($p111, $p113, .str.36);
    call {:si_unique_call 593} {:cexpr "rc"} boogie_si_record_i32($i114);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i115 == 1;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i87 := $i114;
    goto $bb31;

  $bb19:
    assume $i64 == 1;
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p65 := $p59;
    goto $bb22;

  $bb22:
    call $p67, $i68, $i69, $i70, $p72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $p81, $p83, $i84, $i85, $i86, $p89, $p90, $p91, $p92, $p93, $i94, $i95, $p65 := i2o_device_add_loop_$bb22($p3, $i63, $p67, $i68, $i69, $i70, $p72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $p81, $p83, $i84, $i85, $i86, $p89, $p90, $p91, $p92, $p93, $i94, $i95, $p65);
    goto $bb22_last;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p65, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.0, $p67);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i69 := $and.i16($i68, 4095);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i74 := $and.i16($i73, 4095);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i70, $i75);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p65, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p91, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p91, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p93);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, $i63);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i95 == 1);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb34:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $p65 := $p92;
    goto $bb34_dummy;

  $bb24:
    assume $i76 == 1;
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p65);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p3);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i77, $i78);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb26;

  $bb27:
    assume $i79 == 1;
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p65, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i84 := sysfs_create_link($p81, $p83, .str.37);
    call {:si_unique_call 590} {:cexpr "rc"} boogie_si_record_i32($i84);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i86 := $i84;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb29:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i87 := $i86;
    goto $bb31;

  $bb9:
    assume $i44 == 1;
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p42);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p3);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i45, $i46);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb11;

  $bb12:
    assume $i47 == 1;
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i52 := sysfs_create_link($p49, $p51, .str.37);
    call {:si_unique_call 586} {:cexpr "rc"} boogie_si_record_i32($i52);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume $i53 == 1;
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    goto $bb16;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} vslice_dummy_var_114 := printk.ref(.str.97);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i9 := PTR_ERR($p8);
    call {:si_unique_call 577} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;

  $bb86_dummy:
    assume false;
    return;

  $bb81_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3214;

  $bb75_dummy:
    assume false;
    return;

  $bb70_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3183;

  $bb61_dummy:
    assume false;
    return;

  $bb49_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3107;

  $bb34_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3025;
}



const ldv_mutex_unlock_36: ref;

axiom ldv_mutex_unlock_36 == $sub.ref(0, 438078);

procedure ldv_mutex_unlock_36($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_mutex_unlock_36($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} ldv_mutex_unlock_lct_lock($p0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} mutex_unlock($p0);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_lct_lock: ref;

axiom ldv_mutex_unlock_lct_lock == $sub.ref(0, 439110);

procedure ldv_mutex_unlock_lct_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_mutex_unlock_lct_lock($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i1 := $M.22;
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} ldv_error();
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 608} {:cexpr "ldv_mutex_lct_lock"} boogie_si_record_i32(1);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 440142);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 441174);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 609} __VERIFIER_error();
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const i2o_device_alloc: ref;

axiom i2o_device_alloc == $sub.ref(0, 442206);

procedure i2o_device_alloc() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i2o_device_alloc() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $p1 := kzalloc(1368, 208);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1376)), $mul.ref(48, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} INIT_LIST_HEAD($p8);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 1376)), $mul.ref(1208, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} __mutex_init($p9, .str.101, $p0);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(264, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, i2o_bus_type);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(1128, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, i2o_device_release);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p7 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p5 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;
}



const dev_set_name: ref;

axiom dev_set_name == $sub.ref(0, 443238);

procedure dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 615} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 616} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_set_name.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_name.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 1} true;
    call {:si_unique_call 617} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 618} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const device_register: ref;

axiom device_register == $sub.ref(0, 444270);

procedure device_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 1} true;
    call {:si_unique_call 619} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 620} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 445302);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} __list_add($p0, $p3, $p1);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    return;
}



const i2o_iop_find_device: ref;

axiom i2o_iop_find_device == $sub.ref(0, 446334);

procedure i2o_iop_find_device($p0: ref, $i1: i16) returns ($r: ref);
  free requires assertsPassed;



implementation i2o_iop_find_device($p0: ref, $i1: i16) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $i15: i16;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p12: ref;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} {:cexpr "i2o_iop_find_device:arg:tid"} boogie_si_record_i16($i1);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i8, $i10);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $r := $p21;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p12 := $p6;
    goto $bb4;

  $bb4:
    call $p14, $i15, $i16, $i17, $i18, $i19, $p20, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $p12 := i2o_iop_find_device_loop_$bb4($i1, $i10, $p14, $i15, $i16, $i17, $i18, $i19, $p20, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $p12);
    goto $bb4_last;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i16 := $and.i16($i15, 4095);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i1);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i17, $i18);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p20 := $p12;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p25, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, $i10);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p26;
    goto $bb10_dummy;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p21 := $p20;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3311;
}



const sysfs_create_link: ref;

axiom sysfs_create_link == $sub.ref(0, 447366);

procedure sysfs_create_link($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sysfs_create_link($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 1} true;
    call {:si_unique_call 623} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 624} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const i2o_driver_notify_device_add_all: ref;

axiom i2o_driver_notify_device_add_all == $sub.ref(0, 448398);

procedure i2o_driver_notify_device_add_all($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_driver_notify_device_add_all($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i2 := $ult.i32(0, $i1);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb4;

  $bb4:
    call $p4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i3 := i2o_driver_notify_device_add_all_loop_$bb4($p0, $p4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i3);
    goto $bb4_last;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p4 := $M.9;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i3);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 8));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.10, $p6);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i3, 1);
    call {:si_unique_call 626} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i11 := $M.8;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32($i10, $i11);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i10;
    goto $bb9_dummy;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} i2o_driver_notify_device_add($p7, $p0);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3343;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 449430);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(80, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $p9 := kobject_name($p8);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(80, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 450462);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const i2o_driver_notify_device_add: ref;

axiom i2o_driver_notify_device_add == $sub.ref(0, 451494);

procedure i2o_driver_notify_device_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_driver_notify_device_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(184, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.23, $p2);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(184, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.23, $p6);
    call {:si_unique_call 628} devirtbounce.7($p7, $p1);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 452526);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    return;
}



const i2o_device_release: ref;

axiom i2o_device_release == $sub.ref(0, 453558);

procedure i2o_device_release($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation i2o_device_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p22: ref;
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 64), 1376));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.26);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.102);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.28);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.103);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 182);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 631} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} kfree($p22);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $p20 := dev_name($p0);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} vslice_dummy_var_117 := __dynamic_pr_debug.ref.ref.ref($p1, .str.103, $p20);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_lct_lock: ref;

axiom ldv_mutex_lock_lct_lock == $sub.ref(0, 454590);

procedure ldv_mutex_lock_lct_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_mutex_lock_lct_lock($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i1 := $M.22;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} ldv_error();
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 636} {:cexpr "ldv_mutex_lct_lock"} boogie_si_record_i32(2);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 455622);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    return;
}



const i2o_iop_systab_set: ref;

axiom i2o_iop_systab_set == $sub.ref(0, 456654);

procedure i2o_iop_systab_set($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation i2o_iop_systab_set($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i8;
  var $i51: i8;
  var $i52: i64;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i32;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $i95: i32;
  var $i96: i64;
  var $p97: ref;
  var $i98: i32;
  var $i99: i64;
  var $p100: ref;
  var $i101: i32;
  var $i102: i64;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i106: i8;
  var $i107: i8;
  var $i108: i8;
  var $i109: i64;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i32;
  var $p115: ref;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $i125: i1;
  var $p126: ref;
  var $i127: i64;
  var $i128: i32;
  var $p130: ref;
  var $i131: i64;
  var $i132: i64;
  var $i133: i64;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $p145: ref;
  var $p147: ref;
  var $i148: i64;
  var $i149: i32;
  var $i150: i32;
  var $p152: ref;
  var $i153: i64;
  var $i154: i32;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $p174: ref;
  var $i175: i32;
  var $i176: i64;
  var $i177: i64;
  var $i178: i1;
  var $p179: ref;
  var $p180: ref;
  var $i181: i32;
  var $i129: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32($i9, $i11);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(76, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i69 := $ult.i32($i66, $i68);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $p122 := i2o_msg_get_wait($p0, 5);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i124 := IS_ERR($p123);
    call {:si_unique_call 659} {:cexpr "tmp___6"} boogie_si_record_i64($i124);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i125 := $ne.i64($i124, 0);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p130 := $M.19;
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i131 := $M.20;
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i132 := dma_map_single_attrs($p7, $p130, $i131, 1, $0.ref);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.24 := $i132;
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i133 := $M.24;
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i134 := $eq.i64($i133, 0);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p122, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p136, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, 786529);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p122, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p140, $sub.i32(0, 1560276992));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(16, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i142, 2);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p122, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p145, $i143);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p122, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(1, 4));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p147, 0);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i148 := $M.20;
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i64.i32($i148);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i150 := $or.i32($i149, 1409286144);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p122, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(2, 4));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p152, $i150);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i153 := $M.24;
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i154 := $trunc.i64.i32($i153);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p122, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(3, 4));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, $i154);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i159 := $or.i32($i158, 1409286144);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p122, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(4, 4));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p161, $i159);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(68, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p122, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(5, 4));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p165, $i163);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(76, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p166);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i168 := $or.i32($i167, $sub.i32(0, 738197504));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p122, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(6, 4));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p170, $i168);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p122, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(6, 4));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p174, $i172);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i175 := i2o_msg_post_wait($p0, $p122, 120);
    call {:si_unique_call 665} {:cexpr "rc"} boogie_si_record_i32($i175);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i176 := $M.24;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i177 := $M.20;
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} dma_unmap_single_attrs($p7, $i176, $i177, 1, $0.ref);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i178 := $slt.i32($i175, 0);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i129 := $i175;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $r := $i129;
    return;

  $bb32:
    assume $i178 == 1;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p180 := $bitcast.ref.ref($p179);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i181 := $sub.i32(0, $i175);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} vslice_dummy_var_124 := printk.ref.ref.ref.i32(.str.92, .str.1, $p180, $i181);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i134 == 1;
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} i2o_msg_nop($p0, $p122);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i129 := $sub.i32(0, 12);
    goto $bb27;

  $bb25:
    assume $i125 == 1;
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p122);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i127 := PTR_ERR($p126);
    call {:si_unique_call 661} {:cexpr "tmp___5"} boogie_si_record_i64($i127);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i64.i32($i127);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i129 := $i128;
    goto $bb27;

  $bb13:
    assume $i69 == 1;
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(480, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 1440)), $mul.ref(212, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(480, 1)), $mul.ref(16, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p77, $p75);
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(480, 1)), $mul.ref(24, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p78, 256);
    $p79 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(480, 1)), $mul.ref(0, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p79, 0);
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(480, 1)), $mul.ref(8, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p80, 0);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} vslice_dummy_var_121 := printk.ref.ref.ref(.str.88, .str.1, $p82);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $p86 := pci_find_parent_resource($p85, $p70);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i87, 0);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p86);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i93 == 1;
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i96 := $zext.i32.i64($i95);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i99 := $zext.i32.i64($i98);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i102 := $zext.i32.i64($i101);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i103 := allocate_resource($p86, $p70, $i96, $i99, $i102, 1048576, $0.ref, $0.ref);
    call {:si_unique_call 651} {:cexpr "tmp___4"} boogie_si_record_i32($i103);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i104 := $sge.i32($i103, 0);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i104 == 1;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(472, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i107 := $and.i8($i106, $sub.i8(0, 3));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i108 := $or.i8($i107, 2);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, $i108);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i109 := resource_size($p70);
    call {:si_unique_call 653} {:cexpr "tmp___2"} boogie_si_record_i64($i109);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i64.i32($i109);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(76, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i110);
    $p112 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(480, 1)), $mul.ref(0, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i113 := $load.i64($M.0, $p112);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i64.i32($i113);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(68, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, $i114);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i116 := resource_size($p70);
    call {:si_unique_call 655} {:cexpr "tmp___3"} boogie_si_record_i64($i116);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    $p119 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(480, 1)), $mul.ref(0, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i120 := $load.i64($M.0, $p119);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} vslice_dummy_var_123 := printk.ref.ref.ref.i64.i64(.str.91, .str.1, $p118, $i116, $i120);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb15:
    assume $i88 == 1;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} vslice_dummy_var_122 := printk.ref.ref.ref(.str.89, .str.1, $p90);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(536, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1440)), $mul.ref(212, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(536, 1)), $mul.ref(16, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p18);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(536, 1)), $mul.ref(24, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p21, 512);
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(536, 1)), $mul.ref(0, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, 0);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(536, 1)), $mul.ref(8, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, 0);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} vslice_dummy_var_118 := printk.ref.ref.ref(.str.88, .str.1, $p25);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $p29 := pci_find_parent_resource($p28, $p13);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p29);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i36 == 1;
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i41);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i46 := allocate_resource($p29, $p13, $i39, $i42, $i45, 1048576, $0.ref, $0.ref);
    call {:si_unique_call 641} {:cexpr "tmp___1"} boogie_si_record_i32($i46);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i47 := $sge.i32($i46, 0);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i47 == 1;
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(472, 1));
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i50 := $and.i8($i49, $sub.i8(0, 5));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i51 := $or.i8($i50, 4);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, $i51);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $i52 := resource_size($p13);
    call {:si_unique_call 643} {:cexpr "tmp"} boogie_si_record_i64($i52);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(536, 1)), $mul.ref(0, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i64.i32($i56);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(68, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i59 := resource_size($p13);
    call {:si_unique_call 645} {:cexpr "tmp___0"} boogie_si_record_i64($i59);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(536, 1)), $mul.ref(0, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} vslice_dummy_var_120 := printk.ref.ref.ref.i64.i64(.str.90, .str.1, $p61, $i59, $i63);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i31 == 1;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} vslice_dummy_var_119 := printk.ref.ref.ref(.str.89, .str.1, $p33);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pci_find_parent_resource: ref;

axiom pci_find_parent_resource == $sub.ref(0, 457686);

procedure pci_find_parent_resource($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_find_parent_resource($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $p2 := external_alloc();
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const allocate_resource: ref;

axiom allocate_resource == $sub.ref(0, 458718);

procedure allocate_resource($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i64, $i5: i64, $p6: ref, $p7: ref) returns ($r: i32);
  free requires assertsPassed;



implementation allocate_resource($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i64, $i5: i64, $p6: ref, $p7: ref) returns ($r: i32)
{
  var $i8: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 669} {:cexpr "allocate_resource:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 670} {:cexpr "allocate_resource:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 671} {:cexpr "allocate_resource:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 672} {:cexpr "allocate_resource:arg:arg5"} boogie_si_record_i64($i5);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 673} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 674} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const resource_size: ref;

axiom resource_size == $sub.ref(0, 459750);

procedure resource_size($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation resource_size($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64($i2, $i4);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 1);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 460782);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 676} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $p5 := get_dma_ops($p0);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 680} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 682} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i14 := __phys_addr($i13);
    call {:si_unique_call 685} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($sub.i64(0, 24189255811072), $i17);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 4095);
    call {:si_unique_call 686} $i22 := devirtbounce.9($p16, $p0, $p19, $i21, $i2, $i3, $p4);
    call {:si_unique_call 687} {:cexpr "addr"} boogie_si_record_i64($i22);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p1);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i24 := __phys_addr($i23);
    call {:si_unique_call 689} {:cexpr "tmp___3"} boogie_si_record_i64($i24);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i25 := $lshr.i64($i24, 12);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($sub.i64(0, 24189255811072), $i25);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p1);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 4095);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} debug_dma_map_page($p0, $p27, $i29, $i2, $i3, $i22, 1);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 683} devirtbounce.3(0, .str.93, 19, 12);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 461814);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 692} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 693} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $p5 := get_dma_ops($p0);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 696} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 698} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 700} devirtbounce.10($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 699} devirtbounce.3(0, .str.93, 36, 12);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 462846);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 463878);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 704} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 705} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 706} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    return;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 464910);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 465942);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 708} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 1} true;
    call {:si_unique_call 709} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 710} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 466974);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 712} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 713} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 714} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 715} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    return;
}



const i2o_iop_init_outbound_queue: ref;

axiom i2o_iop_init_outbound_queue == $sub.ref(0, 468006);

procedure i2o_iop_init_outbound_queue($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i2o_iop_init_outbound_queue($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i32;
  var $p39: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i32;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $p62: ref;
  var $i63: i64;
  var $i64: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i65: i32;
  var $i66: i32;
  var $i14: i32;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 716} cmdloc_dummy_var_29 := $memset.i8(cmdloc_dummy_var_28, $p6, 0, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $p7 := i2o_msg_get_wait($p0, 5);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i9 := IS_ERR($p8);
    call {:si_unique_call 719} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 524385);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $sub.i32(0, 1593831424));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.7, $add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(8, 1)));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i21);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 4096);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(1, 4));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 8388736);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(2, 4));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $sub.i32(0, 805306364));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(104, 1)), $mul.ref(8, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i37 := i2o_dma_low($i36);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(3, 4));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i37);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(104, 1)), $mul.ref(8, 1));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $i43 := i2o_dma_high($i42);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(4, 4));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i43);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} i2o_msg_post($p0, $p7);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.7, jiffies);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 3750);
    call {:si_unique_call 725} {:cexpr "timeout"} boogie_si_record_i64($i47);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p3);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i50 := $ule.i32($i49, 1);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(424, 1)), $mul.ref(8, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i64.i32($i63);
    call {:si_unique_call 728} {:cexpr "m"} boogie_si_record_i32($i64);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i65, $i66 := 0, $i64;
    goto $bb16;

  $bb16:
    call $i67, $i68, $i69, $i65, $i66 := i2o_iop_init_outbound_queue_loop_$bb16($p0, $i67, $i68, $i69, $i65, $i66);
    goto $bb16_last;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} i2o_flush_reply($p0, $i66);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} __const_udelay(4295);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, 512);
    call {:si_unique_call 731} {:cexpr "m"} boogie_si_record_i32($i67);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i65, 1);
    call {:si_unique_call 732} {:cexpr "i"} boogie_si_record_i32($i68);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i69 := $sle.i32($i68, 127);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb18:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i65, $i66 := $i68, $i67;
    goto $bb18_dummy;

  $bb5:
    assume $i50 == 1;
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $i51, $i52, $i53, $i58, $i59, $i60, vslice_dummy_var_126 := i2o_iop_init_outbound_queue_loop_$bb8($p3, $i47, $i51, $i52, $i53, $i58, $i59, $i60, vslice_dummy_var_126);
    goto $bb8_last;

  $bb9:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.7, jiffies);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i52 := $sub.i64($i47, $i51);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i53 := $slt.i64($i52, 0);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} vslice_dummy_var_126 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p3);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i60 := $ule.i32($i59, 1);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i60 == 1);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb13_dummy;

  $bb10:
    assume $i53 == 1;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} vslice_dummy_var_125 := printk.ref.ref.ref(.str.81, .str.1, $p55);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 110);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p7);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i12 := PTR_ERR($p11);
    call {:si_unique_call 721} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3825;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const i2o_iop_clear: ref;

axiom i2o_iop_clear == $sub.ref(0, 469038);

procedure i2o_iop_clear($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation i2o_iop_clear($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i8: i32;
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $p1 := i2o_msg_get_wait($p0, 5);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $i3 := IS_ERR($p2);
    call {:si_unique_call 735} {:cexpr "tmp___0"} boogie_si_record_i64($i3);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} i2o_iop_quiesce_all();
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 262145);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $sub.i32(0, 1107292160));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i15 := i2o_msg_post_wait($p0, $p1, 30);
    call {:si_unique_call 740} {:cexpr "rc"} boogie_si_record_i32($i15);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} i2o_iop_enable_all();
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i8 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, $i15);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} vslice_dummy_var_127 := printk.ref.ref.ref.i32(.str.82, .str.1, $p18, $i19);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i6 := PTR_ERR($p5);
    call {:si_unique_call 737} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const i2o_hrt_get: ref;

axiom i2o_hrt_get == $sub.ref(0, 470070);

procedure i2o_hrt_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.25, assertsPassed;



implementation i2o_hrt_get($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i32;
  var $i27: i32;
  var $p29: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i64;
  var $i59: i32;
  var $i60: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i16: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i32;
  var $i83: i32;
  var $p85: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i32;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i16;
  var $i97: i32;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i64;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $p108: ref;
  var $i109: i64;
  var $i110: i32;
  var $i111: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i32;
  var $i130: i32;
  var $p132: ref;
  var $p134: ref;
  var $i135: i64;
  var $i136: i32;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i16;
  var $i144: i32;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i148: i32;
  var $i149: i32;
  var $i150: i64;
  var $p152: ref;
  var $i153: i64;
  var $i154: i1;
  var $p155: ref;
  var $i156: i64;
  var $i157: i32;
  var $i158: i1;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $p8 := i2o_msg_get_wait($p0, 5);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $i10 := IS_ERR($p9);
    call {:si_unique_call 745} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p12 := $p8;
    assume {:branchcond $i11} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 393281);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $sub.i32(0, 1476390912));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1)), $mul.ref(16, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i64.i32($i25);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, $sub.i32(0, 805306368));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i27);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1)), $mul.ref(8, 1));
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(1, 4));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i33);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i37 := i2o_msg_post_wait_mem($p0, $p8, 20, $p36);
    call {:si_unique_call 749} {:cexpr "rc"} boogie_si_record_i32($i37);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i39 := $i37;
    assume {:branchcond $i38} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(2, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i50 := $mul.i32($i46, $i49);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i51 := $shl.i32($i50, 2);
    call {:si_unique_call 751} {:cexpr "size"} boogie_si_record_i32($i51);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i51);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1)), $mul.ref(16, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i56 := $ugt.i64($i52, $i55);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i65 := i2o_parse_hrt($p0);
    call {:si_unique_call 755} {:cexpr "tmp___2"} boogie_si_record_i32($i65);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i16 := $i65;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb12:
    assume $i56 == 1;
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i51);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i59 := i2o_dma_realloc($p7, $p57, $i58);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 753} {:cexpr "tmp___1"} boogie_si_record_i32($i59);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i60 == 1);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $p69 := i2o_msg_get_wait($p0, 5);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i71 := IS_ERR($p70);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p12 := $p69;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p69, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, 393281);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p69, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $sub.i32(0, 1476390912));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1)), $mul.ref(16, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.0, $p80);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i64.i32($i81);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i83 := $or.i32($i82, $sub.i32(0, 805306368));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p69, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i83);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1)), $mul.ref(8, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.0, $p87);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i64.i32($i88);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p69, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(1, 4));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, $i89);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $i93 := i2o_msg_post_wait_mem($p0, $p69, 20, $p92);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i93, 0);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i39 := $i93;
    assume {:branchcond $i94} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p64, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i96 := $load.i16($M.0, $p95);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i96);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p64, $mul.ref(0, 24)), $mul.ref(2, 1));
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i101 := $mul.i32($i97, $i100);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i102 := $shl.i32($i101, 2);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i103 := $zext.i32.i64($i102);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1)), $mul.ref(16, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i106 := $load.i64($M.0, $p105);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i107 := $ugt.i64($i103, $i106);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb14;

  $bb28:
    assume $i107 == 1;
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i109 := $zext.i32.i64($i102);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i110 := i2o_dma_realloc($p7, $p108, $i109);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i111 == 1);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p116 := i2o_msg_get_wait($p0, 5);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i118 := IS_ERR($p117);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p12 := $p116;
    assume {:branchcond $i119} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p116, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p122, 393281);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p116, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p124, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, $sub.i32(0, 1476390912));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1)), $mul.ref(16, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i128 := $load.i64($M.0, $p127);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i64.i32($i128);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i130 := $or.i32($i129, $sub.i32(0, 805306368));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p116, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, $i130);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1)), $mul.ref(8, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.0, $p134);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i64.i32($i135);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p116, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(1, 4));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p138, $i136);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $i140 := i2o_msg_post_wait_mem($p0, $p116, 20, $p139);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i141 := $slt.i32($i140, 0);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i39 := $i140;
    assume {:branchcond $i141} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p115, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i143 := $load.i16($M.0, $p142);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i144 := $zext.i16.i32($i143);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p115, $mul.ref(0, 24)), $mul.ref(2, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.0, $p145);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i148 := $mul.i32($i144, $i147);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i149 := $shl.i32($i148, 2);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i150 := $zext.i32.i64($i149);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1)), $mul.ref(16, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i153 := $load.i64($M.0, $p152);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i154 := $ugt.i64($i150, $i153);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb14;

  $bb41:
    assume $i154 == 1;
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i156 := $zext.i32.i64($i149);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i157 := i2o_dma_realloc($p7, $p155, $i156);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} vslice_dummy_var_129 := printk.ref.ref.ref.i32(.str.84, .str.1, $p67, 3);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 16);
    goto $bb6;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i158 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i141 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, $i39);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} vslice_dummy_var_128 := printk.ref.ref.ref.i32(.str.83, .str.1, $p41, $i42);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i16 := $i39;
    goto $bb6;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i14 := PTR_ERR($p13);
    call {:si_unique_call 747} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb16;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb9;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb4;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb16;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb9;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb4;
}



const i2o_dma_realloc: ref;

axiom i2o_dma_realloc == $sub.ref(0, 471102);

procedure i2o_dma_realloc($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed;



implementation i2o_dma_realloc($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} {:cexpr "i2o_dma_realloc:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} i2o_dma_free($p0, $p1);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $i4 := i2o_dma_alloc($p0, $p1, $i2);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 768} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const i2o_parse_hrt: ref;

axiom i2o_parse_hrt == $sub.ref(0, 472134);

procedure i2o_parse_hrt($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i2o_parse_hrt($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} i2o_dump_hrt($p0);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const i2o_dump_hrt: ref;

axiom i2o_dump_hrt == $sub.ref(0, 473166);

procedure i2o_dump_hrt($p0: ref);
  free requires assertsPassed;



implementation i2o_dump_hrt($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i15: i8;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p29: ref;
  var $i30: i1;
  var $i33: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i53: i32;
  var $i54: i1;
  var $i56: i32;
  var $i57: i1;
  var $i59: i1;
  var $i62: i64;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i64;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i64;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i32;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i90: i64;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i64;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i64;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i32;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i110: i64;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i64;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i64;
  var $p119: ref;
  var $i120: i8;
  var $i121: i32;
  var $i122: i32;
  var $i123: i8;
  var $i124: i32;
  var $i125: i32;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $i130: i64;
  var $p131: ref;
  var $i132: i8;
  var $i133: i32;
  var $i134: i64;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $i138: i64;
  var $p139: ref;
  var $i140: i8;
  var $i141: i32;
  var $i142: i32;
  var $i143: i8;
  var $i144: i32;
  var $i145: i32;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $i150: i64;
  var $p151: ref;
  var $i152: i8;
  var $i153: i32;
  var $i154: i64;
  var $p155: ref;
  var $i156: i8;
  var $i157: i32;
  var $i158: i64;
  var $p159: ref;
  var $i160: i8;
  var $i161: i32;
  var $i162: i8;
  var $i163: i32;
  var $i167: i64;
  var $p168: ref;
  var $i169: i32;
  var $i170: i1;
  var $p31: ref;
  var $i32: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(3, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p7);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p7, $mul.ref(1, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i20 := $shl.i32($i19, 8);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i16, $i20);
    call {:si_unique_call 771} {:cexpr "count"} boogie_si_record_i32($i21);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p7, $mul.ref(2, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    call {:si_unique_call 772} {:cexpr "length"} boogie_si_record_i32($i24);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i27 := $shl.i32($i24, 2);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} vslice_dummy_var_131 := printk.ref.ref.i32.i32(.str.54, $p26, $i21, $i27);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p4, $mul.ref(2, 4));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32(0, $i21);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p31, $i32 := $p29, 0;
    goto $bb8;

  $bb8:
    call $i33, $p35, $p36, $p37, $p38, $i39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i49, $i50, $i51, $i53, $i54, $i56, $i57, $i59, $i62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $i76, $i77, $i78, $p79, $i80, $i81, $i82, $i83, $i84, $i85, $p86, $p87, $i88, $i90, $p91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $p106, $p107, $i108, $i110, $p111, $i112, $i113, $i114, $p115, $i116, $i117, $i118, $p119, $i120, $i121, $i122, $i123, $i124, $i125, $p126, $p127, $i128, $i130, $p131, $i132, $i133, $i134, $p135, $i136, $i137, $i138, $p139, $i140, $i141, $i142, $i143, $i144, $i145, $p146, $p147, $i148, $i150, $p151, $i152, $i153, $i154, $p155, $i156, $i157, $i158, $p159, $i160, $i161, $i162, $i163, $i167, $p168, $i169, $i170, $p31, $i32, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145 := i2o_dump_hrt_loop_$bb8($i21, $i24, $i33, $p35, $p36, $p37, $p38, $i39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i49, $i50, $i51, $i53, $i54, $i56, $i57, $i59, $i62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $i76, $i77, $i78, $p79, $i80, $i81, $i82, $i83, $i84, $i85, $p86, $p87, $i88, $i90, $p91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $p106, $p107, $i108, $i110, $p111, $i112, $i113, $i114, $p115, $i116, $i117, $i118, $p119, $i120, $i121, $i122, $i123, $i124, $i125, $p126, $p127, $i128, $i130, $p131, $i132, $i133, $i134, $p135, $i136, $i137, $i138, $p139, $i140, $i141, $i142, $i143, $i144, $i145, $p146, $p147, $i148, $i150, $p151, $i152, $i153, $i154, $p155, $i156, $i157, $i158, $p159, $i160, $i161, $i162, $i163, $i167, $p168, $i169, $i170, $p31, $i32, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145);
    goto $bb8_last;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p31);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} vslice_dummy_var_132 := printk.ref.i32(.str.55, $i33);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p31);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(1, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p31);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(2, 1));
    $i39 := $add.i64(1, 1);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p35, $mul.ref($i39, 1));
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i43 := $shl.i32($i42, 8);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p36);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i43, $i45);
    call {:si_unique_call 775} {:cexpr "state"} boogie_si_record_i32($i46);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 4095);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} vslice_dummy_var_133 := printk.ref.i32(.str.56, $i47);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i49 := $ashr.i32($i46, 12);
    call {:si_unique_call 777} {:cexpr "state"} boogie_si_record_i32($i49);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 1);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i49, 4);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i59 := $sgt.i32($i49, 9);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_138 := printk.ref(.str.61);
    $i62 := $add.i64(1, 3);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p35, $mul.ref($i62, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i65, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i65, 128);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i65, 128);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} vslice_dummy_var_145 := printk.ref(.str.67);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} vslice_dummy_var_144 := printk.ref(.str.68);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i167 := $sext.i32.i64($i24);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($p31, $mul.ref($i167, 4));
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i169 := $add.i32($i32, 1);
    call {:si_unique_call 789} {:cexpr "i"} boogie_si_record_i32($i169);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i170 := $slt.i32($i169, $i21);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i170 == 1);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb42:
    assume $i170 == 1;
    assume {:verifier.code 0} true;
    $p31, $i32 := $p168, $i169;
    goto $bb42_dummy;

  $bb29:
    assume $i69 == 1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb27:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i65, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb31;

  $bb32:
    assume $i70 == 1;
    $i150 := $add.i64(1, 2);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p35, $mul.ref($i150, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.0, $p151);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i152);
    $i154 := $add.i64(2, 2);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p37, $mul.ref($i154, 1));
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.0, $p155);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    $i158 := $add.i64(2, 1);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p37, $mul.ref($i158, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.0, $p159);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i160);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.0, $p38);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i163 := $zext.i8.i32($i162);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} vslice_dummy_var_140 := printk.ref.i32.i32.i32.i32(.str.66, $i153, $i157, $i161, $i163);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb25:
    assume $i67 == 1;
    $i130 := $add.i64(1, 2);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p35, $mul.ref($i130, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.0, $p131);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    $i134 := $add.i64(2, 3);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($p37, $mul.ref($i134, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.0, $p135);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    $i138 := $add.i64(2, 1);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p37, $mul.ref($i138, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.0, $p139);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i142 := $shl.i32($i141, 8);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.0, $p38);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i143);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i145 := $or.i32($i142, $i144);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p38);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p146, $mul.ref(4, 4));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} vslice_dummy_var_139 := printk.ref.i32.i32.i32.i32(.str.65, $i133, $i137, $i145, $i148);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb23:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i65, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i65, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i72 == 1);
    $i110 := $add.i64(1, 2);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p35, $mul.ref($i110, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p111);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    $i114 := $add.i64(2, 3);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p37, $mul.ref($i114, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    $i118 := $add.i64(2, 1);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p37, $mul.ref($i118, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.0, $p119);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i122 := $shl.i32($i121, 8);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.0, $p38);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i125 := $or.i32($i122, $i124);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p38);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p126, $mul.ref(4, 4));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p127);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} vslice_dummy_var_142 := printk.ref.i32.i32.i32.i32(.str.64, $i113, $i117, $i125, $i128);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb36:
    assume $i72 == 1;
    $i90 := $add.i64(1, 2);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p35, $mul.ref($i90, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.0, $p91);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    $i94 := $add.i64(2, 2);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p37, $mul.ref($i94, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    $i98 := $add.i64(2, 1);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p37, $mul.ref($i98, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i102 := $shl.i32($i101, 8);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p38);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i105 := $or.i32($i102, $i104);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p38);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p106, $mul.ref(4, 4));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} vslice_dummy_var_141 := printk.ref.i32.i32.i32.i32(.str.63, $i93, $i97, $i105, $i108);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb34:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i65, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb31;

  $bb38:
    assume $i73 == 1;
    $i74 := $add.i64(1, 2);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p35, $mul.ref($i74, 1));
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    $i78 := $add.i64(2, 1);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p37, $mul.ref($i78, 1));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i82 := $shl.i32($i81, 8);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p38);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i85 := $or.i32($i82, $i84);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p38);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p86, $mul.ref(4, 4));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} vslice_dummy_var_143 := printk.ref.i32.i32.i32(.str.62, $i77, $i85, $i88);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb19:
    assume $i59 == 1;
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} vslice_dummy_var_137 := printk.ref(.str.60);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb13:
    assume $i54 == 1;
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} vslice_dummy_var_135 := printk.ref(.str.58);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i49, 2);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i57 == 1;
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} vslice_dummy_var_136 := printk.ref(.str.59);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i51 == 1;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} vslice_dummy_var_134 := printk.ref(.str.57);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} vslice_dummy_var_130 := printk.ref.ref(.str.53, $p13);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb42_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4089;
}



const i2o_dma_alloc: ref;

axiom i2o_dma_alloc == $sub.ref(0, 474198);

procedure i2o_dma_alloc($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, assertsPassed;



implementation i2o_dma_alloc($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i10: i32;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} {:cexpr "i2o_dma_alloc:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 152), 2696));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} ldv_mutex_lock_96(mem_lock);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 152), 2696)), $mul.ref(88, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, $sub.i64(0, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $p13 := dma_alloc_attrs($p0, $i2, $p12, 208, $0.ref);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p13);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i11, 0);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} ldv_mutex_unlock_98(mem_lock);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 801} cmdloc_dummy_var_31 := $memset.i8(cmdloc_dummy_var_30, $p24, 0, $i2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i2);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb5;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i16 := pci_set_dma_mask($p4, $sub.i64(0, 1));
    call {:si_unique_call 798} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} vslice_dummy_var_146 := printk.ref(.str.71);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i8 := pci_set_dma_mask($p4, 4294967295);
    call {:si_unique_call 794} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} ldv_mutex_unlock_97(mem_lock);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb5;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_96: ref;

axiom ldv_mutex_lock_96 == $sub.ref(0, 475230);

procedure ldv_mutex_lock_96($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_96($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} ldv_mutex_lock_mem_lock($p0);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} mutex_lock($p0);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_97: ref;

axiom ldv_mutex_unlock_97 == $sub.ref(0, 476262);

procedure ldv_mutex_unlock_97($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_97($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} ldv_mutex_unlock_mem_lock($p0);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} mutex_unlock($p0);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 477294);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} {:cexpr "dma_alloc_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 807} {:cexpr "dma_alloc_attrs:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $p5 := get_dma_ops($p0);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, $sub.i32(0, 8));
    call {:si_unique_call 809} {:cexpr "gfp"} boogie_si_record_i32($i6);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i10 := is_device_dma_capable($p9);
    call {:si_unique_call 811} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i17 := dma_alloc_coherent_gfp_flags($p9, $i6);
    call {:si_unique_call 813} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 814} $p20 := devirtbounce.11($p19, $p9, $i1, $p2, $i17, $p4);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} debug_dma_alloc_coherent($p9, $i1, $i21, $p20);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p12 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p9 := x86_dma_fallback_dev;
    goto $bb3;
}



const ldv_mutex_unlock_98: ref;

axiom ldv_mutex_unlock_98 == $sub.ref(0, 478326);

procedure ldv_mutex_unlock_98($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_98($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} ldv_mutex_unlock_mem_lock($p0);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} mutex_unlock($p0);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_mem_lock: ref;

axiom ldv_mutex_unlock_mem_lock == $sub.ref(0, 479358);

procedure ldv_mutex_unlock_mem_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_mem_lock($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i1 := $M.25;
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} ldv_error();
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 819} {:cexpr "ldv_mutex_mem_lock"} boogie_si_record_i32(1);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const is_device_dma_capable: ref;

axiom is_device_dma_capable == $sub.ref(0, 480390);

procedure is_device_dma_capable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_dma_capable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(904, 1));
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i5);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(904, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;
}



const dma_alloc_coherent_gfp_flags: ref;

axiom dma_alloc_coherent_gfp_flags == $sub.ref(0, 481422);

procedure dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} {:cexpr "dma_alloc_coherent_gfp_flags:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i2 := dma_alloc_coherent_mask($p0, $i1);
    call {:si_unique_call 822} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i2, 16777215);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i2, 4294967295);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i5, 1);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, 4);
    call {:si_unique_call 824} {:cexpr "gfp"} boogie_si_record_i32($i9);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, 1);
    call {:si_unique_call 823} {:cexpr "gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const debug_dma_alloc_coherent: ref;

axiom debug_dma_alloc_coherent == $sub.ref(0, 482454);

procedure debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);
  free requires assertsPassed;



implementation debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} {:cexpr "debug_dma_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 826} {:cexpr "debug_dma_alloc_coherent:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_coherent_mask: ref;

axiom dma_alloc_coherent_mask == $sub.ref(0, 483486);

procedure dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} {:cexpr "dma_alloc_coherent_mask:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(912, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 828} {:cexpr "dma_mask"} boogie_si_record_i64($i3);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 1);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 16777215 else 4294967295);
    call {:si_unique_call 829} {:cexpr "dma_mask"} boogie_si_record_i64($i7);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const ldv_mutex_lock_mem_lock: ref;

axiom ldv_mutex_lock_mem_lock == $sub.ref(0, 484518);

procedure ldv_mutex_lock_mem_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_mem_lock($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i1 := $M.25;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} ldv_error();
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 831} {:cexpr "ldv_mutex_mem_lock"} boogie_si_record_i32(2);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 485550);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    return;
}



const i2o_pci_interrupt: ref;

axiom i2o_pci_interrupt == $sub.ref(0, 486582);

procedure i2o_pci_interrupt($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.34, $M.35, $M.36;



implementation i2o_pci_interrupt($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i9: i32;
  var $i31: i32;
  var $i8: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} {:cexpr "i2o_pci_interrupt:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1976)), $mul.ref(88, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $i5 := readl($p4);
    call {:si_unique_call 835} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 8);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i23 := $i8;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $i13, $p14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $p27, $i28, $i29, $i30, $i9, $i31 := i2o_pci_interrupt_loop_$bb4($p2, $p3, $p10, $p11, $i12, $i13, $p14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $p27, $i28, $i29, $i30, $i9, $i31);
    goto $bb4_last;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 1976)), $mul.ref(80, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $i12 := readl($p11);
    call {:si_unique_call 837} {:cexpr "m"} boogie_si_record_i32($i12);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, $sub.i32(0, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i12;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $i25 := i2o_driver_dispatch($p2, $i24);
    call {:si_unique_call 843} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p3);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $i28 := readl($p27);
    call {:si_unique_call 846} {:cexpr "tmp___1"} boogie_si_record_i32($i28);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 8);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i31 := 1;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i8 := $i31;
    goto $bb3;

  $bb16:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb16_dummy;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} i2o_flush_reply($p2, $i24);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 1976)), $mul.ref(80, 1));
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i16 := readl($p15);
    call {:si_unique_call 839} {:cexpr "m"} boogie_si_record_i32($i16);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, $sub.i32(0, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 841} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i22 := $i9;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i24 := $i16;
    goto $bb12;

  $bb8:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb10;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4397;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 487614);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 848} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 850} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 488646);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 851} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 852} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 1} true;
    call {:si_unique_call 853} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 854} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const i2o_driver_dispatch: ref;

axiom i2o_driver_dispatch == $sub.ref(0, 489678);

procedure i2o_driver_dispatch($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.34, $M.35, $M.36;



implementation i2o_driver_dispatch($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i16;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i16;
  var $i58: i32;
  var $i59: i32;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $p105: ref;
  var $i106: i16;
  var $i107: i16;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p102: ref;
  var $p103: ref;
  var $p121: ref;
  var $p122: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p128: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i64;
  var $i142: i1;
  var $i143: i32;
  var $i144: i64;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $i149: i32;
  var $i18: i32;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 857} {:cexpr "i2o_driver_dispatch:arg:m"} boogie_si_record_i32($i1);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $p4 := i2o_msg_out_to_virt($p0, $i1);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 859} {:cexpr "context"} boogie_si_record_i32($i8);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i9 := $M.8;
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i10 := $uge.i32($i8, $i9);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 861} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $p19 := spinlock_check(i2o_drivers_lock);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i20 := _raw_spin_lock_irqsave($p19);
    call {:si_unique_call 865} {:cexpr "flags"} boogie_si_record_i64($i20);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p21 := $M.9;
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i8);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p21, $mul.ref($i22, 8));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.10, $p23);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} spin_unlock_irqrestore(i2o_drivers_lock, $i20);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 868} {:cexpr "tmp___2"} boogie_si_record_i64($i29);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i38 := $lshr.i32($i37, 24);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 19);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p24, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.28, $p139);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p140);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i142 := $eq.i64($i141, 0);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i143 := $zext.i1.i32($i142);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i144 := $sext.i32.i64($i143);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i145 := ldv__builtin_expect($i144, 0);
    call {:si_unique_call 881} {:cexpr "tmp___5"} boogie_si_record_i64($i145);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p24, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.28, $p147);
    call {:si_unique_call 882} $i149 := devirtbounce.12($p148, $p0, $i1, $p4);
    call {:si_unique_call 883} {:cexpr "tmp___6"} boogie_si_record_i32($i149);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i18 := $i149;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb29:
    assume $i146 == 1;
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 5);
    goto $bb3;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 4095);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    call {:si_unique_call 870} {:cexpr "tid"} boogie_si_record_i16($i47);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p24, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.26, $p48);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i56 := $lshr.i32($i55, 16);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32($i58, 5);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    call {:si_unique_call 871} {:cexpr "size"} boogie_si_record_i16($i60);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i62 := $mul.i32($i61, 4);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 104);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p65 := kzalloc($i64, 32);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i67, 0);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p66, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, $i60);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p66, $mul.ref(0, 104)), $mul.ref(92, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i73);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p66, $mul.ref(0, 104)), $mul.ref(96, 1));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i60);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i80 := $mul.i32($i79, 4);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i80);
    call {:si_unique_call 873} {:cexpr "__len"} boogie_si_record_i64($i81);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p66, $mul.ref(0, 104)), $mul.ref(100, 1));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 20)), $mul.ref(20, 1));
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p85, $mul.ref(1, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 874} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p83, $p86, $i81, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p90, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p95, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p90, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(40, 1));
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i98, $i100);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p66, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} __init_work($p121, 0);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p122, 4195328);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p66, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p3);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 876} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p125, $p126, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p66, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} lockdep_init_map($p128, .str.22, $p2, 0);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p66, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} INIT_LIST_HEAD($p130);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p24, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.26, $p131);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p66, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p134, $p132);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p24, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.27, $p135);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p66, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} vslice_dummy_var_149 := queue_work($p136, $p137);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb3;

  $bb16:
    assume $i101 == 1;
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p102, $p103 := $p96, $p91;
    goto $bb19;

  $bb19:
    call $p105, $i106, $i107, $i108, $i109, $i110, $p111, $p114, $p115, $p116, $p117, $p118, $i119, $i120, $p102, $p103 := i2o_driver_dispatch_loop_$bb19($i47, $i100, $p105, $i106, $i107, $i108, $i109, $i110, $p111, $p114, $p115, $p116, $p117, $p118, $i119, $i120, $p102, $p103);
    goto $bb19_last;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p103, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i106 := $load.i16($M.0, $p105);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i107 := $and.i16($i106, 4095);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i107);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i47);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i108, $i109);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p111 := $p103;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p102, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p116, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p102, $mul.ref(0, 1376)), $mul.ref(48, 1));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i120 := $ne.i64($i119, $i100);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i120 == 1);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb25:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    $p102, $p103 := $p117, $p102;
    goto $bb25_dummy;

  $bb21:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p66, $mul.ref(0, 104)), $mul.ref(80, 1));
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p112, $p111);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i68 == 1;
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb3;

  $bb10:
    assume $i51 == 1;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 5);
    goto $bb3;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} vslice_dummy_var_148 := printk.ref.ref.ref.i32(.str.21, .str.1, $p32, $i8);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 5);
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} vslice_dummy_var_147 := printk.ref.ref.ref.i32(.str.21, .str.1, $p16, $i8);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 5);
    goto $bb3;

  $bb25_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4557;
}



const i2o_msg_out_to_virt: ref;

axiom i2o_msg_out_to_virt == $sub.ref(0, 490710);

procedure i2o_msg_out_to_virt($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation i2o_msg_out_to_virt($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i64;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} {:cexpr "i2o_msg_out_to_virt:arg:m"} boogie_si_record_i32($i1);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(424, 1)), $mul.ref(8, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i6 := $ult.i64($i2, $i5);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 886} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i1);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(424, 1)), $mul.ref(8, 1));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(424, 1)), $mul.ref(16, 1));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i14, $i17);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i19 := $uge.i64($i11, $i18);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 888} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(424, 1)), $mul.ref(0, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i1);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(424, 1)), $mul.ref(8, 1));
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i31 := $sub.i64($i27, $i30);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p26, $mul.ref($i31, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $r := $p33;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 889} devirtbounce.3(0, .str.95, 802, 12);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call i2o_msg_out_to_virt_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 491742);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 492774);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 493806);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 1} true;
    call {:si_unique_call 892} $i2 := __VERIFIER_nondet_bool();
    call {:si_unique_call 893} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i2);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_request_regions: ref;

axiom pci_request_regions == $sub.ref(0, 494838);

procedure pci_request_regions($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_regions($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 894} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 895} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 495870);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 897} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $p2 := external_alloc();
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 496902);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $i1 := __arch_swab32($i0);
    call {:si_unique_call 901} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 497934);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} vslice_dummy_var_150 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 498966);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 1} true;
    call {:si_unique_call 903} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 904} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 499998);

procedure __arch_swab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_swab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 906} $i1 := devirtbounce.13(0, $i0);
    call {:si_unique_call 907} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_bus_write_config_word: ref;

axiom pci_bus_write_config_word == $sub.ref(0, 501030);

procedure pci_bus_write_config_word($p0: ref, $i1: i32, $i2: i32, $i3: i16) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_write_config_word($p0: ref, $i1: i32, $i2: i32, $i3: i16) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 908} {:cexpr "pci_bus_write_config_word:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 909} {:cexpr "pci_bus_write_config_word:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 910} {:cexpr "pci_bus_write_config_word:arg:arg3"} boogie_si_record_i16($i3);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 1} true;
    call {:si_unique_call 911} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 912} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 502062);

procedure snprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);



const i2o_pool_alloc: ref;

axiom i2o_pool_alloc == $sub.ref(0, 503094);

procedure i2o_pool_alloc($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i2o_pool_alloc($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32)
{
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i31: i32;
  var vslice_dummy_var_151: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} {:cexpr "i2o_pool_alloc:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 914} {:cexpr "i2o_pool_alloc:arg:min_nr"} boogie_si_record_i32($i3);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i4 := strlen($p1);
    call {:si_unique_call 916} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 1);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $p6 := kmalloc($i5, 208);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p6);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} vslice_dummy_var_151 := strcpy($p13, $p1);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $p17 := kmem_cache_create($p16, $i2, 0, 8192, $0.ref);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p17);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $p25 := mempool_create_slab_pool($i3, $p24);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p25);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb9:
    assume $i30 == 1;
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} kmem_cache_destroy($p33);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} kfree($p35);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb13;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const device_initialize: ref;

axiom device_initialize == $sub.ref(0, 504126);

procedure device_initialize($p0: ref);
  free requires assertsPassed;



implementation device_initialize($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    return;
}



const i2o_iop_release: ref;

axiom i2o_iop_release == $sub.ref(0, 505158);

procedure i2o_iop_release($p0: ref);
  free requires assertsPassed;



implementation i2o_iop_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 592), 1976));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} i2o_iop_free($p2);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 506190);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 507222);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const kmem_cache_create: ref;

axiom kmem_cache_create == $sub.ref(0, 508254);

procedure kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} {:cexpr "kmem_cache_create:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 926} {:cexpr "kmem_cache_create:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 927} {:cexpr "kmem_cache_create:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $p5 := external_alloc();
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const mempool_create_slab_pool: ref;

axiom mempool_create_slab_pool == $sub.ref(0, 509286);

procedure mempool_create_slab_pool($i0: i32, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mempool_create_slab_pool($i0: i32, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} {:cexpr "mempool_create_slab_pool:arg:min_nr"} boogie_si_record_i32($i0);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $p3 := mempool_create($i0, mempool_alloc_slab, mempool_free_slab, $p2);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const mempool_alloc_slab: ref;

axiom mempool_alloc_slab == $sub.ref(0, 510318);

procedure mempool_alloc_slab($i0: i32, $p1: ref) returns ($r: ref);



const mempool_free_slab: ref;

axiom mempool_free_slab == $sub.ref(0, 511350);

procedure mempool_free_slab($p0: ref, $p1: ref);



const mempool_create: ref;

axiom mempool_create == $sub.ref(0, 512382);

procedure mempool_create($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mempool_create($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} {:cexpr "mempool_create:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $p4 := external_alloc();
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 513414);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 933} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 1} true;
    call {:si_unique_call 934} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 935} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const i2o_exec_show_vendor_id: ref;

axiom i2o_exec_show_vendor_id == $sub.ref(0, 514446);

procedure i2o_exec_show_vendor_id($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const i2o_parm_field_get: ref;

axiom i2o_parm_field_get == $sub.ref(0, 515478);

procedure i2o_parm_field_get($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);



const i2o_parm_issue: ref;

axiom i2o_parm_issue == $sub.ref(0, 516510);

procedure i2o_parm_issue($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);



const i2o_exec_show_product_id: ref;

axiom i2o_exec_show_product_id == $sub.ref(0, 517542);

procedure i2o_exec_show_product_id($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const device_create_file: ref;

axiom device_create_file == $sub.ref(0, 518574);

procedure device_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 1} true;
    call {:si_unique_call 936} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 937} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const i2o_report_status: ref;

axiom i2o_report_status == $sub.ref(0, 519606);

procedure i2o_report_status($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.34, $M.35, $M.36, $CurrAddr;



implementation i2o_report_status($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i16;
  var $i45: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(1, 4));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i5, 24);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    call {:si_unique_call 938} {:cexpr "cmd"} boogie_si_record_i8($i7);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p3, $mul.ref(4, 4));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i10 := $lshr.i32($i9, 24);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    call {:si_unique_call 939} {:cexpr "req_status"} boogie_si_record_i8($i11);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p3, $mul.ref(4, 4));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    call {:si_unique_call 940} {:cexpr "detailed_status"} boogie_si_record_i16($i14);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i7);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 19);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} vslice_dummy_var_152 := printk.ref.ref.ref(.str.41, $p0, $p1);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i7);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i19 := $ule.i32($i18, 30);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i7);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i22, 159);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i7);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} vslice_dummy_var_153 := printk.ref.i32(.str.42, $i28);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p3);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 8192);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i11);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} i2o_report_common_status($i36);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i7);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i38 := $ule.i32($i37, 30);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i38 == 1);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i7);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i40 := $ugt.i32($i39, 159);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i14);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} vslice_dummy_var_154 := printk.ref.i32(.str.43, $i45);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i40 == 1;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i7);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i42 := $ule.i32($i41, 239);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb22;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i14);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} i2o_report_common_dsc($i44);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb18;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i11);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} i2o_report_fail_status($i34, $p3);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i7);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i25 := $ule.i32($i24, 239);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb10;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i7);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} i2o_report_exec_cmd($i27);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i7);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} i2o_report_util_cmd($i21);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i2o_msg_post_wait_complete: ref;

axiom i2o_msg_post_wait_complete == $sub.ref(0, 520638);

procedure i2o_msg_post_wait_complete($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation i2o_msg_post_wait_complete($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i24;
  var $i46: i24;
  var $i47: i24;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p16: ref;
  var $p17: ref;
  var $p70: ref;
  var $p71: ref;
  var $i61: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 950} {:cexpr "i2o_msg_post_wait_complete:arg:m"} boogie_si_record_i32($i1);
    call {:si_unique_call 951} {:cexpr "i2o_msg_post_wait_complete:arg:context"} boogie_si_record_i32($i3);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, i2o_exec_wait_list);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 56), 144));
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p6, $mul.ref($sub.ref(0, 56), 144)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref($sub.ref(0, 56), 144));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 56), 144)), $mul.ref(56, 1));
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, $p2i.ref.i64(i2o_exec_wait_list));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} vslice_dummy_var_156 := printk.ref.ref.ref.i32(.str.257, .str.70, $p71, $i3);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $r := $i61;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p16, $p17 := $p12, $p7;
    goto $bb4;

  $bb4:
    call $p18, $i19, $i20, $p21, $p63, $p64, $p65, $p66, $p67, $i68, $i69, $p16, $p17 := i2o_msg_post_wait_complete_loop_$bb4($i3, $p18, $i19, $i20, $p21, $p63, $p64, $p65, $p66, $p67, $i68, $i69, $p16, $p17);
    goto $bb4_last;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, $i3);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $p21 := $p17;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p65, $mul.ref($sub.ref(0, 56), 144));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, $p2i.ref.i64(i2o_exec_wait_list));
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i69 == 1);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $p16, $p17 := $p66, $p16;
    goto $bb19_dummy;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $p23 := spinlock_check($p22);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i24 := _raw_spin_lock_irqsave($p23);
    call {:si_unique_call 954} {:cexpr "flags"} boogie_si_record_i64($i24);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p21, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} list_del($p25);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref(0, 144)), $mul.ref(40, 1));
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i1);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p21, $mul.ref(0, 144)), $mul.ref(48, 1));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p2);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p21, $mul.ref(0, 144)), $mul.ref(36, 1));
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 1);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p21, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p21, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} spin_unlock_irqrestore($p34, $i24);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i33, 0);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p21, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} __wake_up($p60, 1, 1, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i61 := $i33;
    goto $bb17;

  $bb11:
    assume $i35 == 1;
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p39, .str.26);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p40, .str.255);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p41, .str.251);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p42, .str.256);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i45 := $load.i24($M.5, $p44);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i46 := $and.i24($i45, $sub.i24(0, 262144));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i47 := $or.i24($i46, 301);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p44, $i47);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p48, 0);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.6, $p49);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i64($i50);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i51, 1);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 958} {:cexpr "tmp___1"} boogie_si_record_i64($i53);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p21, $mul.ref(0, 144)), $mul.ref(8, 1));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} i2o_dma_free($p38, $p58);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} i2o_exec_wait_free($p21);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i54 == 1;
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} vslice_dummy_var_155 := __dynamic_pr_debug.ref.ref.ref($p4, .str.256, $p56);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb10;

  $bb19_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4845;
}



const i2o_exec_lct_modified: ref;

axiom i2o_exec_lct_modified == $sub.ref(0, 521670);

procedure i2o_exec_lct_modified($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_exec_lct_modified($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var vslice_dummy_var_157: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} kfree($p4);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $i5 := i2o_device_parse_lct($p3);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    call {:si_unique_call 966} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, $sub.i32(0, 11));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} vslice_dummy_var_157 := i2o_exec_lct_notify($p3, $i12);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1976)), $mul.ref(152, 1));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    call {:si_unique_call 967} {:cexpr "change_ind"} boogie_si_record_i32($i11);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const i2o_dump_message: ref;

axiom i2o_dump_message == $sub.ref(0, 522702);

procedure i2o_dump_message($p0: ref);
  free requires assertsPassed;



implementation i2o_dump_message($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    return;
}



const i2o_exec_lct_notify: ref;

axiom i2o_exec_lct_notify == $sub.ref(0, 523734);

procedure i2o_exec_lct_notify($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.22, assertsPassed, $M.25;



implementation i2o_exec_lct_notify($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i32;
  var $i47: i32;
  var $p49: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $p55: ref;
  var $p56: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} {:cexpr "i2o_exec_lct_notify:arg:change_ind"} boogie_si_record_i32($i1);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(184, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} ldv_mutex_lock_76($p6);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(24, 1));
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(160, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(52, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $i14 := i2o_dma_realloc($p9, $p10, $i13);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 972} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $p18 := i2o_msg_get_wait($p0, 5);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $i20 := IS_ERR($p19);
    call {:si_unique_call 976} {:cexpr "tmp___1"} boogie_si_record_i64($i20);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p18, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 524385);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p18, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $sub.i32(0, 1577054208));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.7, $add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(8, 1)));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p18, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i32);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p18, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $sub.i32(0, 1));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(1, 4));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i1);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(160, 1)), $mul.ref(16, 1));
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i45);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i46, $sub.i32(0, 805306368));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(2, 4));
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i47);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(160, 1)), $mul.ref(8, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 20)), $mul.ref(20, 1)), $mul.ref(3, 4));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i53);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} i2o_msg_post($p0, $p18);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(184, 1));
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} ldv_mutex_unlock_79($p56);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(184, 1));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} ldv_mutex_unlock_78($p22);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p18);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $i24 := PTR_ERR($p23);
    call {:si_unique_call 979} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i24);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i17 := $i25;
    goto $bb3;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1976)), $mul.ref(184, 1));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} ldv_mutex_unlock_77($p16);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_76: ref;

axiom ldv_mutex_lock_76 == $sub.ref(0, 524766);

procedure ldv_mutex_lock_76($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_mutex_lock_76($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} ldv_mutex_lock_lct_lock($p0);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} mutex_lock($p0);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_77: ref;

axiom ldv_mutex_unlock_77 == $sub.ref(0, 525798);

procedure ldv_mutex_unlock_77($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_mutex_unlock_77($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} ldv_mutex_unlock_lct_lock($p0);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} mutex_unlock($p0);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_78: ref;

axiom ldv_mutex_unlock_78 == $sub.ref(0, 526830);

procedure ldv_mutex_unlock_78($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_mutex_unlock_78($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} ldv_mutex_unlock_lct_lock($p0);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} mutex_unlock($p0);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_79: ref;

axiom ldv_mutex_unlock_79 == $sub.ref(0, 527862);

procedure ldv_mutex_unlock_79($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_mutex_unlock_79($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} ldv_mutex_unlock_lct_lock($p0);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} mutex_unlock($p0);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 528894);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 991} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    return;
}



const i2o_report_util_cmd: ref;

axiom i2o_report_util_cmd == $sub.ref(0, 529926);

procedure i2o_report_util_cmd($i0: i8);
  free requires assertsPassed;



implementation i2o_report_util_cmd($i0: i8)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i39: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} {:cexpr "i2o_report_util_cmd:arg:cmd"} boogie_si_record_i8($i0);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i0);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} vslice_dummy_var_172 := printk.ref.i32(.str.42, $i39);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i6 == 1;
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} vslice_dummy_var_158 := printk.ref(.str.183);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb8:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 23);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb12;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} vslice_dummy_var_159 := printk.ref(.str.182);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb6:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i1, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb12;

  $bb17:
    assume $i9 == 1;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} vslice_dummy_var_161 := printk.ref(.str.186);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb15:
    assume $i8 == 1;
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} vslice_dummy_var_160 := printk.ref(.str.180);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb4:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 19);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i11 == 1);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} vslice_dummy_var_163 := printk.ref(.str.181);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb21:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i1, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb12;

  $bb23:
    assume $i12 == 1;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} vslice_dummy_var_164 := printk.ref(.str.177);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} vslice_dummy_var_162 := printk.ref(.str.179);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i1, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb31:
    assume $i16 == 1;
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} vslice_dummy_var_165 := printk.ref(.str.178);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb29:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i1, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb12;

  $bb33:
    assume $i17 == 1;
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} vslice_dummy_var_166 := printk.ref(.str.176);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb27:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i1, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i1, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb12;

  $bb37:
    assume $i19 == 1;
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} vslice_dummy_var_167 := printk.ref(.str.175);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb35:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb12;

  $bb39:
    assume $i20 == 1;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} vslice_dummy_var_168 := printk.ref(.str.184);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb25:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i22 == 1);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} vslice_dummy_var_169 := printk.ref(.str.185);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb43:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb12;

  $bb45:
    assume $i23 == 1;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} vslice_dummy_var_170 := printk.ref(.str.174);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb41:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb12;

  $bb47:
    assume $i24 == 1;
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} vslice_dummy_var_171 := printk.ref(.str.173);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    goto $bb49;
}



const i2o_report_exec_cmd: ref;

axiom i2o_report_exec_cmd == $sub.ref(0, 530958);

procedure i2o_report_exec_cmd($i0: i8);
  free requires assertsPassed;



implementation i2o_report_exec_cmd($i0: i8)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i92: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} {:cexpr "i2o_report_exec_cmd:arg:cmd"} boogie_si_record_i8($i0);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 185);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 201);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 213);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 217);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i1, 221);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 223);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 223);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i0);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} vslice_dummy_var_206 := printk.ref.i32(.str.220, $i92);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i8 == 1;
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} vslice_dummy_var_173 := printk.ref(.str.211);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb12:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 221);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb16;

  $bb17:
    assume $i9 == 1;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} vslice_dummy_var_174 := printk.ref(.str.210);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb10:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 217);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb16;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} vslice_dummy_var_175 := printk.ref(.str.197);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb8:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 215);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i1, 215);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb16;

  $bb23:
    assume $i12 == 1;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} vslice_dummy_var_176 := printk.ref(.str.209);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb21:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 213);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb25:
    assume $i13 == 1;
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} vslice_dummy_var_177 := printk.ref(.str.195);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb6:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, 209);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 211);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i1, 211);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb16;

  $bb31:
    assume $i16 == 1;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} vslice_dummy_var_178 := printk.ref(.str.207);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb29:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i1, 209);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb16;

  $bb33:
    assume $i17 == 1;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} vslice_dummy_var_179 := printk.ref(.str.216);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb27:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i1, 202);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i1, 202);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb16;

  $bb37:
    assume $i19 == 1;
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} vslice_dummy_var_181 := printk.ref(.str.193);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb35:
    assume $i18 == 1;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} vslice_dummy_var_180 := printk.ref(.str.203);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb4:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i1, 193);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i1, 197);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i1, 199);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i1, 199);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb16;

  $bb45:
    assume $i23 == 1;
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} vslice_dummy_var_182 := printk.ref(.str.196);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb43:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i1, 197);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb16;

  $bb47:
    assume $i24 == 1;
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} vslice_dummy_var_183 := printk.ref(.str.208);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb41:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i1, 195);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i1, 195);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb16;

  $bb51:
    assume $i26 == 1;
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} vslice_dummy_var_184 := printk.ref(.str.218);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb49:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i1, 193);
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb16;

  $bb53:
    assume $i27 == 1;
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} vslice_dummy_var_185 := printk.ref(.str.217);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb39:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i1, 189);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i1, 190);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i1, 190);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb16;

  $bb59:
    assume $i30 == 1;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} vslice_dummy_var_187 := printk.ref(.str.202);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb57:
    assume $i29 == 1;
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} vslice_dummy_var_186 := printk.ref(.str.204);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb55:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i1, 187);
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i1, 187);
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb16;

  $bb63:
    assume $i32 == 1;
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} vslice_dummy_var_188 := printk.ref(.str.192);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb61:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i1, 185);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb16;

  $bb65:
    assume $i33 == 1;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} vslice_dummy_var_189 := printk.ref(.str.200);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i1, 171);
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i1, 178);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i1, 181);
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i1, 183);
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i1, 183);
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb16;

  $bb75:
    assume $i38 == 1;
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} vslice_dummy_var_190 := printk.ref(.str.199);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb73:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i1, 181);
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb16;

  $bb77:
    assume $i39 == 1;
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} vslice_dummy_var_191 := printk.ref(.str.189);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb71:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i1, 179);
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i1, 179);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb16;

  $bb81:
    assume $i41 == 1;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} vslice_dummy_var_193 := printk.ref(.str.187);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb79:
    assume $i40 == 1;
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} vslice_dummy_var_192 := printk.ref(.str.188);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb69:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i1, 175);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i1, 177);
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i43 == 1);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} vslice_dummy_var_194 := printk.ref(.str.194);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb85:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i1, 175);
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb16;

  $bb87:
    assume $i44 == 1;
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} vslice_dummy_var_195 := printk.ref(.str.198);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb83:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i1, 173);
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i1, 173);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb16;

  $bb91:
    assume $i46 == 1;
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} vslice_dummy_var_196 := printk.ref(.str.215);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb89:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i1, 171);
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb16;

  $bb93:
    assume $i47 == 1;
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} vslice_dummy_var_197 := printk.ref(.str.214);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb67:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i1, 165);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i1, 168);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i1, 169);
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i1, 169);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb16;

  $bb101:
    assume $i51 == 1;
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} vslice_dummy_var_199 := printk.ref(.str.213);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb99:
    assume $i50 == 1;
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} vslice_dummy_var_198 := printk.ref(.str.201);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb97:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i1, 167);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i52 == 1);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} vslice_dummy_var_200 := printk.ref(.str.191);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb103:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i1, 165);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb16;

  $bb105:
    assume $i53 == 1;
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} vslice_dummy_var_201 := printk.ref(.str.190);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb95:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i1, 162);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i1, 163);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i1, 163);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb16;

  $bb111:
    assume $i56 == 1;
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} vslice_dummy_var_203 := printk.ref(.str.219);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb109:
    assume $i55 == 1;
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} vslice_dummy_var_202 := printk.ref(.str.205);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb107:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i1, 161);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i57 == 1);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} vslice_dummy_var_204 := printk.ref(.str.206);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb113:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i1, 160);
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb115, $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb16;

  $bb115:
    assume $i58 == 1;
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} vslice_dummy_var_205 := printk.ref(.str.212);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    goto $bb117;
}



const i2o_report_fail_status: ref;

axiom i2o_report_fail_status == $sub.ref(0, 531990);

procedure i2o_report_fail_status($i0: i8, $p1: ref);
  free requires assertsPassed;
  modifies $M.34, $CurrAddr;



implementation i2o_report_fail_status($i0: i8, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $p2 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    call {:si_unique_call 1044} {:cexpr "i2o_report_fail_status:arg:req_status"} boogie_si_record_i8($i0);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(0, 8));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p3, .str.104);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(1, 8));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p4, .str.105);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(2, 8));
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p5, .str.106);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(3, 8));
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p6, .str.107);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(4, 8));
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p7, .str.108);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(5, 8));
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p8, .str.109);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(6, 8));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p9, .str.110);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(7, 8));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p10, .str.111);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(8, 8));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p11, .str.112);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(9, 8));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p12, .str.113);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(10, 8));
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p13, .str.114);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(11, 8));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p14, .str.115);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(12, 8));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p15, .str.116);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(13, 8));
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p16, .str.117);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(14, 8));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p17, .str.118);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(15, 8));
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p18, .str.119);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(16, 8));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p19, .str.120);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i0);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 255);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i0);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 15);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref($i26, 8));
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.34, $p27);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} vslice_dummy_var_208 := printk.ref.ref(.str.122, $p28);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p1, $mul.ref(1, 4));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i32 := $lshr.i32($i31, 12);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 4095);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p1, $mul.ref(1, 4));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 4095);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} vslice_dummy_var_209 := printk.ref.i32.i32(.str.123, $i33, $i36);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p1, $mul.ref(4, 4));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i40 := $lshr.i32($i39, 8);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 255);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p1, $mul.ref(4, 4));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 255);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} vslice_dummy_var_210 := printk.ref.i32.i32(.str.124, $i41, $i44);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p1, $mul.ref(5, 4));
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i48 := $lshr.i32($i47, 16);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p1, $mul.ref(5, 4));
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 4095);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} vslice_dummy_var_211 := printk.ref.i32.i32(.str.125, $i48, $i51);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p1, $mul.ref(4, 4));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i55 := $lshr.i32($i54, 16);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 255);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} vslice_dummy_var_212 := printk.ref.i32(.str.126, $i56);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p1, $mul.ref(4, 4));
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 65536);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p1, $mul.ref(4, 4));
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 131072);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p1, $mul.ref(4, 4));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 262144);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p1, $mul.ref(4, 4));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 524288);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i76 == 1;
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} vslice_dummy_var_216 := printk.ref(.str.130);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i71 == 1;
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} vslice_dummy_var_215 := printk.ref(.str.129);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i66 == 1;
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} vslice_dummy_var_214 := printk.ref(.str.128);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i61 == 1;
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} vslice_dummy_var_213 := printk.ref(.str.127);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i0);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} vslice_dummy_var_207 := printk.ref.i32(.str.121, $i22);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i2o_report_common_status: ref;

axiom i2o_report_common_status == $sub.ref(0, 533022);

procedure i2o_report_common_status($i0: i8);
  free requires assertsPassed;
  modifies $M.35, $CurrAddr;



implementation i2o_report_common_status($i0: i8)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $p1 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    call {:si_unique_call 1056} {:cexpr "i2o_report_common_status:arg:req_status"} boogie_si_record_i8($i0);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 8));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p2, .str.131);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(1, 8));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p3, .str.132);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(2, 8));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p4, .str.133);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(3, 8));
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p5, .str.134);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(4, 8));
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p6, .str.135);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(5, 8));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p7, .str.136);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(6, 8));
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p8, .str.137);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(7, 8));
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p9, .str.138);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 8));
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p10, .str.139);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(9, 8));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p11, .str.140);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(10, 8));
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p12, .str.141);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(11, 8));
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p13, .str.142);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i0);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, 11);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i0);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref($i19, 8));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.35, $p20);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} vslice_dummy_var_218 := printk.ref.ref(.str.144, $p21);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i0);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} vslice_dummy_var_217 := printk.ref.i32(.str.143, $i16);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i2o_report_common_dsc: ref;

axiom i2o_report_common_dsc == $sub.ref(0, 534054);

procedure i2o_report_common_dsc($i0: i16);
  free requires assertsPassed;
  modifies $M.36, $CurrAddr;



implementation i2o_report_common_dsc($i0: i16)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $p1 := $alloc($mul.ref(232, $zext.i32.i64(1)));
    call {:si_unique_call 1060} {:cexpr "i2o_report_common_dsc:arg:detailed_status"} boogie_si_record_i16($i0);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 8));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p2, .str.131);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(1, 8));
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p3, .str.145);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(2, 8));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p4, .str.146);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(3, 8));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p5, .str.147);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(4, 8));
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p6, .str.148);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(5, 8));
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p7, .str.149);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(6, 8));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p8, .str.150);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(7, 8));
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p9, .str.151);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(8, 8));
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p10, .str.152);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(9, 8));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p11, .str.153);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(10, 8));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p12, .str.154);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(11, 8));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p13, .str.155);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(12, 8));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p14, .str.156);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(13, 8));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p15, .str.157);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(14, 8));
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p16, .str.158);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(15, 8));
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p17, .str.159);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(16, 8));
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p18, .str.113);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(17, 8));
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p19, .str.160);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(18, 8));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p20, .str.161);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(19, 8));
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p21, .str.162);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(20, 8));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p22, .str.163);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(21, 8));
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p23, .str.164);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(22, 8));
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p24, .str.165);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(23, 8));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p25, .str.166);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(24, 8));
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p26, .str.167);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(25, 8));
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p27, .str.168);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(26, 8));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p28, .str.169);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(27, 8));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p29, .str.170);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(28, 8));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p30, .str.171);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i0);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i32($i31, 28);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i32 == 1);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i0);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref($i36, 8));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.36, $p37);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} vslice_dummy_var_220 := printk.ref.ref(.str.172, $p38);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i32 == 1;
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i0);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} vslice_dummy_var_219 := printk.ref.i32(.str.43, $i33);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 535086);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.37, $M.22, $M.38, $M.25, $M.39;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1063} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 1064} {:cexpr "ldv_mutex_lct_lock"} boogie_si_record_i32(1);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1065} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 1066} {:cexpr "ldv_mutex_mem_lock"} boogie_si_record_i32(1);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1067} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    return;
}



const ldv_handler_precall: ref;

axiom ldv_handler_precall == $sub.ref(0, 536118);

procedure ldv_handler_precall();
  free requires assertsPassed;



implementation ldv_handler_precall()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 537150);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i0 := $M.37;
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} ldv_error();
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.22;
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} ldv_error();
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.38;
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} ldv_error();
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.25;
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} ldv_error();
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.39;
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} ldv_error();
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const main: ref;

axiom main == $sub.ref(0, 538182);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.37, $M.22, $M.38, $M.25, $M.39, $M.0, $M.7, $M.41, $M.42, $M.43, $M.8, $M.19, $M.24, $M.20, $M.9, $M.51, $M.52, $M.53, $M.54, $CurrAddr, assertsPassed, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.34, $M.35, $M.36;



implementation main() returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i12: i1;
  var $i13: i32;
  var $i11: i32;
  var $i0: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var vslice_dummy_var_221: i32;

  $bb0:
    call {:si_unique_call 1073} $initialize();
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} ldv_initialize();
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i0 := 0;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i11, $i0, $i15, $i16, $i17, vslice_dummy_var_221 := main_loop_$bb1($i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i11, $i0, $i15, $i16, $i17, vslice_dummy_var_221);
    goto $bb1_last;

  corral_source_split_5460:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1077} $i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 1078} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i15);
    call {:si_unique_call 1079} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i16 == 1);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i0, 0);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} ldv_check_final_state();
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1080} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1081} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1082} {:cexpr "tmp"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i11 := $i0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i0 := $i11;
    goto corral_source_split_5490_dummy;

  $bb8:
    assume $i4 == 1;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} ldv_handler_precall();
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} vslice_dummy_var_221 := i2o_pci_interrupt($u2, $u3);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i11 := $i0;
    goto $bb20;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i0, 1);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb20;

  $bb21:
    assume $i12 == 1;
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} ldv_handler_precall();
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} i2o_pci_remove($u0);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb23;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb10;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb20;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i7 := i2o_pci_probe($u0, $u1);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 1088} {:cexpr "res_i2o_pci_probe_5"} boogie_si_record_i32($i7);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} ldv_check_return_value($i7);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} ldv_check_return_value_probe($i7);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i0, 1);
    call {:si_unique_call 1092} {:cexpr "ldv_s_i2o_pci_driver_pci_driver"} boogie_si_record_i32($i9);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb19;

  $bb15:
    assume $i8 == 1;
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb26;

  corral_source_split_5490_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5460;
}



const ldv_check_return_value: ref;

axiom ldv_check_return_value == $sub.ref(0, 539214);

procedure ldv_check_return_value($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} {:cexpr "ldv_check_return_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_return_value_probe: ref;

axiom ldv_check_return_value_probe == $sub.ref(0, 540246);

procedure ldv_check_return_value_probe($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value_probe($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} {:cexpr "ldv_check_return_value_probe:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 541278);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1097} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 1} true;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 542310);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 543342);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 544374);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 545406);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 546438);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 547470);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 548502);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 549534);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 550566);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 551598);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 552630);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 553662);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 554694);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1098} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1099} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1100} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1101} __VERIFIER_assume($i4);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 555726);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 556758);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 557790);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 558822);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 559854);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1102} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1103} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1104} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1105} __VERIFIER_assume($i4);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 560886);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 561918);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 562950);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 563982);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 565014);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1106} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1107} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1108} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1109} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1110} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1111} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1112} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1113} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1114} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1115} __VERIFIER_assume($i7);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1116} __VERIFIER_assume($i11);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 566046);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 567078);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 568110);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 569142);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 570174);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 571206);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 572238);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 573270);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 574302);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1117} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1118} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1119} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1120} __VERIFIER_assume($i10);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 575334);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1121} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1122} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1123} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 576366);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1124} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1125} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 577398);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 578430);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1126} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1127} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 579462);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 580494);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 581526);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 582558);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.41, $M.42, $M.43, $M.8, $M.19, $M.24, $M.20, $M.39, $M.25, $M.38, $M.22, $M.37, $M.9, $M.51, $M.52, $M.53, $M.54;



implementation __SMACK_static_init()
{

  $bb0:
    $M.0 := $store.ref($M.0, i2o_controllers, i2o_controllers);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_controllers, $mul.ref(0, 16)), $mul.ref(8, 1)), i2o_controllers);
    $M.7 := $store.ref($M.7, i2o_exec_driver, .str.70);
    $M.7 := $store.i32($M.7, $add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(8, 1)), 0);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(16, 1)), i2o_exec_class_id);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(24, 1)), i2o_exec_reply);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(32, 1)), i2o_exec_event);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(40, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $mul.ref(0, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $mul.ref(16, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $mul.ref(24, 1)), $0.ref);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $mul.ref(32, 1)), 0);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $mul.ref(40, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $mul.ref(48, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $mul.ref(56, 1)), i2o_exec_probe);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $mul.ref(64, 1)), i2o_exec_remove);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $mul.ref(72, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $mul.ref(80, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $mul.ref(88, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $mul.ref(96, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $mul.ref(104, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $mul.ref(112, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(168, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(176, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(184, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(192, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(200, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(200, 1)), $mul.ref(72, 1)), 0);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(i2o_exec_driver, $mul.ref(0, 296)), $mul.ref(200, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i8($M.0, i2o_exec_class_id, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(i2o_exec_class_id, $mul.ref(0, 4)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(i2o_exec_class_id, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(i2o_exec_class_id, $mul.ref(0, 4)), $mul.ref(2, 1)), $mul.ref(1, 1)), 15);
    $M.0 := $store.i32($M.0, mem_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.262);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(mem_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(mem_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(112, 1)), mem_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.263);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(mem_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.41 := $store.ref($M.41, dev_attr_product_id, .str.260);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(32, 1)), i2o_exec_show_product_id);
    $M.41 := $store.ref($M.41, $add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.41 := $store.ref($M.41, dev_attr_vendor_id, .str.258);
    $M.41 := $store.i16($M.41, $add.ref($add.ref($add.ref(dev_attr_vendor_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(dev_attr_vendor_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref($add.ref(dev_attr_vendor_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_vendor_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_vendor_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_vendor_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_vendor_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_vendor_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_vendor_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_vendor_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_vendor_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.41 := $store.ref($M.41, $add.ref($add.ref(dev_attr_vendor_id, $mul.ref(0, 48)), $mul.ref(32, 1)), i2o_exec_show_vendor_id);
    $M.41 := $store.ref($M.41, $add.ref($add.ref(dev_attr_vendor_id, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, i2o_exec_wait_list, i2o_exec_wait_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_exec_wait_list, $mul.ref(0, 16)), $mul.ref(8, 1)), i2o_exec_wait_list);
    $M.42 := $store.i32($M.42, i2o_pci_ids, $sub.i32(0, 1));
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(16, 1)), 917504);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(20, 1)), 16776960);
    $M.42 := $store.i64($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(0, 1)), 4164);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(4, 1)), 42257);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.42 := $store.i64($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(0, 1)), 32902);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(4, 1)), 6498);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(8, 1)), 4186);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.42 := $store.i64($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.42 := $store.i64($M.42, $add.ref($add.ref($add.ref(i2o_pci_ids, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.43 := $store.ref($M.43, i2o_pci_driver, $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.221);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), i2o_pci_ids);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), i2o_pci_probe);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), i2o_pci_remove);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.43 := $store.i8($M.43, $add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.43 := $store.i64($M.43, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref($add.ref($add.ref(i2o_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.8 := 8;
    call {:si_unique_call 1128} {:cexpr "i2o_max_drivers"} boogie_si_record_i32(8);
    $M.19 := $0.ref;
    $M.24 := 0;
    $M.20 := 0;
    $M.39 := 0;
    call {:si_unique_call 1129} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 1130} {:cexpr "ldv_mutex_mem_lock"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 1131} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 1132} {:cexpr "ldv_mutex_lct_lock"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 1133} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(0);
    $M.9 := $0.ref;
    $M.0 := $store.i32($M.0, i2o_drivers_lock, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(i2o_drivers_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(i2o_drivers_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(i2o_drivers_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(i2o_drivers_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_drivers_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_drivers_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(i2o_drivers_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(i2o_drivers_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(i2o_drivers_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    call {:si_unique_call 1134} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, i2o_device_attrs, .str.34);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(32, 1)), i2o_device_show_class_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.35);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(32, 1)), i2o_device_show_tid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(i2o_device_attrs, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, i2o_bus_type, .str.1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_bus_type, $mul.ref(0, 128)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_bus_type, $mul.ref(0, 128)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_bus_type, $mul.ref(0, 128)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_bus_type, $mul.ref(0, 128)), $mul.ref(32, 1)), i2o_device_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_bus_type, $mul.ref(0, 128)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_bus_type, $mul.ref(0, 128)), $mul.ref(48, 1)), i2o_bus_match);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_bus_type, $mul.ref(0, 128)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_bus_type, $mul.ref(0, 128)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_bus_type, $mul.ref(0, 128)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_bus_type, $mul.ref(0, 128)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_bus_type, $mul.ref(0, 128)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_bus_type, $mul.ref(0, 128)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_bus_type, $mul.ref(0, 128)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_bus_type, $mul.ref(0, 128)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i2o_bus_type, $mul.ref(0, 128)), $mul.ref(120, 1)), $0.ref);
    $M.51 := $store.i8($M.51, .str.96, 48);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.96, $mul.ref(0, 8)), $mul.ref(1, 1)), 120);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.96, $mul.ref(0, 8)), $mul.ref(2, 1)), 37);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.96, $mul.ref(0, 8)), $mul.ref(3, 1)), 48);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.96, $mul.ref(0, 8)), $mul.ref(4, 1)), 51);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.96, $mul.ref(0, 8)), $mul.ref(5, 1)), 120);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.96, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(.str.96, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.52 := $store.i8($M.52, .str.98, 37);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.98, $mul.ref(0, 8)), $mul.ref(1, 1)), 100);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.98, $mul.ref(0, 8)), $mul.ref(2, 1)), 58);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.98, $mul.ref(0, 8)), $mul.ref(3, 1)), 37);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.98, $mul.ref(0, 8)), $mul.ref(4, 1)), 48);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.98, $mul.ref(0, 8)), $mul.ref(5, 1)), 51);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.98, $mul.ref(0, 8)), $mul.ref(6, 1)), 120);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.98, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.52 := $store.i8($M.52, .str.8, 105);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.8, $mul.ref(0, 6)), $mul.ref(1, 1)), 111);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.8, $mul.ref(0, 6)), $mul.ref(2, 1)), 112);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.8, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.8, $mul.ref(0, 6)), $mul.ref(4, 1)), 100);
    $M.52 := $store.i8($M.52, $add.ref($add.ref(.str.8, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.53 := $store.i8($M.53, .str.9, 105);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(1, 1)), 50);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(2, 1)), 111);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(4, 1)), 37);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(5, 1)), 115);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(7, 1)), 109);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(8, 1)), 115);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(9, 1)), 103);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(11, 1)), 105);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(12, 1)), 110);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(13, 1)), 112);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(14, 1)), 111);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(15, 1)), 111);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(16, 1)), 108);
    $M.53 := $store.i8($M.53, $add.ref($add.ref(.str.9, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.54 := $store.i8($M.54, .str.259, 48);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.259, $mul.ref(0, 7)), $mul.ref(1, 1)), 120);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.259, $mul.ref(0, 7)), $mul.ref(2, 1)), 37);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.259, $mul.ref(0, 7)), $mul.ref(3, 1)), 48);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.259, $mul.ref(0, 7)), $mul.ref(4, 1)), 52);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.259, $mul.ref(0, 7)), $mul.ref(5, 1)), 120);
    $M.54 := $store.i8($M.54, $add.ref($add.ref(.str.259, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    call {:si_unique_call 1135} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 583590);

procedure devirtbounce(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 584622);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(i2o_exec_remove, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(i2o_exec_probe, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1136} $i2 := i2o_exec_probe($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1137} $i4 := i2o_exec_remove($p3);
    $r := $i4;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 585654);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 586686);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 587718);

procedure devirtbounce.4(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 588750);

procedure devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 589782);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 590814);

procedure devirtbounce.7(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation devirtbounce.7(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(i2o_exec_lct_modified, $p0);
    assume {:branchcond $i10} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(i2o_iop_release, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(i2o_device_release, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(i2o_pci_remove, $p0);
    assume {:branchcond $i7} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i7 == 1);
    $i6 := $eq.ref(i2o_exec_event, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1138} i2o_exec_event($p1);
    return;

  $bb3:
    assume $i7 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1139} i2o_pci_remove($p2);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1140} i2o_device_release($p3);
    return;

  $bb5:
    assume $i9 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1141} i2o_iop_release($p4);
    return;

  $bb6:
    assume $i10 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1142} i2o_exec_lct_modified($p5);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 591846);

procedure devirtbounce.8(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation devirtbounce.8(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(i2o_exec_lct_modified, $p0);
    assume {:branchcond $i10} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(i2o_iop_release, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(i2o_device_release, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(i2o_pci_remove, $p0);
    assume {:branchcond $i7} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i7 == 1);
    $i6 := $eq.ref(i2o_exec_event, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1143} i2o_exec_event($p1);
    return;

  $bb3:
    assume $i7 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1144} i2o_pci_remove($p2);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1145} i2o_device_release($p3);
    return;

  $bb5:
    assume $i9 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1146} i2o_iop_release($p4);
    return;

  $bb6:
    assume $i10 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1147} i2o_exec_lct_modified($p5);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 592878);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 593910);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 594942);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 595974);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.34, $M.35, $M.36;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(i2o_exec_reply, $p0);
    assume true;
    goto $bb7, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(i2o_exec_reply, $p0);
    assume true;
    goto $bb6, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb6:
    assume $i3 == 1;
    goto $bb3;

  $bb3:
    call {:si_unique_call 1149} $i2 := i2o_exec_reply(arg, arg1, arg2);
    $r := $i2;
    return;

  $bb7:
    assume $i4 == 1;
    goto $bb3;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 597006);

procedure devirtbounce.13(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: ref;

const $u2: i32;

const $u3: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.41, $M.42, $M.43, $M.8, $M.19, $M.24, $M.20, $M.39, $M.25, $M.38, $M.22, $M.37, $M.9, $M.51, $M.52, $M.53, $M.54, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1150} __SMACK_static_init();
    call {:si_unique_call 1151} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.37, $M.22, $M.38, $M.25, $M.39, $M.0, $M.7, $M.41, $M.42, $M.43, $M.8, $M.19, $M.24, $M.20, $M.9, $M.51, $M.52, $M.53, $M.54, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $M.34, $M.35, $M.36;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation i2o_msg_get_wait_loop_$bb4(in_$p0: ref, in_$i5: i64, in_$i11: i64, in_$i12: i64, in_$i13: i1, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p22: ref, in_vslice_dummy_var_43: i64) returns (out_$i11: i64, out_$i12: i64, out_$i13: i1, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p22: ref, out_vslice_dummy_var_43: i64)
{

  entry:
    out_$i11, out_$i12, out_$i13, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_vslice_dummy_var_43 := in_$i11, in_$i12, in_$i13, in_$p18, in_$p19, in_$i20, in_$i21, in_$p22, in_vslice_dummy_var_43;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i21 == 1;
    goto $bb10_dummy;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$p22 := out_$p18;
    assume true;
    goto $bb10;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, 0);
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} out_$i20 := IS_ERR(out_$p19);
    call {:si_unique_call 55} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_224;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_223;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} out_$p18 := i2o_msg_get(in_$p0);
    goto corral_source_split_222;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} out_vslice_dummy_var_43 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_221;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i64(out_$i12, 0);
    goto corral_source_split_213;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$i12 := $sub.i64(in_$i5, out_$i11);
    goto corral_source_split_212;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i64($M.7, jiffies);
    goto corral_source_split_211;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$i13, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_vslice_dummy_var_43 := i2o_msg_get_wait_loop_$bb4(in_$p0, in_$i5, out_$i11, out_$i12, out_$i13, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_vslice_dummy_var_43);
    return;

  exit:
    return;
}



procedure i2o_msg_get_wait_loop_$bb4(in_$p0: ref, in_$i5: i64, in_$i11: i64, in_$i12: i64, in_$i13: i1, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p22: ref, in_vslice_dummy_var_43: i64) returns (out_$i11: i64, out_$i12: i64, out_$i13: i1, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p22: ref, out_vslice_dummy_var_43: i64);
  modifies $M.0;



implementation i2o_iop_remove_loop_$bb4(in_$i15: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p17: ref, in_$p18: ref) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p17: ref, out_$p18: ref)
{

  entry:
    out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p17, out_$p18 := in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p17, in_$p18;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_593;

  $bb6:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p17, out_$p18 := out_$p23, out_$p17;
    goto $bb6_dummy;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, in_$i15);
    goto corral_source_split_602;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_601;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p17, $mul.ref(0, 1376)), $mul.ref(48, 1));
    goto corral_source_split_600;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p22, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_599;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_598;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_597;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_596;

  SeqInstr_15:
    goto corral_source_split_595;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} i2o_device_remove(out_$p18);
    goto SeqInstr_14;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p17, out_$p18 := i2o_iop_remove_loop_$bb4(in_$i15, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p17, out_$p18);
    return;

  exit:
    return;
}



procedure i2o_iop_remove_loop_$bb4(in_$i15: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p17: ref, in_$p18: ref) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p17: ref, out_$p18: ref);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation i2o_driver_notify_controller_remove_all_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i3: i32) returns (out_$p4: ref, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i3: i32)
{

  entry:
    out_$p4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i3 := in_$p4, in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_835;

  $bb9:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i10;
    goto $bb9_dummy;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    out_$i12 := $ult.i32(out_$i10, out_$i11);
    goto corral_source_split_849;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    out_$i11 := $M.8;
    goto corral_source_split_848;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i3, 1);
    call {:si_unique_call 214} {:cexpr "i"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_847;

  $bb7:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_18:
    goto corral_source_split_845;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} i2o_driver_notify_controller_remove(out_$p7, in_$p0);
    goto SeqInstr_17;

  $bb6:
    assume out_$i9 == 1;
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.10, out_$p6);
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref(out_$p4, $mul.ref(out_$i5, 8));
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i3);
    goto corral_source_split_838;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p4 := $M.9;
    goto corral_source_split_837;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i3 := i2o_driver_notify_controller_remove_all_loop_$bb4(in_$p0, out_$p4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i3);
    return;

  exit:
    return;
}



procedure i2o_driver_notify_controller_remove_all_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i3: i32) returns (out_$p4: ref, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i3: i32);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_device_remove_loop_$bb4(in_$p0: ref, in_$i15: i64, in_$p19: ref, in_$i20: i16, in_$i21: i16, in_$i22: i32, in_$p24: ref, in_$i25: i16, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$p30: ref, in_$p32: ref, in_$i33: i16, in_$i34: i16, in_$i35: i32, in_$p37: ref, in_$i38: i16, in_$i39: i16, in_$i40: i32, in_$i41: i1, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p17: ref) returns (out_$p19: ref, out_$i20: i16, out_$i21: i16, out_$i22: i32, out_$p24: ref, out_$i25: i16, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$p30: ref, out_$p32: ref, out_$i33: i16, out_$i34: i16, out_$i35: i32, out_$p37: ref, out_$i38: i16, out_$i39: i16, out_$i40: i32, out_$i41: i1, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p17: ref)
{

  entry:
    out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p32, out_$i33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p17 := in_$p19, in_$i20, in_$i21, in_$i22, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p30, in_$p32, in_$i33, in_$i34, in_$i35, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p43, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_875;

  $bb12:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$p17 := out_$p48;
    goto $bb12_dummy;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, in_$i15);
    goto corral_source_split_911;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_910;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p47, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_909;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p47, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_908;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_907;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_906;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_905;

  $bb10:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} sysfs_remove_link(out_$p43, .str.37);
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_902;

  $bb9:
    assume out_$i41 == 1;
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i35, out_$i40);
    goto corral_source_split_899;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i16.i32(out_$i39);
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    out_$i39 := $and.i16(out_$i38, 4095);
    goto corral_source_split_897;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i16($M.0, out_$p37);
    goto corral_source_split_896;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_895;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i34);
    goto corral_source_split_894;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    out_$i34 := $and.i16(out_$i33, 4095);
    goto corral_source_split_893;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.0, out_$p32);
    goto corral_source_split_892;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_891;

  $bb7:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} sysfs_remove_link(out_$p30, .str.36);
    goto corral_source_split_889;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_888;

  $bb6:
    assume out_$i28 == 1;
    goto corral_source_split_887;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i22, out_$i27);
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i16.i32(out_$i26);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i16(out_$i25, 4095);
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i16($M.0, out_$p24);
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i16.i32(out_$i21);
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$i21 := $and.i16(out_$i20, 4095);
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i16($M.0, out_$p19);
    goto corral_source_split_878;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(22, 1));
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p32, out_$i33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p17 := i2o_device_remove_loop_$bb4(in_$p0, in_$i15, out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p32, out_$i33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p17);
    return;

  exit:
    return;
}



procedure i2o_device_remove_loop_$bb4(in_$p0: ref, in_$i15: i64, in_$p19: ref, in_$i20: i16, in_$i21: i16, in_$i22: i32, in_$p24: ref, in_$i25: i16, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$p30: ref, in_$p32: ref, in_$i33: i16, in_$i34: i16, in_$i35: i32, in_$p37: ref, in_$i38: i16, in_$i39: i16, in_$i40: i32, in_$i41: i1, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p17: ref) returns (out_$p19: ref, out_$i20: i16, out_$i21: i16, out_$i22: i32, out_$p24: ref, out_$i25: i16, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$p30: ref, out_$p32: ref, out_$i33: i16, out_$i34: i16, out_$i35: i32, out_$p37: ref, out_$i38: i16, out_$i39: i16, out_$i40: i32, out_$i41: i1, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p17: ref);



implementation i2o_iop_reset_loop_$bb29(in_$p0: ref, in_$i49: i64, in_$i75: i64, in_$i76: i64, in_$i77: i1, in_$p78: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p74: ref, in_$p91: ref, in_vslice_dummy_var_64: i64) returns (out_$i75: i64, out_$i76: i64, out_$i77: i1, out_$p78: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p74: ref, out_$p91: ref, out_vslice_dummy_var_64: i64)
{

  entry:
    out_$i75, out_$i76, out_$i77, out_$p78, out_$p87, out_$p88, out_$i89, out_$i90, out_$p74, out_$p91, out_vslice_dummy_var_64 := in_$i75, in_$i76, in_$i77, in_$p78, in_$p87, in_$p88, in_$i89, in_$i90, in_$p74, in_$p91, in_vslice_dummy_var_64;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1014;

  $bb35:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$p74 := out_$p87;
    goto $bb35_dummy;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    out_$p91 := out_$p87;
    assume true;
    goto $bb35;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i64(out_$i89, 0);
    goto corral_source_split_1035;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} out_$i89 := IS_ERR(out_$p88);
    call {:si_unique_call 246} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i89);
    goto corral_source_split_1034;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    out_$p88 := $bitcast.ref.ref(out_$p87);
    goto corral_source_split_1033;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} out_$p87 := i2o_msg_get_wait(in_$p0, 30);
    goto corral_source_split_1032;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} out_vslice_dummy_var_64 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_1031;

  $bb32:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    out_$p78 := out_$p74;
    assume true;
    goto $bb32;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i64(out_$i76, 0);
    goto corral_source_split_1018;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    out_$i76 := $sub.i64(in_$i49, out_$i75);
    goto corral_source_split_1017;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i64($M.7, jiffies);
    goto corral_source_split_1016;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i75, out_$i76, out_$i77, out_$p78, out_$p87, out_$p88, out_$i89, out_$i90, out_$p74, out_$p91, out_vslice_dummy_var_64 := i2o_iop_reset_loop_$bb29(in_$p0, in_$i49, out_$i75, out_$i76, out_$i77, out_$p78, out_$p87, out_$p88, out_$i89, out_$i90, out_$p74, out_$p91, out_vslice_dummy_var_64);
    return;

  exit:
    return;
}



procedure i2o_iop_reset_loop_$bb29(in_$p0: ref, in_$i49: i64, in_$i75: i64, in_$i76: i64, in_$i77: i1, in_$p78: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p74: ref, in_$p91: ref, in_vslice_dummy_var_64: i64) returns (out_$i75: i64, out_$i76: i64, out_$i77: i1, out_$p78: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p74: ref, out_$p91: ref, out_vslice_dummy_var_64: i64);
  modifies $M.0;



implementation i2o_iop_reset_loop_$bb8(in_$p3: ref, in_$i49: i64, in_$i53: i64, in_$i54: i64, in_$i55: i1, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_vslice_dummy_var_61: i64) returns (out_$i53: i64, out_$i54: i64, out_$i55: i1, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_vslice_dummy_var_61: i64)
{

  entry:
    out_$i53, out_$i54, out_$i55, out_$i57, out_$i58, out_$i59, out_vslice_dummy_var_61 := in_$i53, in_$i54, in_$i55, in_$i57, in_$i58, in_$i59, in_vslice_dummy_var_61;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i59 == 1;
    goto $bb14_dummy;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 0);
    goto corral_source_split_995;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    goto corral_source_split_994;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.0, in_$p3);
    goto corral_source_split_993;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} out_vslice_dummy_var_61 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_992;

  $bb11:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i64(out_$i54, 0);
    goto corral_source_split_986;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    out_$i54 := $sub.i64(in_$i49, out_$i53);
    goto corral_source_split_985;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i64($M.7, jiffies);
    goto corral_source_split_984;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i53, out_$i54, out_$i55, out_$i57, out_$i58, out_$i59, out_vslice_dummy_var_61 := i2o_iop_reset_loop_$bb8(in_$p3, in_$i49, out_$i53, out_$i54, out_$i55, out_$i57, out_$i58, out_$i59, out_vslice_dummy_var_61);
    return;

  exit:
    return;
}



procedure i2o_iop_reset_loop_$bb8(in_$p3: ref, in_$i49: i64, in_$i53: i64, in_$i54: i64, in_$i55: i1, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_vslice_dummy_var_61: i64) returns (out_$i53: i64, out_$i54: i64, out_$i55: i1, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_vslice_dummy_var_61: i64);



implementation i2o_iop_quiesce_all_loop_$bb4(in_$p13: ref, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p11: ref, in_$p12: ref, in_vslice_dummy_var_68: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p11: ref, out_$p12: ref, out_vslice_dummy_var_68: i32)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11, out_$p12, out_vslice_dummy_var_68 := in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p11, in_$p12, in_vslice_dummy_var_68;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1080;

  $bb9:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p11, out_$p12 := out_$p12, out_$p23;
    goto $bb9_dummy;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, $p2i.ref.i64(i2o_controllers));
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p12, $mul.ref(0, 1976)), $mul.ref(56, 1));
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p22, $mul.ref($sub.ref(0, 56), 1976));
    goto corral_source_split_1094;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_1093;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_1092;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 1976)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_1091;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} out_vslice_dummy_var_68 := i2o_iop_quiesce(out_$p11);
    goto corral_source_split_1089;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_1088;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 0);
    goto corral_source_split_1086;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i15);
    goto corral_source_split_1085;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.0, out_$p14);
    goto corral_source_split_1084;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p13, $mul.ref(32, 1));
    goto corral_source_split_1083;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_1082;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11, out_$p12, out_vslice_dummy_var_68 := i2o_iop_quiesce_all_loop_$bb4(out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11, out_$p12, out_vslice_dummy_var_68);
    return;

  exit:
    return;
}



procedure i2o_iop_quiesce_all_loop_$bb4(in_$p13: ref, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p11: ref, in_$p12: ref, in_vslice_dummy_var_68: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p11: ref, out_$p12: ref, out_vslice_dummy_var_68: i32);
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation i2o_status_get_loop_$bb8(in_$i47: i64, in_$p48: ref, in_$i52: i64, in_$i53: i64, in_$i54: i1, in_$i59: i8, in_$i60: i32, in_$i61: i1, in_vslice_dummy_var_70: i64) returns (out_$i52: i64, out_$i53: i64, out_$i54: i1, out_$i59: i8, out_$i60: i32, out_$i61: i1, out_vslice_dummy_var_70: i64)
{

  entry:
    out_$i52, out_$i53, out_$i54, out_$i59, out_$i60, out_$i61, out_vslice_dummy_var_70 := in_$i52, in_$i53, in_$i54, in_$i59, in_$i60, in_$i61, in_vslice_dummy_var_70;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i61 == 1;
    goto $bb13_dummy;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 255);
    goto corral_source_split_1192;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i8.i32(out_$i59);
    goto corral_source_split_1191;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i8($M.0, in_$p48);
    goto corral_source_split_1190;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} out_vslice_dummy_var_70 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_1189;

  $bb11:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i64(out_$i53, 0);
    goto corral_source_split_1182;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    out_$i53 := $sub.i64(in_$i47, out_$i52);
    goto corral_source_split_1181;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i64($M.7, jiffies);
    goto corral_source_split_1180;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i52, out_$i53, out_$i54, out_$i59, out_$i60, out_$i61, out_vslice_dummy_var_70 := i2o_status_get_loop_$bb8(in_$i47, in_$p48, out_$i52, out_$i53, out_$i54, out_$i59, out_$i60, out_$i61, out_vslice_dummy_var_70);
    return;

  exit:
    return;
}



procedure i2o_status_get_loop_$bb8(in_$i47: i64, in_$p48: ref, in_$i52: i64, in_$i53: i64, in_$i54: i1, in_$i59: i8, in_$i60: i32, in_$i61: i1, in_vslice_dummy_var_70: i64) returns (out_$i52: i64, out_$i53: i64, out_$i54: i1, out_$i59: i8, out_$i60: i32, out_$i61: i1, out_vslice_dummy_var_70: i64);



implementation i2o_iop_enable_all_loop_$bb4(in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p11: ref, in_$p12: ref, in_vslice_dummy_var_71: i32) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p11: ref, out_$p12: ref, out_vslice_dummy_var_71: i32)
{

  entry:
    out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p11, out_$p12, out_vslice_dummy_var_71 := in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p11, in_$p12, in_vslice_dummy_var_71;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1210;

  $bb6:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$p11, out_$p12 := out_$p12, out_$p18;
    goto $bb6_dummy;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, $p2i.ref.i64(i2o_controllers));
    goto corral_source_split_1219;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_1218;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p12, $mul.ref(0, 1976)), $mul.ref(56, 1));
    goto corral_source_split_1217;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p17, $mul.ref($sub.ref(0, 56), 1976));
    goto corral_source_split_1216;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_1215;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_1214;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 1976)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_1213;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} out_vslice_dummy_var_71 := i2o_iop_enable(out_$p11);
    goto corral_source_split_1212;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p11, out_$p12, out_vslice_dummy_var_71 := i2o_iop_enable_all_loop_$bb4(out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p11, out_$p12, out_vslice_dummy_var_71);
    return;

  exit:
    return;
}



procedure i2o_iop_enable_all_loop_$bb4(in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p11: ref, in_$p12: ref, in_vslice_dummy_var_71: i32) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p11: ref, out_$p12: ref, out_vslice_dummy_var_71: i32);
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation i2o_msg_post_wait_mem_loop_$bb16(in_$p4: ref, in_$p6: ref, in_$p46: ref, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i64, in_$i54: i1, in_$i55: i32, in_$i56: i1) returns (out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i64, out_$i54: i1, out_$i55: i32, out_$i56: i1)
{

  entry:
    out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56 := in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb27:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := out_$i53;
    goto $bb27_dummy;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_1357;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, in_$p46);
    goto corral_source_split_1356;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} prepare_to_wait(in_$p4, in_$p6, 1);
    goto corral_source_split_1355;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i64(out_$i53, 0);
    goto corral_source_split_1351;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} out_$i53 := schedule_timeout(out_$i49);
    call {:si_unique_call 301} {:cexpr "__ret"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_1350;

  $bb20:
    assume out_$i52 == 1;
    goto corral_source_split_1349;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 0);
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} out_$i51 := signal_pending(out_$p50);
    call {:si_unique_call 299} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_1346;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} out_$p50 := get_current();
    goto corral_source_split_1345;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56 := i2o_msg_post_wait_mem_loop_$bb16(in_$p4, in_$p6, in_$p46, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56);
    return;

  exit:
    return;
}



procedure i2o_msg_post_wait_mem_loop_$bb16(in_$p4: ref, in_$p6: ref, in_$p46: ref, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i64, in_$i54: i1, in_$i55: i32, in_$i56: i1) returns (out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i64, out_$i54: i1, out_$i55: i32, out_$i56: i1);



implementation i2o_driver_notify_device_remove_all_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i3: i32) returns (out_$p4: ref, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i3: i32)
{

  entry:
    out_$p4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i3 := in_$p4, in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1584;

  $bb9:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i10;
    goto $bb9_dummy;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    out_$i12 := $ult.i32(out_$i10, out_$i11);
    goto corral_source_split_1598;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    out_$i11 := $M.8;
    goto corral_source_split_1597;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i3, 1);
    call {:si_unique_call 374} {:cexpr "i"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_1596;

  $bb7:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_24:
    goto corral_source_split_1594;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} i2o_driver_notify_device_remove(out_$p7, in_$p0);
    goto SeqInstr_23;

  $bb6:
    assume out_$i9 == 1;
    goto corral_source_split_1593;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_1591;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_1590;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.10, out_$p6);
    goto corral_source_split_1589;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref(out_$p4, $mul.ref(out_$i5, 8));
    goto corral_source_split_1588;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i3);
    goto corral_source_split_1587;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p4 := $M.9;
    goto corral_source_split_1586;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i3 := i2o_driver_notify_device_remove_all_loop_$bb4(in_$p0, out_$p4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i3);
    return;

  exit:
    return;
}



procedure i2o_driver_notify_device_remove_all_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i3: i32) returns (out_$p4: ref, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i3: i32);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_pci_alloc_loop_$bb5(in_$p0: ref, in_$p2: ref, in_$i11: i64, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$i23: i64, in_$p26: ref, in_$i27: i64, in_$p29: ref, in_$i30: i64, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i64, in_$p39: ref, in_$i40: i64, in_$i41: i64, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$i47: i64, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p55: ref, in_$i56: i64, in_$i57: i64, in_$i58: i64, in_$i59: i64, in_$p61: ref, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i67: i16, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i16, in_$i72: i32, in_$i73: i1, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$p79: ref, in_$p81: ref, in_$i82: i64, in_$i83: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i8, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i22: i32, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i10: i32, in_$i136: i32) returns (out_$i11: i64, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$i23: i64, out_$p26: ref, out_$i27: i64, out_$p29: ref, out_$i30: i64, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i64, out_$p39: ref, out_$i40: i64, out_$i41: i64, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$i47: i64, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p55: ref, out_$i56: i64, out_$i57: i64, out_$i58: i64, out_$i59: i64, out_$p61: ref, out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i67: i16, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i16, out_$i72: i32, out_$i73: i1, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$p79: ref, out_$p81: ref, out_$i82: i64, out_$i83: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i8, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i22: i32, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i10: i32, out_$i136: i32)
{

  entry:
    out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$i23, out_$p26, out_$i27, out_$p29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i36, out_$p39, out_$i40, out_$i41, out_$p44, out_$i45, out_$i46, out_$i47, out_$p50, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p75, out_$i76, out_$i77, out_$p79, out_$p81, out_$i82, out_$i83, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i22, out_$i133, out_$i134, out_$i135, out_$i10, out_$i136 := in_$i11, in_$p14, in_$i15, in_$i16, in_$i17, in_$p19, in_$i20, in_$i21, in_$i23, in_$p26, in_$i27, in_$p29, in_$i30, in_$p33, in_$i34, in_$i35, in_$i36, in_$p39, in_$i40, in_$i41, in_$p44, in_$i45, in_$i46, in_$i47, in_$p50, in_$i51, in_$i52, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$p75, in_$i76, in_$i77, in_$p79, in_$p81, in_$i82, in_$i83, in_$p85, in_$p86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i22, in_$i133, in_$i134, in_$i135, in_$i10, in_$i136;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1733;

  $bb44:
    assume out_$i135 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i134;
    goto $bb44_dummy;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    out_$i136 := out_$i134;
    assume true;
    goto $bb44;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    out_$i135 := $sle.i32(out_$i134, 5);
    goto corral_source_split_1864;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    out_$i134 := $add.i32(out_$i133, 1);
    call {:si_unique_call 416} {:cexpr "i"} boogie_si_record_i32(out_$i134);
    goto corral_source_split_1863;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_1862;

  $bb8:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i133 := out_$i10;
    goto $bb43;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i133 := out_$i10;
    goto $bb43;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i10;
    assume true;
    goto $bb33;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i89, 0);
    goto corral_source_split_1830;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i8.i32(out_$i88);
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i8($M.0, out_$p87);
    goto corral_source_split_1828;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref(out_$p86, $mul.ref(32, 1));
    goto corral_source_split_1827;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p86 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_1826;

  $bb18:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p79, 4194304);
    goto corral_source_split_1815;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_1814;

  $bb24:
    assume out_$i77 == 1;
    goto corral_source_split_1813;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    out_$i77 := $ugt.i64(out_$i76, 4194304);
    goto corral_source_split_1811;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i64($M.0, out_$p75);
    goto corral_source_split_1810;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_1809;

  $bb22:
    assume out_$i73 == 1;
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$i73 := $ule.i32(out_$i72, 49211);
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i16.i32(out_$i71);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i16($M.0, out_$p70);
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2696)), $mul.ref(66, 1));
    goto corral_source_split_1803;

  $bb19:
    assume out_$i69 == 1;
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$i69 := $ugt.i32(out_$i68, 49201);
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i16.i32(out_$i67);
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i16($M.0, out_$p66);
    goto corral_source_split_1798;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2696)), $mul.ref(66, 1));
    goto corral_source_split_1797;

  $bb17:
    assume out_$i65 == 1;
    goto corral_source_split_1796;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 42241);
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i16.i32(out_$i63);
    goto corral_source_split_1793;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i16($M.0, out_$p62);
    goto corral_source_split_1792;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p61, out_$i59);
    goto corral_source_split_1790;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_1789;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1788;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    out_$i59 := 0;
    goto $bb16;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i58;
    goto $bb16;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i64(out_$i57, 1);
    goto corral_source_split_1775;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    out_$i57 := $sub.i64(out_$i51, out_$i56);
    goto corral_source_split_1774;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i64($M.0, out_$p55);
    goto corral_source_split_1773;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(out_$i52, 56)), $mul.ref(0, 1));
    goto corral_source_split_1772;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i10);
    goto corral_source_split_1771;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.0, out_$p50);
    goto corral_source_split_1770;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(out_$i47, 56)), $mul.ref(8, 1));
    goto corral_source_split_1769;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i10);
    goto corral_source_split_1768;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i46 == 1;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i35 == 1;
    goto $bb12;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_1755;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.0, out_$p33);
    goto corral_source_split_1754;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(out_$i30, 56)), $mul.ref(0, 1));
    goto corral_source_split_1753;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i10);
    goto corral_source_split_1752;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p29, out_$i27);
    goto corral_source_split_1751;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(8, 1));
    goto corral_source_split_1750;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i64($M.0, out_$p26);
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(out_$i23, 56)), $mul.ref(0, 1));
    goto corral_source_split_1748;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i10);
    goto corral_source_split_1747;

  $bb9:
    assume out_$i21 == 1;
    goto corral_source_split_1746;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i10;
    assume true;
    goto $bb9;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i20, 0);
    goto corral_source_split_1744;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i64($M.0, out_$p19);
    goto corral_source_split_1743;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(8, 1));
    goto corral_source_split_1742;

  $bb7:
    assume out_$i17 == 1;
    goto corral_source_split_1741;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i64(out_$i16, 0);
    goto corral_source_split_1739;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    out_$i16 := $and.i64(out_$i15, 256);
    goto corral_source_split_1738;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i64($M.0, out_$p14);
    goto corral_source_split_1737;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(out_$i11, 56)), $mul.ref(24, 1));
    goto corral_source_split_1736;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i10);
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i40, out_$i45);
    goto corral_source_split_1784;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i64($M.0, out_$p44);
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(out_$i41, 56)), $mul.ref(0, 1));
    goto corral_source_split_1782;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i10);
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i64($M.0, out_$p39);
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(out_$i36, 56)), $mul.ref(8, 1));
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i10);
    goto corral_source_split_1778;

  $bb13:
    assume !(out_$i35 == 1);
    goto corral_source_split_1777;

  $bb15:
    assume !(out_$i46 == 1);
    goto corral_source_split_1786;

  $bb28:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p85, 1048576);
    goto corral_source_split_1824;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_1823;

  $bb27:
    assume out_$i83 == 1;
    goto corral_source_split_1822;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    out_$i83 := $ugt.i64(out_$i82, 1048576);
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i64($M.0, out_$p81);
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_1818;

  $bb25:
    assume !(out_$i77 == 1);
    goto corral_source_split_1817;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb21;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i73 == 1);
    goto $bb21;

  $bb44_dummy:
    call {:si_unique_call 1} out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$i23, out_$p26, out_$i27, out_$p29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i36, out_$p39, out_$i40, out_$i41, out_$p44, out_$i45, out_$i46, out_$i47, out_$p50, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p75, out_$i76, out_$i77, out_$p79, out_$p81, out_$i82, out_$i83, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i22, out_$i133, out_$i134, out_$i135, out_$i10, out_$i136 := i2o_pci_alloc_loop_$bb5(in_$p0, in_$p2, out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$i23, out_$p26, out_$i27, out_$p29, out_$i30, out_$p33, out_$i34, out_$i35, out_$i36, out_$p39, out_$i40, out_$i41, out_$p44, out_$i45, out_$i46, out_$i47, out_$p50, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p75, out_$i76, out_$i77, out_$p79, out_$p81, out_$i82, out_$i83, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i22, out_$i133, out_$i134, out_$i135, out_$i10, out_$i136);
    return;

  exit:
    return;
}



procedure i2o_pci_alloc_loop_$bb5(in_$p0: ref, in_$p2: ref, in_$i11: i64, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$i23: i64, in_$p26: ref, in_$i27: i64, in_$p29: ref, in_$i30: i64, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i64, in_$p39: ref, in_$i40: i64, in_$i41: i64, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$i47: i64, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p55: ref, in_$i56: i64, in_$i57: i64, in_$i58: i64, in_$i59: i64, in_$p61: ref, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i67: i16, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i16, in_$i72: i32, in_$i73: i1, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$p79: ref, in_$p81: ref, in_$i82: i64, in_$i83: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i8, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i22: i32, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i10: i32, in_$i136: i32) returns (out_$i11: i64, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$i23: i64, out_$p26: ref, out_$i27: i64, out_$p29: ref, out_$i30: i64, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i64, out_$p39: ref, out_$i40: i64, out_$i41: i64, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$i47: i64, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p55: ref, out_$i56: i64, out_$i57: i64, out_$i58: i64, out_$i59: i64, out_$p61: ref, out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i67: i16, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i16, out_$i72: i32, out_$i73: i1, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$p79: ref, out_$p81: ref, out_$i82: i64, out_$i83: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i8, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i22: i32, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i10: i32, out_$i136: i32);
  modifies $M.0;



implementation i2o_systab_build_loop_$bb19(in_$i13: i32, in_$i31: i32, in_$p38: ref, in_$i61: i1, in_$i62: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i64, in_$i73: i64, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$p79: ref, in_$i80: i16, in_$i81: i64, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i16, in_$i88: i32, in_$i89: i32, in_$i90: i16, in_$i91: i64, in_$p94: ref, in_$p95: ref, in_$i96: i48, in_$i97: i48, in_$i98: i48, in_$i99: i48, in_$i100: i48, in_$i101: i64, in_$p104: ref, in_$p105: ref, in_$i106: i48, in_$i107: i48, in_$p108: ref, in_$i109: i16, in_$i110: i16, in_$i111: i8, in_$i112: i64, in_$p115: ref, in_$p116: ref, in_$i117: i48, in_$i118: i48, in_$i119: i48, in_$i120: i48, in_$i121: i48, in_$i122: i48, in_$p123: ref, in_$i124: i8, in_$i125: i64, in_$p128: ref, in_$p129: ref, in_$i130: i8, in_$i131: i64, in_$p134: ref, in_$p135: ref, in_$i136: i16, in_$i137: i64, in_$p140: ref, in_$i141: i64, in_$p144: ref, in_$p145: ref, in_$i146: i32, in_$i147: i64, in_$p150: ref, in_$p152: ref, in_$i153: i64, in_$i154: i64, in_$i155: i32, in_$i156: i64, in_$p159: ref, in_$p161: ref, in_$i162: i64, in_$i163: i64, in_$i164: i32, in_$i165: i64, in_$p168: ref, in_$i169: i32, in_$i78: i32, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$i176: i64, in_$i177: i1, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i178: i32, in_vslice_dummy_var_111: i32) returns (out_$i61: i1, out_$i62: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i64, out_$i73: i64, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$p79: ref, out_$i80: i16, out_$i81: i64, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i16, out_$i88: i32, out_$i89: i32, out_$i90: i16, out_$i91: i64, out_$p94: ref, out_$p95: ref, out_$i96: i48, out_$i97: i48, out_$i98: i48, out_$i99: i48, out_$i100: i48, out_$i101: i64, out_$p104: ref, out_$p105: ref, out_$i106: i48, out_$i107: i48, out_$p108: ref, out_$i109: i16, out_$i110: i16, out_$i111: i8, out_$i112: i64, out_$p115: ref, out_$p116: ref, out_$i117: i48, out_$i118: i48, out_$i119: i48, out_$i120: i48, out_$i121: i48, out_$i122: i48, out_$p123: ref, out_$i124: i8, out_$i125: i64, out_$p128: ref, out_$p129: ref, out_$i130: i8, out_$i131: i64, out_$p134: ref, out_$p135: ref, out_$i136: i16, out_$i137: i64, out_$p140: ref, out_$i141: i64, out_$p144: ref, out_$p145: ref, out_$i146: i32, out_$i147: i64, out_$p150: ref, out_$p152: ref, out_$i153: i64, out_$i154: i64, out_$i155: i32, out_$i156: i64, out_$p159: ref, out_$p161: ref, out_$i162: i64, out_$i163: i64, out_$i164: i32, out_$i165: i64, out_$p168: ref, out_$i169: i32, out_$i78: i32, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$i176: i64, out_$i177: i1, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i178: i32, out_vslice_dummy_var_111: i32)
{

  entry:
    out_$i61, out_$i62, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p79, out_$i80, out_$i81, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p115, out_$p116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p128, out_$p129, out_$i130, out_$i131, out_$p134, out_$p135, out_$i136, out_$i137, out_$p140, out_$i141, out_$p144, out_$p145, out_$i146, out_$i147, out_$p150, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p159, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p168, out_$i169, out_$i78, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$i176, out_$i177, out_$p58, out_$p59, out_$i60, out_$i178, out_vslice_dummy_var_111 := in_$i61, in_$i62, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$p76, in_$p79, in_$i80, in_$i81, in_$p84, in_$p85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$p94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$p104, in_$p105, in_$i106, in_$i107, in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$p115, in_$p116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$p128, in_$p129, in_$i130, in_$i131, in_$p134, in_$p135, in_$i136, in_$i137, in_$p140, in_$i141, in_$p144, in_$p145, in_$i146, in_$i147, in_$p150, in_$p152, in_$i153, in_$i154, in_$i155, in_$i156, in_$p159, in_$p161, in_$i162, in_$i163, in_$i164, in_$i165, in_$p168, in_$i169, in_$i78, in_$p171, in_$p172, in_$p173, in_$p174, in_$p175, in_$i176, in_$i177, in_$p58, in_$p59, in_$i60, in_$i178, in_vslice_dummy_var_111;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2319;

  $bb29:
    assume out_$i177 == 1;
    assume {:verifier.code 0} true;
    out_$p58, out_$p59, out_$i60 := out_$p59, out_$p174, out_$i78;
    goto $bb29_dummy;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    out_$i178 := out_$i78;
    assume true;
    goto $bb29;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    out_$i177 := $ne.i64(out_$i176, $p2i.ref.i64(i2o_controllers));
    goto corral_source_split_2354;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    out_$i176 := $p2i.ref.i64(out_$p175);
    goto corral_source_split_2353;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(out_$p59, $mul.ref(0, 1976)), $mul.ref(56, 1));
    goto corral_source_split_2352;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref(out_$p173, $mul.ref($sub.ref(0, 56), 1976));
    goto corral_source_split_2351;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    out_$p173 := $bitcast.ref.ref(out_$p172);
    goto corral_source_split_2350;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    out_$p172 := $load.ref($M.0, out_$p171);
    goto corral_source_split_2349;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref($add.ref(out_$p59, $mul.ref(0, 1976)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_2348;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2347;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i169;
    goto $bb27;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i60;
    goto $bb27;

  SeqInstr_63:
    goto corral_source_split_2345;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} i2o_iop_remove(out_$p58);
    goto SeqInstr_62;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} out_vslice_dummy_var_111 := printk.ref.ref.ref(.str.87, .str.1, out_$p76);
    goto corral_source_split_2344;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p75);
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p58, $mul.ref(0, 1976)), $mul.ref(0, 1));
    goto corral_source_split_2342;

  $bb25:
    assume out_$i74 == 1;
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, 0);
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} out_$i73 := ldv__builtin_expect(out_$i72, 0);
    call {:si_unique_call 511} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i71);
    goto corral_source_split_2337;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i1.i32(out_$i70);
    goto corral_source_split_2336;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i32(out_$i69, 0);
    goto corral_source_split_2335;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} out_$i69 := i2o_status_get(out_$p58);
    call {:si_unique_call 509} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_2334;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    out_$p68 := $bitcast.ref.ref(out_$p67);
    goto corral_source_split_2333;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_2332;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(out_$p58, $mul.ref(0, 1976)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_2331;

  $bb22:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i60;
    assume true;
    goto $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i61 := $sge.i32(out_$i60, in_$i13);
    goto corral_source_split_2321;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    out_$i169 := $add.i32(out_$i60, 1);
    call {:si_unique_call 516} {:cexpr "count"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_2433;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p168, out_$i164);
    goto corral_source_split_2432;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref($add.ref($add.ref(in_$p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref(out_$i165, 32)), $mul.ref(28, 1));
    goto corral_source_split_2431;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    out_$i165 := $sext.i32.i64(out_$i60);
    goto corral_source_split_2430;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} out_$i164 := i2o_dma_high(out_$i163);
    goto corral_source_split_2429;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    out_$i163 := $add.i64(out_$i162, 64);
    goto corral_source_split_2428;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i64($M.0, out_$p161);
    goto corral_source_split_2427;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref($add.ref(out_$p58, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(8, 1));
    goto corral_source_split_2426;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p159, out_$i155);
    goto corral_source_split_2425;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref($add.ref($add.ref(in_$p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref(out_$i156, 32)), $mul.ref(24, 1));
    goto corral_source_split_2424;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    out_$i156 := $sext.i32.i64(out_$i60);
    goto corral_source_split_2423;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} out_$i155 := i2o_dma_low(out_$i154);
    goto corral_source_split_2422;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    out_$i154 := $add.i64(out_$i153, 64);
    goto corral_source_split_2421;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i64($M.0, out_$p152);
    goto corral_source_split_2420;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref($add.ref(out_$p58, $mul.ref(0, 1976)), $mul.ref(376, 1)), $mul.ref(8, 1));
    goto corral_source_split_2419;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p150, out_$i146);
    goto corral_source_split_2418;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref($add.ref($add.ref(in_$p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref(out_$i147, 32)), $mul.ref(20, 1));
    goto corral_source_split_2417;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    out_$i147 := $sext.i32.i64(out_$i60);
    goto corral_source_split_2416;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    out_$i146 := $load.i32($M.0, out_$p145);
    goto corral_source_split_2415;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(out_$p68, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2414;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p144, in_$i31);
    goto corral_source_split_2413;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref($add.ref($add.ref(in_$p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref(out_$i141, 32)), $mul.ref(16, 1));
    goto corral_source_split_2412;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    out_$i141 := $sext.i32.i64(out_$i60);
    goto corral_source_split_2411;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p140, out_$i136);
    goto corral_source_split_2410;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref($add.ref($add.ref(in_$p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref(out_$i137, 32)), $mul.ref(12, 1));
    goto corral_source_split_2409;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    out_$i137 := $sext.i32.i64(out_$i60);
    goto corral_source_split_2408;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i16($M.0, out_$p135);
    goto corral_source_split_2407;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(out_$p68, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_2406;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p134, out_$i130);
    goto corral_source_split_2405;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref($add.ref($add.ref(in_$p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref(out_$i131, 32)), $mul.ref(11, 1));
    goto corral_source_split_2404;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    out_$i131 := $sext.i32.i64(out_$i60);
    goto corral_source_split_2403;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i8($M.0, out_$p129);
    goto corral_source_split_2402;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(out_$p68, $mul.ref(0, 88)), $mul.ref(11, 1));
    goto corral_source_split_2401;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p128, out_$i124);
    goto corral_source_split_2400;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref($add.ref($add.ref(in_$p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref(out_$i125, 32)), $mul.ref(10, 1));
    goto corral_source_split_2399;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i60);
    goto corral_source_split_2398;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i8($M.0, out_$p123);
    goto corral_source_split_2397;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(out_$p68, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_2396;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i48($M.0, out_$p116, out_$i122);
    goto corral_source_split_2395;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    out_$i122 := $or.i48(out_$i121, out_$i120);
    goto corral_source_split_2394;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    out_$i121 := $and.i48(out_$i118, 17592186044415);
    goto corral_source_split_2393;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$i120 := $shl.i48(out_$i119, 44);
    goto corral_source_split_2392;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$i119 := $and.i48(out_$i117, 15);
    goto corral_source_split_2391;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i48($M.0, out_$p116);
    goto corral_source_split_2390;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i8.i48(out_$i111);
    goto corral_source_split_2389;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    out_$p116 := $bitcast.ref.ref(out_$p115);
    goto corral_source_split_2388;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($add.ref($add.ref(in_$p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref(out_$i112, 32)), $mul.ref(4, 1));
    goto corral_source_split_2387;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$i112 := $sext.i32.i64(out_$i60);
    goto corral_source_split_2386;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    out_$i111 := $trunc.i16.i8(out_$i110);
    goto corral_source_split_2385;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    out_$i110 := $lshr.i16(out_$i109, 12);
    goto corral_source_split_2384;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i16($M.0, out_$p108);
    goto corral_source_split_2383;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p68, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_2382;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i48($M.0, out_$p105, out_$i107);
    goto corral_source_split_2381;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$i107 := $and.i48(out_$i106, $sub.i48(0, 17587891077121));
    goto corral_source_split_2380;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i48($M.0, out_$p105);
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(out_$p104);
    goto corral_source_split_2378;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref($add.ref(in_$p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref(out_$i101, 32)), $mul.ref(4, 1));
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(out_$i60);
    goto corral_source_split_2376;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i48($M.0, out_$p95, out_$i100);
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    out_$i100 := $or.i48(out_$i99, out_$i98);
    goto corral_source_split_2374;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$i99 := $and.i48(out_$i97, $sub.i48(0, 4096));
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    out_$i98 := $and.i48(out_$i96, 4095);
    goto corral_source_split_2372;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i48($M.0, out_$p95);
    goto corral_source_split_2371;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i16.i48(out_$i90);
    goto corral_source_split_2370;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    out_$p95 := $bitcast.ref.ref(out_$p94);
    goto corral_source_split_2369;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref($add.ref(in_$p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref(out_$i91, 32)), $mul.ref(4, 1));
    goto corral_source_split_2368;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    out_$i91 := $sext.i32.i64(out_$i60);
    goto corral_source_split_2367;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    out_$i90 := $trunc.i32.i16(out_$i89);
    goto corral_source_split_2366;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i88, 2);
    goto corral_source_split_2365;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i16.i32(out_$i87);
    goto corral_source_split_2364;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    out_$i87 := $trunc.i32.i16(out_$i86);
    goto corral_source_split_2363;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.0, out_$p85);
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p58, $mul.ref(0, 1976)), $mul.ref(16, 1));
    goto corral_source_split_2361;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p84, out_$i80);
    goto corral_source_split_2360;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref($add.ref(in_$p38, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref(out_$i81, 32)), $mul.ref(0, 1));
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i60);
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i16($M.0, out_$p79);
    goto corral_source_split_2357;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p68, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2356;

  $bb26:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i61, out_$i62, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p79, out_$i80, out_$i81, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p115, out_$p116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p128, out_$p129, out_$i130, out_$i131, out_$p134, out_$p135, out_$i136, out_$i137, out_$p140, out_$i141, out_$p144, out_$p145, out_$i146, out_$i147, out_$p150, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p159, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p168, out_$i169, out_$i78, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$i176, out_$i177, out_$p58, out_$p59, out_$i60, out_$i178, out_vslice_dummy_var_111 := i2o_systab_build_loop_$bb19(in_$i13, in_$i31, in_$p38, out_$i61, out_$i62, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p79, out_$i80, out_$i81, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p104, out_$p105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p115, out_$p116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p128, out_$p129, out_$i130, out_$i131, out_$p134, out_$p135, out_$i136, out_$i137, out_$p140, out_$i141, out_$p144, out_$p145, out_$i146, out_$i147, out_$p150, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p159, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p168, out_$i169, out_$i78, out_$p171, out_$p172, out_$p173, out_$p174, out_$p175, out_$i176, out_$i177, out_$p58, out_$p59, out_$i60, out_$i178, out_vslice_dummy_var_111);
    return;

  exit:
    return;
}



procedure i2o_systab_build_loop_$bb19(in_$i13: i32, in_$i31: i32, in_$p38: ref, in_$i61: i1, in_$i62: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i64, in_$i73: i64, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$p79: ref, in_$i80: i16, in_$i81: i64, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i16, in_$i88: i32, in_$i89: i32, in_$i90: i16, in_$i91: i64, in_$p94: ref, in_$p95: ref, in_$i96: i48, in_$i97: i48, in_$i98: i48, in_$i99: i48, in_$i100: i48, in_$i101: i64, in_$p104: ref, in_$p105: ref, in_$i106: i48, in_$i107: i48, in_$p108: ref, in_$i109: i16, in_$i110: i16, in_$i111: i8, in_$i112: i64, in_$p115: ref, in_$p116: ref, in_$i117: i48, in_$i118: i48, in_$i119: i48, in_$i120: i48, in_$i121: i48, in_$i122: i48, in_$p123: ref, in_$i124: i8, in_$i125: i64, in_$p128: ref, in_$p129: ref, in_$i130: i8, in_$i131: i64, in_$p134: ref, in_$p135: ref, in_$i136: i16, in_$i137: i64, in_$p140: ref, in_$i141: i64, in_$p144: ref, in_$p145: ref, in_$i146: i32, in_$i147: i64, in_$p150: ref, in_$p152: ref, in_$i153: i64, in_$i154: i64, in_$i155: i32, in_$i156: i64, in_$p159: ref, in_$p161: ref, in_$i162: i64, in_$i163: i64, in_$i164: i32, in_$i165: i64, in_$p168: ref, in_$i169: i32, in_$i78: i32, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$i176: i64, in_$i177: i1, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i178: i32, in_vslice_dummy_var_111: i32) returns (out_$i61: i1, out_$i62: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i64, out_$i73: i64, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$p79: ref, out_$i80: i16, out_$i81: i64, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i16, out_$i88: i32, out_$i89: i32, out_$i90: i16, out_$i91: i64, out_$p94: ref, out_$p95: ref, out_$i96: i48, out_$i97: i48, out_$i98: i48, out_$i99: i48, out_$i100: i48, out_$i101: i64, out_$p104: ref, out_$p105: ref, out_$i106: i48, out_$i107: i48, out_$p108: ref, out_$i109: i16, out_$i110: i16, out_$i111: i8, out_$i112: i64, out_$p115: ref, out_$p116: ref, out_$i117: i48, out_$i118: i48, out_$i119: i48, out_$i120: i48, out_$i121: i48, out_$i122: i48, out_$p123: ref, out_$i124: i8, out_$i125: i64, out_$p128: ref, out_$p129: ref, out_$i130: i8, out_$i131: i64, out_$p134: ref, out_$p135: ref, out_$i136: i16, out_$i137: i64, out_$p140: ref, out_$i141: i64, out_$p144: ref, out_$p145: ref, out_$i146: i32, out_$i147: i64, out_$p150: ref, out_$p152: ref, out_$i153: i64, out_$i154: i64, out_$i155: i32, out_$i156: i64, out_$p159: ref, out_$p161: ref, out_$i162: i64, out_$i163: i64, out_$i164: i32, out_$i165: i64, out_$p168: ref, out_$i169: i32, out_$i78: i32, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$i176: i64, out_$i177: i1, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i178: i32, out_vslice_dummy_var_111: i32);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.22, assertsPassed, $M.25;



implementation i2o_systab_build_loop_$bb4(in_$i16: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p14: ref, in_$i15: i32, in_$i25: i32) returns (out_$i16: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p14: ref, out_$i15: i32, out_$i25: i32)
{

  entry:
    out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p14, out_$i15, out_$i25 := in_$i16, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p14, in_$i15, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2261;

  $bb6:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$i15 := out_$p21, out_$i16;
    goto $bb6_dummy;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i16;
    assume true;
    goto $bb6;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, $p2i.ref.i64(i2o_controllers));
    goto corral_source_split_2270;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_2269;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p14, $mul.ref(0, 1976)), $mul.ref(56, 1));
    goto corral_source_split_2268;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p20, $mul.ref($sub.ref(0, 56), 1976));
    goto corral_source_split_2267;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_2266;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_2265;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 1976)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_2264;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i15, 1);
    call {:si_unique_call 502} {:cexpr "num_controllers"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_2263;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p14, out_$i15, out_$i25 := i2o_systab_build_loop_$bb4(out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p14, out_$i15, out_$i25);
    return;

  exit:
    return;
}



procedure i2o_systab_build_loop_$bb4(in_$i16: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p14: ref, in_$i15: i32, in_$i25: i32) returns (out_$i16: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p14: ref, out_$i15: i32, out_$i25: i32);



implementation i2o_driver_notify_controller_add_all_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i3: i32) returns (out_$p4: ref, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i3: i32)
{

  entry:
    out_$p4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i3 := in_$p4, in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2573;

  $bb9:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i10;
    goto $bb9_dummy;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    out_$i12 := $ult.i32(out_$i10, out_$i11);
    goto corral_source_split_2587;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    out_$i11 := $M.8;
    goto corral_source_split_2586;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i3, 1);
    call {:si_unique_call 539} {:cexpr "i"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_2585;

  $bb7:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_75:
    goto corral_source_split_2583;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} i2o_driver_notify_controller_add(out_$p7, in_$p0);
    goto SeqInstr_74;

  $bb6:
    assume out_$i9 == 1;
    goto corral_source_split_2582;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_2580;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_2579;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.10, out_$p6);
    goto corral_source_split_2578;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref(out_$p4, $mul.ref(out_$i5, 8));
    goto corral_source_split_2577;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i3);
    goto corral_source_split_2576;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p4 := $M.9;
    goto corral_source_split_2575;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i3 := i2o_driver_notify_controller_add_all_loop_$bb4(in_$p0, out_$p4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i3);
    return;

  exit:
    return;
}



procedure i2o_driver_notify_controller_add_all_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i3: i32) returns (out_$p4: ref, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i3: i32);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_device_parse_lct_loop_$bb42(in_$p17: ref, in_$i78: i32, in_$i241: i64, in_$p244: ref, in_$i245: i16, in_$i246: i16, in_$i247: i32, in_$p249: ref, in_$i250: i16, in_$i251: i16, in_$i252: i32, in_$i253: i1, in_$i255: i32, in_$i256: i1, in_$i240: i32, in_$p237: ref) returns (out_$i241: i64, out_$p244: ref, out_$i245: i16, out_$i246: i16, out_$i247: i32, out_$p249: ref, out_$i250: i16, out_$i251: i16, out_$i252: i32, out_$i253: i1, out_$i255: i32, out_$i256: i1, out_$i240: i32)
{

  entry:
    out_$i241, out_$p244, out_$i245, out_$i246, out_$i247, out_$p249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i240 := in_$i241, in_$p244, in_$i245, in_$i246, in_$i247, in_$p249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i255, in_$i256, in_$i240;
    goto $bb42, exit;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_2886;

  $bb48:
    assume out_$i256 == 1;
    assume {:verifier.code 0} true;
    out_$i240 := out_$i255;
    goto $bb48_dummy;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    out_$i256 := $slt.i32(out_$i255, in_$i78);
    goto corral_source_split_2905;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i255 := $add.i32(out_$i240, 1);
    call {:si_unique_call 560} {:cexpr "i"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_2904;

  $bb45:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i247, out_$i252);
    goto corral_source_split_2897;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    out_$i252 := $zext.i16.i32(out_$i251);
    goto corral_source_split_2896;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    out_$i251 := $and.i16(out_$i250, 4095);
    goto corral_source_split_2895;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    out_$i250 := $load.i16($M.0, out_$p249);
    goto corral_source_split_2894;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    out_$p249 := $add.ref($add.ref($add.ref(in_$p237, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2893;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    out_$i247 := $zext.i16.i32(out_$i246);
    goto corral_source_split_2892;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    out_$i246 := $and.i16(out_$i245, 4095);
    goto corral_source_split_2891;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    out_$i245 := $load.i16($M.0, out_$p244);
    goto corral_source_split_2890;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 52)), $mul.ref(12, 1)), $mul.ref(out_$i241, 40)), $mul.ref(2, 1));
    goto corral_source_split_2889;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i241 := $sext.i32.i64(out_$i240);
    goto corral_source_split_2888;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb48_dummy:
    call {:si_unique_call 1} out_$i241, out_$p244, out_$i245, out_$i246, out_$i247, out_$p249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i240 := i2o_device_parse_lct_loop_$bb42(in_$p17, in_$i78, out_$i241, out_$p244, out_$i245, out_$i246, out_$i247, out_$p249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i240, in_$p237);
    return;

  exit:
    return;
}



procedure i2o_device_parse_lct_loop_$bb42(in_$p17: ref, in_$i78: i32, in_$i241: i64, in_$p244: ref, in_$i245: i16, in_$i246: i16, in_$i247: i32, in_$p249: ref, in_$i250: i16, in_$i251: i16, in_$i252: i32, in_$i253: i1, in_$i255: i32, in_$i256: i1, in_$i240: i32, in_$p237: ref) returns (out_$i241: i64, out_$p244: ref, out_$i245: i16, out_$i246: i16, out_$i247: i32, out_$p249: ref, out_$i250: i16, out_$i251: i16, out_$i252: i32, out_$i253: i1, out_$i255: i32, out_$i256: i1, out_$i240: i32);



implementation i2o_device_parse_lct_loop_$bb37(in_$p17: ref, in_$i78: i32, in_$i235: i64, in_$i239: i1, in_$i241: i64, in_$p244: ref, in_$i245: i16, in_$i246: i16, in_$i247: i32, in_$p249: ref, in_$i250: i16, in_$i251: i16, in_$i252: i32, in_$i253: i1, in_$i255: i32, in_$i256: i1, in_$i240: i32, in_$i254: i32, in_$i257: i1, in_$p259: ref, in_$p260: ref, in_$p261: ref, in_$p262: ref, in_$p263: ref, in_$i264: i64, in_$i265: i1, in_$p237: ref, in_$p238: ref) returns (out_$i239: i1, out_$i241: i64, out_$p244: ref, out_$i245: i16, out_$i246: i16, out_$i247: i32, out_$p249: ref, out_$i250: i16, out_$i251: i16, out_$i252: i32, out_$i253: i1, out_$i255: i32, out_$i256: i1, out_$i240: i32, out_$i254: i32, out_$i257: i1, out_$p259: ref, out_$p260: ref, out_$p261: ref, out_$p262: ref, out_$p263: ref, out_$i264: i64, out_$i265: i1, out_$p237: ref, out_$p238: ref)
{

  entry:
    out_$i239, out_$i241, out_$p244, out_$i245, out_$i246, out_$i247, out_$p249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i240, out_$i254, out_$i257, out_$p259, out_$p260, out_$p261, out_$p262, out_$p263, out_$i264, out_$i265, out_$p237, out_$p238 := in_$i239, in_$i241, in_$p244, in_$i245, in_$i246, in_$i247, in_$p249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i255, in_$i256, in_$i240, in_$i254, in_$i257, in_$p259, in_$p260, in_$p261, in_$p262, in_$p263, in_$i264, in_$i265, in_$p237, in_$p238;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2880;

  $bb54:
    assume out_$i265 == 1;
    assume {:verifier.code 0} true;
    out_$p237, out_$p238 := out_$p238, out_$p262;
    goto $bb54_dummy;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    out_$i265 := $ne.i64(out_$i264, in_$i235);
    goto corral_source_split_2918;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    out_$i264 := $p2i.ref.i64(out_$p263);
    goto corral_source_split_2917;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref(out_$p238, $mul.ref(0, 1376)), $mul.ref(48, 1));
    goto corral_source_split_2916;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    out_$p262 := $add.ref(out_$p261, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_2915;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    out_$p261 := $bitcast.ref.ref(out_$p260);
    goto corral_source_split_2914;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    out_$p260 := $load.ref($M.0, out_$p259);
    goto corral_source_split_2913;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p259 := $add.ref($add.ref($add.ref(out_$p238, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2912;

  $bb52:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_90:
    goto corral_source_split_2910;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} i2o_device_remove(out_$p237);
    goto SeqInstr_89;

  $bb51:
    assume out_$i257 == 1;
    goto corral_source_split_2909;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i254, 0);
    goto corral_source_split_2902;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_2901;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i254 := 0;
    goto $bb46;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    out_$i254 := 1;
    goto $bb46;

  $bb44:
    assume out_$i253 == 1;
    goto corral_source_split_2899;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i247, out_$i252);
    goto corral_source_split_2897;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    out_$i252 := $zext.i16.i32(out_$i251);
    goto corral_source_split_2896;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    out_$i251 := $and.i16(out_$i250, 4095);
    goto corral_source_split_2895;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    out_$i250 := $load.i16($M.0, out_$p249);
    goto corral_source_split_2894;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    out_$p249 := $add.ref($add.ref($add.ref(out_$p237, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2893;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    out_$i247 := $zext.i16.i32(out_$i246);
    goto corral_source_split_2892;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    out_$i246 := $and.i16(out_$i245, 4095);
    goto corral_source_split_2891;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    out_$i245 := $load.i16($M.0, out_$p244);
    goto corral_source_split_2890;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 52)), $mul.ref(12, 1)), $mul.ref(out_$i241, 40)), $mul.ref(2, 1));
    goto corral_source_split_2889;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i241 := $sext.i32.i64(out_$i240);
    goto corral_source_split_2888;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb42:
    call out_$i241, out_$p244, out_$i245, out_$i246, out_$i247, out_$p249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i240 := i2o_device_parse_lct_loop_$bb42(in_$p17, in_$i78, out_$i241, out_$p244, out_$i245, out_$i246, out_$i247, out_$p249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i240, out_$p237);
    goto $bb42_last;

  $bb42_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2886;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    out_$i240 := 0;
    goto $bb42;

  $bb48:
    assume out_$i256 == 1;
    assume {:verifier.code 0} true;
    out_$i240 := out_$i255;
    assume false;
    return;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    out_$i256 := $slt.i32(out_$i255, in_$i78);
    goto corral_source_split_2905;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i255 := $add.i32(out_$i240, 1);
    call {:si_unique_call 560} {:cexpr "i"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_2904;

  $bb45:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb39:
    assume out_$i239 == 1;
    goto corral_source_split_2884;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i239 := $slt.i32(0, in_$i78);
    goto corral_source_split_2882;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i239 == 1);
    goto $bb41;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb49:
    assume !(out_$i256 == 1);
    goto corral_source_split_2907;

  $bb54_dummy:
    call {:si_unique_call 1} out_$i239, out_$i241, out_$p244, out_$i245, out_$i246, out_$i247, out_$p249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i240, out_$i254, out_$i257, out_$p259, out_$p260, out_$p261, out_$p262, out_$p263, out_$i264, out_$i265, out_$p237, out_$p238 := i2o_device_parse_lct_loop_$bb37(in_$p17, in_$i78, in_$i235, out_$i239, out_$i241, out_$p244, out_$i245, out_$i246, out_$i247, out_$p249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i240, out_$i254, out_$i257, out_$p259, out_$p260, out_$p261, out_$p262, out_$p263, out_$i264, out_$i265, out_$p237, out_$p238);
    return;

  exit:
    return;
}



procedure i2o_device_parse_lct_loop_$bb37(in_$p17: ref, in_$i78: i32, in_$i235: i64, in_$i239: i1, in_$i241: i64, in_$p244: ref, in_$i245: i16, in_$i246: i16, in_$i247: i32, in_$p249: ref, in_$i250: i16, in_$i251: i16, in_$i252: i32, in_$i253: i1, in_$i255: i32, in_$i256: i1, in_$i240: i32, in_$i254: i32, in_$i257: i1, in_$p259: ref, in_$p260: ref, in_$p261: ref, in_$p262: ref, in_$p263: ref, in_$i264: i64, in_$i265: i1, in_$p237: ref, in_$p238: ref) returns (out_$i239: i1, out_$i241: i64, out_$p244: ref, out_$i245: i16, out_$i246: i16, out_$i247: i32, out_$p249: ref, out_$i250: i16, out_$i251: i16, out_$i252: i32, out_$i253: i1, out_$i255: i32, out_$i256: i1, out_$i240: i32, out_$i254: i32, out_$i257: i1, out_$p259: ref, out_$p260: ref, out_$p261: ref, out_$p262: ref, out_$p263: ref, out_$i264: i64, out_$i265: i1, out_$p237: ref, out_$p238: ref);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_device_parse_lct_loop_$bb19(in_$p83: ref, in_$i84: i64, in_$i190: i64, in_$p194: ref, in_$i195: i16, in_$i196: i16, in_$i197: i32, in_$p199: ref, in_$i200: i16, in_$i201: i16, in_$i202: i32, in_$i203: i1, in_$p206: ref, in_$p207: ref, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$i211: i64, in_$i212: i1, in_$p192: ref, in_$p193: ref) returns (out_$p194: ref, out_$i195: i16, out_$i196: i16, out_$i197: i32, out_$p199: ref, out_$i200: i16, out_$i201: i16, out_$i202: i32, out_$i203: i1, out_$p206: ref, out_$p207: ref, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$i211: i64, out_$i212: i1, out_$p192: ref, out_$p193: ref)
{

  entry:
    out_$p194, out_$i195, out_$i196, out_$i197, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$i211, out_$i212, out_$p192, out_$p193 := in_$p194, in_$i195, in_$i196, in_$i197, in_$p199, in_$i200, in_$i201, in_$i202, in_$i203, in_$p206, in_$p207, in_$p208, in_$p209, in_$p210, in_$i211, in_$i212, in_$p192, in_$p193;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2825;

  $bb25:
    assume out_$i212 == 1;
    assume {:verifier.code 0} true;
    out_$p192, out_$p193 := out_$p193, out_$p209;
    goto $bb25_dummy;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    out_$i212 := $ne.i64(out_$i211, in_$i190);
    goto corral_source_split_2848;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    out_$i211 := $p2i.ref.i64(out_$p210);
    goto corral_source_split_2847;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    out_$p210 := $add.ref($add.ref(out_$p193, $mul.ref(0, 1376)), $mul.ref(48, 1));
    goto corral_source_split_2846;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref(out_$p208, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_2845;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    out_$p208 := $bitcast.ref.ref(out_$p207);
    goto corral_source_split_2844;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    out_$p207 := $load.ref($M.0, out_$p206);
    goto corral_source_split_2843;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p206 := $add.ref($add.ref($add.ref(out_$p193, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2842;

  $bb22:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i197, out_$i202);
    goto corral_source_split_2835;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    out_$i202 := $zext.i16.i32(out_$i201);
    goto corral_source_split_2834;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$i201 := $and.i16(out_$i200, 4095);
    goto corral_source_split_2833;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    out_$i200 := $load.i16($M.0, out_$p199);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$p199 := $add.ref($add.ref($add.ref(out_$p192, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2831;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    out_$i197 := $zext.i16.i32(out_$i196);
    goto corral_source_split_2830;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$i196 := $and.i16(out_$i195, 4095);
    goto corral_source_split_2829;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    out_$i195 := $load.i16($M.0, out_$p194);
    goto corral_source_split_2828;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref(in_$p83, $mul.ref(in_$i84, 40)), $mul.ref(2, 1));
    goto corral_source_split_2827;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p194, out_$i195, out_$i196, out_$i197, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$i211, out_$i212, out_$p192, out_$p193 := i2o_device_parse_lct_loop_$bb19(in_$p83, in_$i84, in_$i190, out_$p194, out_$i195, out_$i196, out_$i197, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$i211, out_$i212, out_$p192, out_$p193);
    return;

  exit:
    return;
}



procedure i2o_device_parse_lct_loop_$bb19(in_$p83: ref, in_$i84: i64, in_$i190: i64, in_$p194: ref, in_$i195: i16, in_$i196: i16, in_$i197: i32, in_$p199: ref, in_$i200: i16, in_$i201: i16, in_$i202: i32, in_$i203: i1, in_$p206: ref, in_$p207: ref, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$i211: i64, in_$i212: i1, in_$p192: ref, in_$p193: ref) returns (out_$p194: ref, out_$i195: i16, out_$i196: i16, out_$i197: i32, out_$p199: ref, out_$i200: i16, out_$i201: i16, out_$i202: i32, out_$i203: i1, out_$p206: ref, out_$p207: ref, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$i211: i64, out_$i212: i1, out_$p192: ref, out_$p193: ref);



implementation i2o_device_parse_lct_loop_$bb11(in_$p0: ref, in_$p17: ref, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$p85: ref, in_$p86: ref, in_$i87: i32, in_$i88: i16, in_$p89: ref, in_$i90: i32, in_$i91: i16, in_$i92: i32, in_$i93: i32, in_$i94: i16, in_$p95: ref, in_$i96: i16, in_$i97: i16, in_$i98: i16, in_$i99: i16, in_$i100: i64, in_$p101: ref, in_$i102: i32, in_$p103: ref, in_$i104: i64, in_$p105: ref, in_$i106: i32, in_$p107: ref, in_$i108: i64, in_$p109: ref, in_$i110: i32, in_$i111: i16, in_$i112: i32, in_$i113: i32, in_$i114: i16, in_$p115: ref, in_$i116: i16, in_$i117: i16, in_$i118: i16, in_$i119: i16, in_$i120: i32, in_$i121: i8, in_$i122: i32, in_$i123: i32, in_$i124: i8, in_$p125: ref, in_$i126: i16, in_$i127: i16, in_$i128: i16, in_$i129: i16, in_$i130: i16, in_$i131: i16, in_$i132: i32, in_$i133: i16, in_$p134: ref, in_$i135: i64, in_$p136: ref, in_$i137: i32, in_$p138: ref, in_$i139: i64, in_$p140: ref, in_$i141: i32, in_$i142: i16, in_$i143: i32, in_$i144: i32, in_$i145: i16, in_$p146: ref, in_$i147: i16, in_$i148: i16, in_$i149: i16, in_$i150: i16, in_$i151: i32, in_$i152: i16, in_$i153: i32, in_$i154: i32, in_$i155: i16, in_$p156: ref, in_$i157: i16, in_$i158: i16, in_$i159: i16, in_$i160: i16, in_$i161: i32, in_$i162: i8, in_$p163: ref, in_$i164: i1, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$i171: i64, in_$p172: ref, in_$i173: i64, in_$p174: ref, in_$i175: i32, in_$p176: ref, in_$p178: ref, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p183: ref, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$p187: ref, in_$i188: i64, in_$p189: ref, in_$i190: i64, in_$i191: i1, in_$p194: ref, in_$i195: i16, in_$i196: i16, in_$i197: i32, in_$p199: ref, in_$i200: i16, in_$i201: i16, in_$i202: i32, in_$i203: i1, in_$p206: ref, in_$p207: ref, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$i211: i64, in_$i212: i1, in_$p192: ref, in_$p193: ref, in_$i204: i32, in_$i213: i1, in_$i215: i32, in_$i216: i32, in_$i217: i16, in_$i218: i32, in_$i219: i32, in_$i220: i1, in_$p79: ref, in_$i80: i32, in_$i81: i16, in_$i221: i32, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8, in_cmdloc_dummy_var_24: [ref]i8, in_vslice_dummy_var_113: i32) returns (out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$p85: ref, out_$p86: ref, out_$i87: i32, out_$i88: i16, out_$p89: ref, out_$i90: i32, out_$i91: i16, out_$i92: i32, out_$i93: i32, out_$i94: i16, out_$p95: ref, out_$i96: i16, out_$i97: i16, out_$i98: i16, out_$i99: i16, out_$i100: i64, out_$p101: ref, out_$i102: i32, out_$p103: ref, out_$i104: i64, out_$p105: ref, out_$i106: i32, out_$p107: ref, out_$i108: i64, out_$p109: ref, out_$i110: i32, out_$i111: i16, out_$i112: i32, out_$i113: i32, out_$i114: i16, out_$p115: ref, out_$i116: i16, out_$i117: i16, out_$i118: i16, out_$i119: i16, out_$i120: i32, out_$i121: i8, out_$i122: i32, out_$i123: i32, out_$i124: i8, out_$p125: ref, out_$i126: i16, out_$i127: i16, out_$i128: i16, out_$i129: i16, out_$i130: i16, out_$i131: i16, out_$i132: i32, out_$i133: i16, out_$p134: ref, out_$i135: i64, out_$p136: ref, out_$i137: i32, out_$p138: ref, out_$i139: i64, out_$p140: ref, out_$i141: i32, out_$i142: i16, out_$i143: i32, out_$i144: i32, out_$i145: i16, out_$p146: ref, out_$i147: i16, out_$i148: i16, out_$i149: i16, out_$i150: i16, out_$i151: i32, out_$i152: i16, out_$i153: i32, out_$i154: i32, out_$i155: i16, out_$p156: ref, out_$i157: i16, out_$i158: i16, out_$i159: i16, out_$i160: i16, out_$i161: i32, out_$i162: i8, out_$p163: ref, out_$i164: i1, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$i171: i64, out_$p172: ref, out_$i173: i64, out_$p174: ref, out_$i175: i32, out_$p176: ref, out_$p178: ref, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p183: ref, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$p187: ref, out_$i188: i64, out_$p189: ref, out_$i190: i64, out_$i191: i1, out_$p194: ref, out_$i195: i16, out_$i196: i16, out_$i197: i32, out_$p199: ref, out_$i200: i16, out_$i201: i16, out_$i202: i32, out_$i203: i1, out_$p206: ref, out_$p207: ref, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$i211: i64, out_$i212: i1, out_$p192: ref, out_$p193: ref, out_$i204: i32, out_$i213: i1, out_$i215: i32, out_$i216: i32, out_$i217: i16, out_$i218: i32, out_$i219: i32, out_$i220: i1, out_$p79: ref, out_$i80: i32, out_$i81: i16, out_$i221: i32, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8, out_cmdloc_dummy_var_24: [ref]i8, out_vslice_dummy_var_113: i32)
{

  entry:
    out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$p103, out_$i104, out_$p105, out_$i106, out_$p107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$p136, out_$i137, out_$p138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$i164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$i171, out_$p172, out_$i173, out_$p174, out_$i175, out_$p176, out_$p178, out_$p179, out_$p180, out_$p181, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p194, out_$i195, out_$i196, out_$i197, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$i211, out_$i212, out_$p192, out_$p193, out_$i204, out_$i213, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p79, out_$i80, out_$i81, out_$i221, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_vslice_dummy_var_113 := in_$p82, in_$p83, in_$i84, in_$p85, in_$p86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$p101, in_$i102, in_$p103, in_$i104, in_$p105, in_$i106, in_$p107, in_$i108, in_$p109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$p134, in_$i135, in_$p136, in_$i137, in_$p138, in_$i139, in_$p140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$p146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$p156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$p163, in_$i164, in_$p165, in_$p166, in_$p167, in_$p168, in_$p169, in_$p170, in_$i171, in_$p172, in_$i173, in_$p174, in_$i175, in_$p176, in_$p178, in_$p179, in_$p180, in_$p181, in_$p183, in_$p184, in_$p185, in_$p186, in_$p187, in_$i188, in_$p189, in_$i190, in_$i191, in_$p194, in_$i195, in_$i196, in_$i197, in_$p199, in_$i200, in_$i201, in_$i202, in_$i203, in_$p206, in_$p207, in_$p208, in_$p209, in_$p210, in_$i211, in_$i212, in_$p192, in_$p193, in_$i204, in_$i213, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$p79, in_$i80, in_$i81, in_$i221, in_cmdloc_dummy_var_19, in_cmdloc_dummy_var_20, in_cmdloc_dummy_var_21, in_cmdloc_dummy_var_22, in_cmdloc_dummy_var_23, in_cmdloc_dummy_var_24, in_vslice_dummy_var_113;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2700;

  $bb31:
    assume out_$i220 == 1;
    assume {:verifier.code 0} true;
    out_$p79, out_$i80, out_$i81 := out_$p174, out_$i218, out_$i217;
    goto $bb31_dummy;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    out_$i221 := out_$i218;
    assume true;
    goto $bb31;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    out_$i220 := $ne.i32(out_$i219, 0);
    goto corral_source_split_2860;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    out_$i219 := $zext.i16.i32(out_$i217);
    goto corral_source_split_2859;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    out_$i218 := $add.i32(out_$i80, 1);
    call {:si_unique_call 559} {:cexpr "max"} boogie_si_record_i32(out_$i218);
    goto corral_source_split_2858;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    out_$i217 := $trunc.i32.i16(out_$i216);
    call {:si_unique_call 558} {:cexpr "table_size"} boogie_si_record_i16(out_$i217);
    goto corral_source_split_2857;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    out_$i216 := $add.i32(out_$i215, 65527);
    goto corral_source_split_2856;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i215 := $zext.i16.i32(out_$i81);
    goto corral_source_split_2855;

  $bb29:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_87:
    goto corral_source_split_2853;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} out_vslice_dummy_var_113 := i2o_device_add(in_$p0, out_$p85);
    goto SeqInstr_86;

  $bb28:
    assume out_$i213 == 1;
    goto corral_source_split_2852;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i204, 0);
    goto corral_source_split_2840;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2839;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i204 := 0;
    goto $bb23;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    out_$i204 := 1;
    goto $bb23;

  $bb21:
    assume out_$i203 == 1;
    goto corral_source_split_2837;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i197, out_$i202);
    goto corral_source_split_2835;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    out_$i202 := $zext.i16.i32(out_$i201);
    goto corral_source_split_2834;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$i201 := $and.i16(out_$i200, 4095);
    goto corral_source_split_2833;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    out_$i200 := $load.i16($M.0, out_$p199);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$p199 := $add.ref($add.ref($add.ref(out_$p192, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2831;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    out_$i197 := $zext.i16.i32(out_$i196);
    goto corral_source_split_2830;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$i196 := $and.i16(out_$i195, 4095);
    goto corral_source_split_2829;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    out_$i195 := $load.i16($M.0, out_$p194);
    goto corral_source_split_2828;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 40)), $mul.ref(2, 1));
    goto corral_source_split_2827;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb19:
    call out_$p194, out_$i195, out_$i196, out_$i197, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$i211, out_$i212, out_$p192, out_$p193 := i2o_device_parse_lct_loop_$bb19(out_$p83, out_$i84, out_$i190, out_$p194, out_$i195, out_$i196, out_$i197, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$i211, out_$i212, out_$p192, out_$p193);
    goto $bb19_last;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$p192, out_$p193 := out_$p181, out_$p186;
    goto $bb19;

  $bb25:
    assume out_$i212 == 1;
    assume {:verifier.code 0} true;
    out_$p192, out_$p193 := out_$p193, out_$p209;
    assume false;
    return;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    out_$i212 := $ne.i64(out_$i211, out_$i190);
    goto corral_source_split_2848;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    out_$i211 := $p2i.ref.i64(out_$p210);
    goto corral_source_split_2847;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    out_$p210 := $add.ref($add.ref(out_$p193, $mul.ref(0, 1376)), $mul.ref(48, 1));
    goto corral_source_split_2846;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref(out_$p208, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_2845;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    out_$p208 := $bitcast.ref.ref(out_$p207);
    goto corral_source_split_2844;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    out_$p207 := $load.ref($M.0, out_$p206);
    goto corral_source_split_2843;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p206 := $add.ref($add.ref($add.ref(out_$p193, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2842;

  $bb22:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume out_$i191 == 1;
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    out_$i191 := $ne.i64(out_$i188, out_$i190);
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    out_$i190 := $p2i.ref.i64(out_$p189);
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1976)), $mul.ref(40, 1));
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    out_$i188 := $p2i.ref.i64(out_$p187);
    goto corral_source_split_2818;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(out_$p180, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$p186 := $add.ref(out_$p185, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_2816;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    out_$p185 := $bitcast.ref.ref(out_$p184);
    goto corral_source_split_2815;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    out_$p184 := $load.ref($M.0, out_$p183);
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref($add.ref($add.ref(out_$p180, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2813;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref(out_$p180, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_2812;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    out_$p180 := $bitcast.ref.ref(out_$p179);
    goto corral_source_split_2811;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    out_$p179 := $load.ref($M.0, out_$p178);
    goto corral_source_split_2810;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1976)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p176, out_$i175);
    goto corral_source_split_2808;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$p176 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 40)), $mul.ref(36, 1));
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i32($M.0, out_$p172);
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref(out_$p79, $mul.ref(out_$i173, 4));
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref(out_$p79, $mul.ref(out_$i171, 4));
    out_$i173 := $add.i64(out_$i171, 1);
    goto corral_source_split_2804;

  $bb15:
    out_$i171 := $add.i64(out_$i139, 2);
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_22 := $M.0;
    out_cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 556} out_cmdloc_dummy_var_24 := $memcpy.i8(out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_$p169, out_$p170, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_24;
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_19 := $M.0;
    out_cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 555} out_cmdloc_dummy_var_21 := $memcpy.i8(out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_$p166, out_$p167, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_21;
    goto corral_source_split_2796;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    out_$p167 := $bitcast.ref.ref(out_$p140);
    goto corral_source_split_2795;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    out_$p166 := $bitcast.ref.ref(out_$p165);
    goto corral_source_split_2794;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 40)), $mul.ref(25, 1));
    goto corral_source_split_2793;

  $bb13:
    assume out_$i164 == 1;
    goto corral_source_split_2792;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    out_$i164 := $ugt.i64(8, 63);
    goto corral_source_split_2790;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p163, out_$i162);
    goto corral_source_split_2789;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 40)), $mul.ref(24, 1));
    goto corral_source_split_2788;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    out_$i162 := $trunc.i32.i8(out_$i161);
    goto corral_source_split_2787;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    out_$i161 := $lshr.i32(out_$i141, 24);
    goto corral_source_split_2786;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p156, out_$i160);
    goto corral_source_split_2785;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    out_$i160 := $or.i16(out_$i159, out_$i158);
    goto corral_source_split_2784;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    out_$i159 := $and.i16(out_$i157, $sub.i16(0, 4096));
    goto corral_source_split_2783;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    out_$i158 := $and.i16(out_$i155, 4095);
    goto corral_source_split_2782;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    out_$i157 := $load.i16($M.0, out_$p156);
    goto corral_source_split_2781;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 40)), $mul.ref(22, 1));
    goto corral_source_split_2780;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    out_$i155 := $trunc.i32.i16(out_$i154);
    goto corral_source_split_2779;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    out_$i154 := $and.i32(out_$i153, 4095);
    goto corral_source_split_2778;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    out_$i153 := $zext.i16.i32(out_$i152);
    goto corral_source_split_2777;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    out_$i152 := $trunc.i32.i16(out_$i151);
    goto corral_source_split_2776;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    out_$i151 := $lshr.i32(out_$i141, 12);
    goto corral_source_split_2775;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p146, out_$i150);
    goto corral_source_split_2774;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    out_$i150 := $or.i16(out_$i149, out_$i148);
    goto corral_source_split_2773;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    out_$i149 := $and.i16(out_$i147, $sub.i16(0, 4096));
    goto corral_source_split_2772;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    out_$i148 := $and.i16(out_$i145, 4095);
    goto corral_source_split_2771;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    out_$i147 := $load.i16($M.0, out_$p146);
    goto corral_source_split_2770;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 40)), $mul.ref(20, 1));
    goto corral_source_split_2769;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    out_$i145 := $trunc.i32.i16(out_$i144);
    goto corral_source_split_2768;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    out_$i144 := $and.i32(out_$i143, 4095);
    goto corral_source_split_2767;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    out_$i143 := $zext.i16.i32(out_$i142);
    goto corral_source_split_2766;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    out_$i142 := $trunc.i32.i16(out_$i141);
    goto corral_source_split_2765;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.0, out_$p136);
    call {:si_unique_call 554} {:cexpr "buf"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_2764;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref(out_$p79, $mul.ref(out_$i139, 4));
    goto corral_source_split_2763;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p138, out_$i137);
    out_$i139 := $add.i64(out_$i135, 1);
    goto corral_source_split_2762;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 40)), $mul.ref(16, 1));
    goto corral_source_split_2761;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i32($M.0, out_$p109);
    goto corral_source_split_2760;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref(out_$p79, $mul.ref(out_$i135, 4));
    goto corral_source_split_2759;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p134, out_$i133);
    out_$i135 := $add.i64(out_$i108, 1);
    goto corral_source_split_2758;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 40)), $mul.ref(14, 1));
    goto corral_source_split_2757;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    out_$i133 := $trunc.i32.i16(out_$i132);
    goto corral_source_split_2756;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    out_$i132 := $lshr.i32(out_$i110, 16);
    goto corral_source_split_2755;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p125, out_$i131);
    goto corral_source_split_2754;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    out_$i131 := $or.i16(out_$i130, out_$i129);
    goto corral_source_split_2753;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    out_$i130 := $and.i16(out_$i127, 4095);
    goto corral_source_split_2752;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    out_$i129 := $shl.i16(out_$i128, 12);
    goto corral_source_split_2751;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    out_$i128 := $and.i16(out_$i126, 15);
    goto corral_source_split_2750;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i16($M.0, out_$p125);
    goto corral_source_split_2749;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    out_$i126 := $zext.i8.i16(out_$i124);
    goto corral_source_split_2748;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 40)), $mul.ref(12, 1));
    goto corral_source_split_2747;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    out_$i124 := $trunc.i32.i8(out_$i123);
    goto corral_source_split_2746;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    out_$i123 := $and.i32(out_$i122, 15);
    goto corral_source_split_2745;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$i122 := $zext.i8.i32(out_$i121);
    goto corral_source_split_2744;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    out_$i121 := $trunc.i32.i8(out_$i120);
    goto corral_source_split_2743;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    out_$i120 := $lshr.i32(out_$i110, 12);
    goto corral_source_split_2742;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p115, out_$i119);
    goto corral_source_split_2741;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    out_$i119 := $or.i16(out_$i118, out_$i117);
    goto corral_source_split_2740;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    out_$i118 := $and.i16(out_$i116, $sub.i16(0, 4096));
    goto corral_source_split_2739;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    out_$i117 := $and.i16(out_$i114, 4095);
    goto corral_source_split_2738;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i16($M.0, out_$p115);
    goto corral_source_split_2737;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 40)), $mul.ref(12, 1));
    goto corral_source_split_2736;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    out_$i114 := $trunc.i32.i16(out_$i113);
    goto corral_source_split_2735;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    out_$i113 := $and.i32(out_$i112, 4095);
    goto corral_source_split_2734;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i16.i32(out_$i111);
    goto corral_source_split_2733;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    out_$i111 := $trunc.i32.i16(out_$i110);
    goto corral_source_split_2732;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p105);
    call {:si_unique_call 553} {:cexpr "buf"} boogie_si_record_i32(out_$i110);
    goto corral_source_split_2731;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref(out_$p79, $mul.ref(out_$i108, 4));
    goto corral_source_split_2730;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p107, out_$i106);
    out_$i108 := $add.i64(out_$i104, 1);
    goto corral_source_split_2729;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 40)), $mul.ref(8, 1));
    goto corral_source_split_2728;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i32($M.0, out_$p101);
    goto corral_source_split_2727;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref(out_$p79, $mul.ref(out_$i104, 4));
    goto corral_source_split_2726;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p103, out_$i102);
    out_$i104 := $add.i64(out_$i100, 1);
    goto corral_source_split_2725;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 40)), $mul.ref(4, 1));
    goto corral_source_split_2724;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.0, out_$p86);
    goto corral_source_split_2723;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref(out_$p79, $mul.ref(out_$i100, 4));
    goto corral_source_split_2722;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p95, out_$i99);
    out_$i100 := $add.i64(1, 1);
    goto corral_source_split_2721;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    out_$i99 := $or.i16(out_$i98, out_$i97);
    goto corral_source_split_2720;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    out_$i98 := $and.i16(out_$i96, $sub.i16(0, 4096));
    goto corral_source_split_2719;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    out_$i97 := $and.i16(out_$i94, 4095);
    goto corral_source_split_2718;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i16($M.0, out_$p95);
    goto corral_source_split_2717;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 40)), $mul.ref(2, 1));
    goto corral_source_split_2716;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    out_$i94 := $trunc.i32.i16(out_$i93);
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    out_$i93 := $and.i32(out_$i92, 4095);
    goto corral_source_split_2714;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i16.i32(out_$i91);
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    out_$i91 := $trunc.i32.i16(out_$i90);
    goto corral_source_split_2712;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    out_$i90 := $lshr.i32(out_$i87, 16);
    goto corral_source_split_2711;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p89, out_$i88);
    goto corral_source_split_2710;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 40)), $mul.ref(0, 1));
    goto corral_source_split_2709;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    out_$i88 := $trunc.i32.i16(out_$i87);
    goto corral_source_split_2708;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.0, out_$p79);
    call {:si_unique_call 552} {:cexpr "buf"} boogie_si_record_i32(out_$i87);
    goto corral_source_split_2707;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref(out_$p79, $mul.ref(1, 4));
    goto corral_source_split_2706;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref(out_$p83, $mul.ref(out_$i84, 40));
    goto corral_source_split_2705;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.i32.i64(out_$i80);
    goto corral_source_split_2704;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref(out_$p82);
    goto corral_source_split_2703;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p17, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_2702;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    out_$p170 := $bitcast.ref.ref(out_$p140);
    goto corral_source_split_2801;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    out_$p169 := $bitcast.ref.ref(out_$p168);
    goto corral_source_split_2800;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 40)), $mul.ref(25, 1));
    goto corral_source_split_2799;

  $bb14:
    assume !(out_$i164 == 1);
    goto corral_source_split_2798;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i191 == 1);
    goto $bb18;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb26:
    assume !(out_$i212 == 1);
    goto corral_source_split_2850;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$p103, out_$i104, out_$p105, out_$i106, out_$p107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$p136, out_$i137, out_$p138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$i164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$i171, out_$p172, out_$i173, out_$p174, out_$i175, out_$p176, out_$p178, out_$p179, out_$p180, out_$p181, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p194, out_$i195, out_$i196, out_$i197, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$i211, out_$i212, out_$p192, out_$p193, out_$i204, out_$i213, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p79, out_$i80, out_$i81, out_$i221, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_vslice_dummy_var_113 := i2o_device_parse_lct_loop_$bb11(in_$p0, in_$p17, out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$p103, out_$i104, out_$p105, out_$i106, out_$p107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$p136, out_$i137, out_$p138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$i164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$i171, out_$p172, out_$i173, out_$p174, out_$i175, out_$p176, out_$p178, out_$p179, out_$p180, out_$p181, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p194, out_$i195, out_$i196, out_$i197, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$i211, out_$i212, out_$p192, out_$p193, out_$i204, out_$i213, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p79, out_$i80, out_$i81, out_$i221, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_vslice_dummy_var_113);
    return;

  exit:
    return;
}



procedure i2o_device_parse_lct_loop_$bb11(in_$p0: ref, in_$p17: ref, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$p85: ref, in_$p86: ref, in_$i87: i32, in_$i88: i16, in_$p89: ref, in_$i90: i32, in_$i91: i16, in_$i92: i32, in_$i93: i32, in_$i94: i16, in_$p95: ref, in_$i96: i16, in_$i97: i16, in_$i98: i16, in_$i99: i16, in_$i100: i64, in_$p101: ref, in_$i102: i32, in_$p103: ref, in_$i104: i64, in_$p105: ref, in_$i106: i32, in_$p107: ref, in_$i108: i64, in_$p109: ref, in_$i110: i32, in_$i111: i16, in_$i112: i32, in_$i113: i32, in_$i114: i16, in_$p115: ref, in_$i116: i16, in_$i117: i16, in_$i118: i16, in_$i119: i16, in_$i120: i32, in_$i121: i8, in_$i122: i32, in_$i123: i32, in_$i124: i8, in_$p125: ref, in_$i126: i16, in_$i127: i16, in_$i128: i16, in_$i129: i16, in_$i130: i16, in_$i131: i16, in_$i132: i32, in_$i133: i16, in_$p134: ref, in_$i135: i64, in_$p136: ref, in_$i137: i32, in_$p138: ref, in_$i139: i64, in_$p140: ref, in_$i141: i32, in_$i142: i16, in_$i143: i32, in_$i144: i32, in_$i145: i16, in_$p146: ref, in_$i147: i16, in_$i148: i16, in_$i149: i16, in_$i150: i16, in_$i151: i32, in_$i152: i16, in_$i153: i32, in_$i154: i32, in_$i155: i16, in_$p156: ref, in_$i157: i16, in_$i158: i16, in_$i159: i16, in_$i160: i16, in_$i161: i32, in_$i162: i8, in_$p163: ref, in_$i164: i1, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$i171: i64, in_$p172: ref, in_$i173: i64, in_$p174: ref, in_$i175: i32, in_$p176: ref, in_$p178: ref, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p183: ref, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$p187: ref, in_$i188: i64, in_$p189: ref, in_$i190: i64, in_$i191: i1, in_$p194: ref, in_$i195: i16, in_$i196: i16, in_$i197: i32, in_$p199: ref, in_$i200: i16, in_$i201: i16, in_$i202: i32, in_$i203: i1, in_$p206: ref, in_$p207: ref, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$i211: i64, in_$i212: i1, in_$p192: ref, in_$p193: ref, in_$i204: i32, in_$i213: i1, in_$i215: i32, in_$i216: i32, in_$i217: i16, in_$i218: i32, in_$i219: i32, in_$i220: i1, in_$p79: ref, in_$i80: i32, in_$i81: i16, in_$i221: i32, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8, in_cmdloc_dummy_var_24: [ref]i8, in_vslice_dummy_var_113: i32) returns (out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$p85: ref, out_$p86: ref, out_$i87: i32, out_$i88: i16, out_$p89: ref, out_$i90: i32, out_$i91: i16, out_$i92: i32, out_$i93: i32, out_$i94: i16, out_$p95: ref, out_$i96: i16, out_$i97: i16, out_$i98: i16, out_$i99: i16, out_$i100: i64, out_$p101: ref, out_$i102: i32, out_$p103: ref, out_$i104: i64, out_$p105: ref, out_$i106: i32, out_$p107: ref, out_$i108: i64, out_$p109: ref, out_$i110: i32, out_$i111: i16, out_$i112: i32, out_$i113: i32, out_$i114: i16, out_$p115: ref, out_$i116: i16, out_$i117: i16, out_$i118: i16, out_$i119: i16, out_$i120: i32, out_$i121: i8, out_$i122: i32, out_$i123: i32, out_$i124: i8, out_$p125: ref, out_$i126: i16, out_$i127: i16, out_$i128: i16, out_$i129: i16, out_$i130: i16, out_$i131: i16, out_$i132: i32, out_$i133: i16, out_$p134: ref, out_$i135: i64, out_$p136: ref, out_$i137: i32, out_$p138: ref, out_$i139: i64, out_$p140: ref, out_$i141: i32, out_$i142: i16, out_$i143: i32, out_$i144: i32, out_$i145: i16, out_$p146: ref, out_$i147: i16, out_$i148: i16, out_$i149: i16, out_$i150: i16, out_$i151: i32, out_$i152: i16, out_$i153: i32, out_$i154: i32, out_$i155: i16, out_$p156: ref, out_$i157: i16, out_$i158: i16, out_$i159: i16, out_$i160: i16, out_$i161: i32, out_$i162: i8, out_$p163: ref, out_$i164: i1, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$i171: i64, out_$p172: ref, out_$i173: i64, out_$p174: ref, out_$i175: i32, out_$p176: ref, out_$p178: ref, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p183: ref, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$p187: ref, out_$i188: i64, out_$p189: ref, out_$i190: i64, out_$i191: i1, out_$p194: ref, out_$i195: i16, out_$i196: i16, out_$i197: i32, out_$p199: ref, out_$i200: i16, out_$i201: i16, out_$i202: i32, out_$i203: i1, out_$p206: ref, out_$p207: ref, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$i211: i64, out_$i212: i1, out_$p192: ref, out_$p193: ref, out_$i204: i32, out_$i213: i1, out_$i215: i32, out_$i216: i32, out_$i217: i16, out_$i218: i32, out_$i219: i32, out_$i220: i1, out_$p79: ref, out_$i80: i32, out_$i81: i16, out_$i221: i32, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8, out_cmdloc_dummy_var_24: [ref]i8, out_vslice_dummy_var_113: i32);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation i2o_device_add_loop_$bb81(in_$p3: ref, in_$i217: i64, in_$p221: ref, in_$i222: i16, in_$i223: i16, in_$i224: i32, in_$p226: ref, in_$i227: i16, in_$i228: i16, in_$i229: i32, in_$i230: i1, in_$p232: ref, in_$p234: ref, in_$p235: ref, in_$p236: ref, in_$p237: ref, in_$p238: ref, in_$i239: i64, in_$i240: i1, in_$p219: ref) returns (out_$p221: ref, out_$i222: i16, out_$i223: i16, out_$i224: i32, out_$p226: ref, out_$i227: i16, out_$i228: i16, out_$i229: i32, out_$i230: i1, out_$p232: ref, out_$p234: ref, out_$p235: ref, out_$p236: ref, out_$p237: ref, out_$p238: ref, out_$i239: i64, out_$i240: i1, out_$p219: ref)
{

  entry:
    out_$p221, out_$i222, out_$i223, out_$i224, out_$p226, out_$i227, out_$i228, out_$i229, out_$i230, out_$p232, out_$p234, out_$p235, out_$p236, out_$p237, out_$p238, out_$i239, out_$i240, out_$p219 := in_$p221, in_$i222, in_$i223, in_$i224, in_$p226, in_$i227, in_$i228, in_$i229, in_$i230, in_$p232, in_$p234, in_$p235, in_$p236, in_$p237, in_$p238, in_$i239, in_$i240, in_$p219;
    goto $bb81, exit;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_3214;

  $bb86:
    assume out_$i240 == 1;
    assume {:verifier.code 0} true;
    out_$p219 := out_$p237;
    goto $bb86_dummy;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    out_$i240 := $ne.i64(out_$i239, in_$i217);
    goto corral_source_split_3236;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    out_$i239 := $p2i.ref.i64(out_$p238);
    goto corral_source_split_3235;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref(out_$p236, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_3234;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    out_$p237 := $add.ref(out_$p236, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_3233;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    out_$p236 := $bitcast.ref.ref(out_$p235);
    goto corral_source_split_3232;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    out_$p235 := $load.ref($M.0, out_$p234);
    goto corral_source_split_3231;

  $bb85:
    assume {:verifier.code 0} true;
    out_$p234 := $add.ref($add.ref($add.ref(out_$p219, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3230;

  $bb84:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} sysfs_remove_link(out_$p232, .str.37);
    goto corral_source_split_3228;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    out_$p232 := $add.ref($add.ref($add.ref(out_$p219, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3227;

  $bb83:
    assume out_$i230 == 1;
    goto corral_source_split_3226;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i224, out_$i229);
    goto corral_source_split_3224;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$i229 := $zext.i16.i32(out_$i228);
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$i228 := $and.i16(out_$i227, 4095);
    goto corral_source_split_3222;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    out_$i227 := $load.i16($M.0, out_$p226);
    goto corral_source_split_3221;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3220;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    out_$i224 := $zext.i16.i32(out_$i223);
    goto corral_source_split_3219;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    out_$i223 := $and.i16(out_$i222, 4095);
    goto corral_source_split_3218;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    out_$i222 := $load.i16($M.0, out_$p221);
    goto corral_source_split_3217;

  $bb82:
    assume {:verifier.code 0} true;
    out_$p221 := $add.ref($add.ref($add.ref(out_$p219, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_3216;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb86_dummy:
    call {:si_unique_call 1} out_$p221, out_$i222, out_$i223, out_$i224, out_$p226, out_$i227, out_$i228, out_$i229, out_$i230, out_$p232, out_$p234, out_$p235, out_$p236, out_$p237, out_$p238, out_$i239, out_$i240, out_$p219 := i2o_device_add_loop_$bb81(in_$p3, in_$i217, out_$p221, out_$i222, out_$i223, out_$i224, out_$p226, out_$i227, out_$i228, out_$i229, out_$i230, out_$p232, out_$p234, out_$p235, out_$p236, out_$p237, out_$p238, out_$i239, out_$i240, out_$p219);
    return;

  exit:
    return;
}



procedure i2o_device_add_loop_$bb81(in_$p3: ref, in_$i217: i64, in_$p221: ref, in_$i222: i16, in_$i223: i16, in_$i224: i32, in_$p226: ref, in_$i227: i16, in_$i228: i16, in_$i229: i32, in_$i230: i1, in_$p232: ref, in_$p234: ref, in_$p235: ref, in_$p236: ref, in_$p237: ref, in_$p238: ref, in_$i239: i64, in_$i240: i1, in_$p219: ref) returns (out_$p221: ref, out_$i222: i16, out_$i223: i16, out_$i224: i32, out_$p226: ref, out_$i227: i16, out_$i228: i16, out_$i229: i32, out_$i230: i1, out_$p232: ref, out_$p234: ref, out_$p235: ref, out_$p236: ref, out_$p237: ref, out_$p238: ref, out_$i239: i64, out_$i240: i1, out_$p219: ref);



implementation i2o_device_add_loop_$bb70(in_$p3: ref, in_$i183: i64, in_$p187: ref, in_$i188: i16, in_$i189: i16, in_$i190: i32, in_$p192: ref, in_$i193: i16, in_$i194: i16, in_$i195: i32, in_$i196: i1, in_$p198: ref, in_$p200: ref, in_$p201: ref, in_$p202: ref, in_$p203: ref, in_$p204: ref, in_$i205: i64, in_$i206: i1, in_$p185: ref) returns (out_$p187: ref, out_$i188: i16, out_$i189: i16, out_$i190: i32, out_$p192: ref, out_$i193: i16, out_$i194: i16, out_$i195: i32, out_$i196: i1, out_$p198: ref, out_$p200: ref, out_$p201: ref, out_$p202: ref, out_$p203: ref, out_$p204: ref, out_$i205: i64, out_$i206: i1, out_$p185: ref)
{

  entry:
    out_$p187, out_$i188, out_$i189, out_$i190, out_$p192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p198, out_$p200, out_$p201, out_$p202, out_$p203, out_$p204, out_$i205, out_$i206, out_$p185 := in_$p187, in_$i188, in_$i189, in_$i190, in_$p192, in_$i193, in_$i194, in_$i195, in_$i196, in_$p198, in_$p200, in_$p201, in_$p202, in_$p203, in_$p204, in_$i205, in_$i206, in_$p185;
    goto $bb70, exit;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_3183;

  $bb75:
    assume out_$i206 == 1;
    assume {:verifier.code 0} true;
    out_$p185 := out_$p203;
    goto $bb75_dummy;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    out_$i206 := $ne.i64(out_$i205, in_$i183);
    goto corral_source_split_3205;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    out_$i205 := $p2i.ref.i64(out_$p204);
    goto corral_source_split_3204;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref($add.ref(out_$p202, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_3203;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    out_$p203 := $add.ref(out_$p202, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_3202;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    out_$p202 := $bitcast.ref.ref(out_$p201);
    goto corral_source_split_3201;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    out_$p201 := $load.ref($M.0, out_$p200);
    goto corral_source_split_3200;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref($add.ref(out_$p185, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3199;

  $bb73:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} sysfs_remove_link(out_$p198, .str.36);
    goto corral_source_split_3197;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref($add.ref(out_$p185, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3196;

  $bb72:
    assume out_$i196 == 1;
    goto corral_source_split_3195;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i190, out_$i195);
    goto corral_source_split_3193;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    out_$i195 := $zext.i16.i32(out_$i194);
    goto corral_source_split_3192;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    out_$i194 := $and.i16(out_$i193, 4095);
    goto corral_source_split_3191;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    out_$i193 := $load.i16($M.0, out_$p192);
    goto corral_source_split_3190;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3189;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    out_$i190 := $zext.i16.i32(out_$i189);
    goto corral_source_split_3188;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    out_$i189 := $and.i16(out_$i188, 4095);
    goto corral_source_split_3187;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    out_$i188 := $load.i16($M.0, out_$p187);
    goto corral_source_split_3186;

  $bb71:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref($add.ref(out_$p185, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(22, 1));
    goto corral_source_split_3185;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb75_dummy:
    call {:si_unique_call 1} out_$p187, out_$i188, out_$i189, out_$i190, out_$p192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p198, out_$p200, out_$p201, out_$p202, out_$p203, out_$p204, out_$i205, out_$i206, out_$p185 := i2o_device_add_loop_$bb70(in_$p3, in_$i183, out_$p187, out_$i188, out_$i189, out_$i190, out_$p192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p198, out_$p200, out_$p201, out_$p202, out_$p203, out_$p204, out_$i205, out_$i206, out_$p185);
    return;

  exit:
    return;
}



procedure i2o_device_add_loop_$bb70(in_$p3: ref, in_$i183: i64, in_$p187: ref, in_$i188: i16, in_$i189: i16, in_$i190: i32, in_$p192: ref, in_$i193: i16, in_$i194: i16, in_$i195: i32, in_$i196: i1, in_$p198: ref, in_$p200: ref, in_$p201: ref, in_$p202: ref, in_$p203: ref, in_$p204: ref, in_$i205: i64, in_$i206: i1, in_$p185: ref) returns (out_$p187: ref, out_$i188: i16, out_$i189: i16, out_$i190: i32, out_$p192: ref, out_$i193: i16, out_$i194: i16, out_$i195: i32, out_$i196: i1, out_$p198: ref, out_$p200: ref, out_$p201: ref, out_$p202: ref, out_$p203: ref, out_$p204: ref, out_$i205: i64, out_$i206: i1, out_$p185: ref);



implementation i2o_device_add_loop_$bb49(in_$p3: ref, in_$i124: i64, in_$p128: ref, in_$i129: i16, in_$i130: i16, in_$i131: i32, in_$p133: ref, in_$i134: i16, in_$i135: i16, in_$i136: i32, in_$i137: i1, in_$i138: i64, in_$i139: i64, in_$i140: i1, in_$p142: ref, in_$p144: ref, in_$i145: i32, in_$i146: i1, in_$i147: i32, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$i154: i64, in_$i155: i1, in_$p126: ref) returns (out_$p128: ref, out_$i129: i16, out_$i130: i16, out_$i131: i32, out_$p133: ref, out_$i134: i16, out_$i135: i16, out_$i136: i32, out_$i137: i1, out_$i138: i64, out_$i139: i64, out_$i140: i1, out_$p142: ref, out_$p144: ref, out_$i145: i32, out_$i146: i1, out_$i147: i32, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$i154: i64, out_$i155: i1, out_$p126: ref)
{

  entry:
    out_$p128, out_$i129, out_$i130, out_$i131, out_$p133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p142, out_$p144, out_$i145, out_$i146, out_$i147, out_$p149, out_$p150, out_$p151, out_$p152, out_$p153, out_$i154, out_$i155, out_$p126 := in_$p128, in_$i129, in_$i130, in_$i131, in_$p133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$p142, in_$p144, in_$i145, in_$i146, in_$i147, in_$p149, in_$p150, in_$p151, in_$p152, in_$p153, in_$i154, in_$i155, in_$p126;
    goto $bb49, exit;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_3107;

  $bb61:
    assume out_$i155 == 1;
    assume {:verifier.code 0} true;
    out_$p126 := out_$p152;
    goto $bb61_dummy;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    out_$i155 := $ne.i64(out_$i154, in_$i124);
    goto corral_source_split_3148;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    out_$i154 := $p2i.ref.i64(out_$p153);
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(out_$p151, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_3146;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref(out_$p151, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_3145;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    out_$p151 := $bitcast.ref.ref(out_$p150);
    goto corral_source_split_3144;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    out_$p150 := $load.ref($M.0, out_$p149);
    goto corral_source_split_3143;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref($add.ref(out_$p126, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3142;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb57:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    out_$i147 := out_$i145;
    assume true;
    goto $bb57;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    out_$i146 := $ne.i32(out_$i145, 0);
    goto corral_source_split_3128;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} out_$i145 := sysfs_create_link(out_$p142, out_$p144, .str.36);
    call {:si_unique_call 595} {:cexpr "rc"} boogie_si_record_i32(out_$i145);
    goto corral_source_split_3127;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3126;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref($add.ref(out_$p126, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3125;

  $bb54:
    assume out_$i140 == 1;
    goto corral_source_split_3124;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    out_$i140 := $ne.i64(out_$i138, out_$i139);
    goto corral_source_split_3122;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    out_$i139 := $p2i.ref.i64(in_$p3);
    goto corral_source_split_3121;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    out_$i138 := $p2i.ref.i64(out_$p126);
    goto corral_source_split_3120;

  $bb51:
    assume out_$i137 == 1;
    goto corral_source_split_3119;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i131, out_$i136);
    goto corral_source_split_3117;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    out_$i136 := $zext.i16.i32(out_$i135);
    goto corral_source_split_3116;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    out_$i135 := $and.i16(out_$i134, 4095);
    goto corral_source_split_3115;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i16($M.0, out_$p133);
    goto corral_source_split_3114;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3113;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    out_$i131 := $zext.i16.i32(out_$i130);
    goto corral_source_split_3112;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    out_$i130 := $and.i16(out_$i129, 4095);
    goto corral_source_split_3111;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i16($M.0, out_$p128);
    goto corral_source_split_3110;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref($add.ref(out_$p126, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(22, 1));
    goto corral_source_split_3109;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb52:
    assume {:verifier.code 0} true;
    assume !(out_$i137 == 1);
    goto $bb53;

  $bb55:
    assume {:verifier.code 0} true;
    assume !(out_$i140 == 1);
    goto $bb53;

  $bb61_dummy:
    call {:si_unique_call 1} out_$p128, out_$i129, out_$i130, out_$i131, out_$p133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p142, out_$p144, out_$i145, out_$i146, out_$i147, out_$p149, out_$p150, out_$p151, out_$p152, out_$p153, out_$i154, out_$i155, out_$p126 := i2o_device_add_loop_$bb49(in_$p3, in_$i124, out_$p128, out_$i129, out_$i130, out_$i131, out_$p133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p142, out_$p144, out_$i145, out_$i146, out_$i147, out_$p149, out_$p150, out_$p151, out_$p152, out_$p153, out_$i154, out_$i155, out_$p126);
    return;

  exit:
    return;
}



procedure i2o_device_add_loop_$bb49(in_$p3: ref, in_$i124: i64, in_$p128: ref, in_$i129: i16, in_$i130: i16, in_$i131: i32, in_$p133: ref, in_$i134: i16, in_$i135: i16, in_$i136: i32, in_$i137: i1, in_$i138: i64, in_$i139: i64, in_$i140: i1, in_$p142: ref, in_$p144: ref, in_$i145: i32, in_$i146: i1, in_$i147: i32, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$i154: i64, in_$i155: i1, in_$p126: ref) returns (out_$p128: ref, out_$i129: i16, out_$i130: i16, out_$i131: i32, out_$p133: ref, out_$i134: i16, out_$i135: i16, out_$i136: i32, out_$i137: i1, out_$i138: i64, out_$i139: i64, out_$i140: i1, out_$p142: ref, out_$p144: ref, out_$i145: i32, out_$i146: i1, out_$i147: i32, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$i154: i64, out_$i155: i1, out_$p126: ref);



implementation i2o_device_add_loop_$bb22(in_$p3: ref, in_$i63: i64, in_$p67: ref, in_$i68: i16, in_$i69: i16, in_$i70: i32, in_$p72: ref, in_$i73: i16, in_$i74: i16, in_$i75: i32, in_$i76: i1, in_$i77: i64, in_$i78: i64, in_$i79: i1, in_$p81: ref, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_$p65: ref) returns (out_$p67: ref, out_$i68: i16, out_$i69: i16, out_$i70: i32, out_$p72: ref, out_$i73: i16, out_$i74: i16, out_$i75: i32, out_$i76: i1, out_$i77: i64, out_$i78: i64, out_$i79: i1, out_$p81: ref, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_$p65: ref)
{

  entry:
    out_$p67, out_$i68, out_$i69, out_$i70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p81, out_$p83, out_$i84, out_$i85, out_$i86, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p65 := in_$p67, in_$i68, in_$i69, in_$i70, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$p81, in_$p83, in_$i84, in_$i85, in_$i86, in_$p89, in_$p90, in_$p91, in_$p92, in_$p93, in_$i94, in_$i95, in_$p65;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3025;

  $bb34:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$p65 := out_$p92;
    goto $bb34_dummy;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i64(out_$i94, in_$i63);
    goto corral_source_split_3067;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    out_$i94 := $p2i.ref.i64(out_$p93);
    goto corral_source_split_3066;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p91, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_3065;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref(out_$p91, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_3064;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    out_$p91 := $bitcast.ref.ref(out_$p90);
    goto corral_source_split_3063;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.0, out_$p89);
    goto corral_source_split_3062;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(out_$p65, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3061;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    out_$i86 := out_$i84;
    assume true;
    goto $bb30;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i32(out_$i84, 0);
    goto corral_source_split_3046;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} out_$i84 := sysfs_create_link(out_$p81, out_$p83, .str.37);
    call {:si_unique_call 590} {:cexpr "rc"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_3045;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3044;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(out_$p65, $mul.ref(0, 1376)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_3043;

  $bb27:
    assume out_$i79 == 1;
    goto corral_source_split_3042;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i64(out_$i77, out_$i78);
    goto corral_source_split_3040;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(in_$p3);
    goto corral_source_split_3039;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    out_$i77 := $p2i.ref.i64(out_$p65);
    goto corral_source_split_3038;

  $bb24:
    assume out_$i76 == 1;
    goto corral_source_split_3037;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i70, out_$i75);
    goto corral_source_split_3035;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i16.i32(out_$i74);
    goto corral_source_split_3034;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    out_$i74 := $and.i16(out_$i73, 4095);
    goto corral_source_split_3033;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i16($M.0, out_$p72);
    goto corral_source_split_3032;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3031;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i16.i32(out_$i69);
    goto corral_source_split_3030;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i16(out_$i68, 4095);
    goto corral_source_split_3029;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i16($M.0, out_$p67);
    goto corral_source_split_3028;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(out_$p65, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_3027;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i76 == 1);
    goto $bb26;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i79 == 1);
    goto $bb26;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p67, out_$i68, out_$i69, out_$i70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p81, out_$p83, out_$i84, out_$i85, out_$i86, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p65 := i2o_device_add_loop_$bb22(in_$p3, in_$i63, out_$p67, out_$i68, out_$i69, out_$i70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p81, out_$p83, out_$i84, out_$i85, out_$i86, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_$p65);
    return;

  exit:
    return;
}



procedure i2o_device_add_loop_$bb22(in_$p3: ref, in_$i63: i64, in_$p67: ref, in_$i68: i16, in_$i69: i16, in_$i70: i32, in_$p72: ref, in_$i73: i16, in_$i74: i16, in_$i75: i32, in_$i76: i1, in_$i77: i64, in_$i78: i64, in_$i79: i1, in_$p81: ref, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_$p65: ref) returns (out_$p67: ref, out_$i68: i16, out_$i69: i16, out_$i70: i32, out_$p72: ref, out_$i73: i16, out_$i74: i16, out_$i75: i32, out_$i76: i1, out_$i77: i64, out_$i78: i64, out_$i79: i1, out_$p81: ref, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_$p65: ref);



implementation i2o_iop_find_device_loop_$bb4(in_$i1: i16, in_$i10: i64, in_$p14: ref, in_$i15: i16, in_$i16: i16, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p12: ref) returns (out_$p14: ref, out_$i15: i16, out_$i16: i16, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p12: ref)
{

  entry:
    out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p12 := in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3311;

  $bb10:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p26;
    goto $bb10_dummy;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, in_$i10);
    goto corral_source_split_3330;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_3329;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p25, $mul.ref($sub.ref(0, 48), 1376)), $mul.ref(48, 1));
    goto corral_source_split_3328;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p25, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_3327;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_3326;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_3325;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3324;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p12;
    assume true;
    goto $bb7;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i17, out_$i18);
    goto corral_source_split_3318;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i16.i32(in_$i1);
    goto corral_source_split_3317;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_3316;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    out_$i16 := $and.i16(out_$i15, 4095);
    goto corral_source_split_3315;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i16($M.0, out_$p14);
    goto corral_source_split_3314;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3313;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p12 := i2o_iop_find_device_loop_$bb4(in_$i1, in_$i10, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p12);
    return;

  exit:
    return;
}



procedure i2o_iop_find_device_loop_$bb4(in_$i1: i16, in_$i10: i64, in_$p14: ref, in_$i15: i16, in_$i16: i16, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p12: ref) returns (out_$p14: ref, out_$i15: i16, out_$i16: i16, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p12: ref);



implementation i2o_driver_notify_device_add_all_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i3: i32) returns (out_$p4: ref, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i3: i32)
{

  entry:
    out_$p4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i3 := in_$p4, in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3343;

  $bb9:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i10;
    goto $bb9_dummy;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    out_$i12 := $ult.i32(out_$i10, out_$i11);
    goto corral_source_split_3357;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    out_$i11 := $M.8;
    goto corral_source_split_3356;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i3, 1);
    call {:si_unique_call 626} {:cexpr "i"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_3355;

  $bb7:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_114:
    goto corral_source_split_3353;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} i2o_driver_notify_device_add(out_$p7, in_$p0);
    goto SeqInstr_113;

  $bb6:
    assume out_$i9 == 1;
    goto corral_source_split_3352;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_3350;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.10, out_$p6);
    goto corral_source_split_3348;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref(out_$p4, $mul.ref(out_$i5, 8));
    goto corral_source_split_3347;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i3);
    goto corral_source_split_3346;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p4 := $M.9;
    goto corral_source_split_3345;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i3 := i2o_driver_notify_device_add_all_loop_$bb4(in_$p0, out_$p4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i3);
    return;

  exit:
    return;
}



procedure i2o_driver_notify_device_add_all_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i3: i32) returns (out_$p4: ref, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i3: i32);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.22, assertsPassed, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation i2o_iop_init_outbound_queue_loop_$bb16(in_$p0: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i65: i32, in_$i66: i32) returns (out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i65: i32, out_$i66: i32)
{

  entry:
    out_$i67, out_$i68, out_$i69, out_$i65, out_$i66 := in_$i67, in_$i68, in_$i69, in_$i65, in_$i66;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3825;

  $bb18:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i65, out_$i66 := out_$i68, out_$i67;
    goto $bb18_dummy;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$i69 := $sle.i32(out_$i68, 127);
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i32(out_$i65, 1);
    call {:si_unique_call 732} {:cexpr "i"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i66, 512);
    call {:si_unique_call 731} {:cexpr "m"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_3829;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} __const_udelay(4295);
    goto corral_source_split_3828;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} i2o_flush_reply(in_$p0, out_$i66);
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i67, out_$i68, out_$i69, out_$i65, out_$i66 := i2o_iop_init_outbound_queue_loop_$bb16(in_$p0, out_$i67, out_$i68, out_$i69, out_$i65, out_$i66);
    return;

  exit:
    return;
}



procedure i2o_iop_init_outbound_queue_loop_$bb16(in_$p0: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i65: i32, in_$i66: i32) returns (out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i65: i32, out_$i66: i32);



implementation i2o_iop_init_outbound_queue_loop_$bb8(in_$p3: ref, in_$i47: i64, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$i58: i8, in_$i59: i32, in_$i60: i1, in_vslice_dummy_var_126: i64) returns (out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$i58: i8, out_$i59: i32, out_$i60: i1, out_vslice_dummy_var_126: i64)
{

  entry:
    out_$i51, out_$i52, out_$i53, out_$i58, out_$i59, out_$i60, out_vslice_dummy_var_126 := in_$i51, in_$i52, in_$i53, in_$i58, in_$i59, in_$i60, in_vslice_dummy_var_126;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i60 == 1;
    goto $bb13_dummy;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    out_$i60 := $ule.i32(out_$i59, 1);
    goto corral_source_split_3817;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i8.i32(out_$i58);
    goto corral_source_split_3816;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i8($M.0, in_$p3);
    goto corral_source_split_3815;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} out_vslice_dummy_var_126 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_3814;

  $bb11:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i64(out_$i52, 0);
    goto corral_source_split_3807;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i64(in_$i47, out_$i51);
    goto corral_source_split_3806;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.7, jiffies);
    goto corral_source_split_3805;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i51, out_$i52, out_$i53, out_$i58, out_$i59, out_$i60, out_vslice_dummy_var_126 := i2o_iop_init_outbound_queue_loop_$bb8(in_$p3, in_$i47, out_$i51, out_$i52, out_$i53, out_$i58, out_$i59, out_$i60, out_vslice_dummy_var_126);
    return;

  exit:
    return;
}



procedure i2o_iop_init_outbound_queue_loop_$bb8(in_$p3: ref, in_$i47: i64, in_$i51: i64, in_$i52: i64, in_$i53: i1, in_$i58: i8, in_$i59: i32, in_$i60: i1, in_vslice_dummy_var_126: i64) returns (out_$i51: i64, out_$i52: i64, out_$i53: i1, out_$i58: i8, out_$i59: i32, out_$i60: i1, out_vslice_dummy_var_126: i64);



implementation i2o_dump_hrt_loop_$bb8(in_$i21: i32, in_$i24: i32, in_$i33: i32, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i32, in_$i44: i8, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i53: i32, in_$i54: i1, in_$i56: i32, in_$i57: i1, in_$i59: i1, in_$i62: i64, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i64, in_$p75: ref, in_$i76: i8, in_$i77: i32, in_$i78: i64, in_$p79: ref, in_$i80: i8, in_$i81: i32, in_$i82: i32, in_$i83: i8, in_$i84: i32, in_$i85: i32, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$i90: i64, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$i94: i64, in_$p95: ref, in_$i96: i8, in_$i97: i32, in_$i98: i64, in_$p99: ref, in_$i100: i8, in_$i101: i32, in_$i102: i32, in_$i103: i8, in_$i104: i32, in_$i105: i32, in_$p106: ref, in_$p107: ref, in_$i108: i32, in_$i110: i64, in_$p111: ref, in_$i112: i8, in_$i113: i32, in_$i114: i64, in_$p115: ref, in_$i116: i8, in_$i117: i32, in_$i118: i64, in_$p119: ref, in_$i120: i8, in_$i121: i32, in_$i122: i32, in_$i123: i8, in_$i124: i32, in_$i125: i32, in_$p126: ref, in_$p127: ref, in_$i128: i32, in_$i130: i64, in_$p131: ref, in_$i132: i8, in_$i133: i32, in_$i134: i64, in_$p135: ref, in_$i136: i8, in_$i137: i32, in_$i138: i64, in_$p139: ref, in_$i140: i8, in_$i141: i32, in_$i142: i32, in_$i143: i8, in_$i144: i32, in_$i145: i32, in_$p146: ref, in_$p147: ref, in_$i148: i32, in_$i150: i64, in_$p151: ref, in_$i152: i8, in_$i153: i32, in_$i154: i64, in_$p155: ref, in_$i156: i8, in_$i157: i32, in_$i158: i64, in_$p159: ref, in_$i160: i8, in_$i161: i32, in_$i162: i8, in_$i163: i32, in_$i167: i64, in_$p168: ref, in_$i169: i32, in_$i170: i1, in_$p31: ref, in_$i32: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i32) returns (out_$i33: i32, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i32, out_$i44: i8, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i53: i32, out_$i54: i1, out_$i56: i32, out_$i57: i1, out_$i59: i1, out_$i62: i64, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i64, out_$p75: ref, out_$i76: i8, out_$i77: i32, out_$i78: i64, out_$p79: ref, out_$i80: i8, out_$i81: i32, out_$i82: i32, out_$i83: i8, out_$i84: i32, out_$i85: i32, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$i90: i64, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$i94: i64, out_$p95: ref, out_$i96: i8, out_$i97: i32, out_$i98: i64, out_$p99: ref, out_$i100: i8, out_$i101: i32, out_$i102: i32, out_$i103: i8, out_$i104: i32, out_$i105: i32, out_$p106: ref, out_$p107: ref, out_$i108: i32, out_$i110: i64, out_$p111: ref, out_$i112: i8, out_$i113: i32, out_$i114: i64, out_$p115: ref, out_$i116: i8, out_$i117: i32, out_$i118: i64, out_$p119: ref, out_$i120: i8, out_$i121: i32, out_$i122: i32, out_$i123: i8, out_$i124: i32, out_$i125: i32, out_$p126: ref, out_$p127: ref, out_$i128: i32, out_$i130: i64, out_$p131: ref, out_$i132: i8, out_$i133: i32, out_$i134: i64, out_$p135: ref, out_$i136: i8, out_$i137: i32, out_$i138: i64, out_$p139: ref, out_$i140: i8, out_$i141: i32, out_$i142: i32, out_$i143: i8, out_$i144: i32, out_$i145: i32, out_$p146: ref, out_$p147: ref, out_$i148: i32, out_$i150: i64, out_$p151: ref, out_$i152: i8, out_$i153: i32, out_$i154: i64, out_$p155: ref, out_$i156: i8, out_$i157: i32, out_$i158: i64, out_$p159: ref, out_$i160: i8, out_$i161: i32, out_$i162: i8, out_$i163: i32, out_$i167: i64, out_$p168: ref, out_$i169: i32, out_$i170: i1, out_$p31: ref, out_$i32: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i32)
{

  entry:
    out_$i33, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i53, out_$i54, out_$i56, out_$i57, out_$i59, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i108, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$p147, out_$i148, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i167, out_$p168, out_$i169, out_$i170, out_$p31, out_$i32, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145 := in_$i33, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i49, in_$i50, in_$i51, in_$i53, in_$i54, in_$i56, in_$i57, in_$i59, in_$i62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$i76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$p86, in_$p87, in_$i88, in_$i90, in_$p91, in_$i92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$p107, in_$i108, in_$i110, in_$p111, in_$i112, in_$i113, in_$i114, in_$p115, in_$i116, in_$i117, in_$i118, in_$p119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$p126, in_$p127, in_$i128, in_$i130, in_$p131, in_$i132, in_$i133, in_$i134, in_$p135, in_$i136, in_$i137, in_$i138, in_$p139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$p146, in_$p147, in_$i148, in_$i150, in_$p151, in_$i152, in_$i153, in_$i154, in_$p155, in_$i156, in_$i157, in_$i158, in_$p159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i167, in_$p168, in_$i169, in_$i170, in_$p31, in_$i32, in_vslice_dummy_var_132, in_vslice_dummy_var_133, in_vslice_dummy_var_134, in_vslice_dummy_var_135, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138, in_vslice_dummy_var_139, in_vslice_dummy_var_140, in_vslice_dummy_var_141, in_vslice_dummy_var_142, in_vslice_dummy_var_143, in_vslice_dummy_var_144, in_vslice_dummy_var_145;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4089;

  $bb42:
    assume out_$i170 == 1;
    assume {:verifier.code 0} true;
    out_$p31, out_$i32 := out_$p168, out_$i169;
    goto $bb42_dummy;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    out_$i170 := $slt.i32(out_$i169, in_$i21);
    goto corral_source_split_4226;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    out_$i169 := $add.i32(out_$i32, 1);
    call {:si_unique_call 789} {:cexpr "i"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_4225;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref(out_$p31, $mul.ref(out_$i167, 4));
    goto corral_source_split_4224;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    out_$i167 := $sext.i32.i64(in_$i24);
    goto corral_source_split_4223;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} out_vslice_dummy_var_144 := printk.ref(.str.68);
    goto corral_source_split_4222;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} out_vslice_dummy_var_143 := printk.ref.i32.i32.i32(.str.62, out_$i77, out_$i85, out_$i88);
    goto corral_source_split_4220;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.0, out_$p87);
    goto corral_source_split_4219;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref(out_$p86, $mul.ref(4, 4));
    goto corral_source_split_4218;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    out_$p86 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_4217;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    out_$i85 := $or.i32(out_$i82, out_$i84);
    goto corral_source_split_4216;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i8.i32(out_$i83);
    goto corral_source_split_4215;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i8($M.0, out_$p38);
    goto corral_source_split_4214;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    out_$i82 := $shl.i32(out_$i81, 8);
    goto corral_source_split_4213;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i8.i32(out_$i80);
    goto corral_source_split_4212;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i8($M.0, out_$p79);
    goto corral_source_split_4211;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref(out_$p37, $mul.ref(out_$i78, 1));
    goto corral_source_split_4210;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i8.i32(out_$i76);
    out_$i78 := $add.i64(2, 1);
    goto corral_source_split_4209;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i8($M.0, out_$p75);
    goto corral_source_split_4208;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref(out_$p35, $mul.ref(out_$i74, 1));
    goto corral_source_split_4207;

  $bb38:
    assume out_$i73 == 1;
    out_$i74 := $add.i64(1, 2);
    goto corral_source_split_4206;

  $bb34:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i65, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb23:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i65, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i65, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i8.i32(out_$i64);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.0, out_$p63);
    goto corral_source_split_4131;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p35, $mul.ref(out_$i62, 1));
    goto corral_source_split_4130;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} out_vslice_dummy_var_138 := printk.ref(.str.61);
    out_$i62 := $add.i64(1, 3);
    goto corral_source_split_4129;

  $bb20:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} out_vslice_dummy_var_137 := printk.ref(.str.60);
    goto corral_source_split_4127;

  $bb19:
    assume out_$i59 == 1;
    goto corral_source_split_4126;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i59 := $sgt.i32(out_$i49, 9);
    goto corral_source_split_4124;

  $bb14:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} out_vslice_dummy_var_136 := printk.ref(.str.59);
    goto corral_source_split_4122;

  $bb15:
    assume out_$i57 == 1;
    goto corral_source_split_4121;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_4119;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    out_$i56 := $and.i32(out_$i49, 2);
    goto corral_source_split_4118;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} out_vslice_dummy_var_135 := printk.ref(.str.58);
    goto corral_source_split_4117;

  $bb13:
    assume out_$i54 == 1;
    goto corral_source_split_4116;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_4114;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i53 := $and.i32(out_$i49, 4);
    goto corral_source_split_4113;

  $bb11:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} out_vslice_dummy_var_134 := printk.ref(.str.57);
    goto corral_source_split_4111;

  $bb10:
    assume out_$i51 == 1;
    goto corral_source_split_4110;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_4108;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i32(out_$i49, 1);
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    out_$i49 := $ashr.i32(out_$i46, 12);
    call {:si_unique_call 777} {:cexpr "state"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_4106;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} out_vslice_dummy_var_133 := printk.ref.i32(.str.56, out_$i47);
    goto corral_source_split_4105;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    out_$i47 := $and.i32(out_$i46, 4095);
    goto corral_source_split_4104;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    out_$i46 := $or.i32(out_$i43, out_$i45);
    call {:si_unique_call 775} {:cexpr "state"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_4103;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(out_$i44);
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.0, out_$p36);
    goto corral_source_split_4101;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    out_$i43 := $shl.i32(out_$i42, 8);
    goto corral_source_split_4100;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i8.i32(out_$i41);
    goto corral_source_split_4099;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.0, out_$p40);
    goto corral_source_split_4098;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p35, $mul.ref(out_$i39, 1));
    goto corral_source_split_4097;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p37, $mul.ref(2, 1));
    out_$i39 := $add.i64(1, 1);
    goto corral_source_split_4096;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_4095;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p35, $mul.ref(1, 1));
    goto corral_source_split_4094;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_4093;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} out_vslice_dummy_var_132 := printk.ref.i32(.str.55, out_$i33);
    goto corral_source_split_4092;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p31);
    goto corral_source_split_4091;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} out_vslice_dummy_var_141 := printk.ref.i32.i32.i32.i32(.str.63, out_$i93, out_$i97, out_$i105, out_$i108);
    goto corral_source_split_4185;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i32($M.0, out_$p107);
    goto corral_source_split_4184;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref(out_$p106, $mul.ref(4, 4));
    goto corral_source_split_4183;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$p106 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_4182;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    out_$i105 := $or.i32(out_$i102, out_$i104);
    goto corral_source_split_4181;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i8.i32(out_$i103);
    goto corral_source_split_4180;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i8($M.0, out_$p38);
    goto corral_source_split_4179;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$i102 := $shl.i32(out_$i101, 8);
    goto corral_source_split_4178;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i8.i32(out_$i100);
    goto corral_source_split_4177;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i8($M.0, out_$p99);
    goto corral_source_split_4176;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref(out_$p37, $mul.ref(out_$i98, 1));
    goto corral_source_split_4175;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i8.i32(out_$i96);
    out_$i98 := $add.i64(2, 1);
    goto corral_source_split_4174;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i8($M.0, out_$p95);
    goto corral_source_split_4173;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref(out_$p37, $mul.ref(out_$i94, 1));
    goto corral_source_split_4172;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i8.i32(out_$i92);
    out_$i94 := $add.i64(2, 2);
    goto corral_source_split_4171;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i8($M.0, out_$p91);
    goto corral_source_split_4170;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref(out_$p35, $mul.ref(out_$i90, 1));
    goto corral_source_split_4169;

  $bb36:
    assume out_$i72 == 1;
    out_$i90 := $add.i64(1, 2);
    goto corral_source_split_4168;

  $bb35:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i65, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} out_vslice_dummy_var_142 := printk.ref.i32.i32.i32.i32(.str.64, out_$i113, out_$i117, out_$i125, out_$i128);
    goto corral_source_split_4204;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i32($M.0, out_$p127);
    goto corral_source_split_4203;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref(out_$p126, $mul.ref(4, 4));
    goto corral_source_split_4202;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_$p126 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    out_$i125 := $or.i32(out_$i122, out_$i124);
    goto corral_source_split_4200;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$i124 := $zext.i8.i32(out_$i123);
    goto corral_source_split_4199;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i8($M.0, out_$p38);
    goto corral_source_split_4198;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    out_$i122 := $shl.i32(out_$i121, 8);
    goto corral_source_split_4197;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i8.i32(out_$i120);
    goto corral_source_split_4196;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i8($M.0, out_$p119);
    goto corral_source_split_4195;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref(out_$p37, $mul.ref(out_$i118, 1));
    goto corral_source_split_4194;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i8.i32(out_$i116);
    out_$i118 := $add.i64(2, 1);
    goto corral_source_split_4193;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i8($M.0, out_$p115);
    goto corral_source_split_4192;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref(out_$p37, $mul.ref(out_$i114, 1));
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$i113 := $zext.i8.i32(out_$i112);
    out_$i114 := $add.i64(2, 3);
    goto corral_source_split_4190;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i8($M.0, out_$p111);
    goto corral_source_split_4189;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref(out_$p35, $mul.ref(out_$i110, 1));
    goto corral_source_split_4188;

  $bb37:
    assume !(out_$i72 == 1);
    out_$i110 := $add.i64(1, 2);
    goto corral_source_split_4187;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} out_vslice_dummy_var_139 := printk.ref.i32.i32.i32.i32(.str.65, out_$i133, out_$i137, out_$i145, out_$i148);
    goto corral_source_split_4150;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i32($M.0, out_$p147);
    goto corral_source_split_4149;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref(out_$p146, $mul.ref(4, 4));
    goto corral_source_split_4148;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    out_$p146 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_4147;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    out_$i145 := $or.i32(out_$i142, out_$i144);
    goto corral_source_split_4146;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    out_$i144 := $zext.i8.i32(out_$i143);
    goto corral_source_split_4145;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i8($M.0, out_$p38);
    goto corral_source_split_4144;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    out_$i142 := $shl.i32(out_$i141, 8);
    goto corral_source_split_4143;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    out_$i141 := $zext.i8.i32(out_$i140);
    goto corral_source_split_4142;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    out_$i140 := $load.i8($M.0, out_$p139);
    goto corral_source_split_4141;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref(out_$p37, $mul.ref(out_$i138, 1));
    goto corral_source_split_4140;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    out_$i137 := $zext.i8.i32(out_$i136);
    out_$i138 := $add.i64(2, 1);
    goto corral_source_split_4139;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i8($M.0, out_$p135);
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref(out_$p37, $mul.ref(out_$i134, 1));
    goto corral_source_split_4137;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    out_$i133 := $zext.i8.i32(out_$i132);
    out_$i134 := $add.i64(2, 3);
    goto corral_source_split_4136;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i8($M.0, out_$p131);
    goto corral_source_split_4135;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref(out_$p35, $mul.ref(out_$i130, 1));
    goto corral_source_split_4134;

  $bb25:
    assume out_$i67 == 1;
    out_$i130 := $add.i64(1, 2);
    goto corral_source_split_4133;

  $bb24:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i65, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} out_vslice_dummy_var_140 := printk.ref.i32.i32.i32.i32(.str.66, out_$i153, out_$i157, out_$i161, out_$i163);
    goto corral_source_split_4166;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    out_$i163 := $zext.i8.i32(out_$i162);
    goto corral_source_split_4165;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i8($M.0, out_$p38);
    goto corral_source_split_4164;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    out_$i161 := $zext.i8.i32(out_$i160);
    goto corral_source_split_4163;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i8($M.0, out_$p159);
    goto corral_source_split_4162;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref(out_$p37, $mul.ref(out_$i158, 1));
    goto corral_source_split_4161;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    out_$i157 := $zext.i8.i32(out_$i156);
    out_$i158 := $add.i64(2, 1);
    goto corral_source_split_4160;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i8($M.0, out_$p155);
    goto corral_source_split_4159;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref(out_$p37, $mul.ref(out_$i154, 1));
    goto corral_source_split_4158;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    out_$i153 := $zext.i8.i32(out_$i152);
    out_$i154 := $add.i64(2, 2);
    goto corral_source_split_4157;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i8($M.0, out_$p151);
    goto corral_source_split_4156;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref(out_$p35, $mul.ref(out_$i150, 1));
    goto corral_source_split_4155;

  $bb32:
    assume out_$i70 == 1;
    out_$i150 := $add.i64(1, 2);
    goto corral_source_split_4154;

  $bb27:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i65, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb26:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i65, 128);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} out_vslice_dummy_var_145 := printk.ref(.str.67);
    goto corral_source_split_4228;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb29:
    assume out_$i69 == 1;
    goto corral_source_split_4152;

  $bb28:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i65, 128);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb31;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i70 == 1);
    goto $bb31;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i73 == 1);
    goto $bb31;

  $bb42_dummy:
    call {:si_unique_call 1} out_$i33, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i53, out_$i54, out_$i56, out_$i57, out_$i59, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i108, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$p147, out_$i148, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i167, out_$p168, out_$i169, out_$i170, out_$p31, out_$i32, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145 := i2o_dump_hrt_loop_$bb8(in_$i21, in_$i24, out_$i33, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i53, out_$i54, out_$i56, out_$i57, out_$i59, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i108, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$p147, out_$i148, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i167, out_$p168, out_$i169, out_$i170, out_$p31, out_$i32, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145);
    return;

  exit:
    return;
}



procedure i2o_dump_hrt_loop_$bb8(in_$i21: i32, in_$i24: i32, in_$i33: i32, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i32, in_$i44: i8, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i53: i32, in_$i54: i1, in_$i56: i32, in_$i57: i1, in_$i59: i1, in_$i62: i64, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i64, in_$p75: ref, in_$i76: i8, in_$i77: i32, in_$i78: i64, in_$p79: ref, in_$i80: i8, in_$i81: i32, in_$i82: i32, in_$i83: i8, in_$i84: i32, in_$i85: i32, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$i90: i64, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$i94: i64, in_$p95: ref, in_$i96: i8, in_$i97: i32, in_$i98: i64, in_$p99: ref, in_$i100: i8, in_$i101: i32, in_$i102: i32, in_$i103: i8, in_$i104: i32, in_$i105: i32, in_$p106: ref, in_$p107: ref, in_$i108: i32, in_$i110: i64, in_$p111: ref, in_$i112: i8, in_$i113: i32, in_$i114: i64, in_$p115: ref, in_$i116: i8, in_$i117: i32, in_$i118: i64, in_$p119: ref, in_$i120: i8, in_$i121: i32, in_$i122: i32, in_$i123: i8, in_$i124: i32, in_$i125: i32, in_$p126: ref, in_$p127: ref, in_$i128: i32, in_$i130: i64, in_$p131: ref, in_$i132: i8, in_$i133: i32, in_$i134: i64, in_$p135: ref, in_$i136: i8, in_$i137: i32, in_$i138: i64, in_$p139: ref, in_$i140: i8, in_$i141: i32, in_$i142: i32, in_$i143: i8, in_$i144: i32, in_$i145: i32, in_$p146: ref, in_$p147: ref, in_$i148: i32, in_$i150: i64, in_$p151: ref, in_$i152: i8, in_$i153: i32, in_$i154: i64, in_$p155: ref, in_$i156: i8, in_$i157: i32, in_$i158: i64, in_$p159: ref, in_$i160: i8, in_$i161: i32, in_$i162: i8, in_$i163: i32, in_$i167: i64, in_$p168: ref, in_$i169: i32, in_$i170: i1, in_$p31: ref, in_$i32: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i32) returns (out_$i33: i32, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i32, out_$i44: i8, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i53: i32, out_$i54: i1, out_$i56: i32, out_$i57: i1, out_$i59: i1, out_$i62: i64, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i64, out_$p75: ref, out_$i76: i8, out_$i77: i32, out_$i78: i64, out_$p79: ref, out_$i80: i8, out_$i81: i32, out_$i82: i32, out_$i83: i8, out_$i84: i32, out_$i85: i32, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$i90: i64, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$i94: i64, out_$p95: ref, out_$i96: i8, out_$i97: i32, out_$i98: i64, out_$p99: ref, out_$i100: i8, out_$i101: i32, out_$i102: i32, out_$i103: i8, out_$i104: i32, out_$i105: i32, out_$p106: ref, out_$p107: ref, out_$i108: i32, out_$i110: i64, out_$p111: ref, out_$i112: i8, out_$i113: i32, out_$i114: i64, out_$p115: ref, out_$i116: i8, out_$i117: i32, out_$i118: i64, out_$p119: ref, out_$i120: i8, out_$i121: i32, out_$i122: i32, out_$i123: i8, out_$i124: i32, out_$i125: i32, out_$p126: ref, out_$p127: ref, out_$i128: i32, out_$i130: i64, out_$p131: ref, out_$i132: i8, out_$i133: i32, out_$i134: i64, out_$p135: ref, out_$i136: i8, out_$i137: i32, out_$i138: i64, out_$p139: ref, out_$i140: i8, out_$i141: i32, out_$i142: i32, out_$i143: i8, out_$i144: i32, out_$i145: i32, out_$p146: ref, out_$p147: ref, out_$i148: i32, out_$i150: i64, out_$p151: ref, out_$i152: i8, out_$i153: i32, out_$i154: i64, out_$p155: ref, out_$i156: i8, out_$i157: i32, out_$i158: i64, out_$p159: ref, out_$i160: i8, out_$i161: i32, out_$i162: i8, out_$i163: i32, out_$i167: i64, out_$p168: ref, out_$i169: i32, out_$i170: i1, out_$p31: ref, out_$i32: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i32);



implementation i2o_pci_interrupt_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$i22: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i9: i32, in_$i31: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$i22: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i9: i32, out_$i31: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i9, out_$i31 := in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i9, in_$i31;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4397;

  $bb16:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := 1;
    goto $bb16_dummy;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    out_$i31 := 1;
    assume true;
    goto $bb16;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_4428;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i32(out_$i28, 8);
    goto corral_source_split_4427;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} out_$i28 := readl(out_$p27);
    call {:si_unique_call 846} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_4426;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, in_$p3);
    goto corral_source_split_4425;

  $bb14:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} i2o_flush_reply(in_$p2, out_$i24);
    goto corral_source_split_4423;

  $bb13:
    assume out_$i26 == 1;
    goto corral_source_split_4422;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_4420;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} out_$i25 := i2o_driver_dispatch(in_$p2, out_$i24);
    call {:si_unique_call 843} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_4419;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4418;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := out_$i12;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i16;
    goto $bb12;

  $bb9:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i9;
    assume true;
    goto $bb9;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, 0);
    goto corral_source_split_4412;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} out_$i20 := ldv__builtin_expect(out_$i19, 0);
    call {:si_unique_call 841} {:cexpr "tmp"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_4411;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i18);
    goto corral_source_split_4410;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i1.i32(out_$i17);
    goto corral_source_split_4409;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, $sub.i32(0, 1));
    goto corral_source_split_4408;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} out_$i16 := readl(out_$p15);
    call {:si_unique_call 839} {:cexpr "m"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_4407;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_4406;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1976)), $mul.ref(80, 1));
    goto corral_source_split_4405;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_4404;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, $sub.i32(0, 1));
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} out_$i12 := readl(out_$p11);
    call {:si_unique_call 837} {:cexpr "m"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_4400;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1976)), $mul.ref(80, 1));
    goto corral_source_split_4399;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i9, out_$i31 := i2o_pci_interrupt_loop_$bb4(in_$p2, in_$p3, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i9, out_$i31);
    return;

  exit:
    return;
}



procedure i2o_pci_interrupt_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$i22: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i9: i32, in_$i31: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$i22: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i9: i32, out_$i31: i32);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.34, $M.35, $M.36;



implementation i2o_driver_dispatch_loop_$bb19(in_$i47: i16, in_$i100: i64, in_$p105: ref, in_$i106: i16, in_$i107: i16, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i120: i1, in_$p102: ref, in_$p103: ref) returns (out_$p105: ref, out_$i106: i16, out_$i107: i16, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i120: i1, out_$p102: ref, out_$p103: ref)
{

  entry:
    out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$p102, out_$p103 := in_$p105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p111, in_$p114, in_$p115, in_$p116, in_$p117, in_$p118, in_$i119, in_$i120, in_$p102, in_$p103;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4557;

  $bb25:
    assume out_$i120 == 1;
    assume {:verifier.code 0} true;
    out_$p102, out_$p103 := out_$p117, out_$p102;
    goto $bb25_dummy;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i64(out_$i119, in_$i100);
    goto corral_source_split_4597;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    out_$i119 := $p2i.ref.i64(out_$p118);
    goto corral_source_split_4596;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(out_$p102, $mul.ref(0, 1376)), $mul.ref(48, 1));
    goto corral_source_split_4595;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref(out_$p116, $mul.ref($sub.ref(0, 48), 1376));
    goto corral_source_split_4594;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    out_$p116 := $bitcast.ref.ref(out_$p115);
    goto corral_source_split_4593;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.0, out_$p114);
    goto corral_source_split_4592;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref($add.ref(out_$p102, $mul.ref(0, 1376)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4591;

  $bb22:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    out_$p111 := out_$p103;
    assume true;
    goto $bb22;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i108, out_$i109);
    goto corral_source_split_4564;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i16.i32(in_$i47);
    goto corral_source_split_4563;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i16.i32(out_$i107);
    goto corral_source_split_4562;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    out_$i107 := $and.i16(out_$i106, 4095);
    goto corral_source_split_4561;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i16($M.0, out_$p105);
    goto corral_source_split_4560;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($add.ref(out_$p103, $mul.ref(0, 1376)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4559;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$p102, out_$p103 := i2o_driver_dispatch_loop_$bb19(in_$i47, in_$i100, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$p102, out_$p103);
    return;

  exit:
    return;
}



procedure i2o_driver_dispatch_loop_$bb19(in_$i47: i16, in_$i100: i64, in_$p105: ref, in_$i106: i16, in_$i107: i16, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i120: i1, in_$p102: ref, in_$p103: ref) returns (out_$p105: ref, out_$i106: i16, out_$i107: i16, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i120: i1, out_$p102: ref, out_$p103: ref);



implementation i2o_msg_out_to_virt_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} i2o_msg_out_to_virt_loop_$bb6();
    return;

  exit:
    return;
}



procedure i2o_msg_out_to_virt_loop_$bb6();



implementation i2o_msg_post_wait_complete_loop_$bb4(in_$i3: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$p16: ref, in_$p17: ref) returns (out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$p16: ref, out_$p17: ref)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$p21, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p16, out_$p17 := in_$p18, in_$i19, in_$i20, in_$p21, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$i68, in_$i69, in_$p16, in_$p17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4845;

  $bb19:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$p16, out_$p17 := out_$p66, out_$p16;
    goto $bb19_dummy;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i64(out_$i68, $p2i.ref.i64(i2o_exec_wait_list));
    goto corral_source_split_4923;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    out_$i68 := $p2i.ref.i64(out_$p67);
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p16, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_4921;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p65, $mul.ref($sub.ref(0, 56), 144));
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_4919;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_4918;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 144)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_4917;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p17;
    assume true;
    goto $bb7;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, in_$i3);
    goto corral_source_split_4849;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_4848;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_4847;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$p21, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p16, out_$p17 := i2o_msg_post_wait_complete_loop_$bb4(in_$i3, out_$p18, out_$i19, out_$i20, out_$p21, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$p16, out_$p17);
    return;

  exit:
    return;
}



procedure i2o_msg_post_wait_complete_loop_$bb4(in_$i3: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$p16: ref, in_$p17: ref) returns (out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$p16: ref, out_$p17: ref);



implementation main_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i32, in_$i12: i1, in_$i13: i32, in_$i11: i32, in_$i0: i32, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_vslice_dummy_var_221: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i32, out_$i12: i1, out_$i13: i32, out_$i11: i32, out_$i0: i32, out_$i15: i32, out_$i16: i1, out_$i17: i1, out_vslice_dummy_var_221: i32)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i11, out_$i0, out_$i15, out_$i16, out_$i17, out_vslice_dummy_var_221 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i12, in_$i13, in_$i11, in_$i0, in_$i15, in_$i16, in_$i17, in_vslice_dummy_var_221;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_5460;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    out_$i0 := out_$i11;
    goto corral_source_split_5490_dummy;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5490;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i0;
    goto $bb20;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i0;
    goto $bb20;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i13;
    goto $bb20;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i10;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5488;

  $bb14:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := out_$i0;
    goto $bb19;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i9;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i9 := $add.i32(out_$i0, 1);
    call {:si_unique_call 1092} {:cexpr "ldv_s_i2o_pci_driver_pci_driver"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_5486;

  $bb16:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_5480;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} ldv_check_return_value_probe(out_$i7);
    goto corral_source_split_5479;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} ldv_check_return_value(out_$i7);
    goto corral_source_split_5478;

  SeqInstr_207:
    call {:si_unique_call 1088} {:cexpr "res_i2o_pci_probe_5"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_5477;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} out_$i7 := i2o_pci_probe($u0, $u1);
    goto SeqInstr_206;

  $bb13:
    assume out_$i6 == 1;
    goto corral_source_split_5476;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i0, 0);
    goto corral_source_split_5474;

  $bb11:
    assume out_$i5 == 1;
    goto corral_source_split_5473;

  $bb4:
    assume out_$i2 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb3:
    assume {:verifier.code 0} true;
    out_$i2 := $slt.i32(out_$i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb2:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1080} out_$i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1081} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i1);
    call {:si_unique_call 1082} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb28:
    assume {:verifier.code 0} true;
    assume out_$i17 == 1;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    assume out_$i16 == 1;
    goto $bb26;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb27;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_5462;

  corral_source_split_5460:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1077} out_$i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 1078} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i15);
    call {:si_unique_call 1079} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_5461;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i0, 0);
    goto corral_source_split_5499;

  $bb27:
    assume !(out_$i16 == 1);
    goto corral_source_split_5498;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5496;

  $bb22:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := out_$i0;
    goto $bb23;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    out_$i13 := 0;
    goto $bb23;

  SeqInstr_213:
    goto corral_source_split_5494;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} i2o_pci_remove($u0);
    goto SeqInstr_212;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} ldv_handler_precall();
    goto corral_source_split_5493;

  $bb21:
    assume out_$i12 == 1;
    goto corral_source_split_5492;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i0, 1);
    goto corral_source_split_5465;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_5464;

  $bb5:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_5471;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} out_vslice_dummy_var_221 := i2o_pci_interrupt($u2, $u3);
    goto corral_source_split_5470;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} ldv_handler_precall();
    goto corral_source_split_5469;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_5468;

  $bb8:
    assume out_$i4 == 1;
    goto corral_source_split_5467;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i4 == 1);
    goto $bb10;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i5 == 1);
    goto $bb10;

  corral_source_split_5490_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i11, out_$i0, out_$i15, out_$i16, out_$i17, out_vslice_dummy_var_221 := main_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i11, out_$i0, out_$i15, out_$i16, out_$i17, out_vslice_dummy_var_221);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i32, in_$i12: i1, in_$i13: i32, in_$i11: i32, in_$i0: i32, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_vslice_dummy_var_221: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i32, out_$i12: i1, out_$i13: i32, out_$i11: i32, out_$i0: i32, out_$i15: i32, out_$i16: i1, out_$i17: i1, out_vslice_dummy_var_221: i32);
  modifies $M.0, $M.20, $M.19, $CurrAddr, $M.12, $M.13, $M.14, $M.15, $M.16, $M.24, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.25, assertsPassed, $M.22, $M.34, $M.35, $M.36;


